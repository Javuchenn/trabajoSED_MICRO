
trabajo_sedd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000056e4  08013848  08013848  00014848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018f2c  08018f2c  0001a0c4  2**0
                  CONTENTS
  4 .ARM          00000008  08018f2c  08018f2c  00019f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018f34  08018f34  0001a0c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018f34  08018f34  00019f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018f38  08018f38  00019f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08018f3c  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b08  200000c4  08019000  0001a0c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bcc  08019000  0001abcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a0c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026776  00000000  00000000  0001a0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000647c  00000000  00000000  0004086a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e40  00000000  00000000  00046ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000173d  00000000  00000000  00048b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f8bb  00000000  00000000  0004a265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e96d  00000000  00000000  00069b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4e76  00000000  00000000  0009848d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d303  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000828c  00000000  00000000  0013d348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001455d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c4 	.word	0x200000c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013830 	.word	0x08013830

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c8 	.word	0x200000c8
 80001dc:	08013830 	.word	0x08013830

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	603a      	str	r2, [r7, #0]
 800058a:	80fb      	strh	r3, [r7, #6]
 800058c:	460b      	mov	r3, r1
 800058e:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8000594:	2200      	movs	r2, #0
 8000596:	6839      	ldr	r1, [r7, #0]
 8000598:	481c      	ldr	r0, [pc, #112]	@ (800060c <AUDIO_OUT_Init+0x8c>)
 800059a:	f000 f8f9 	bl	8000790 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 800059e:	4b1b      	ldr	r3, [pc, #108]	@ (800060c <AUDIO_OUT_Init+0x8c>)
 80005a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000610 <AUDIO_OUT_Init+0x90>)
 80005a2:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80005a4:	4819      	ldr	r0, [pc, #100]	@ (800060c <AUDIO_OUT_Init+0x8c>)
 80005a6:	f008 ff07 	bl	80093b8 <HAL_I2S_GetState>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d103      	bne.n	80005b8 <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80005b0:	2100      	movs	r1, #0
 80005b2:	4816      	ldr	r0, [pc, #88]	@ (800060c <AUDIO_OUT_Init+0x8c>)
 80005b4:	f000 f94a 	bl	800084c <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 80005b8:	6838      	ldr	r0, [r7, #0]
 80005ba:	f000 fa0f 	bl	80009dc <I2S3_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 80005c4:	2301      	movs	r3, #1
 80005c6:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d10e      	bne.n	80005ec <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <AUDIO_OUT_Init+0x94>)
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	2094      	movs	r0, #148	@ 0x94
 80005d4:	4798      	blx	r3
 80005d6:	4603      	mov	r3, r0
 80005d8:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80005dc:	2be0      	cmp	r3, #224	@ 0xe0
 80005de:	d103      	bne.n	80005e8 <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 80005e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <AUDIO_OUT_Init+0x98>)
 80005e2:	4a0c      	ldr	r2, [pc, #48]	@ (8000614 <AUDIO_OUT_Init+0x94>)
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	e001      	b.n	80005ec <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d107      	bne.n	8000602 <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <AUDIO_OUT_Init+0x98>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	681c      	ldr	r4, [r3, #0]
 80005f8:	797a      	ldrb	r2, [r7, #5]
 80005fa:	88f9      	ldrh	r1, [r7, #6]
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	2094      	movs	r0, #148	@ 0x94
 8000600:	47a0      	blx	r4
  }
  
  return ret;
 8000602:	7bfb      	ldrb	r3, [r7, #15]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	bd90      	pop	{r4, r7, pc}
 800060c:	200000e4 	.word	0x200000e4
 8000610:	40003c00 	.word	0x40003c00
 8000614:	20000004 	.word	0x20000004
 8000618:	200000e0 	.word	0x200000e0

0800061c <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8000626:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <AUDIO_OUT_Play+0x4c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	b292      	uxth	r2, r2
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	2094      	movs	r0, #148	@ 0x94
 8000634:	4798      	blx	r3
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 800063c:	2301      	movs	r3, #1
 800063e:	e00f      	b.n	8000660 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000646:	d203      	bcs.n	8000650 <AUDIO_OUT_Play+0x34>
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	085b      	lsrs	r3, r3, #1
 800064c:	b29b      	uxth	r3, r3
 800064e:	e001      	b.n	8000654 <AUDIO_OUT_Play+0x38>
 8000650:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000654:	461a      	mov	r2, r3
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	4804      	ldr	r0, [pc, #16]	@ (800066c <AUDIO_OUT_Play+0x50>)
 800065a:	f008 fb2f 	bl	8008cbc <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800065e:	2300      	movs	r3, #0
  }
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200000e0 	.word	0x200000e0
 800066c:	200000e4 	.word	0x200000e4

08000670 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8000674:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <AUDIO_OUT_Pause+0x24>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	691b      	ldr	r3, [r3, #16]
 800067a:	2094      	movs	r0, #148	@ 0x94
 800067c:	4798      	blx	r3
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 8000684:	2301      	movs	r3, #1
 8000686:	e003      	b.n	8000690 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 8000688:	4803      	ldr	r0, [pc, #12]	@ (8000698 <AUDIO_OUT_Pause+0x28>)
 800068a:	f008 fbbb 	bl	8008e04 <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800068e:	2300      	movs	r3, #0
  }
}
 8000690:	4618      	mov	r0, r3
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200000e0 	.word	0x200000e0
 8000698:	200000e4 	.word	0x200000e4

0800069c <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80006a0:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <AUDIO_OUT_Resume+0x24>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	2094      	movs	r0, #148	@ 0x94
 80006a8:	4798      	blx	r3
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 80006b0:	2301      	movs	r3, #1
 80006b2:	e003      	b.n	80006bc <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 80006b4:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <AUDIO_OUT_Resume+0x28>)
 80006b6:	f008 fc07 	bl	8008ec8 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80006ba:	2300      	movs	r3, #0
  }
}
 80006bc:	4618      	mov	r0, r3
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200000e0 	.word	0x200000e0
 80006c4:	200000e4 	.word	0x200000e4

080006c8 <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 80006d0:	480e      	ldr	r0, [pc, #56]	@ (800070c <AUDIO_OUT_Stop+0x44>)
 80006d2:	f008 fc8d 	bl	8008ff0 <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <AUDIO_OUT_Stop+0x48>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	6879      	ldr	r1, [r7, #4]
 80006de:	2094      	movs	r0, #148	@ 0x94
 80006e0:	4798      	blx	r3
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 80006e8:	2301      	movs	r3, #1
 80006ea:	e00b      	b.n	8000704 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d107      	bne.n	8000702 <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f003 f8e4 	bl	80038c0 <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2110      	movs	r1, #16
 80006fc:	4805      	ldr	r0, [pc, #20]	@ (8000714 <AUDIO_OUT_Stop+0x4c>)
 80006fe:	f004 fd27 	bl	8005150 <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000702:	2300      	movs	r3, #0
  }
}
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200000e4 	.word	0x200000e4
 8000710:	200000e0 	.word	0x200000e0
 8000714:	40020c00 	.word	0x40020c00

08000718 <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <AUDIO_OUT_SetVolume+0x2c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	6a1b      	ldr	r3, [r3, #32]
 8000728:	79fa      	ldrb	r2, [r7, #7]
 800072a:	4611      	mov	r1, r2
 800072c:	2094      	movs	r0, #148	@ 0x94
 800072e:	4798      	blx	r3
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e000      	b.n	800073c <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800073a:	2300      	movs	r3, #0
  }
}
 800073c:	4618      	mov	r0, r3
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000e0 	.word	0x200000e0

08000748 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a04      	ldr	r2, [pc, #16]	@ (8000768 <HAL_I2S_TxCpltCallback+0x20>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d101      	bne.n	800075e <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 800075a:	f002 ffed 	bl	8003738 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40003c00 	.word	0x40003c00

0800076c <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a04      	ldr	r2, [pc, #16]	@ (800078c <HAL_I2S_TxHalfCpltCallback+0x20>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d101      	bne.n	8000782 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 800077e:	f002 ffef 	bl	8003760 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40003c00 	.word	0x40003c00

08000790 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	@ 0x30
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 800079c:	2300      	movs	r3, #0
 800079e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80007a2:	23ff      	movs	r3, #255	@ 0xff
 80007a4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  
  for(index = 0; index < 8; index++)
 80007a8:	2300      	movs	r3, #0
 80007aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80007ae:	e010      	b.n	80007d2 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 80007b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007b4:	4a22      	ldr	r2, [pc, #136]	@ (8000840 <AUDIO_OUT_ClockConfig+0xb0>)
 80007b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d103      	bne.n	80007c8 <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 80007c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007c4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  for(index = 0; index < 8; index++)
 80007c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007cc:	3301      	adds	r3, #1
 80007ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80007d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007d6:	2b07      	cmp	r3, #7
 80007d8:	d9ea      	bls.n	80007b0 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4618      	mov	r0, r3
 80007e0:	f009 ff3c 	bl	800a65c <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 80007e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80007e8:	f003 0307 	and.w	r3, r3, #7
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d115      	bne.n	800081c <AUDIO_OUT_ClockConfig+0x8c>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007f0:	2301      	movs	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 80007f4:	2308      	movs	r3, #8
 80007f6:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80007f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80007fc:	4a11      	ldr	r2, [pc, #68]	@ (8000844 <AUDIO_OUT_ClockConfig+0xb4>)
 80007fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000802:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000804:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000808:	4a0f      	ldr	r2, [pc, #60]	@ (8000848 <AUDIO_OUT_ClockConfig+0xb8>)
 800080a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800080e:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4618      	mov	r0, r3
 8000816:	f009 fe31 	bl	800a47c <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800081a:	e00d      	b.n	8000838 <AUDIO_OUT_ClockConfig+0xa8>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800081c:	2301      	movs	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000820:	2308      	movs	r3, #8
 8000822:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000824:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000828:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 800082a:	2303      	movs	r3, #3
 800082c:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4618      	mov	r0, r3
 8000834:	f009 fe22 	bl	800a47c <HAL_RCCEx_PeriphCLKConfig>
}
 8000838:	bf00      	nop
 800083a:	3730      	adds	r7, #48	@ 0x30
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	080138c8 	.word	0x080138c8
 8000844:	080138e8 	.word	0x080138e8
 8000848:	08013908 	.word	0x08013908

0800084c <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	@ 0x30
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
 800085a:	4b56      	ldr	r3, [pc, #344]	@ (80009b4 <AUDIO_OUT_MspInit+0x168>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085e:	4a55      	ldr	r2, [pc, #340]	@ (80009b4 <AUDIO_OUT_MspInit+0x168>)
 8000860:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000864:	6413      	str	r3, [r2, #64]	@ 0x40
 8000866:	4b53      	ldr	r3, [pc, #332]	@ (80009b4 <AUDIO_OUT_MspInit+0x168>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800086e:	61bb      	str	r3, [r7, #24]
 8000870:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
 8000876:	4b4f      	ldr	r3, [pc, #316]	@ (80009b4 <AUDIO_OUT_MspInit+0x168>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a4e      	ldr	r2, [pc, #312]	@ (80009b4 <AUDIO_OUT_MspInit+0x168>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b4c      	ldr	r3, [pc, #304]	@ (80009b4 <AUDIO_OUT_MspInit+0x168>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	4b48      	ldr	r3, [pc, #288]	@ (80009b4 <AUDIO_OUT_MspInit+0x168>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a47      	ldr	r2, [pc, #284]	@ (80009b4 <AUDIO_OUT_MspInit+0x168>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b45      	ldr	r3, [pc, #276]	@ (80009b4 <AUDIO_OUT_MspInit+0x168>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80008aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 80008b8:	2302      	movs	r3, #2
 80008ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 80008bc:	2306      	movs	r3, #6
 80008be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	483c      	ldr	r0, [pc, #240]	@ (80009b8 <AUDIO_OUT_MspInit+0x16c>)
 80008c8:	f004 f9da 	bl	8004c80 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 80008cc:	2310      	movs	r3, #16
 80008ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4839      	ldr	r0, [pc, #228]	@ (80009bc <AUDIO_OUT_MspInit+0x170>)
 80008d8:	f004 f9d2 	bl	8004c80 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	4b34      	ldr	r3, [pc, #208]	@ (80009b4 <AUDIO_OUT_MspInit+0x168>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e4:	4a33      	ldr	r2, [pc, #204]	@ (80009b4 <AUDIO_OUT_MspInit+0x168>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ec:	4b31      	ldr	r3, [pc, #196]	@ (80009b4 <AUDIO_OUT_MspInit+0x168>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f0:	f003 0304 	and.w	r3, r3, #4
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 80008f8:	2380      	movs	r3, #128	@ 0x80
 80008fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	482d      	ldr	r0, [pc, #180]	@ (80009b8 <AUDIO_OUT_MspInit+0x16c>)
 8000904:	f004 f9bc 	bl	8004c80 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	4b29      	ldr	r3, [pc, #164]	@ (80009b4 <AUDIO_OUT_MspInit+0x168>)
 800090e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000910:	4a28      	ldr	r2, [pc, #160]	@ (80009b4 <AUDIO_OUT_MspInit+0x168>)
 8000912:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000916:	6313      	str	r3, [r2, #48]	@ 0x30
 8000918:	4b26      	ldr	r3, [pc, #152]	@ (80009b4 <AUDIO_OUT_MspInit+0x168>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a25      	ldr	r2, [pc, #148]	@ (80009c0 <AUDIO_OUT_MspInit+0x174>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d136      	bne.n	800099c <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 800092e:	4b25      	ldr	r3, [pc, #148]	@ (80009c4 <AUDIO_OUT_MspInit+0x178>)
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000934:	4b23      	ldr	r3, [pc, #140]	@ (80009c4 <AUDIO_OUT_MspInit+0x178>)
 8000936:	2240      	movs	r2, #64	@ 0x40
 8000938:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800093a:	4b22      	ldr	r3, [pc, #136]	@ (80009c4 <AUDIO_OUT_MspInit+0x178>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8000940:	4b20      	ldr	r3, [pc, #128]	@ (80009c4 <AUDIO_OUT_MspInit+0x178>)
 8000942:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000946:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8000948:	4b1e      	ldr	r3, [pc, #120]	@ (80009c4 <AUDIO_OUT_MspInit+0x178>)
 800094a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800094e:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8000950:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <AUDIO_OUT_MspInit+0x178>)
 8000952:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000956:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8000958:	4b1a      	ldr	r3, [pc, #104]	@ (80009c4 <AUDIO_OUT_MspInit+0x178>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 800095e:	4b19      	ldr	r3, [pc, #100]	@ (80009c4 <AUDIO_OUT_MspInit+0x178>)
 8000960:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000964:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8000966:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <AUDIO_OUT_MspInit+0x178>)
 8000968:	2204      	movs	r2, #4
 800096a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800096c:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <AUDIO_OUT_MspInit+0x178>)
 800096e:	2203      	movs	r2, #3
 8000970:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000972:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <AUDIO_OUT_MspInit+0x178>)
 8000974:	2200      	movs	r2, #0
 8000976:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <AUDIO_OUT_MspInit+0x178>)
 800097a:	2200      	movs	r2, #0
 800097c:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <AUDIO_OUT_MspInit+0x178>)
 8000980:	4a11      	ldr	r2, [pc, #68]	@ (80009c8 <AUDIO_OUT_MspInit+0x17c>)
 8000982:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a0f      	ldr	r2, [pc, #60]	@ (80009c4 <AUDIO_OUT_MspInit+0x178>)
 8000988:	639a      	str	r2, [r3, #56]	@ 0x38
 800098a:	4a0e      	ldr	r2, [pc, #56]	@ (80009c4 <AUDIO_OUT_MspInit+0x178>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 8000990:	480c      	ldr	r0, [pc, #48]	@ (80009c4 <AUDIO_OUT_MspInit+0x178>)
 8000992:	f003 fde5 	bl	8004560 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 8000996:	480b      	ldr	r0, [pc, #44]	@ (80009c4 <AUDIO_OUT_MspInit+0x178>)
 8000998:	f003 fd34 	bl	8004404 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	210e      	movs	r1, #14
 80009a0:	202f      	movs	r0, #47	@ 0x2f
 80009a2:	f003 fcf8 	bl	8004396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80009a6:	202f      	movs	r0, #47	@ 0x2f
 80009a8:	f003 fd11 	bl	80043ce <HAL_NVIC_EnableIRQ>
}
 80009ac:	bf00      	nop
 80009ae:	3730      	adds	r7, #48	@ 0x30
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020000 	.word	0x40020000
 80009c0:	40003c00 	.word	0x40003c00
 80009c4:	2000012c 	.word	0x2000012c
 80009c8:	400260b8 	.word	0x400260b8

080009cc <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 80009e4:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <I2S3_Init+0x68>)
 80009e6:	4a18      	ldr	r2, [pc, #96]	@ (8000a48 <I2S3_Init+0x6c>)
 80009e8:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80009ea:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <I2S3_Init+0x68>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	69da      	ldr	r2, [r3, #28]
 80009f0:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <I2S3_Init+0x68>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80009f8:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 80009fa:	4a12      	ldr	r2, [pc, #72]	@ (8000a44 <I2S3_Init+0x68>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000a00:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <I2S3_Init+0x68>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8000a06:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <I2S3_Init+0x68>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a44 <I2S3_Init+0x68>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <I2S3_Init+0x68>)
 8000a14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a18:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <I2S3_Init+0x68>)
 8000a1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a20:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8000a22:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <I2S3_Init+0x68>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8000a28:	4806      	ldr	r0, [pc, #24]	@ (8000a44 <I2S3_Init+0x68>)
 8000a2a:	f008 f807 	bl	8008a3c <HAL_I2S_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	e000      	b.n	8000a3a <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8000a38:	2300      	movs	r3, #0
  }
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200000e4 	.word	0x200000e4
 8000a48:	40003c00 	.word	0x40003c00

08000a4c <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <HAL_I2S_ErrorCallback+0x20>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d101      	bne.n	8000a62 <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 8000a5e:	f7ff ffb5 	bl	80009cc <AUDIO_OUT_Error_CallBack>
  }
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40003c00 	.word	0x40003c00

08000a70 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000a74:	4814      	ldr	r0, [pc, #80]	@ (8000ac8 <I2Cx_Init+0x58>)
 8000a76:	f007 fb9d 	bl	80081b4 <HAL_I2C_GetState>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d121      	bne.n	8000ac4 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <I2Cx_Init+0x58>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	@ (8000acc <I2Cx_Init+0x5c>)
 8000a84:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <I2Cx_Init+0x58>)
 8000a88:	2243      	movs	r2, #67	@ 0x43
 8000a8a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <I2Cx_Init+0x58>)
 8000a8e:	4a10      	ldr	r2, [pc, #64]	@ (8000ad0 <I2Cx_Init+0x60>)
 8000a90:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <I2Cx_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a98:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <I2Cx_Init+0x58>)
 8000a9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a9e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <I2Cx_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <I2Cx_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <I2Cx_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000ab2:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <I2Cx_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000ab8:	4803      	ldr	r0, [pc, #12]	@ (8000ac8 <I2Cx_Init+0x58>)
 8000aba:	f000 f86b 	bl	8000b94 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000abe:	4802      	ldr	r0, [pc, #8]	@ (8000ac8 <I2Cx_Init+0x58>)
 8000ac0:	f006 fcac 	bl	800741c <HAL_I2C_Init>
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000018c 	.word	0x2000018c
 8000acc:	40005400 	.word	0x40005400
 8000ad0:	000186a0 	.word	0x000186a0

08000ad4 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af04      	add	r7, sp, #16
 8000ada:	4603      	mov	r3, r0
 8000adc:	80fb      	strh	r3, [r7, #6]
 8000ade:	460b      	mov	r3, r1
 8000ae0:	717b      	strb	r3, [r7, #5]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000aea:	797b      	ldrb	r3, [r7, #5]
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <I2Cx_WriteData+0x48>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	88f9      	ldrh	r1, [r7, #6]
 8000af4:	9302      	str	r3, [sp, #8]
 8000af6:	2301      	movs	r3, #1
 8000af8:	9301      	str	r3, [sp, #4]
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2301      	movs	r3, #1
 8000b00:	4807      	ldr	r0, [pc, #28]	@ (8000b20 <I2Cx_WriteData+0x4c>)
 8000b02:	f006 fefd 	bl	8007900 <HAL_I2C_Mem_Write>
 8000b06:	4603      	mov	r3, r0
 8000b08:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000b10:	f000 f834 	bl	8000b7c <I2Cx_Error>
  }
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	2000018c 	.word	0x2000018c

08000b24 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af04      	add	r7, sp, #16
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	460a      	mov	r2, r1
 8000b2e:	80fb      	strh	r3, [r7, #6]
 8000b30:	4613      	mov	r3, r2
 8000b32:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000b3c:	797b      	ldrb	r3, [r7, #5]
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <I2Cx_ReadData+0x50>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	88f9      	ldrh	r1, [r7, #6]
 8000b46:	9302      	str	r3, [sp, #8]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	f107 030e 	add.w	r3, r7, #14
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	2301      	movs	r3, #1
 8000b54:	4808      	ldr	r0, [pc, #32]	@ (8000b78 <I2Cx_ReadData+0x54>)
 8000b56:	f006 ffcd 	bl	8007af4 <HAL_I2C_Mem_Read>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000b64:	f000 f80a 	bl	8000b7c <I2Cx_Error>
  }
  return value;
 8000b68:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000000 	.word	0x20000000
 8000b78:	2000018c 	.word	0x2000018c

08000b7c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000b80:	4803      	ldr	r0, [pc, #12]	@ (8000b90 <I2Cx_Error+0x14>)
 8000b82:	f006 fd8f 	bl	80076a4 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000b86:	f7ff ff73 	bl	8000a70 <I2Cx_Init>
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000018c 	.word	0x2000018c

08000b94 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	4b25      	ldr	r3, [pc, #148]	@ (8000c38 <I2Cx_MspInit+0xa4>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba4:	4a24      	ldr	r2, [pc, #144]	@ (8000c38 <I2Cx_MspInit+0xa4>)
 8000ba6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000baa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bac:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <I2Cx_MspInit+0xa4>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c38 <I2Cx_MspInit+0xa4>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c38 <I2Cx_MspInit+0xa4>)
 8000bc2:	f043 0302 	orr.w	r3, r3, #2
 8000bc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <I2Cx_MspInit+0xa4>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000bd4:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000bda:	2312      	movs	r3, #18
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000be2:	2302      	movs	r3, #2
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000be6:	2304      	movs	r3, #4
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4812      	ldr	r0, [pc, #72]	@ (8000c3c <I2Cx_MspInit+0xa8>)
 8000bf2:	f004 f845 	bl	8004c80 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000bf6:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <I2Cx_MspInit+0xa4>)
 8000bf8:	6a1b      	ldr	r3, [r3, #32]
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000c38 <I2Cx_MspInit+0xa4>)
 8000bfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c00:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000c02:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <I2Cx_MspInit+0xa4>)
 8000c04:	6a1b      	ldr	r3, [r3, #32]
 8000c06:	4a0c      	ldr	r2, [pc, #48]	@ (8000c38 <I2Cx_MspInit+0xa4>)
 8000c08:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000c0c:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	210f      	movs	r1, #15
 8000c12:	201f      	movs	r0, #31
 8000c14:	f003 fbbf 	bl	8004396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000c18:	201f      	movs	r0, #31
 8000c1a:	f003 fbd8 	bl	80043ce <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	210f      	movs	r1, #15
 8000c22:	2020      	movs	r0, #32
 8000c24:	f003 fbb7 	bl	8004396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000c28:	2020      	movs	r0, #32
 8000c2a:	f003 fbd0 	bl	80043ce <HAL_NVIC_EnableIRQ>
}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	@ 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020400 	.word	0x40020400

08000c40 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <AUDIO_IO_Init+0x68>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	4a16      	ldr	r2, [pc, #88]	@ (8000ca8 <AUDIO_IO_Init+0x68>)
 8000c50:	f043 0308 	orr.w	r3, r3, #8
 8000c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c56:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <AUDIO_IO_Init+0x68>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000c62:	2310      	movs	r3, #16
 8000c64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	4619      	mov	r1, r3
 8000c76:	480d      	ldr	r0, [pc, #52]	@ (8000cac <AUDIO_IO_Init+0x6c>)
 8000c78:	f004 f802 	bl	8004c80 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000c7c:	f7ff fef8 	bl	8000a70 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000c80:	2200      	movs	r2, #0
 8000c82:	2110      	movs	r1, #16
 8000c84:	4809      	ldr	r0, [pc, #36]	@ (8000cac <AUDIO_IO_Init+0x6c>)
 8000c86:	f004 fa63 	bl	8005150 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000c8a:	2005      	movs	r0, #5
 8000c8c:	f002 fe18 	bl	80038c0 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000c90:	2201      	movs	r2, #1
 8000c92:	2110      	movs	r1, #16
 8000c94:	4805      	ldr	r0, [pc, #20]	@ (8000cac <AUDIO_IO_Init+0x6c>)
 8000c96:	f004 fa5b 	bl	8005150 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000c9a:	2005      	movs	r0, #5
 8000c9c:	f002 fe10 	bl	80038c0 <HAL_Delay>
}
 8000ca0:	bf00      	nop
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020c00 	.word	0x40020c00

08000cb0 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	71bb      	strb	r3, [r7, #6]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	797a      	ldrb	r2, [r7, #5]
 8000cd6:	79b9      	ldrb	r1, [r7, #6]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fefb 	bl	8000ad4 <I2Cx_WriteData>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	460a      	mov	r2, r1
 8000cf0:	71fb      	strb	r3, [r7, #7]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	79ba      	ldrb	r2, [r7, #6]
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ff10 	bl	8000b24 <I2Cx_ReadData>
 8000d04:	4603      	mov	r3, r0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0d6      	sub	sp, #344	@ 0x158
 8000d14:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	4946      	ldr	r1, [pc, #280]	@ (8000e38 <AUDIO_StorageParse+0x128>)
 8000d20:	4618      	mov	r0, r3
 8000d22:	f011 fb6d 	bl	8012400 <f_opendir>
 8000d26:	4603      	mov	r3, r0
 8000d28:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
  FileList.ptr = 0;
 8000d2c:	4b43      	ldr	r3, [pc, #268]	@ (8000e3c <AUDIO_StorageParse+0x12c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8

  if(res == FR_OK)
 8000d34:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d16c      	bne.n	8000e16 <AUDIO_StorageParse+0x106>
  {
    while(Appli_state == APPLICATION_READY)
 8000d3c:	e067      	b.n	8000e0e <AUDIO_StorageParse+0xfe>
    {
      res = f_readdir(&dir, &fno);
 8000d3e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f011 fbf3 	bl	8012532 <f_readdir>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000d52:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d15d      	bne.n	8000e16 <AUDIO_StorageParse+0x106>
 8000d5a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d5e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000d62:	7d9b      	ldrb	r3, [r3, #22]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d056      	beq.n	8000e16 <AUDIO_StorageParse+0x106>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000d68:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d6c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000d70:	7d9b      	ldrb	r3, [r3, #22]
 8000d72:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d74:	d04a      	beq.n	8000e0c <AUDIO_StorageParse+0xfc>
      {
        continue;
      }

      fn = fno.fname;
 8000d76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d7a:	3316      	adds	r3, #22
 8000d7c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000d80:	4b2e      	ldr	r3, [pc, #184]	@ (8000e3c <AUDIO_StorageParse+0x12c>)
 8000d82:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d86:	2b17      	cmp	r3, #23
 8000d88:	d841      	bhi.n	8000e0e <AUDIO_StorageParse+0xfe>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000d8a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d8e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000d92:	7a1b      	ldrb	r3, [r3, #8]
 8000d94:	f003 0310 	and.w	r3, r3, #16
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d138      	bne.n	8000e0e <AUDIO_StorageParse+0xfe>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000d9c:	4928      	ldr	r1, [pc, #160]	@ (8000e40 <AUDIO_StorageParse+0x130>)
 8000d9e:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8000da2:	f012 f95c 	bl	801305e <strstr>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d107      	bne.n	8000dbc <AUDIO_StorageParse+0xac>
 8000dac:	4925      	ldr	r1, [pc, #148]	@ (8000e44 <AUDIO_StorageParse+0x134>)
 8000dae:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8000db2:	f012 f954 	bl	801305e <strstr>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d028      	beq.n	8000e0e <AUDIO_StorageParse+0xfe>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e3c <AUDIO_StorageParse+0x12c>)
 8000dbe:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a1b      	ldr	r2, [pc, #108]	@ (8000e3c <AUDIO_StorageParse+0x12c>)
 8000dd0:	4413      	add	r3, r2
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	2228      	movs	r2, #40	@ 0x28
 8000dd6:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f012 f92c 	bl	8013038 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000de0:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <AUDIO_StorageParse+0x12c>)
 8000de2:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000de6:	461a      	mov	r2, r3
 8000de8:	4914      	ldr	r1, [pc, #80]	@ (8000e3c <AUDIO_StorageParse+0x12c>)
 8000dea:	4613      	mov	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	4413      	add	r3, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	2201      	movs	r2, #1
 8000df8:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <AUDIO_StorageParse+0x12c>)
 8000dfc:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000e00:	3301      	adds	r3, #1
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <AUDIO_StorageParse+0x12c>)
 8000e06:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8
 8000e0a:	e000      	b.n	8000e0e <AUDIO_StorageParse+0xfe>
        continue;
 8000e0c:	bf00      	nop
    while(Appli_state == APPLICATION_READY)
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <AUDIO_StorageParse+0x138>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d093      	beq.n	8000d3e <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000e16:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <AUDIO_StorageParse+0x12c>)
 8000e18:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	@ 0x3d8
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <AUDIO_StorageParse+0x13c>)
 8000e1e:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	4618      	mov	r0, r3
 8000e24:	f011 fb5f 	bl	80124e6 <f_closedir>
  return res;
 8000e28:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20001e5c 	.word	0x20001e5c
 8000e3c:	2000181c 	.word	0x2000181c
 8000e40:	08013848 	.word	0x08013848
 8000e44:	0801384c 	.word	0x0801384c
 8000e48:	200026a0 	.word	0x200026a0
 8000e4c:	200001e2 	.word	0x200001e2

08000e50 <AUDIO_GetWavObjectNumber>:



uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000e54:	f7ff ff5c 	bl	8000d10 <AUDIO_StorageParse>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d102      	bne.n	8000e64 <AUDIO_GetWavObjectNumber+0x14>
 8000e5e:	4b02      	ldr	r3, [pc, #8]	@ (8000e68 <AUDIO_GetWavObjectNumber+0x18>)
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	e7ff      	b.n	8000e64 <AUDIO_GetWavObjectNumber+0x14>
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200001e2 	.word	0x200001e2

08000e6c <Mount_USB>:

void Mount_USB (void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000e70:	2201      	movs	r2, #1
 8000e72:	4905      	ldr	r1, [pc, #20]	@ (8000e88 <Mount_USB+0x1c>)
 8000e74:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <Mount_USB+0x20>)
 8000e76:	f010 fcd3 	bl	8011820 <f_mount>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b04      	ldr	r3, [pc, #16]	@ (8000e90 <Mount_USB+0x24>)
 8000e80:	701a      	strb	r2, [r3, #0]
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20001e5c 	.word	0x20001e5c
 8000e8c:	20001e60 	.word	0x20001e60
 8000e90:	200001e0 	.word	0x200001e0

08000e94 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	81fb      	strh	r3, [r7, #14]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	81bb      	strh	r3, [r7, #12]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000eac:	f7ff fec8 	bl	8000c40 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000eb0:	89fb      	ldrh	r3, [r7, #14]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fb01 	bl	80014c0 <CODEC_IO_Write>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000ec8:	89bb      	ldrh	r3, [r7, #12]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d81b      	bhi.n	8000f08 <cs43l22_Init+0x74>
 8000ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ed8 <cs43l22_Init+0x44>)
 8000ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed6:	bf00      	nop
 8000ed8:	08000ee9 	.word	0x08000ee9
 8000edc:	08000ef1 	.word	0x08000ef1
 8000ee0:	08000ef9 	.word	0x08000ef9
 8000ee4:	08000f01 	.word	0x08000f01
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000ee8:	4b5b      	ldr	r3, [pc, #364]	@ (8001058 <cs43l22_Init+0x1c4>)
 8000eea:	22fa      	movs	r2, #250	@ 0xfa
 8000eec:	701a      	strb	r2, [r3, #0]
    break;
 8000eee:	e00f      	b.n	8000f10 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000ef0:	4b59      	ldr	r3, [pc, #356]	@ (8001058 <cs43l22_Init+0x1c4>)
 8000ef2:	22af      	movs	r2, #175	@ 0xaf
 8000ef4:	701a      	strb	r2, [r3, #0]
    break;
 8000ef6:	e00b      	b.n	8000f10 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000ef8:	4b57      	ldr	r3, [pc, #348]	@ (8001058 <cs43l22_Init+0x1c4>)
 8000efa:	22aa      	movs	r2, #170	@ 0xaa
 8000efc:	701a      	strb	r2, [r3, #0]
    break;
 8000efe:	e007      	b.n	8000f10 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000f00:	4b55      	ldr	r3, [pc, #340]	@ (8001058 <cs43l22_Init+0x1c4>)
 8000f02:	2205      	movs	r2, #5
 8000f04:	701a      	strb	r2, [r3, #0]
    break;    
 8000f06:	e003      	b.n	8000f10 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000f08:	4b53      	ldr	r3, [pc, #332]	@ (8001058 <cs43l22_Init+0x1c4>)
 8000f0a:	2205      	movs	r2, #5
 8000f0c:	701a      	strb	r2, [r3, #0]
    break;    
 8000f0e:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000f10:	89fb      	ldrh	r3, [r7, #14]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	4a50      	ldr	r2, [pc, #320]	@ (8001058 <cs43l22_Init+0x1c4>)
 8000f16:	7812      	ldrb	r2, [r2, #0]
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 facf 	bl	80014c0 <CODEC_IO_Write>
 8000f22:	4603      	mov	r3, r0
 8000f24:	461a      	mov	r2, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	4413      	add	r3, r2
 8000f2a:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000f2c:	89fb      	ldrh	r3, [r7, #14]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2281      	movs	r2, #129	@ 0x81
 8000f32:	2105      	movs	r1, #5
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 fac3 	bl	80014c0 <CODEC_IO_Write>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	4413      	add	r3, r2
 8000f42:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000f44:	89fb      	ldrh	r3, [r7, #14]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2204      	movs	r2, #4
 8000f4a:	2106      	movs	r1, #6
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fab7 	bl	80014c0 <CODEC_IO_Write>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	4413      	add	r3, r2
 8000f5a:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000f5c:	7afa      	ldrb	r2, [r7, #11]
 8000f5e:	89fb      	ldrh	r3, [r7, #14]
 8000f60:	4611      	mov	r1, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f964 	bl	8001230 <cs43l22_SetVolume>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000f70:	89bb      	ldrh	r3, [r7, #12]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d023      	beq.n	8000fbe <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000f76:	89fb      	ldrh	r3, [r7, #14]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2206      	movs	r2, #6
 8000f7c:	210f      	movs	r1, #15
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fa9e 	bl	80014c0 <CODEC_IO_Write>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000f8e:	89fb      	ldrh	r3, [r7, #14]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2200      	movs	r2, #0
 8000f94:	2124      	movs	r1, #36	@ 0x24
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 fa92 	bl	80014c0 <CODEC_IO_Write>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000fa6:	89fb      	ldrh	r3, [r7, #14]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2200      	movs	r2, #0
 8000fac:	2125      	movs	r1, #37	@ 0x25
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fa86 	bl	80014c0 <CODEC_IO_Write>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	4413      	add	r3, r2
 8000fbc:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000fbe:	89fb      	ldrh	r3, [r7, #14]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	210a      	movs	r1, #10
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 fa7a 	bl	80014c0 <CODEC_IO_Write>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	461a      	mov	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000fd6:	89fb      	ldrh	r3, [r7, #14]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2204      	movs	r2, #4
 8000fdc:	210e      	movs	r1, #14
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fa6e 	bl	80014c0 <CODEC_IO_Write>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	4413      	add	r3, r2
 8000fec:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000fee:	89fb      	ldrh	r3, [r7, #14]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2127      	movs	r1, #39	@ 0x27
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 fa62 	bl	80014c0 <CODEC_IO_Write>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	4413      	add	r3, r2
 8001004:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8001006:	89fb      	ldrh	r3, [r7, #14]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	220f      	movs	r2, #15
 800100c:	211f      	movs	r1, #31
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fa56 	bl	80014c0 <CODEC_IO_Write>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	4413      	add	r3, r2
 800101c:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 800101e:	89fb      	ldrh	r3, [r7, #14]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	220a      	movs	r2, #10
 8001024:	211a      	movs	r1, #26
 8001026:	4618      	mov	r0, r3
 8001028:	f000 fa4a 	bl	80014c0 <CODEC_IO_Write>
 800102c:	4603      	mov	r3, r0
 800102e:	461a      	mov	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	4413      	add	r3, r2
 8001034:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8001036:	89fb      	ldrh	r3, [r7, #14]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	220a      	movs	r2, #10
 800103c:	211b      	movs	r1, #27
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fa3e 	bl	80014c0 <CODEC_IO_Write>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	4413      	add	r3, r2
 800104c:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 800104e:	697b      	ldr	r3, [r7, #20]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200001e4 	.word	0x200001e4

0800105c <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8001060:	f7ff fe26 	bl	8000cb0 <AUDIO_IO_DeInit>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8001072:	f7ff fde5 	bl	8000c40 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2101      	movs	r1, #1
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fe32 	bl	8000ce6 <AUDIO_IO_Read>
 8001082:	4603      	mov	r3, r0
 8001084:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	f023 0307 	bic.w	r3, r3, #7
 800108c:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 800108e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	80fb      	strh	r3, [r7, #6]
 80010a4:	4613      	mov	r3, r2
 80010a6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 80010ac:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <cs43l22_Play+0x70>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d123      	bne.n	80010fc <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2206      	movs	r2, #6
 80010ba:	210e      	movs	r1, #14
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 f9ff 	bl	80014c0 <CODEC_IO_Write>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4413      	add	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f919 	bl	8001308 <cs43l22_SetMute>
 80010d6:	4602      	mov	r2, r0
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	229e      	movs	r2, #158	@ 0x9e
 80010e4:	2102      	movs	r1, #2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f9ea 	bl	80014c0 <CODEC_IO_Write>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 80010f6:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <cs43l22_Play+0x70>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 80010fc:	68fb      	ldr	r3, [r7, #12]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000034 	.word	0x20000034

0800110c <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	2101      	movs	r1, #1
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f8f2 	bl	8001308 <cs43l22_SetMute>
 8001124:	4602      	mov	r2, r0
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4413      	add	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2201      	movs	r2, #1
 8001132:	2102      	movs	r1, #2
 8001134:	4618      	mov	r0, r3
 8001136:	f000 f9c3 	bl	80014c0 <CODEC_IO_Write>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4413      	add	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001144:	68fb      	ldr	r3, [r7, #12]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f8ce 	bl	8001308 <cs43l22_SetMute>
 800116c:	4602      	mov	r2, r0
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4413      	add	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	e002      	b.n	8001180 <cs43l22_Resume+0x30>
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	3301      	adds	r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	2bfe      	cmp	r3, #254	@ 0xfe
 8001184:	d9f9      	bls.n	800117a <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4a0e      	ldr	r2, [pc, #56]	@ (80011c4 <cs43l22_Resume+0x74>)
 800118c:	7812      	ldrb	r2, [r2, #0]
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	2104      	movs	r1, #4
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f994 	bl	80014c0 <CODEC_IO_Write>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	229e      	movs	r2, #158	@ 0x9e
 80011a8:	2102      	movs	r1, #2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f988 	bl	80014c0 <CODEC_IO_Write>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4413      	add	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80011ba:	68fb      	ldr	r3, [r7, #12]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200001e4 	.word	0x200001e4

080011c8 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	2101      	movs	r1, #1
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 f893 	bl	8001308 <cs43l22_SetMute>
 80011e2:	4602      	mov	r2, r0
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2204      	movs	r2, #4
 80011f0:	210e      	movs	r1, #14
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f964 	bl	80014c0 <CODEC_IO_Write>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	229f      	movs	r2, #159	@ 0x9f
 8001208:	2102      	movs	r1, #2
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f958 	bl	80014c0 <CODEC_IO_Write>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 800121a:	4b04      	ldr	r3, [pc, #16]	@ (800122c <cs43l22_Stop+0x64>)
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001220:	68fb      	ldr	r3, [r7, #12]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000034 	.word	0x20000034

08001230 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	460a      	mov	r2, r1
 800123a:	80fb      	strh	r3, [r7, #6]
 800123c:	4613      	mov	r3, r2
 800123e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001244:	797b      	ldrb	r3, [r7, #5]
 8001246:	2b64      	cmp	r3, #100	@ 0x64
 8001248:	d80b      	bhi.n	8001262 <cs43l22_SetVolume+0x32>
 800124a:	797a      	ldrb	r2, [r7, #5]
 800124c:	4613      	mov	r3, r2
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	1a9b      	subs	r3, r3, r2
 8001252:	4a25      	ldr	r2, [pc, #148]	@ (80012e8 <cs43l22_SetVolume+0xb8>)
 8001254:	fb82 1203 	smull	r1, r2, r2, r3
 8001258:	1152      	asrs	r2, r2, #5
 800125a:	17db      	asrs	r3, r3, #31
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	e000      	b.n	8001264 <cs43l22_SetVolume+0x34>
 8001262:	23ff      	movs	r3, #255	@ 0xff
 8001264:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 8001266:	7afb      	ldrb	r3, [r7, #11]
 8001268:	2be6      	cmp	r3, #230	@ 0xe6
 800126a:	d91c      	bls.n	80012a6 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	b2d8      	uxtb	r0, r3
 8001270:	7afb      	ldrb	r3, [r7, #11]
 8001272:	3319      	adds	r3, #25
 8001274:	b2db      	uxtb	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	2120      	movs	r1, #32
 800127a:	f000 f921 	bl	80014c0 <CODEC_IO_Write>
 800127e:	4603      	mov	r3, r0
 8001280:	461a      	mov	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4413      	add	r3, r2
 8001286:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	b2d8      	uxtb	r0, r3
 800128c:	7afb      	ldrb	r3, [r7, #11]
 800128e:	3319      	adds	r3, #25
 8001290:	b2db      	uxtb	r3, r3
 8001292:	461a      	mov	r2, r3
 8001294:	2121      	movs	r1, #33	@ 0x21
 8001296:	f000 f913 	bl	80014c0 <CODEC_IO_Write>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4413      	add	r3, r2
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	e01b      	b.n	80012de <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	b2d8      	uxtb	r0, r3
 80012aa:	7afb      	ldrb	r3, [r7, #11]
 80012ac:	3319      	adds	r3, #25
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	2120      	movs	r1, #32
 80012b4:	f000 f904 	bl	80014c0 <CODEC_IO_Write>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	b2d8      	uxtb	r0, r3
 80012c6:	7afb      	ldrb	r3, [r7, #11]
 80012c8:	3319      	adds	r3, #25
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	2121      	movs	r1, #33	@ 0x21
 80012d0:	f000 f8f6 	bl	80014c0 <CODEC_IO_Write>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	51eb851f 	.word	0x51eb851f

080012ec <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	80fb      	strh	r3, [r7, #6]
  return 0;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d124      	bne.n	8001368 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	22ff      	movs	r2, #255	@ 0xff
 8001324:	2104      	movs	r1, #4
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f8ca 	bl	80014c0 <CODEC_IO_Write>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2201      	movs	r2, #1
 800133c:	2122      	movs	r1, #34	@ 0x22
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f8be 	bl	80014c0 <CODEC_IO_Write>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2201      	movs	r2, #1
 8001354:	2123      	movs	r1, #35	@ 0x23
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f8b2 	bl	80014c0 <CODEC_IO_Write>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	e025      	b.n	80013b4 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2200      	movs	r2, #0
 800136e:	2122      	movs	r1, #34	@ 0x22
 8001370:	4618      	mov	r0, r3
 8001372:	f000 f8a5 	bl	80014c0 <CODEC_IO_Write>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4413      	add	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2200      	movs	r2, #0
 8001386:	2123      	movs	r1, #35	@ 0x23
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f899 	bl	80014c0 <CODEC_IO_Write>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	4a08      	ldr	r2, [pc, #32]	@ (80013c0 <cs43l22_SetMute+0xb8>)
 800139e:	7812      	ldrb	r2, [r2, #0]
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	2104      	movs	r1, #4
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 f88b 	bl	80014c0 <CODEC_IO_Write>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4413      	add	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80013b4:	68fb      	ldr	r3, [r7, #12]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200001e4 	.word	0x200001e4

080013c4 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	460a      	mov	r2, r1
 80013ce:	80fb      	strh	r3, [r7, #6]
 80013d0:	4613      	mov	r3, r2
 80013d2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80013d8:	797b      	ldrb	r3, [r7, #5]
 80013da:	3b01      	subs	r3, #1
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d84b      	bhi.n	8001478 <cs43l22_SetOutputMode+0xb4>
 80013e0:	a201      	add	r2, pc, #4	@ (adr r2, 80013e8 <cs43l22_SetOutputMode+0x24>)
 80013e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e6:	bf00      	nop
 80013e8:	080013f9 	.word	0x080013f9
 80013ec:	08001419 	.word	0x08001419
 80013f0:	08001439 	.word	0x08001439
 80013f4:	08001459 	.word	0x08001459
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	22fa      	movs	r2, #250	@ 0xfa
 80013fe:	2104      	movs	r1, #4
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f85d 	bl	80014c0 <CODEC_IO_Write>
 8001406:	4603      	mov	r3, r0
 8001408:	461a      	mov	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4413      	add	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001410:	4b24      	ldr	r3, [pc, #144]	@ (80014a4 <cs43l22_SetOutputMode+0xe0>)
 8001412:	22fa      	movs	r2, #250	@ 0xfa
 8001414:	701a      	strb	r2, [r3, #0]
      break;
 8001416:	e03f      	b.n	8001498 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	22af      	movs	r2, #175	@ 0xaf
 800141e:	2104      	movs	r1, #4
 8001420:	4618      	mov	r0, r3
 8001422:	f000 f84d 	bl	80014c0 <CODEC_IO_Write>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4413      	add	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001430:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <cs43l22_SetOutputMode+0xe0>)
 8001432:	22af      	movs	r2, #175	@ 0xaf
 8001434:	701a      	strb	r2, [r3, #0]
      break;
 8001436:	e02f      	b.n	8001498 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	22aa      	movs	r2, #170	@ 0xaa
 800143e:	2104      	movs	r1, #4
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f83d 	bl	80014c0 <CODEC_IO_Write>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4413      	add	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001450:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <cs43l22_SetOutputMode+0xe0>)
 8001452:	22aa      	movs	r2, #170	@ 0xaa
 8001454:	701a      	strb	r2, [r3, #0]
      break;
 8001456:	e01f      	b.n	8001498 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2205      	movs	r2, #5
 800145e:	2104      	movs	r1, #4
 8001460:	4618      	mov	r0, r3
 8001462:	f000 f82d 	bl	80014c0 <CODEC_IO_Write>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4413      	add	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001470:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <cs43l22_SetOutputMode+0xe0>)
 8001472:	2205      	movs	r2, #5
 8001474:	701a      	strb	r2, [r3, #0]
      break;    
 8001476:	e00f      	b.n	8001498 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2205      	movs	r2, #5
 800147e:	2104      	movs	r1, #4
 8001480:	4618      	mov	r0, r3
 8001482:	f000 f81d 	bl	80014c0 <CODEC_IO_Write>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4413      	add	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001490:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <cs43l22_SetOutputMode+0xe0>)
 8001492:	2205      	movs	r2, #5
 8001494:	701a      	strb	r2, [r3, #0]
      break;
 8001496:	bf00      	nop
  }  
  return counter;
 8001498:	68fb      	ldr	r3, [r7, #12]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200001e4 	.word	0x200001e4

080014a8 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
  return 0;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
 80014ca:	460b      	mov	r3, r1
 80014cc:	71bb      	strb	r3, [r7, #6]
 80014ce:	4613      	mov	r3, r2
 80014d0:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80014d6:	797a      	ldrb	r2, [r7, #5]
 80014d8:	79b9      	ldrb	r1, [r7, #6]
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fbee 	bl	8000cbe <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	b2db      	uxtb	r3, r3
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <map_to_scale>:
char buf_volumen[4];  // Cadena de caracteres que almacena el valor del volumen para representarlo en el OLED
////////////////////////////////////////////////

/////////////////ADC/////////////////////////////////////////////////////
uint32_t map_to_scale(uint32_t input)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
    // Mapea de 0–255 a 1–100
    return (uint32_t)(((input * 99) / 255) + 1);
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	015a      	lsls	r2, r3, #5
 8001502:	4413      	add	r3, r2
 8001504:	4a05      	ldr	r2, [pc, #20]	@ (800151c <map_to_scale+0x2c>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	09db      	lsrs	r3, r3, #7
 800150c:	3301      	adds	r3, #1
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	80808081 	.word	0x80808081

08001520 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0d      	ldr	r2, [pc, #52]	@ (8001564 <HAL_ADC_ConvCpltCallback+0x44>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d114      	bne.n	800155c <HAL_ADC_ConvCpltCallback+0x3c>
	{
		ADC_val = HAL_ADC_GetValue(hadc);      // Obtener el valor convertido
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f002 fbfa 	bl	8003d2c <HAL_ADC_GetValue>
 8001538:	4603      	mov	r3, r0
 800153a:	4a0b      	ldr	r2, [pc, #44]	@ (8001568 <HAL_ADC_ConvCpltCallback+0x48>)
 800153c:	6013      	str	r3, [r2, #0]
		volumen = map_to_scale(ADC_val);       // Convertir el valor al rango 1-100
 800153e:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <HAL_ADC_ConvCpltCallback+0x48>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ffd4 	bl	80014f0 <map_to_scale>
 8001548:	4603      	mov	r3, r0
 800154a:	4a08      	ldr	r2, [pc, #32]	@ (800156c <HAL_ADC_ConvCpltCallback+0x4c>)
 800154c:	6013      	str	r3, [r2, #0]
		sprintf (buf_volumen, "%d", volumen);  // Almacenar el valor del volumen en cadena de caracteres
 800154e:	4b07      	ldr	r3, [pc, #28]	@ (800156c <HAL_ADC_ConvCpltCallback+0x4c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	4906      	ldr	r1, [pc, #24]	@ (8001570 <HAL_ADC_ConvCpltCallback+0x50>)
 8001556:	4807      	ldr	r0, [pc, #28]	@ (8001574 <HAL_ADC_ConvCpltCallback+0x54>)
 8001558:	f011 fd46 	bl	8012fe8 <siprintf>
	}
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40012000 	.word	0x40012000
 8001568:	200003c8 	.word	0x200003c8
 800156c:	200003cc 	.word	0x200003cc
 8001570:	08013850 	.word	0x08013850
 8001574:	200003d0 	.word	0x200003d0

08001578 <change_animation>:
int IsFinished = 0;               // Para terminar el bucle while principal cuando AudioState = AUDIO_STATE_STOP
int current_anim_state = 3;       // Animacion que se esta ejecutando en el momento (1, 2, 3 o 4)
volatile uint8_t frame_anim = 0;  // Variable para selecionar los frames en las animaciones

void change_animation() // Para seleccionar la siguiente animacion al cambiar de cancion
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
	// Se hace con esta estructura if-elsif porque con los rebotes "current_anim_state ++" daba errores
	if(current_anim_state == 1)
 800157c:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <change_animation+0x4c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d103      	bne.n	800158c <change_animation+0x14>
		current_anim_state = 2;
 8001584:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <change_animation+0x4c>)
 8001586:	2202      	movs	r2, #2
 8001588:	601a      	str	r2, [r3, #0]
		current_anim_state = 3;
	else if(current_anim_state == 3)
		current_anim_state = 4;
	else if(current_anim_state == 4)
		current_anim_state = 1;
}
 800158a:	e016      	b.n	80015ba <change_animation+0x42>
	else if(current_anim_state == 2)
 800158c:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <change_animation+0x4c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d103      	bne.n	800159c <change_animation+0x24>
		current_anim_state = 3;
 8001594:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <change_animation+0x4c>)
 8001596:	2203      	movs	r2, #3
 8001598:	601a      	str	r2, [r3, #0]
}
 800159a:	e00e      	b.n	80015ba <change_animation+0x42>
	else if(current_anim_state == 3)
 800159c:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <change_animation+0x4c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d103      	bne.n	80015ac <change_animation+0x34>
		current_anim_state = 4;
 80015a4:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <change_animation+0x4c>)
 80015a6:	2204      	movs	r2, #4
 80015a8:	601a      	str	r2, [r3, #0]
}
 80015aa:	e006      	b.n	80015ba <change_animation+0x42>
	else if(current_anim_state == 4)
 80015ac:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <change_animation+0x4c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	d102      	bne.n	80015ba <change_animation+0x42>
		current_anim_state = 1;
 80015b4:	4b03      	ldr	r3, [pc, #12]	@ (80015c4 <change_animation+0x4c>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	20000040 	.word	0x20000040

080015c8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	4603      	mov	r3, r0
 80015d0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) // PA0 controla la pausa/reanudacion del mp3
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d11b      	bne.n	8001610 <HAL_GPIO_EXTI_Callback+0x48>
	{
		if (AudioState == AUDIO_STATE_PLAY)
 80015d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <HAL_GPIO_EXTI_Callback+0x7c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d110      	bne.n	8001602 <HAL_GPIO_EXTI_Callback+0x3a>
		{
			AudioState = AUDIO_STATE_PAUSE;
 80015e0:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <HAL_GPIO_EXTI_Callback+0x7c>)
 80015e2:	220a      	movs	r2, #10
 80015e4:	701a      	strb	r2, [r3, #0]
			SSD1306_Clear();
 80015e6:	f001 fb50 	bl	8002c8a <SSD1306_Clear>
			SSD1306_DrawBitmap(0, 0, PAUSA, 128, 64, 1); // Se dibuja la imagen de pausa cuando AudioState pasa a valer "AUDIO_STATE_PAUSE" debido a PA0
 80015ea:	2301      	movs	r3, #1
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	2340      	movs	r3, #64	@ 0x40
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2380      	movs	r3, #128	@ 0x80
 80015f4:	4a14      	ldr	r2, [pc, #80]	@ (8001648 <HAL_GPIO_EXTI_Callback+0x80>)
 80015f6:	2100      	movs	r1, #0
 80015f8:	2000      	movs	r0, #0
 80015fa:	f001 fade 	bl	8002bba <SSD1306_DrawBitmap>
			SSD1306_UpdateScreen();
 80015fe:	f001 f97d 	bl	80028fc <SSD1306_UpdateScreen>
		}

		if (AudioState == AUDIO_STATE_WAIT)
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d102      	bne.n	8001610 <HAL_GPIO_EXTI_Callback+0x48>
		{
			AudioState = AUDIO_STATE_RESUME;
 800160a:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <HAL_GPIO_EXTI_Callback+0x7c>)
 800160c:	220b      	movs	r2, #11
 800160e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == GPIO_PIN_1) // PA1 se utiliza para reproducir el siguiente archivo
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d107      	bne.n	8001626 <HAL_GPIO_EXTI_Callback+0x5e>
	{
		AudioState = AUDIO_STATE_NEXT;
 8001616:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001618:	2205      	movs	r2, #5
 800161a:	701a      	strb	r2, [r3, #0]
		change_animation();     // Al cambiar la cancion, se cambia la animacion mostrada
 800161c:	f7ff ffac 	bl	8001578 <change_animation>
		frame_anim = 1;         // Se reinicia el frame de la animacion al primer frame
 8001620:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <HAL_GPIO_EXTI_Callback+0x84>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_2) // PA2 se utiliza para reproducir el archivo anterior
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	2b04      	cmp	r3, #4
 800162a:	d107      	bne.n	800163c <HAL_GPIO_EXTI_Callback+0x74>
	{
		AudioState = AUDIO_STATE_PREVIOUS;
 800162c:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <HAL_GPIO_EXTI_Callback+0x7c>)
 800162e:	2206      	movs	r2, #6
 8001630:	701a      	strb	r2, [r3, #0]
		change_animation();     // Al cambiar la cancion, se cambia la animacion mostrada
 8001632:	f7ff ffa1 	bl	8001578 <change_animation>
		frame_anim = 1;         // Se reinicia el frame de la animacion al primer frame
 8001636:	4b05      	ldr	r3, [pc, #20]	@ (800164c <HAL_GPIO_EXTI_Callback+0x84>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
	}
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200017f0 	.word	0x200017f0
 8001648:	08017e84 	.word	0x08017e84
 800164c:	200003d8 	.word	0x200003d8

08001650 <HAL_TIM_PeriodElapsedCallback>:

// Se utiliza un temporizador basico para la actualizacion de los frames en las animaciones para el OLED y ademas para reiniciar la conversion ADC
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  // Se genera una interrupcion en intervalos inferiores a medio segundo.
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_IT(&hadc1); // Reiniciar conversion del ADC para que no se pare de controlar el volumen
 8001658:	483b      	ldr	r0, [pc, #236]	@ (8001748 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800165a:	f002 f999 	bl	8003990 <HAL_ADC_Start_IT>

    if (htim->Instance == TIM10 && (AudioState == AUDIO_STATE_PLAY)) // Solo se ejecutan las animaciones cuando el estado del audio es AUDIO_STATE_PLAY
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a3a      	ldr	r2, [pc, #232]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d16a      	bne.n	800173e <HAL_TIM_PeriodElapsedCallback+0xee>
 8001668:	4b39      	ldr	r3, [pc, #228]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b03      	cmp	r3, #3
 800166e:	d166      	bne.n	800173e <HAL_TIM_PeriodElapsedCallback+0xee>
    {
    	if(current_anim_state == 1)
 8001670:	4b38      	ldr	r3, [pc, #224]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d115      	bne.n	80016a4 <HAL_TIM_PeriodElapsedCallback+0x54>
    	{
			frame_anim++;
 8001678:	4b37      	ldr	r3, [pc, #220]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	3301      	adds	r3, #1
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4b35      	ldr	r3, [pc, #212]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001684:	701a      	strb	r2, [r3, #0]
			if (frame_anim == 11) frame_anim = 1;
 8001686:	4b34      	ldr	r3, [pc, #208]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b0b      	cmp	r3, #11
 800168e:	d102      	bne.n	8001696 <HAL_TIM_PeriodElapsedCallback+0x46>
 8001690:	4b31      	ldr	r3, [pc, #196]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
			animacion1(frame_anim);
 8001696:	4b30      	ldr	r3, [pc, #192]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	f000 f85d 	bl	800175c <animacion1>
			frame_anim++;
			if (frame_anim == 7) frame_anim = 1;
			animacion4(frame_anim);
    	}
    }
}
 80016a2:	e04c      	b.n	800173e <HAL_TIM_PeriodElapsedCallback+0xee>
    	else if(current_anim_state == 2)
 80016a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d115      	bne.n	80016d8 <HAL_TIM_PeriodElapsedCallback+0x88>
			frame_anim++;
 80016ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	3301      	adds	r3, #1
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b28      	ldr	r3, [pc, #160]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80016b8:	701a      	strb	r2, [r3, #0]
			if (frame_anim == 7) frame_anim = 1;
 80016ba:	4b27      	ldr	r3, [pc, #156]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b07      	cmp	r3, #7
 80016c2:	d102      	bne.n	80016ca <HAL_TIM_PeriodElapsedCallback+0x7a>
 80016c4:	4b24      	ldr	r3, [pc, #144]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
			animacion2(frame_anim);
 80016ca:	4b23      	ldr	r3, [pc, #140]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fa9f 	bl	8001c14 <animacion2>
}
 80016d6:	e032      	b.n	800173e <HAL_TIM_PeriodElapsedCallback+0xee>
    	else if(current_anim_state == 3)
 80016d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d115      	bne.n	800170c <HAL_TIM_PeriodElapsedCallback+0xbc>
			frame_anim++;
 80016e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	3301      	adds	r3, #1
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80016ec:	701a      	strb	r2, [r3, #0]
			if (frame_anim == 9) frame_anim = 1;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b09      	cmp	r3, #9
 80016f6:	d102      	bne.n	80016fe <HAL_TIM_PeriodElapsedCallback+0xae>
 80016f8:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
			animacion3(frame_anim);
 80016fe:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	4618      	mov	r0, r3
 8001706:	f000 fb7d 	bl	8001e04 <animacion3>
}
 800170a:	e018      	b.n	800173e <HAL_TIM_PeriodElapsedCallback+0xee>
    	else if(current_anim_state == 4)
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b04      	cmp	r3, #4
 8001712:	d114      	bne.n	800173e <HAL_TIM_PeriodElapsedCallback+0xee>
			frame_anim++;
 8001714:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	3301      	adds	r3, #1
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001720:	701a      	strb	r2, [r3, #0]
			if (frame_anim == 7) frame_anim = 1;
 8001722:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b07      	cmp	r3, #7
 800172a:	d102      	bne.n	8001732 <HAL_TIM_PeriodElapsedCallback+0xe2>
 800172c:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
			animacion4(frame_anim);
 8001732:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fc9f 	bl	800207c <animacion4>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200001e8 	.word	0x200001e8
 800174c:	40014400 	.word	0x40014400
 8001750:	200017f0 	.word	0x200017f0
 8001754:	20000040 	.word	0x20000040
 8001758:	200003d8 	.word	0x200003d8

0800175c <animacion1>:
// En todas las animaciones se obtiene el nombre de la cancion reproducida y se procede a escribirlo en la pantalla en todos los frames
// Tambien se representa el volumen actual de la musica en cada frame de todas las animaciones
char* get_name();
char* quitar_extension(const char*);
void animacion1(uint8_t frame)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
	int x = 35; // Posicion del nombre de la cancion en el OLED
 8001766:	2323      	movs	r3, #35	@ 0x23
 8001768:	60fb      	str	r3, [r7, #12]
	char* song_name = quitar_extension(get_name()); // Usamos las dos funciones que hemos incluido a waveplayer.c para obtener el nombre del archivo en ejecucion
 800176a:	f001 fe97 	bl	800349c <get_name>
 800176e:	4603      	mov	r3, r0
 8001770:	4618      	mov	r0, r3
 8001772:	f001 fe9d 	bl	80034b0 <quitar_extension>
 8001776:	60b8      	str	r0, [r7, #8]

	  //// ANIMATION STARTS //////
	if (frame == 1)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d133      	bne.n	80017e6 <animacion1+0x8a>
	{
	    SSD1306_Clear();
 800177e:	f001 fa84 	bl	8002c8a <SSD1306_Clear>
	    SSD1306_GotoXY (0,10); // goto 0, 10
 8001782:	210a      	movs	r1, #10
 8001784:	2000      	movs	r0, #0
 8001786:	f001 f95f 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("\\O/", &Font_11x18, 1);
 800178a:	2201      	movs	r2, #1
 800178c:	49bb      	ldr	r1, [pc, #748]	@ (8001a7c <animacion1+0x320>)
 800178e:	48bc      	ldr	r0, [pc, #752]	@ (8001a80 <animacion1+0x324>)
 8001790:	f001 f9ee 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 8001794:	211e      	movs	r1, #30
 8001796:	2000      	movs	r0, #0
 8001798:	f001 f956 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (" |", &Font_11x18, 1);
 800179c:	2201      	movs	r2, #1
 800179e:	49b7      	ldr	r1, [pc, #732]	@ (8001a7c <animacion1+0x320>)
 80017a0:	48b8      	ldr	r0, [pc, #736]	@ (8001a84 <animacion1+0x328>)
 80017a2:	f001 f9e5 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 80017a6:	212d      	movs	r1, #45	@ 0x2d
 80017a8:	2000      	movs	r0, #0
 80017aa:	f001 f94d 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("/ \\", &Font_11x18, 1);
 80017ae:	2201      	movs	r2, #1
 80017b0:	49b2      	ldr	r1, [pc, #712]	@ (8001a7c <animacion1+0x320>)
 80017b2:	48b5      	ldr	r0, [pc, #724]	@ (8001a88 <animacion1+0x32c>)
 80017b4:	f001 f9dc 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	211e      	movs	r1, #30
 80017be:	4618      	mov	r0, r3
 80017c0:	f001 f942 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 80017c4:	2200      	movs	r2, #0
 80017c6:	49ad      	ldr	r1, [pc, #692]	@ (8001a7c <animacion1+0x320>)
 80017c8:	68b8      	ldr	r0, [r7, #8]
 80017ca:	f001 f9d1 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 80017ce:	2105      	movs	r1, #5
 80017d0:	205a      	movs	r0, #90	@ 0x5a
 80017d2:	f001 f939 	bl	8002a48 <SSD1306_GotoXY>
 80017d6:	2201      	movs	r2, #1
 80017d8:	49a8      	ldr	r1, [pc, #672]	@ (8001a7c <animacion1+0x320>)
 80017da:	48ac      	ldr	r0, [pc, #688]	@ (8001a8c <animacion1+0x330>)
 80017dc:	f001 f9c8 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 80017e0:	f001 f88c 	bl	80028fc <SSD1306_UpdateScreen>
	    SSD1306_GotoXY (x, 30);
	    SSD1306_Puts (song_name, &Font_11x18, 0);
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
	    SSD1306_UpdateScreen(); // update screen
	}
}
 80017e4:	e202      	b.n	8001bec <animacion1+0x490>
	else if (frame == 2)
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d133      	bne.n	8001854 <animacion1+0xf8>
	    SSD1306_Clear();
 80017ec:	f001 fa4d 	bl	8002c8a <SSD1306_Clear>
	    SSD1306_GotoXY (0,10);
 80017f0:	210a      	movs	r1, #10
 80017f2:	2000      	movs	r0, #0
 80017f4:	f001 f928 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("\\O", &Font_11x18, 1);
 80017f8:	2201      	movs	r2, #1
 80017fa:	49a0      	ldr	r1, [pc, #640]	@ (8001a7c <animacion1+0x320>)
 80017fc:	48a4      	ldr	r0, [pc, #656]	@ (8001a90 <animacion1+0x334>)
 80017fe:	f001 f9b7 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 8001802:	211e      	movs	r1, #30
 8001804:	2000      	movs	r0, #0
 8001806:	f001 f91f 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (" |\\", &Font_11x18, 1);
 800180a:	2201      	movs	r2, #1
 800180c:	499b      	ldr	r1, [pc, #620]	@ (8001a7c <animacion1+0x320>)
 800180e:	48a1      	ldr	r0, [pc, #644]	@ (8001a94 <animacion1+0x338>)
 8001810:	f001 f9ae 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 8001814:	212d      	movs	r1, #45	@ 0x2d
 8001816:	2000      	movs	r0, #0
 8001818:	f001 f916 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("\\ \\", &Font_11x18, 1);
 800181c:	2201      	movs	r2, #1
 800181e:	4997      	ldr	r1, [pc, #604]	@ (8001a7c <animacion1+0x320>)
 8001820:	489d      	ldr	r0, [pc, #628]	@ (8001a98 <animacion1+0x33c>)
 8001822:	f001 f9a5 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	b29b      	uxth	r3, r3
 800182a:	211e      	movs	r1, #30
 800182c:	4618      	mov	r0, r3
 800182e:	f001 f90b 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	4991      	ldr	r1, [pc, #580]	@ (8001a7c <animacion1+0x320>)
 8001836:	68b8      	ldr	r0, [r7, #8]
 8001838:	f001 f99a 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 800183c:	2105      	movs	r1, #5
 800183e:	205a      	movs	r0, #90	@ 0x5a
 8001840:	f001 f902 	bl	8002a48 <SSD1306_GotoXY>
 8001844:	2201      	movs	r2, #1
 8001846:	498d      	ldr	r1, [pc, #564]	@ (8001a7c <animacion1+0x320>)
 8001848:	4890      	ldr	r0, [pc, #576]	@ (8001a8c <animacion1+0x330>)
 800184a:	f001 f991 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 800184e:	f001 f855 	bl	80028fc <SSD1306_UpdateScreen>
}
 8001852:	e1cb      	b.n	8001bec <animacion1+0x490>
	else if (frame == 3)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d133      	bne.n	80018c2 <animacion1+0x166>
	    SSD1306_Clear();
 800185a:	f001 fa16 	bl	8002c8a <SSD1306_Clear>
	    SSD1306_GotoXY (0,10);
 800185e:	210a      	movs	r1, #10
 8001860:	2000      	movs	r0, #0
 8001862:	f001 f8f1 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (" O/", &Font_11x18, 1);
 8001866:	2201      	movs	r2, #1
 8001868:	4984      	ldr	r1, [pc, #528]	@ (8001a7c <animacion1+0x320>)
 800186a:	488c      	ldr	r0, [pc, #560]	@ (8001a9c <animacion1+0x340>)
 800186c:	f001 f980 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 8001870:	211e      	movs	r1, #30
 8001872:	2000      	movs	r0, #0
 8001874:	f001 f8e8 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("\\|", &Font_11x18, 1);
 8001878:	2201      	movs	r2, #1
 800187a:	4980      	ldr	r1, [pc, #512]	@ (8001a7c <animacion1+0x320>)
 800187c:	4888      	ldr	r0, [pc, #544]	@ (8001aa0 <animacion1+0x344>)
 800187e:	f001 f977 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 8001882:	212d      	movs	r1, #45	@ 0x2d
 8001884:	2000      	movs	r0, #0
 8001886:	f001 f8df 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("/ \\", &Font_11x18, 1);
 800188a:	2201      	movs	r2, #1
 800188c:	497b      	ldr	r1, [pc, #492]	@ (8001a7c <animacion1+0x320>)
 800188e:	487e      	ldr	r0, [pc, #504]	@ (8001a88 <animacion1+0x32c>)
 8001890:	f001 f96e 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	b29b      	uxth	r3, r3
 8001898:	211e      	movs	r1, #30
 800189a:	4618      	mov	r0, r3
 800189c:	f001 f8d4 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	4976      	ldr	r1, [pc, #472]	@ (8001a7c <animacion1+0x320>)
 80018a4:	68b8      	ldr	r0, [r7, #8]
 80018a6:	f001 f963 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 80018aa:	2105      	movs	r1, #5
 80018ac:	205a      	movs	r0, #90	@ 0x5a
 80018ae:	f001 f8cb 	bl	8002a48 <SSD1306_GotoXY>
 80018b2:	2201      	movs	r2, #1
 80018b4:	4971      	ldr	r1, [pc, #452]	@ (8001a7c <animacion1+0x320>)
 80018b6:	4875      	ldr	r0, [pc, #468]	@ (8001a8c <animacion1+0x330>)
 80018b8:	f001 f95a 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 80018bc:	f001 f81e 	bl	80028fc <SSD1306_UpdateScreen>
}
 80018c0:	e194      	b.n	8001bec <animacion1+0x490>
	else if (frame == 4)
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d133      	bne.n	8001930 <animacion1+0x1d4>
	    SSD1306_Clear();
 80018c8:	f001 f9df 	bl	8002c8a <SSD1306_Clear>
	    SSD1306_GotoXY (0,10);
 80018cc:	210a      	movs	r1, #10
 80018ce:	2000      	movs	r0, #0
 80018d0:	f001 f8ba 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("\\O", &Font_11x18, 1);
 80018d4:	2201      	movs	r2, #1
 80018d6:	4969      	ldr	r1, [pc, #420]	@ (8001a7c <animacion1+0x320>)
 80018d8:	486d      	ldr	r0, [pc, #436]	@ (8001a90 <animacion1+0x334>)
 80018da:	f001 f949 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 80018de:	211e      	movs	r1, #30
 80018e0:	2000      	movs	r0, #0
 80018e2:	f001 f8b1 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (" |\\", &Font_11x18, 1);
 80018e6:	2201      	movs	r2, #1
 80018e8:	4964      	ldr	r1, [pc, #400]	@ (8001a7c <animacion1+0x320>)
 80018ea:	486a      	ldr	r0, [pc, #424]	@ (8001a94 <animacion1+0x338>)
 80018ec:	f001 f940 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 80018f0:	212d      	movs	r1, #45	@ 0x2d
 80018f2:	2000      	movs	r0, #0
 80018f4:	f001 f8a8 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("/ \\", &Font_11x18, 1);
 80018f8:	2201      	movs	r2, #1
 80018fa:	4960      	ldr	r1, [pc, #384]	@ (8001a7c <animacion1+0x320>)
 80018fc:	4862      	ldr	r0, [pc, #392]	@ (8001a88 <animacion1+0x32c>)
 80018fe:	f001 f937 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	b29b      	uxth	r3, r3
 8001906:	211e      	movs	r1, #30
 8001908:	4618      	mov	r0, r3
 800190a:	f001 f89d 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	495a      	ldr	r1, [pc, #360]	@ (8001a7c <animacion1+0x320>)
 8001912:	68b8      	ldr	r0, [r7, #8]
 8001914:	f001 f92c 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8001918:	2105      	movs	r1, #5
 800191a:	205a      	movs	r0, #90	@ 0x5a
 800191c:	f001 f894 	bl	8002a48 <SSD1306_GotoXY>
 8001920:	2201      	movs	r2, #1
 8001922:	4956      	ldr	r1, [pc, #344]	@ (8001a7c <animacion1+0x320>)
 8001924:	4859      	ldr	r0, [pc, #356]	@ (8001a8c <animacion1+0x330>)
 8001926:	f001 f923 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 800192a:	f000 ffe7 	bl	80028fc <SSD1306_UpdateScreen>
}
 800192e:	e15d      	b.n	8001bec <animacion1+0x490>
	else if (frame == 5)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	2b05      	cmp	r3, #5
 8001934:	d133      	bne.n	800199e <animacion1+0x242>
	    SSD1306_Clear();
 8001936:	f001 f9a8 	bl	8002c8a <SSD1306_Clear>
	    SSD1306_GotoXY (0,10);
 800193a:	210a      	movs	r1, #10
 800193c:	2000      	movs	r0, #0
 800193e:	f001 f883 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (" O/", &Font_11x18, 1);
 8001942:	2201      	movs	r2, #1
 8001944:	494d      	ldr	r1, [pc, #308]	@ (8001a7c <animacion1+0x320>)
 8001946:	4855      	ldr	r0, [pc, #340]	@ (8001a9c <animacion1+0x340>)
 8001948:	f001 f912 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 800194c:	211e      	movs	r1, #30
 800194e:	2000      	movs	r0, #0
 8001950:	f001 f87a 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("\\|", &Font_11x18, 1);
 8001954:	2201      	movs	r2, #1
 8001956:	4949      	ldr	r1, [pc, #292]	@ (8001a7c <animacion1+0x320>)
 8001958:	4851      	ldr	r0, [pc, #324]	@ (8001aa0 <animacion1+0x344>)
 800195a:	f001 f909 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 800195e:	212d      	movs	r1, #45	@ 0x2d
 8001960:	2000      	movs	r0, #0
 8001962:	f001 f871 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("\\ \\", &Font_11x18, 1);
 8001966:	2201      	movs	r2, #1
 8001968:	4944      	ldr	r1, [pc, #272]	@ (8001a7c <animacion1+0x320>)
 800196a:	484b      	ldr	r0, [pc, #300]	@ (8001a98 <animacion1+0x33c>)
 800196c:	f001 f900 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	b29b      	uxth	r3, r3
 8001974:	211e      	movs	r1, #30
 8001976:	4618      	mov	r0, r3
 8001978:	f001 f866 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 800197c:	2200      	movs	r2, #0
 800197e:	493f      	ldr	r1, [pc, #252]	@ (8001a7c <animacion1+0x320>)
 8001980:	68b8      	ldr	r0, [r7, #8]
 8001982:	f001 f8f5 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8001986:	2105      	movs	r1, #5
 8001988:	205a      	movs	r0, #90	@ 0x5a
 800198a:	f001 f85d 	bl	8002a48 <SSD1306_GotoXY>
 800198e:	2201      	movs	r2, #1
 8001990:	493a      	ldr	r1, [pc, #232]	@ (8001a7c <animacion1+0x320>)
 8001992:	483e      	ldr	r0, [pc, #248]	@ (8001a8c <animacion1+0x330>)
 8001994:	f001 f8ec 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 8001998:	f000 ffb0 	bl	80028fc <SSD1306_UpdateScreen>
}
 800199c:	e126      	b.n	8001bec <animacion1+0x490>
	else if (frame == 6)
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2b06      	cmp	r3, #6
 80019a2:	d133      	bne.n	8001a0c <animacion1+0x2b0>
	    SSD1306_Clear();
 80019a4:	f001 f971 	bl	8002c8a <SSD1306_Clear>
	    SSD1306_GotoXY (0,10);
 80019a8:	210a      	movs	r1, #10
 80019aa:	2000      	movs	r0, #0
 80019ac:	f001 f84c 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("\\O", &Font_11x18, 1);
 80019b0:	2201      	movs	r2, #1
 80019b2:	4932      	ldr	r1, [pc, #200]	@ (8001a7c <animacion1+0x320>)
 80019b4:	4836      	ldr	r0, [pc, #216]	@ (8001a90 <animacion1+0x334>)
 80019b6:	f001 f8db 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 80019ba:	211e      	movs	r1, #30
 80019bc:	2000      	movs	r0, #0
 80019be:	f001 f843 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (" |\\", &Font_11x18, 1);
 80019c2:	2201      	movs	r2, #1
 80019c4:	492d      	ldr	r1, [pc, #180]	@ (8001a7c <animacion1+0x320>)
 80019c6:	4833      	ldr	r0, [pc, #204]	@ (8001a94 <animacion1+0x338>)
 80019c8:	f001 f8d2 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 80019cc:	212d      	movs	r1, #45	@ 0x2d
 80019ce:	2000      	movs	r0, #0
 80019d0:	f001 f83a 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("/ \\", &Font_11x18, 1);
 80019d4:	2201      	movs	r2, #1
 80019d6:	4929      	ldr	r1, [pc, #164]	@ (8001a7c <animacion1+0x320>)
 80019d8:	482b      	ldr	r0, [pc, #172]	@ (8001a88 <animacion1+0x32c>)
 80019da:	f001 f8c9 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	211e      	movs	r1, #30
 80019e4:	4618      	mov	r0, r3
 80019e6:	f001 f82f 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	4923      	ldr	r1, [pc, #140]	@ (8001a7c <animacion1+0x320>)
 80019ee:	68b8      	ldr	r0, [r7, #8]
 80019f0:	f001 f8be 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 80019f4:	2105      	movs	r1, #5
 80019f6:	205a      	movs	r0, #90	@ 0x5a
 80019f8:	f001 f826 	bl	8002a48 <SSD1306_GotoXY>
 80019fc:	2201      	movs	r2, #1
 80019fe:	491f      	ldr	r1, [pc, #124]	@ (8001a7c <animacion1+0x320>)
 8001a00:	4822      	ldr	r0, [pc, #136]	@ (8001a8c <animacion1+0x330>)
 8001a02:	f001 f8b5 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 8001a06:	f000 ff79 	bl	80028fc <SSD1306_UpdateScreen>
}
 8001a0a:	e0ef      	b.n	8001bec <animacion1+0x490>
	else if (frame == 7)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	2b07      	cmp	r3, #7
 8001a10:	d148      	bne.n	8001aa4 <animacion1+0x348>
	    SSD1306_Clear();
 8001a12:	f001 f93a 	bl	8002c8a <SSD1306_Clear>
	    SSD1306_GotoXY (0,10);
 8001a16:	210a      	movs	r1, #10
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f001 f815 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (" O/", &Font_11x18, 1);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4916      	ldr	r1, [pc, #88]	@ (8001a7c <animacion1+0x320>)
 8001a22:	481e      	ldr	r0, [pc, #120]	@ (8001a9c <animacion1+0x340>)
 8001a24:	f001 f8a4 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 8001a28:	211e      	movs	r1, #30
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f001 f80c 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("\\|", &Font_11x18, 1);
 8001a30:	2201      	movs	r2, #1
 8001a32:	4912      	ldr	r1, [pc, #72]	@ (8001a7c <animacion1+0x320>)
 8001a34:	481a      	ldr	r0, [pc, #104]	@ (8001aa0 <animacion1+0x344>)
 8001a36:	f001 f89b 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 8001a3a:	212d      	movs	r1, #45	@ 0x2d
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f001 f803 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("/ \\", &Font_11x18, 1);
 8001a42:	2201      	movs	r2, #1
 8001a44:	490d      	ldr	r1, [pc, #52]	@ (8001a7c <animacion1+0x320>)
 8001a46:	4810      	ldr	r0, [pc, #64]	@ (8001a88 <animacion1+0x32c>)
 8001a48:	f001 f892 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	211e      	movs	r1, #30
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 fff8 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	4908      	ldr	r1, [pc, #32]	@ (8001a7c <animacion1+0x320>)
 8001a5c:	68b8      	ldr	r0, [r7, #8]
 8001a5e:	f001 f887 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8001a62:	2105      	movs	r1, #5
 8001a64:	205a      	movs	r0, #90	@ 0x5a
 8001a66:	f000 ffef 	bl	8002a48 <SSD1306_GotoXY>
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4903      	ldr	r1, [pc, #12]	@ (8001a7c <animacion1+0x320>)
 8001a6e:	4807      	ldr	r0, [pc, #28]	@ (8001a8c <animacion1+0x330>)
 8001a70:	f001 f87e 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 8001a74:	f000 ff42 	bl	80028fc <SSD1306_UpdateScreen>
}
 8001a78:	e0b8      	b.n	8001bec <animacion1+0x490>
 8001a7a:	bf00      	nop
 8001a7c:	20000038 	.word	0x20000038
 8001a80:	08013854 	.word	0x08013854
 8001a84:	08013858 	.word	0x08013858
 8001a88:	0801385c 	.word	0x0801385c
 8001a8c:	200003d0 	.word	0x200003d0
 8001a90:	08013860 	.word	0x08013860
 8001a94:	08013864 	.word	0x08013864
 8001a98:	08013868 	.word	0x08013868
 8001a9c:	0801386c 	.word	0x0801386c
 8001aa0:	08013870 	.word	0x08013870
	else if (frame == 8)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d133      	bne.n	8001b12 <animacion1+0x3b6>
	    SSD1306_Clear();
 8001aaa:	f001 f8ee 	bl	8002c8a <SSD1306_Clear>
	    SSD1306_GotoXY (0,10);
 8001aae:	210a      	movs	r1, #10
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f000 ffc9 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("\\O_", &Font_11x18, 1);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	494e      	ldr	r1, [pc, #312]	@ (8001bf4 <animacion1+0x498>)
 8001aba:	484f      	ldr	r0, [pc, #316]	@ (8001bf8 <animacion1+0x49c>)
 8001abc:	f001 f858 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 8001ac0:	211e      	movs	r1, #30
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f000 ffc0 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (" |", &Font_11x18, 1);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	494a      	ldr	r1, [pc, #296]	@ (8001bf4 <animacion1+0x498>)
 8001acc:	484b      	ldr	r0, [pc, #300]	@ (8001bfc <animacion1+0x4a0>)
 8001ace:	f001 f84f 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 8001ad2:	212d      	movs	r1, #45	@ 0x2d
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f000 ffb7 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("/ \\", &Font_11x18, 1);
 8001ada:	2201      	movs	r2, #1
 8001adc:	4945      	ldr	r1, [pc, #276]	@ (8001bf4 <animacion1+0x498>)
 8001ade:	4848      	ldr	r0, [pc, #288]	@ (8001c00 <animacion1+0x4a4>)
 8001ae0:	f001 f846 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	211e      	movs	r1, #30
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 ffac 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	4940      	ldr	r1, [pc, #256]	@ (8001bf4 <animacion1+0x498>)
 8001af4:	68b8      	ldr	r0, [r7, #8]
 8001af6:	f001 f83b 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8001afa:	2105      	movs	r1, #5
 8001afc:	205a      	movs	r0, #90	@ 0x5a
 8001afe:	f000 ffa3 	bl	8002a48 <SSD1306_GotoXY>
 8001b02:	2201      	movs	r2, #1
 8001b04:	493b      	ldr	r1, [pc, #236]	@ (8001bf4 <animacion1+0x498>)
 8001b06:	483f      	ldr	r0, [pc, #252]	@ (8001c04 <animacion1+0x4a8>)
 8001b08:	f001 f832 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 8001b0c:	f000 fef6 	bl	80028fc <SSD1306_UpdateScreen>
}
 8001b10:	e06c      	b.n	8001bec <animacion1+0x490>
	else if (frame == 9)
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	2b09      	cmp	r3, #9
 8001b16:	d133      	bne.n	8001b80 <animacion1+0x424>
	    SSD1306_Clear();
 8001b18:	f001 f8b7 	bl	8002c8a <SSD1306_Clear>
	    SSD1306_GotoXY (0,10);
 8001b1c:	210a      	movs	r1, #10
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f000 ff92 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("\\O/", &Font_11x18, 1);
 8001b24:	2201      	movs	r2, #1
 8001b26:	4933      	ldr	r1, [pc, #204]	@ (8001bf4 <animacion1+0x498>)
 8001b28:	4837      	ldr	r0, [pc, #220]	@ (8001c08 <animacion1+0x4ac>)
 8001b2a:	f001 f821 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 8001b2e:	211e      	movs	r1, #30
 8001b30:	2000      	movs	r0, #0
 8001b32:	f000 ff89 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (" |", &Font_11x18, 1);
 8001b36:	2201      	movs	r2, #1
 8001b38:	492e      	ldr	r1, [pc, #184]	@ (8001bf4 <animacion1+0x498>)
 8001b3a:	4830      	ldr	r0, [pc, #192]	@ (8001bfc <animacion1+0x4a0>)
 8001b3c:	f001 f818 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 8001b40:	212d      	movs	r1, #45	@ 0x2d
 8001b42:	2000      	movs	r0, #0
 8001b44:	f000 ff80 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("\\ \\", &Font_11x18, 1);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	492a      	ldr	r1, [pc, #168]	@ (8001bf4 <animacion1+0x498>)
 8001b4c:	482f      	ldr	r0, [pc, #188]	@ (8001c0c <animacion1+0x4b0>)
 8001b4e:	f001 f80f 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	211e      	movs	r1, #30
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 ff75 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	4924      	ldr	r1, [pc, #144]	@ (8001bf4 <animacion1+0x498>)
 8001b62:	68b8      	ldr	r0, [r7, #8]
 8001b64:	f001 f804 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8001b68:	2105      	movs	r1, #5
 8001b6a:	205a      	movs	r0, #90	@ 0x5a
 8001b6c:	f000 ff6c 	bl	8002a48 <SSD1306_GotoXY>
 8001b70:	2201      	movs	r2, #1
 8001b72:	4920      	ldr	r1, [pc, #128]	@ (8001bf4 <animacion1+0x498>)
 8001b74:	4823      	ldr	r0, [pc, #140]	@ (8001c04 <animacion1+0x4a8>)
 8001b76:	f000 fffb 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 8001b7a:	f000 febf 	bl	80028fc <SSD1306_UpdateScreen>
}
 8001b7e:	e035      	b.n	8001bec <animacion1+0x490>
	else if(frame == 10)
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	2b0a      	cmp	r3, #10
 8001b84:	d132      	bne.n	8001bec <animacion1+0x490>
	    SSD1306_Clear();
 8001b86:	f001 f880 	bl	8002c8a <SSD1306_Clear>
	    SSD1306_GotoXY (0,10);
 8001b8a:	210a      	movs	r1, #10
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f000 ff5b 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("_O/", &Font_11x18, 1);
 8001b92:	2201      	movs	r2, #1
 8001b94:	4917      	ldr	r1, [pc, #92]	@ (8001bf4 <animacion1+0x498>)
 8001b96:	481e      	ldr	r0, [pc, #120]	@ (8001c10 <animacion1+0x4b4>)
 8001b98:	f000 ffea 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 8001b9c:	211e      	movs	r1, #30
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f000 ff52 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (" |", &Font_11x18, 1);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4913      	ldr	r1, [pc, #76]	@ (8001bf4 <animacion1+0x498>)
 8001ba8:	4814      	ldr	r0, [pc, #80]	@ (8001bfc <animacion1+0x4a0>)
 8001baa:	f000 ffe1 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 8001bae:	212d      	movs	r1, #45	@ 0x2d
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f000 ff49 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts ("/ \\", &Font_11x18, 1);
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	490e      	ldr	r1, [pc, #56]	@ (8001bf4 <animacion1+0x498>)
 8001bba:	4811      	ldr	r0, [pc, #68]	@ (8001c00 <animacion1+0x4a4>)
 8001bbc:	f000 ffd8 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	211e      	movs	r1, #30
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 ff3e 	bl	8002a48 <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4909      	ldr	r1, [pc, #36]	@ (8001bf4 <animacion1+0x498>)
 8001bd0:	68b8      	ldr	r0, [r7, #8]
 8001bd2:	f000 ffcd 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8001bd6:	2105      	movs	r1, #5
 8001bd8:	205a      	movs	r0, #90	@ 0x5a
 8001bda:	f000 ff35 	bl	8002a48 <SSD1306_GotoXY>
 8001bde:	2201      	movs	r2, #1
 8001be0:	4904      	ldr	r1, [pc, #16]	@ (8001bf4 <animacion1+0x498>)
 8001be2:	4808      	ldr	r0, [pc, #32]	@ (8001c04 <animacion1+0x4a8>)
 8001be4:	f000 ffc4 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 8001be8:	f000 fe88 	bl	80028fc <SSD1306_UpdateScreen>
}
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000038 	.word	0x20000038
 8001bf8:	08013874 	.word	0x08013874
 8001bfc:	08013858 	.word	0x08013858
 8001c00:	0801385c 	.word	0x0801385c
 8001c04:	200003d0 	.word	0x200003d0
 8001c08:	08013854 	.word	0x08013854
 8001c0c:	08013868 	.word	0x08013868
 8001c10:	08013878 	.word	0x08013878

08001c14 <animacion2>:

void animacion2(uint8_t frame)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
	char* song_name = quitar_extension(get_name()); // Usamos las dos funciones que hemos incluido a waveplayer.c para obtener el nombre del archivo en ejecucion
 8001c1e:	f001 fc3d 	bl	800349c <get_name>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f001 fc43 	bl	80034b0 <quitar_extension>
 8001c2a:	60f8      	str	r0, [r7, #12]

	  //// ANIMATION STARTS //////
	if (frame == 1)
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d120      	bne.n	8001c74 <animacion2+0x60>
	{
		SSD1306_Clear();
 8001c32:	f001 f82a 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, skater1, 128, 64, 1);
 8001c36:	2301      	movs	r3, #1
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	2340      	movs	r3, #64	@ 0x40
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	2380      	movs	r3, #128	@ 0x80
 8001c40:	4a68      	ldr	r2, [pc, #416]	@ (8001de4 <animacion2+0x1d0>)
 8001c42:	2100      	movs	r1, #0
 8001c44:	2000      	movs	r0, #0
 8001c46:	f000 ffb8 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001c4a:	212d      	movs	r1, #45	@ 0x2d
 8001c4c:	200a      	movs	r0, #10
 8001c4e:	f000 fefb 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001c52:	2201      	movs	r2, #1
 8001c54:	4964      	ldr	r1, [pc, #400]	@ (8001de8 <animacion2+0x1d4>)
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 ff8a 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8001c5c:	2105      	movs	r1, #5
 8001c5e:	205a      	movs	r0, #90	@ 0x5a
 8001c60:	f000 fef2 	bl	8002a48 <SSD1306_GotoXY>
 8001c64:	2201      	movs	r2, #1
 8001c66:	4960      	ldr	r1, [pc, #384]	@ (8001de8 <animacion2+0x1d4>)
 8001c68:	4860      	ldr	r0, [pc, #384]	@ (8001dec <animacion2+0x1d8>)
 8001c6a:	f000 ff81 	bl	8002b70 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001c6e:	f000 fe45 	bl	80028fc <SSD1306_UpdateScreen>
		SSD1306_GotoXY (10,45);
		SSD1306_Puts (song_name, &Font_11x18, 1);
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
		SSD1306_UpdateScreen(); // update screen
	}
}
 8001c72:	e0b2      	b.n	8001dda <animacion2+0x1c6>
	else if (frame == 2)
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d120      	bne.n	8001cbc <animacion2+0xa8>
		SSD1306_Clear();
 8001c7a:	f001 f806 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, skater2, 128, 64, 1);
 8001c7e:	2301      	movs	r3, #1
 8001c80:	9301      	str	r3, [sp, #4]
 8001c82:	2340      	movs	r3, #64	@ 0x40
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	2380      	movs	r3, #128	@ 0x80
 8001c88:	4a59      	ldr	r2, [pc, #356]	@ (8001df0 <animacion2+0x1dc>)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f000 ff94 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001c92:	212d      	movs	r1, #45	@ 0x2d
 8001c94:	200a      	movs	r0, #10
 8001c96:	f000 fed7 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	4952      	ldr	r1, [pc, #328]	@ (8001de8 <animacion2+0x1d4>)
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 ff66 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8001ca4:	2105      	movs	r1, #5
 8001ca6:	205a      	movs	r0, #90	@ 0x5a
 8001ca8:	f000 fece 	bl	8002a48 <SSD1306_GotoXY>
 8001cac:	2201      	movs	r2, #1
 8001cae:	494e      	ldr	r1, [pc, #312]	@ (8001de8 <animacion2+0x1d4>)
 8001cb0:	484e      	ldr	r0, [pc, #312]	@ (8001dec <animacion2+0x1d8>)
 8001cb2:	f000 ff5d 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 8001cb6:	f000 fe21 	bl	80028fc <SSD1306_UpdateScreen>
}
 8001cba:	e08e      	b.n	8001dda <animacion2+0x1c6>
	else if (frame == 3)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d120      	bne.n	8001d04 <animacion2+0xf0>
		SSD1306_Clear();
 8001cc2:	f000 ffe2 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, skater3, 128, 64, 1);
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	2340      	movs	r3, #64	@ 0x40
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	2380      	movs	r3, #128	@ 0x80
 8001cd0:	4a48      	ldr	r2, [pc, #288]	@ (8001df4 <animacion2+0x1e0>)
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f000 ff70 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001cda:	212d      	movs	r1, #45	@ 0x2d
 8001cdc:	200a      	movs	r0, #10
 8001cde:	f000 feb3 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4940      	ldr	r1, [pc, #256]	@ (8001de8 <animacion2+0x1d4>)
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 ff42 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8001cec:	2105      	movs	r1, #5
 8001cee:	205a      	movs	r0, #90	@ 0x5a
 8001cf0:	f000 feaa 	bl	8002a48 <SSD1306_GotoXY>
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	493c      	ldr	r1, [pc, #240]	@ (8001de8 <animacion2+0x1d4>)
 8001cf8:	483c      	ldr	r0, [pc, #240]	@ (8001dec <animacion2+0x1d8>)
 8001cfa:	f000 ff39 	bl	8002b70 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001cfe:	f000 fdfd 	bl	80028fc <SSD1306_UpdateScreen>
}
 8001d02:	e06a      	b.n	8001dda <animacion2+0x1c6>
	else if (frame == 4)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d120      	bne.n	8001d4c <animacion2+0x138>
		SSD1306_Clear();
 8001d0a:	f000 ffbe 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, skater4, 128, 64, 1);
 8001d0e:	2301      	movs	r3, #1
 8001d10:	9301      	str	r3, [sp, #4]
 8001d12:	2340      	movs	r3, #64	@ 0x40
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2380      	movs	r3, #128	@ 0x80
 8001d18:	4a37      	ldr	r2, [pc, #220]	@ (8001df8 <animacion2+0x1e4>)
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f000 ff4c 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001d22:	212d      	movs	r1, #45	@ 0x2d
 8001d24:	200a      	movs	r0, #10
 8001d26:	f000 fe8f 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	492e      	ldr	r1, [pc, #184]	@ (8001de8 <animacion2+0x1d4>)
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 ff1e 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8001d34:	2105      	movs	r1, #5
 8001d36:	205a      	movs	r0, #90	@ 0x5a
 8001d38:	f000 fe86 	bl	8002a48 <SSD1306_GotoXY>
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	492a      	ldr	r1, [pc, #168]	@ (8001de8 <animacion2+0x1d4>)
 8001d40:	482a      	ldr	r0, [pc, #168]	@ (8001dec <animacion2+0x1d8>)
 8001d42:	f000 ff15 	bl	8002b70 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001d46:	f000 fdd9 	bl	80028fc <SSD1306_UpdateScreen>
}
 8001d4a:	e046      	b.n	8001dda <animacion2+0x1c6>
	else if (frame == 5)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	2b05      	cmp	r3, #5
 8001d50:	d120      	bne.n	8001d94 <animacion2+0x180>
		SSD1306_Clear();
 8001d52:	f000 ff9a 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, skater5, 128, 64, 1);
 8001d56:	2301      	movs	r3, #1
 8001d58:	9301      	str	r3, [sp, #4]
 8001d5a:	2340      	movs	r3, #64	@ 0x40
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	2380      	movs	r3, #128	@ 0x80
 8001d60:	4a26      	ldr	r2, [pc, #152]	@ (8001dfc <animacion2+0x1e8>)
 8001d62:	2100      	movs	r1, #0
 8001d64:	2000      	movs	r0, #0
 8001d66:	f000 ff28 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001d6a:	212d      	movs	r1, #45	@ 0x2d
 8001d6c:	200a      	movs	r0, #10
 8001d6e:	f000 fe6b 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001d72:	2201      	movs	r2, #1
 8001d74:	491c      	ldr	r1, [pc, #112]	@ (8001de8 <animacion2+0x1d4>)
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 fefa 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8001d7c:	2105      	movs	r1, #5
 8001d7e:	205a      	movs	r0, #90	@ 0x5a
 8001d80:	f000 fe62 	bl	8002a48 <SSD1306_GotoXY>
 8001d84:	2201      	movs	r2, #1
 8001d86:	4918      	ldr	r1, [pc, #96]	@ (8001de8 <animacion2+0x1d4>)
 8001d88:	4818      	ldr	r0, [pc, #96]	@ (8001dec <animacion2+0x1d8>)
 8001d8a:	f000 fef1 	bl	8002b70 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001d8e:	f000 fdb5 	bl	80028fc <SSD1306_UpdateScreen>
}
 8001d92:	e022      	b.n	8001dda <animacion2+0x1c6>
	else if (frame == 6)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d11f      	bne.n	8001dda <animacion2+0x1c6>
		SSD1306_Clear();
 8001d9a:	f000 ff76 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, skater6, 128, 64, 1);
 8001d9e:	2301      	movs	r3, #1
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	2340      	movs	r3, #64	@ 0x40
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	2380      	movs	r3, #128	@ 0x80
 8001da8:	4a15      	ldr	r2, [pc, #84]	@ (8001e00 <animacion2+0x1ec>)
 8001daa:	2100      	movs	r1, #0
 8001dac:	2000      	movs	r0, #0
 8001dae:	f000 ff04 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001db2:	212d      	movs	r1, #45	@ 0x2d
 8001db4:	200a      	movs	r0, #10
 8001db6:	f000 fe47 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	490a      	ldr	r1, [pc, #40]	@ (8001de8 <animacion2+0x1d4>)
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 fed6 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8001dc4:	2105      	movs	r1, #5
 8001dc6:	205a      	movs	r0, #90	@ 0x5a
 8001dc8:	f000 fe3e 	bl	8002a48 <SSD1306_GotoXY>
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4906      	ldr	r1, [pc, #24]	@ (8001de8 <animacion2+0x1d4>)
 8001dd0:	4806      	ldr	r0, [pc, #24]	@ (8001dec <animacion2+0x1d8>)
 8001dd2:	f000 fecd 	bl	8002b70 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001dd6:	f000 fd91 	bl	80028fc <SSD1306_UpdateScreen>
}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	08014684 	.word	0x08014684
 8001de8:	20000038 	.word	0x20000038
 8001dec:	200003d0 	.word	0x200003d0
 8001df0:	08014a84 	.word	0x08014a84
 8001df4:	08014e84 	.word	0x08014e84
 8001df8:	08015284 	.word	0x08015284
 8001dfc:	08015684 	.word	0x08015684
 8001e00:	08015a84 	.word	0x08015a84

08001e04 <animacion3>:

void animacion3(uint8_t frame)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
	char* song_name = quitar_extension(get_name()); // Usamos las dos funciones que hemos incluido a waveplayer.c para obtener el nombre del archivo en ejecucion
 8001e0e:	f001 fb45 	bl	800349c <get_name>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 fb4b 	bl	80034b0 <quitar_extension>
 8001e1a:	60f8      	str	r0, [r7, #12]

	  //// ANIMATION STARTS //////
	if (frame == 1)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d120      	bne.n	8001e64 <animacion3+0x60>
	{
		SSD1306_Clear();
 8001e22:	f000 ff32 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, fumador1, 128, 64, 1);
 8001e26:	2301      	movs	r3, #1
 8001e28:	9301      	str	r3, [sp, #4]
 8001e2a:	2340      	movs	r3, #64	@ 0x40
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	2380      	movs	r3, #128	@ 0x80
 8001e30:	4a8c      	ldr	r2, [pc, #560]	@ (8002064 <animacion3+0x260>)
 8001e32:	2100      	movs	r1, #0
 8001e34:	2000      	movs	r0, #0
 8001e36:	f000 fec0 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001e3a:	212d      	movs	r1, #45	@ 0x2d
 8001e3c:	200a      	movs	r0, #10
 8001e3e:	f000 fe03 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001e42:	2201      	movs	r2, #1
 8001e44:	4988      	ldr	r1, [pc, #544]	@ (8002068 <animacion3+0x264>)
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 fe92 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8001e4c:	2105      	movs	r1, #5
 8001e4e:	205a      	movs	r0, #90	@ 0x5a
 8001e50:	f000 fdfa 	bl	8002a48 <SSD1306_GotoXY>
 8001e54:	2201      	movs	r2, #1
 8001e56:	4984      	ldr	r1, [pc, #528]	@ (8002068 <animacion3+0x264>)
 8001e58:	4884      	ldr	r0, [pc, #528]	@ (800206c <animacion3+0x268>)
 8001e5a:	f000 fe89 	bl	8002b70 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001e5e:	f000 fd4d 	bl	80028fc <SSD1306_UpdateScreen>
		SSD1306_GotoXY (10,45);
		SSD1306_Puts (song_name, &Font_11x18, 1);
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
		SSD1306_UpdateScreen(); // update screen
	}
}
 8001e62:	e0fa      	b.n	800205a <animacion3+0x256>
	else if (frame == 2)
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d120      	bne.n	8001eac <animacion3+0xa8>
		SSD1306_Clear();
 8001e6a:	f000 ff0e 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, fumador2, 128, 64, 1);
 8001e6e:	2301      	movs	r3, #1
 8001e70:	9301      	str	r3, [sp, #4]
 8001e72:	2340      	movs	r3, #64	@ 0x40
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	2380      	movs	r3, #128	@ 0x80
 8001e78:	4a7d      	ldr	r2, [pc, #500]	@ (8002070 <animacion3+0x26c>)
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f000 fe9c 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001e82:	212d      	movs	r1, #45	@ 0x2d
 8001e84:	200a      	movs	r0, #10
 8001e86:	f000 fddf 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4976      	ldr	r1, [pc, #472]	@ (8002068 <animacion3+0x264>)
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 fe6e 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8001e94:	2105      	movs	r1, #5
 8001e96:	205a      	movs	r0, #90	@ 0x5a
 8001e98:	f000 fdd6 	bl	8002a48 <SSD1306_GotoXY>
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4972      	ldr	r1, [pc, #456]	@ (8002068 <animacion3+0x264>)
 8001ea0:	4872      	ldr	r0, [pc, #456]	@ (800206c <animacion3+0x268>)
 8001ea2:	f000 fe65 	bl	8002b70 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001ea6:	f000 fd29 	bl	80028fc <SSD1306_UpdateScreen>
}
 8001eaa:	e0d6      	b.n	800205a <animacion3+0x256>
	else if (frame == 3)
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d120      	bne.n	8001ef4 <animacion3+0xf0>
		SSD1306_Clear();
 8001eb2:	f000 feea 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, fumador3, 128, 64, 1);
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	2340      	movs	r3, #64	@ 0x40
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	2380      	movs	r3, #128	@ 0x80
 8001ec0:	4a6c      	ldr	r2, [pc, #432]	@ (8002074 <animacion3+0x270>)
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f000 fe78 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001eca:	212d      	movs	r1, #45	@ 0x2d
 8001ecc:	200a      	movs	r0, #10
 8001ece:	f000 fdbb 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4964      	ldr	r1, [pc, #400]	@ (8002068 <animacion3+0x264>)
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 fe4a 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8001edc:	2105      	movs	r1, #5
 8001ede:	205a      	movs	r0, #90	@ 0x5a
 8001ee0:	f000 fdb2 	bl	8002a48 <SSD1306_GotoXY>
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4960      	ldr	r1, [pc, #384]	@ (8002068 <animacion3+0x264>)
 8001ee8:	4860      	ldr	r0, [pc, #384]	@ (800206c <animacion3+0x268>)
 8001eea:	f000 fe41 	bl	8002b70 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001eee:	f000 fd05 	bl	80028fc <SSD1306_UpdateScreen>
}
 8001ef2:	e0b2      	b.n	800205a <animacion3+0x256>
	else if (frame == 4)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d120      	bne.n	8001f3c <animacion3+0x138>
		SSD1306_Clear();
 8001efa:	f000 fec6 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, fumador4, 128, 64, 1);
 8001efe:	2301      	movs	r3, #1
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	2340      	movs	r3, #64	@ 0x40
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2380      	movs	r3, #128	@ 0x80
 8001f08:	4a5b      	ldr	r2, [pc, #364]	@ (8002078 <animacion3+0x274>)
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f000 fe54 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001f12:	212d      	movs	r1, #45	@ 0x2d
 8001f14:	200a      	movs	r0, #10
 8001f16:	f000 fd97 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4952      	ldr	r1, [pc, #328]	@ (8002068 <animacion3+0x264>)
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 fe26 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8001f24:	2105      	movs	r1, #5
 8001f26:	205a      	movs	r0, #90	@ 0x5a
 8001f28:	f000 fd8e 	bl	8002a48 <SSD1306_GotoXY>
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	494e      	ldr	r1, [pc, #312]	@ (8002068 <animacion3+0x264>)
 8001f30:	484e      	ldr	r0, [pc, #312]	@ (800206c <animacion3+0x268>)
 8001f32:	f000 fe1d 	bl	8002b70 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001f36:	f000 fce1 	bl	80028fc <SSD1306_UpdateScreen>
}
 8001f3a:	e08e      	b.n	800205a <animacion3+0x256>
	else if (frame == 5)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	2b05      	cmp	r3, #5
 8001f40:	d120      	bne.n	8001f84 <animacion3+0x180>
		SSD1306_Clear();
 8001f42:	f000 fea2 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, fumador3, 128, 64, 1);
 8001f46:	2301      	movs	r3, #1
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	2340      	movs	r3, #64	@ 0x40
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2380      	movs	r3, #128	@ 0x80
 8001f50:	4a48      	ldr	r2, [pc, #288]	@ (8002074 <animacion3+0x270>)
 8001f52:	2100      	movs	r1, #0
 8001f54:	2000      	movs	r0, #0
 8001f56:	f000 fe30 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001f5a:	212d      	movs	r1, #45	@ 0x2d
 8001f5c:	200a      	movs	r0, #10
 8001f5e:	f000 fd73 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001f62:	2201      	movs	r2, #1
 8001f64:	4940      	ldr	r1, [pc, #256]	@ (8002068 <animacion3+0x264>)
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fe02 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8001f6c:	2105      	movs	r1, #5
 8001f6e:	205a      	movs	r0, #90	@ 0x5a
 8001f70:	f000 fd6a 	bl	8002a48 <SSD1306_GotoXY>
 8001f74:	2201      	movs	r2, #1
 8001f76:	493c      	ldr	r1, [pc, #240]	@ (8002068 <animacion3+0x264>)
 8001f78:	483c      	ldr	r0, [pc, #240]	@ (800206c <animacion3+0x268>)
 8001f7a:	f000 fdf9 	bl	8002b70 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001f7e:	f000 fcbd 	bl	80028fc <SSD1306_UpdateScreen>
}
 8001f82:	e06a      	b.n	800205a <animacion3+0x256>
	else if (frame == 6)
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d120      	bne.n	8001fcc <animacion3+0x1c8>
		SSD1306_Clear();
 8001f8a:	f000 fe7e 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, fumador2, 128, 64, 1);
 8001f8e:	2301      	movs	r3, #1
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	2340      	movs	r3, #64	@ 0x40
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	2380      	movs	r3, #128	@ 0x80
 8001f98:	4a35      	ldr	r2, [pc, #212]	@ (8002070 <animacion3+0x26c>)
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f000 fe0c 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001fa2:	212d      	movs	r1, #45	@ 0x2d
 8001fa4:	200a      	movs	r0, #10
 8001fa6:	f000 fd4f 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001faa:	2201      	movs	r2, #1
 8001fac:	492e      	ldr	r1, [pc, #184]	@ (8002068 <animacion3+0x264>)
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 fdde 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8001fb4:	2105      	movs	r1, #5
 8001fb6:	205a      	movs	r0, #90	@ 0x5a
 8001fb8:	f000 fd46 	bl	8002a48 <SSD1306_GotoXY>
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	492a      	ldr	r1, [pc, #168]	@ (8002068 <animacion3+0x264>)
 8001fc0:	482a      	ldr	r0, [pc, #168]	@ (800206c <animacion3+0x268>)
 8001fc2:	f000 fdd5 	bl	8002b70 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001fc6:	f000 fc99 	bl	80028fc <SSD1306_UpdateScreen>
}
 8001fca:	e046      	b.n	800205a <animacion3+0x256>
	else if (frame == 7)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	2b07      	cmp	r3, #7
 8001fd0:	d120      	bne.n	8002014 <animacion3+0x210>
		SSD1306_Clear();
 8001fd2:	f000 fe5a 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, fumador4, 128, 64, 1);
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	2340      	movs	r3, #64	@ 0x40
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2380      	movs	r3, #128	@ 0x80
 8001fe0:	4a25      	ldr	r2, [pc, #148]	@ (8002078 <animacion3+0x274>)
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f000 fde8 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001fea:	212d      	movs	r1, #45	@ 0x2d
 8001fec:	200a      	movs	r0, #10
 8001fee:	f000 fd2b 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	491c      	ldr	r1, [pc, #112]	@ (8002068 <animacion3+0x264>)
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 fdba 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8001ffc:	2105      	movs	r1, #5
 8001ffe:	205a      	movs	r0, #90	@ 0x5a
 8002000:	f000 fd22 	bl	8002a48 <SSD1306_GotoXY>
 8002004:	2201      	movs	r2, #1
 8002006:	4918      	ldr	r1, [pc, #96]	@ (8002068 <animacion3+0x264>)
 8002008:	4818      	ldr	r0, [pc, #96]	@ (800206c <animacion3+0x268>)
 800200a:	f000 fdb1 	bl	8002b70 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 800200e:	f000 fc75 	bl	80028fc <SSD1306_UpdateScreen>
}
 8002012:	e022      	b.n	800205a <animacion3+0x256>
	else if (frame == 8)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	2b08      	cmp	r3, #8
 8002018:	d11f      	bne.n	800205a <animacion3+0x256>
		SSD1306_Clear();
 800201a:	f000 fe36 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, fumador2, 128, 64, 1);
 800201e:	2301      	movs	r3, #1
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	2340      	movs	r3, #64	@ 0x40
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	2380      	movs	r3, #128	@ 0x80
 8002028:	4a11      	ldr	r2, [pc, #68]	@ (8002070 <animacion3+0x26c>)
 800202a:	2100      	movs	r1, #0
 800202c:	2000      	movs	r0, #0
 800202e:	f000 fdc4 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8002032:	212d      	movs	r1, #45	@ 0x2d
 8002034:	200a      	movs	r0, #10
 8002036:	f000 fd07 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 800203a:	2201      	movs	r2, #1
 800203c:	490a      	ldr	r1, [pc, #40]	@ (8002068 <animacion3+0x264>)
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 fd96 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8002044:	2105      	movs	r1, #5
 8002046:	205a      	movs	r0, #90	@ 0x5a
 8002048:	f000 fcfe 	bl	8002a48 <SSD1306_GotoXY>
 800204c:	2201      	movs	r2, #1
 800204e:	4906      	ldr	r1, [pc, #24]	@ (8002068 <animacion3+0x264>)
 8002050:	4806      	ldr	r0, [pc, #24]	@ (800206c <animacion3+0x268>)
 8002052:	f000 fd8d 	bl	8002b70 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8002056:	f000 fc51 	bl	80028fc <SSD1306_UpdateScreen>
}
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	08015e84 	.word	0x08015e84
 8002068:	20000038 	.word	0x20000038
 800206c:	200003d0 	.word	0x200003d0
 8002070:	08016284 	.word	0x08016284
 8002074:	08016684 	.word	0x08016684
 8002078:	08016a84 	.word	0x08016a84

0800207c <animacion4>:

void animacion4(uint8_t frame)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af02      	add	r7, sp, #8
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
	char* song_name = quitar_extension(get_name()); // Usamos las dos funciones que hemos incluido a waveplayer.c para obtener el nombre del archivo en ejecucion
 8002086:	f001 fa09 	bl	800349c <get_name>
 800208a:	4603      	mov	r3, r0
 800208c:	4618      	mov	r0, r3
 800208e:	f001 fa0f 	bl	80034b0 <quitar_extension>
 8002092:	60f8      	str	r0, [r7, #12]

	  //// ANIMATION STARTS //////
	if (frame == 1)
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d120      	bne.n	80020dc <animacion4+0x60>
	{
		SSD1306_Clear();
 800209a:	f000 fdf6 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, bailadora1, 128, 64, 1);
 800209e:	2301      	movs	r3, #1
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	2340      	movs	r3, #64	@ 0x40
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2380      	movs	r3, #128	@ 0x80
 80020a8:	4a68      	ldr	r2, [pc, #416]	@ (800224c <animacion4+0x1d0>)
 80020aa:	2100      	movs	r1, #0
 80020ac:	2000      	movs	r0, #0
 80020ae:	f000 fd84 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 80020b2:	212d      	movs	r1, #45	@ 0x2d
 80020b4:	200a      	movs	r0, #10
 80020b6:	f000 fcc7 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 80020ba:	2201      	movs	r2, #1
 80020bc:	4964      	ldr	r1, [pc, #400]	@ (8002250 <animacion4+0x1d4>)
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 fd56 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 80020c4:	2105      	movs	r1, #5
 80020c6:	205a      	movs	r0, #90	@ 0x5a
 80020c8:	f000 fcbe 	bl	8002a48 <SSD1306_GotoXY>
 80020cc:	2201      	movs	r2, #1
 80020ce:	4960      	ldr	r1, [pc, #384]	@ (8002250 <animacion4+0x1d4>)
 80020d0:	4860      	ldr	r0, [pc, #384]	@ (8002254 <animacion4+0x1d8>)
 80020d2:	f000 fd4d 	bl	8002b70 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 80020d6:	f000 fc11 	bl	80028fc <SSD1306_UpdateScreen>
		SSD1306_GotoXY (10,45);
		SSD1306_Puts (song_name, &Font_11x18, 1);
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
		SSD1306_UpdateScreen(); // update screen
	}
}
 80020da:	e0b2      	b.n	8002242 <animacion4+0x1c6>
	else if (frame == 2)
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d120      	bne.n	8002124 <animacion4+0xa8>
		SSD1306_Clear();
 80020e2:	f000 fdd2 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, bailadora2, 128, 64, 1);
 80020e6:	2301      	movs	r3, #1
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	2340      	movs	r3, #64	@ 0x40
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	2380      	movs	r3, #128	@ 0x80
 80020f0:	4a59      	ldr	r2, [pc, #356]	@ (8002258 <animacion4+0x1dc>)
 80020f2:	2100      	movs	r1, #0
 80020f4:	2000      	movs	r0, #0
 80020f6:	f000 fd60 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 80020fa:	212d      	movs	r1, #45	@ 0x2d
 80020fc:	200a      	movs	r0, #10
 80020fe:	f000 fca3 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8002102:	2201      	movs	r2, #1
 8002104:	4952      	ldr	r1, [pc, #328]	@ (8002250 <animacion4+0x1d4>)
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 fd32 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 800210c:	2105      	movs	r1, #5
 800210e:	205a      	movs	r0, #90	@ 0x5a
 8002110:	f000 fc9a 	bl	8002a48 <SSD1306_GotoXY>
 8002114:	2201      	movs	r2, #1
 8002116:	494e      	ldr	r1, [pc, #312]	@ (8002250 <animacion4+0x1d4>)
 8002118:	484e      	ldr	r0, [pc, #312]	@ (8002254 <animacion4+0x1d8>)
 800211a:	f000 fd29 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 800211e:	f000 fbed 	bl	80028fc <SSD1306_UpdateScreen>
}
 8002122:	e08e      	b.n	8002242 <animacion4+0x1c6>
	else if (frame == 3)
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	2b03      	cmp	r3, #3
 8002128:	d120      	bne.n	800216c <animacion4+0xf0>
		SSD1306_Clear();
 800212a:	f000 fdae 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, bailadora3, 128, 64, 1);
 800212e:	2301      	movs	r3, #1
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	2340      	movs	r3, #64	@ 0x40
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	2380      	movs	r3, #128	@ 0x80
 8002138:	4a48      	ldr	r2, [pc, #288]	@ (800225c <animacion4+0x1e0>)
 800213a:	2100      	movs	r1, #0
 800213c:	2000      	movs	r0, #0
 800213e:	f000 fd3c 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8002142:	212d      	movs	r1, #45	@ 0x2d
 8002144:	200a      	movs	r0, #10
 8002146:	f000 fc7f 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 800214a:	2201      	movs	r2, #1
 800214c:	4940      	ldr	r1, [pc, #256]	@ (8002250 <animacion4+0x1d4>)
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 fd0e 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 8002154:	2105      	movs	r1, #5
 8002156:	205a      	movs	r0, #90	@ 0x5a
 8002158:	f000 fc76 	bl	8002a48 <SSD1306_GotoXY>
 800215c:	2201      	movs	r2, #1
 800215e:	493c      	ldr	r1, [pc, #240]	@ (8002250 <animacion4+0x1d4>)
 8002160:	483c      	ldr	r0, [pc, #240]	@ (8002254 <animacion4+0x1d8>)
 8002162:	f000 fd05 	bl	8002b70 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8002166:	f000 fbc9 	bl	80028fc <SSD1306_UpdateScreen>
}
 800216a:	e06a      	b.n	8002242 <animacion4+0x1c6>
	else if (frame == 4)
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	2b04      	cmp	r3, #4
 8002170:	d120      	bne.n	80021b4 <animacion4+0x138>
		SSD1306_Clear();
 8002172:	f000 fd8a 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, bailadora4, 128, 64, 1);
 8002176:	2301      	movs	r3, #1
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	2340      	movs	r3, #64	@ 0x40
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	2380      	movs	r3, #128	@ 0x80
 8002180:	4a37      	ldr	r2, [pc, #220]	@ (8002260 <animacion4+0x1e4>)
 8002182:	2100      	movs	r1, #0
 8002184:	2000      	movs	r0, #0
 8002186:	f000 fd18 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 800218a:	212d      	movs	r1, #45	@ 0x2d
 800218c:	200a      	movs	r0, #10
 800218e:	f000 fc5b 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8002192:	2201      	movs	r2, #1
 8002194:	492e      	ldr	r1, [pc, #184]	@ (8002250 <animacion4+0x1d4>)
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 fcea 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 800219c:	2105      	movs	r1, #5
 800219e:	205a      	movs	r0, #90	@ 0x5a
 80021a0:	f000 fc52 	bl	8002a48 <SSD1306_GotoXY>
 80021a4:	2201      	movs	r2, #1
 80021a6:	492a      	ldr	r1, [pc, #168]	@ (8002250 <animacion4+0x1d4>)
 80021a8:	482a      	ldr	r0, [pc, #168]	@ (8002254 <animacion4+0x1d8>)
 80021aa:	f000 fce1 	bl	8002b70 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 80021ae:	f000 fba5 	bl	80028fc <SSD1306_UpdateScreen>
}
 80021b2:	e046      	b.n	8002242 <animacion4+0x1c6>
	else if (frame == 5)
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	2b05      	cmp	r3, #5
 80021b8:	d120      	bne.n	80021fc <animacion4+0x180>
		SSD1306_Clear();
 80021ba:	f000 fd66 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, bailadora3, 128, 64, 1);
 80021be:	2301      	movs	r3, #1
 80021c0:	9301      	str	r3, [sp, #4]
 80021c2:	2340      	movs	r3, #64	@ 0x40
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	2380      	movs	r3, #128	@ 0x80
 80021c8:	4a24      	ldr	r2, [pc, #144]	@ (800225c <animacion4+0x1e0>)
 80021ca:	2100      	movs	r1, #0
 80021cc:	2000      	movs	r0, #0
 80021ce:	f000 fcf4 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 80021d2:	212d      	movs	r1, #45	@ 0x2d
 80021d4:	200a      	movs	r0, #10
 80021d6:	f000 fc37 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 80021da:	2201      	movs	r2, #1
 80021dc:	491c      	ldr	r1, [pc, #112]	@ (8002250 <animacion4+0x1d4>)
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 fcc6 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 80021e4:	2105      	movs	r1, #5
 80021e6:	205a      	movs	r0, #90	@ 0x5a
 80021e8:	f000 fc2e 	bl	8002a48 <SSD1306_GotoXY>
 80021ec:	2201      	movs	r2, #1
 80021ee:	4918      	ldr	r1, [pc, #96]	@ (8002250 <animacion4+0x1d4>)
 80021f0:	4818      	ldr	r0, [pc, #96]	@ (8002254 <animacion4+0x1d8>)
 80021f2:	f000 fcbd 	bl	8002b70 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 80021f6:	f000 fb81 	bl	80028fc <SSD1306_UpdateScreen>
}
 80021fa:	e022      	b.n	8002242 <animacion4+0x1c6>
	else if (frame == 6)
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	2b06      	cmp	r3, #6
 8002200:	d11f      	bne.n	8002242 <animacion4+0x1c6>
		SSD1306_Clear();
 8002202:	f000 fd42 	bl	8002c8a <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, bailadora2, 128, 64, 1);
 8002206:	2301      	movs	r3, #1
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	2340      	movs	r3, #64	@ 0x40
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	4a11      	ldr	r2, [pc, #68]	@ (8002258 <animacion4+0x1dc>)
 8002212:	2100      	movs	r1, #0
 8002214:	2000      	movs	r0, #0
 8002216:	f000 fcd0 	bl	8002bba <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 800221a:	212d      	movs	r1, #45	@ 0x2d
 800221c:	200a      	movs	r0, #10
 800221e:	f000 fc13 	bl	8002a48 <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8002222:	2201      	movs	r2, #1
 8002224:	490a      	ldr	r1, [pc, #40]	@ (8002250 <animacion4+0x1d4>)
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 fca2 	bl	8002b70 <SSD1306_Puts>
	    SSD1306_GotoXY (90,5); SSD1306_Puts (buf_volumen, &Font_11x18, 1);
 800222c:	2105      	movs	r1, #5
 800222e:	205a      	movs	r0, #90	@ 0x5a
 8002230:	f000 fc0a 	bl	8002a48 <SSD1306_GotoXY>
 8002234:	2201      	movs	r2, #1
 8002236:	4906      	ldr	r1, [pc, #24]	@ (8002250 <animacion4+0x1d4>)
 8002238:	4806      	ldr	r0, [pc, #24]	@ (8002254 <animacion4+0x1d8>)
 800223a:	f000 fc99 	bl	8002b70 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 800223e:	f000 fb5d 	bl	80028fc <SSD1306_UpdateScreen>
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	08016e84 	.word	0x08016e84
 8002250:	20000038 	.word	0x20000038
 8002254:	200003d0 	.word	0x200003d0
 8002258:	08017284 	.word	0x08017284
 800225c:	08017684 	.word	0x08017684
 8002260:	08017a84 	.word	0x08017a84

08002264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800226a:	f001 fab7 	bl	80037dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800226e:	f000 f86b 	bl	8002348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002272:	f000 f9f3 	bl	800265c <MX_GPIO_Init>
  MX_DMA_Init();
 8002276:	f000 f9d1 	bl	800261c <MX_DMA_Init>
  MX_I2C1_Init();
 800227a:	f000 f921 	bl	80024c0 <MX_I2C1_Init>
  MX_I2S3_Init();
 800227e:	f000 f97b 	bl	8002578 <MX_I2S3_Init>
  MX_FATFS_Init();
 8002282:	f009 fdc9 	bl	800be18 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8002286:	f010 fab3 	bl	80127f0 <MX_USB_HOST_Init>
  MX_I2C2_Init();
 800228a:	f000 f947 	bl	800251c <MX_I2C2_Init>
  MX_TIM10_Init();
 800228e:	f000 f9a1 	bl	80025d4 <MX_TIM10_Init>
  MX_ADC1_Init();
 8002292:	f000 f8c1 	bl	8002418 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();
 8002296:	f000 fa6d 	bl	8002774 <SSD1306_Init>
  HAL_TIM_Base_Start_IT(&htim10);
 800229a:	4823      	ldr	r0, [pc, #140]	@ (8002328 <main+0xc4>)
 800229c:	f008 fad2 	bl	800a844 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 80022a0:	4822      	ldr	r0, [pc, #136]	@ (800232c <main+0xc8>)
 80022a2:	f001 fb75 	bl	8003990 <HAL_ADC_Start_IT>

  // ANTES DE ENTRAR AL BUCLE WHILE, GENERAMOS UN PAR DE IMAGENES DE PRESENTACION

  // 1. Dibujamos en el OLED la primera PORTADA durante 5 segundos
  SSD1306_DrawBitmap(0, 0, PORTADA1, 128, 64, 1);
 80022a6:	2301      	movs	r3, #1
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	2340      	movs	r3, #64	@ 0x40
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2380      	movs	r3, #128	@ 0x80
 80022b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002330 <main+0xcc>)
 80022b2:	2100      	movs	r1, #0
 80022b4:	2000      	movs	r0, #0
 80022b6:	f000 fc80 	bl	8002bba <SSD1306_DrawBitmap>
  SSD1306_UpdateScreen(); // update screen
 80022ba:	f000 fb1f 	bl	80028fc <SSD1306_UpdateScreen>
  HAL_Delay (5000);
 80022be:	f241 3088 	movw	r0, #5000	@ 0x1388
 80022c2:	f001 fafd 	bl	80038c0 <HAL_Delay>

  SSD1306_Clear();
 80022c6:	f000 fce0 	bl	8002c8a <SSD1306_Clear>

  // 2. Dibujamos en el OLED la segunda PORTADA durante 5 segundos
  SSD1306_DrawBitmap(0, 0, PORTADA2, 128, 64, 1);
 80022ca:	2301      	movs	r3, #1
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	2340      	movs	r3, #64	@ 0x40
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	2380      	movs	r3, #128	@ 0x80
 80022d4:	4a17      	ldr	r2, [pc, #92]	@ (8002334 <main+0xd0>)
 80022d6:	2100      	movs	r1, #0
 80022d8:	2000      	movs	r0, #0
 80022da:	f000 fc6e 	bl	8002bba <SSD1306_DrawBitmap>
  SSD1306_UpdateScreen(); // update screen
 80022de:	f000 fb0d 	bl	80028fc <SSD1306_UpdateScreen>
  HAL_Delay (5000);
 80022e2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80022e6:	f001 faeb 	bl	80038c0 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80022ea:	f010 faa7 	bl	801283c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    if (Appli_state == APPLICATION_READY) // TRUE cuando este el pendrive conectado y todo configurado correctamente
 80022ee:	4b12      	ldr	r3, [pc, #72]	@ (8002338 <main+0xd4>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d1f9      	bne.n	80022ea <main+0x86>
    {
    	Mount_USB();
 80022f6:	f7fe fdb9 	bl	8000e6c <Mount_USB>
    	AUDIO_PLAYER_Start(0);
 80022fa:	2000      	movs	r0, #0
 80022fc:	f001 f85e 	bl	80033bc <AUDIO_PLAYER_Start>
    	while (!IsFinished) // Mientras se ejecuta este bucle, el mp3 esta en funcionamiento, pudiendo pausarse o cambiar las canciones
 8002300:	e00c      	b.n	800231c <main+0xb8>
    	{
    		AUDIO_PLAYER_Process(TRUE, volumen); // Le mandamos al procesador el volumen actual que se desea, para que dentro de esa funcion, se actualice correctamente
 8002302:	4b0e      	ldr	r3, [pc, #56]	@ (800233c <main+0xd8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4619      	mov	r1, r3
 8002308:	2001      	movs	r0, #1
 800230a:	f001 f8f1 	bl	80034f0 <AUDIO_PLAYER_Process>

    		if (AudioState == AUDIO_STATE_STOP)
 800230e:	4b0c      	ldr	r3, [pc, #48]	@ (8002340 <main+0xdc>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b09      	cmp	r3, #9
 8002314:	d102      	bne.n	800231c <main+0xb8>
    		{
    			IsFinished = 1;
 8002316:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <main+0xe0>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]
    	while (!IsFinished) // Mientras se ejecuta este bucle, el mp3 esta en funcionamiento, pudiendo pausarse o cambiar las canciones
 800231c:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <main+0xe0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0ee      	beq.n	8002302 <main+0x9e>
    MX_USB_HOST_Process();
 8002324:	e7e1      	b.n	80022ea <main+0x86>
 8002326:	bf00      	nop
 8002328:	20000380 	.word	0x20000380
 800232c:	200001e8 	.word	0x200001e8
 8002330:	08018284 	.word	0x08018284
 8002334:	08018684 	.word	0x08018684
 8002338:	200026a0 	.word	0x200026a0
 800233c:	200003cc 	.word	0x200003cc
 8002340:	200017f0 	.word	0x200017f0
 8002344:	200003d4 	.word	0x200003d4

08002348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b094      	sub	sp, #80	@ 0x50
 800234c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800234e:	f107 0320 	add.w	r3, r7, #32
 8002352:	2230      	movs	r2, #48	@ 0x30
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f010 fe66 	bl	8013028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800235c:	f107 030c 	add.w	r3, r7, #12
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	4b27      	ldr	r3, [pc, #156]	@ (8002410 <SystemClock_Config+0xc8>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	4a26      	ldr	r2, [pc, #152]	@ (8002410 <SystemClock_Config+0xc8>)
 8002376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800237a:	6413      	str	r3, [r2, #64]	@ 0x40
 800237c:	4b24      	ldr	r3, [pc, #144]	@ (8002410 <SystemClock_Config+0xc8>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002388:	2300      	movs	r3, #0
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	4b21      	ldr	r3, [pc, #132]	@ (8002414 <SystemClock_Config+0xcc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a20      	ldr	r2, [pc, #128]	@ (8002414 <SystemClock_Config+0xcc>)
 8002392:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	4b1e      	ldr	r3, [pc, #120]	@ (8002414 <SystemClock_Config+0xcc>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023a4:	2301      	movs	r3, #1
 80023a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ae:	2302      	movs	r3, #2
 80023b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023b8:	2304      	movs	r3, #4
 80023ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80023bc:	23c0      	movs	r3, #192	@ 0xc0
 80023be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80023c0:	2304      	movs	r3, #4
 80023c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80023c4:	2308      	movs	r3, #8
 80023c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023c8:	f107 0320 	add.w	r3, r7, #32
 80023cc:	4618      	mov	r0, r3
 80023ce:	f007 fbd1 	bl	8009b74 <HAL_RCC_OscConfig>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023d8:	f000 f9c6 	bl	8002768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023dc:	230f      	movs	r3, #15
 80023de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023e0:	2302      	movs	r3, #2
 80023e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80023f2:	f107 030c 	add.w	r3, r7, #12
 80023f6:	2103      	movs	r1, #3
 80023f8:	4618      	mov	r0, r3
 80023fa:	f007 fe33 	bl	800a064 <HAL_RCC_ClockConfig>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002404:	f000 f9b0 	bl	8002768 <Error_Handler>
  }
}
 8002408:	bf00      	nop
 800240a:	3750      	adds	r7, #80	@ 0x50
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40023800 	.word	0x40023800
 8002414:	40007000 	.word	0x40007000

08002418 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800241e:	463b      	mov	r3, r7
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800242a:	4b22      	ldr	r3, [pc, #136]	@ (80024b4 <MX_ADC1_Init+0x9c>)
 800242c:	4a22      	ldr	r2, [pc, #136]	@ (80024b8 <MX_ADC1_Init+0xa0>)
 800242e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002430:	4b20      	ldr	r3, [pc, #128]	@ (80024b4 <MX_ADC1_Init+0x9c>)
 8002432:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002436:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8002438:	4b1e      	ldr	r3, [pc, #120]	@ (80024b4 <MX_ADC1_Init+0x9c>)
 800243a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800243e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002440:	4b1c      	ldr	r3, [pc, #112]	@ (80024b4 <MX_ADC1_Init+0x9c>)
 8002442:	2200      	movs	r2, #0
 8002444:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002446:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <MX_ADC1_Init+0x9c>)
 8002448:	2200      	movs	r2, #0
 800244a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800244c:	4b19      	ldr	r3, [pc, #100]	@ (80024b4 <MX_ADC1_Init+0x9c>)
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002454:	4b17      	ldr	r3, [pc, #92]	@ (80024b4 <MX_ADC1_Init+0x9c>)
 8002456:	2200      	movs	r2, #0
 8002458:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800245a:	4b16      	ldr	r3, [pc, #88]	@ (80024b4 <MX_ADC1_Init+0x9c>)
 800245c:	4a17      	ldr	r2, [pc, #92]	@ (80024bc <MX_ADC1_Init+0xa4>)
 800245e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002460:	4b14      	ldr	r3, [pc, #80]	@ (80024b4 <MX_ADC1_Init+0x9c>)
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002466:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <MX_ADC1_Init+0x9c>)
 8002468:	2201      	movs	r2, #1
 800246a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800246c:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <MX_ADC1_Init+0x9c>)
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002474:	4b0f      	ldr	r3, [pc, #60]	@ (80024b4 <MX_ADC1_Init+0x9c>)
 8002476:	2201      	movs	r2, #1
 8002478:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800247a:	480e      	ldr	r0, [pc, #56]	@ (80024b4 <MX_ADC1_Init+0x9c>)
 800247c:	f001 fa44 	bl	8003908 <HAL_ADC_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8002486:	f000 f96f 	bl	8002768 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800248a:	2303      	movs	r3, #3
 800248c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800248e:	2301      	movs	r3, #1
 8002490:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002496:	463b      	mov	r3, r7
 8002498:	4619      	mov	r1, r3
 800249a:	4806      	ldr	r0, [pc, #24]	@ (80024b4 <MX_ADC1_Init+0x9c>)
 800249c:	f001 fc68 	bl	8003d70 <HAL_ADC_ConfigChannel>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80024a6:	f000 f95f 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200001e8 	.word	0x200001e8
 80024b8:	40012000 	.word	0x40012000
 80024bc:	0f000001 	.word	0x0f000001

080024c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024c4:	4b12      	ldr	r3, [pc, #72]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024c6:	4a13      	ldr	r2, [pc, #76]	@ (8002514 <MX_I2C1_Init+0x54>)
 80024c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024cc:	4a12      	ldr	r2, [pc, #72]	@ (8002518 <MX_I2C1_Init+0x58>)
 80024ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024d8:	2200      	movs	r2, #0
 80024da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024ea:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024f0:	4b07      	ldr	r3, [pc, #28]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024f6:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024fc:	4804      	ldr	r0, [pc, #16]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024fe:	f004 ff8d 	bl	800741c <HAL_I2C_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002508:	f000 f92e 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000230 	.word	0x20000230
 8002514:	40005400 	.word	0x40005400
 8002518:	000186a0 	.word	0x000186a0

0800251c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002520:	4b12      	ldr	r3, [pc, #72]	@ (800256c <MX_I2C2_Init+0x50>)
 8002522:	4a13      	ldr	r2, [pc, #76]	@ (8002570 <MX_I2C2_Init+0x54>)
 8002524:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002526:	4b11      	ldr	r3, [pc, #68]	@ (800256c <MX_I2C2_Init+0x50>)
 8002528:	4a12      	ldr	r2, [pc, #72]	@ (8002574 <MX_I2C2_Init+0x58>)
 800252a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800252c:	4b0f      	ldr	r3, [pc, #60]	@ (800256c <MX_I2C2_Init+0x50>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002532:	4b0e      	ldr	r3, [pc, #56]	@ (800256c <MX_I2C2_Init+0x50>)
 8002534:	2200      	movs	r2, #0
 8002536:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002538:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <MX_I2C2_Init+0x50>)
 800253a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800253e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002540:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <MX_I2C2_Init+0x50>)
 8002542:	2200      	movs	r2, #0
 8002544:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002546:	4b09      	ldr	r3, [pc, #36]	@ (800256c <MX_I2C2_Init+0x50>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800254c:	4b07      	ldr	r3, [pc, #28]	@ (800256c <MX_I2C2_Init+0x50>)
 800254e:	2200      	movs	r2, #0
 8002550:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002552:	4b06      	ldr	r3, [pc, #24]	@ (800256c <MX_I2C2_Init+0x50>)
 8002554:	2200      	movs	r2, #0
 8002556:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002558:	4804      	ldr	r0, [pc, #16]	@ (800256c <MX_I2C2_Init+0x50>)
 800255a:	f004 ff5f 	bl	800741c <HAL_I2C_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002564:	f000 f900 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000284 	.word	0x20000284
 8002570:	40005800 	.word	0x40005800
 8002574:	00061a80 	.word	0x00061a80

08002578 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800257c:	4b13      	ldr	r3, [pc, #76]	@ (80025cc <MX_I2S3_Init+0x54>)
 800257e:	4a14      	ldr	r2, [pc, #80]	@ (80025d0 <MX_I2S3_Init+0x58>)
 8002580:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002582:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <MX_I2S3_Init+0x54>)
 8002584:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002588:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800258a:	4b10      	ldr	r3, [pc, #64]	@ (80025cc <MX_I2S3_Init+0x54>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002590:	4b0e      	ldr	r3, [pc, #56]	@ (80025cc <MX_I2S3_Init+0x54>)
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002596:	4b0d      	ldr	r3, [pc, #52]	@ (80025cc <MX_I2S3_Init+0x54>)
 8002598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800259c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800259e:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <MX_I2S3_Init+0x54>)
 80025a0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80025a4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80025a6:	4b09      	ldr	r3, [pc, #36]	@ (80025cc <MX_I2S3_Init+0x54>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80025ac:	4b07      	ldr	r3, [pc, #28]	@ (80025cc <MX_I2S3_Init+0x54>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80025b2:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <MX_I2S3_Init+0x54>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80025b8:	4804      	ldr	r0, [pc, #16]	@ (80025cc <MX_I2S3_Init+0x54>)
 80025ba:	f006 fa3f 	bl	8008a3c <HAL_I2S_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80025c4:	f000 f8d0 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	200002d8 	.word	0x200002d8
 80025d0:	40003c00 	.word	0x40003c00

080025d4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80025d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002614 <MX_TIM10_Init+0x40>)
 80025da:	4a0f      	ldr	r2, [pc, #60]	@ (8002618 <MX_TIM10_Init+0x44>)
 80025dc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 48000;
 80025de:	4b0d      	ldr	r3, [pc, #52]	@ (8002614 <MX_TIM10_Init+0x40>)
 80025e0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80025e4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <MX_TIM10_Init+0x40>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 800;
 80025ec:	4b09      	ldr	r3, [pc, #36]	@ (8002614 <MX_TIM10_Init+0x40>)
 80025ee:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80025f2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f4:	4b07      	ldr	r3, [pc, #28]	@ (8002614 <MX_TIM10_Init+0x40>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fa:	4b06      	ldr	r3, [pc, #24]	@ (8002614 <MX_TIM10_Init+0x40>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002600:	4804      	ldr	r0, [pc, #16]	@ (8002614 <MX_TIM10_Init+0x40>)
 8002602:	f008 f8cf 	bl	800a7a4 <HAL_TIM_Base_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800260c:	f000 f8ac 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000380 	.word	0x20000380
 8002618:	40014400 	.word	0x40014400

0800261c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <MX_DMA_Init+0x3c>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	4a0b      	ldr	r2, [pc, #44]	@ (8002658 <MX_DMA_Init+0x3c>)
 800262c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002630:	6313      	str	r3, [r2, #48]	@ 0x30
 8002632:	4b09      	ldr	r3, [pc, #36]	@ (8002658 <MX_DMA_Init+0x3c>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800263e:	2200      	movs	r2, #0
 8002640:	2100      	movs	r1, #0
 8002642:	2010      	movs	r0, #16
 8002644:	f001 fea7 	bl	8004396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002648:	2010      	movs	r0, #16
 800264a:	f001 fec0 	bl	80043ce <HAL_NVIC_EnableIRQ>

}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800

0800265c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08a      	sub	sp, #40	@ 0x28
 8002660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002662:	f107 0314 	add.w	r3, r7, #20
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	60da      	str	r2, [r3, #12]
 8002670:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	4b39      	ldr	r3, [pc, #228]	@ (800275c <MX_GPIO_Init+0x100>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	4a38      	ldr	r2, [pc, #224]	@ (800275c <MX_GPIO_Init+0x100>)
 800267c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002680:	6313      	str	r3, [r2, #48]	@ 0x30
 8002682:	4b36      	ldr	r3, [pc, #216]	@ (800275c <MX_GPIO_Init+0x100>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b32      	ldr	r3, [pc, #200]	@ (800275c <MX_GPIO_Init+0x100>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	4a31      	ldr	r2, [pc, #196]	@ (800275c <MX_GPIO_Init+0x100>)
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	6313      	str	r3, [r2, #48]	@ 0x30
 800269e:	4b2f      	ldr	r3, [pc, #188]	@ (800275c <MX_GPIO_Init+0x100>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	4b2b      	ldr	r3, [pc, #172]	@ (800275c <MX_GPIO_Init+0x100>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	4a2a      	ldr	r2, [pc, #168]	@ (800275c <MX_GPIO_Init+0x100>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ba:	4b28      	ldr	r3, [pc, #160]	@ (800275c <MX_GPIO_Init+0x100>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	4b24      	ldr	r3, [pc, #144]	@ (800275c <MX_GPIO_Init+0x100>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	4a23      	ldr	r2, [pc, #140]	@ (800275c <MX_GPIO_Init+0x100>)
 80026d0:	f043 0302 	orr.w	r3, r3, #2
 80026d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d6:	4b21      	ldr	r3, [pc, #132]	@ (800275c <MX_GPIO_Init+0x100>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80026e2:	2200      	movs	r2, #0
 80026e4:	2101      	movs	r1, #1
 80026e6:	481e      	ldr	r0, [pc, #120]	@ (8002760 <MX_GPIO_Init+0x104>)
 80026e8:	f002 fd32 	bl	8005150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026ec:	2301      	movs	r3, #1
 80026ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f0:	2301      	movs	r3, #1
 80026f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f8:	2300      	movs	r3, #0
 80026fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	4619      	mov	r1, r3
 8002702:	4817      	ldr	r0, [pc, #92]	@ (8002760 <MX_GPIO_Init+0x104>)
 8002704:	f002 fabc 	bl	8004c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002708:	2307      	movs	r3, #7
 800270a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800270c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002712:	2302      	movs	r3, #2
 8002714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	4619      	mov	r1, r3
 800271c:	4811      	ldr	r0, [pc, #68]	@ (8002764 <MX_GPIO_Init+0x108>)
 800271e:	f002 faaf 	bl	8004c80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002722:	2200      	movs	r2, #0
 8002724:	2100      	movs	r1, #0
 8002726:	2006      	movs	r0, #6
 8002728:	f001 fe35 	bl	8004396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800272c:	2006      	movs	r0, #6
 800272e:	f001 fe4e 	bl	80043ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002732:	2200      	movs	r2, #0
 8002734:	2100      	movs	r1, #0
 8002736:	2007      	movs	r0, #7
 8002738:	f001 fe2d 	bl	8004396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800273c:	2007      	movs	r0, #7
 800273e:	f001 fe46 	bl	80043ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	2100      	movs	r1, #0
 8002746:	2008      	movs	r0, #8
 8002748:	f001 fe25 	bl	8004396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800274c:	2008      	movs	r0, #8
 800274e:	f001 fe3e 	bl	80043ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002752:	bf00      	nop
 8002754:	3728      	adds	r7, #40	@ 0x28
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	40020800 	.word	0x40020800
 8002764:	40020000 	.word	0x40020000

08002768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800276c:	b672      	cpsid	i
}
 800276e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002770:	bf00      	nop
 8002772:	e7fd      	b.n	8002770 <Error_Handler+0x8>

08002774 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800277a:	f000 fa8f 	bl	8002c9c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800277e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002782:	2201      	movs	r2, #1
 8002784:	2178      	movs	r1, #120	@ 0x78
 8002786:	485b      	ldr	r0, [pc, #364]	@ (80028f4 <SSD1306_Init+0x180>)
 8002788:	f005 fbe6 	bl	8007f58 <HAL_I2C_IsDeviceReady>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002792:	2300      	movs	r3, #0
 8002794:	e0a9      	b.n	80028ea <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002796:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800279a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800279c:	e002      	b.n	80027a4 <SSD1306_Init+0x30>
		p--;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f9      	bne.n	800279e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80027aa:	22ae      	movs	r2, #174	@ 0xae
 80027ac:	2100      	movs	r1, #0
 80027ae:	2078      	movs	r0, #120	@ 0x78
 80027b0:	f000 faf0 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80027b4:	2220      	movs	r2, #32
 80027b6:	2100      	movs	r1, #0
 80027b8:	2078      	movs	r0, #120	@ 0x78
 80027ba:	f000 faeb 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80027be:	2210      	movs	r2, #16
 80027c0:	2100      	movs	r1, #0
 80027c2:	2078      	movs	r0, #120	@ 0x78
 80027c4:	f000 fae6 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80027c8:	22b0      	movs	r2, #176	@ 0xb0
 80027ca:	2100      	movs	r1, #0
 80027cc:	2078      	movs	r0, #120	@ 0x78
 80027ce:	f000 fae1 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80027d2:	22c8      	movs	r2, #200	@ 0xc8
 80027d4:	2100      	movs	r1, #0
 80027d6:	2078      	movs	r0, #120	@ 0x78
 80027d8:	f000 fadc 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80027dc:	2200      	movs	r2, #0
 80027de:	2100      	movs	r1, #0
 80027e0:	2078      	movs	r0, #120	@ 0x78
 80027e2:	f000 fad7 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80027e6:	2210      	movs	r2, #16
 80027e8:	2100      	movs	r1, #0
 80027ea:	2078      	movs	r0, #120	@ 0x78
 80027ec:	f000 fad2 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80027f0:	2240      	movs	r2, #64	@ 0x40
 80027f2:	2100      	movs	r1, #0
 80027f4:	2078      	movs	r0, #120	@ 0x78
 80027f6:	f000 facd 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80027fa:	2281      	movs	r2, #129	@ 0x81
 80027fc:	2100      	movs	r1, #0
 80027fe:	2078      	movs	r0, #120	@ 0x78
 8002800:	f000 fac8 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002804:	22ff      	movs	r2, #255	@ 0xff
 8002806:	2100      	movs	r1, #0
 8002808:	2078      	movs	r0, #120	@ 0x78
 800280a:	f000 fac3 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800280e:	22a1      	movs	r2, #161	@ 0xa1
 8002810:	2100      	movs	r1, #0
 8002812:	2078      	movs	r0, #120	@ 0x78
 8002814:	f000 fabe 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002818:	22a6      	movs	r2, #166	@ 0xa6
 800281a:	2100      	movs	r1, #0
 800281c:	2078      	movs	r0, #120	@ 0x78
 800281e:	f000 fab9 	bl	8002d94 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002822:	22a8      	movs	r2, #168	@ 0xa8
 8002824:	2100      	movs	r1, #0
 8002826:	2078      	movs	r0, #120	@ 0x78
 8002828:	f000 fab4 	bl	8002d94 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 800282c:	223f      	movs	r2, #63	@ 0x3f
 800282e:	2100      	movs	r1, #0
 8002830:	2078      	movs	r0, #120	@ 0x78
 8002832:	f000 faaf 	bl	8002d94 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002836:	22a4      	movs	r2, #164	@ 0xa4
 8002838:	2100      	movs	r1, #0
 800283a:	2078      	movs	r0, #120	@ 0x78
 800283c:	f000 faaa 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002840:	22d3      	movs	r2, #211	@ 0xd3
 8002842:	2100      	movs	r1, #0
 8002844:	2078      	movs	r0, #120	@ 0x78
 8002846:	f000 faa5 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800284a:	2200      	movs	r2, #0
 800284c:	2100      	movs	r1, #0
 800284e:	2078      	movs	r0, #120	@ 0x78
 8002850:	f000 faa0 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002854:	22d5      	movs	r2, #213	@ 0xd5
 8002856:	2100      	movs	r1, #0
 8002858:	2078      	movs	r0, #120	@ 0x78
 800285a:	f000 fa9b 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800285e:	22f0      	movs	r2, #240	@ 0xf0
 8002860:	2100      	movs	r1, #0
 8002862:	2078      	movs	r0, #120	@ 0x78
 8002864:	f000 fa96 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002868:	22d9      	movs	r2, #217	@ 0xd9
 800286a:	2100      	movs	r1, #0
 800286c:	2078      	movs	r0, #120	@ 0x78
 800286e:	f000 fa91 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002872:	2222      	movs	r2, #34	@ 0x22
 8002874:	2100      	movs	r1, #0
 8002876:	2078      	movs	r0, #120	@ 0x78
 8002878:	f000 fa8c 	bl	8002d94 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800287c:	22da      	movs	r2, #218	@ 0xda
 800287e:	2100      	movs	r1, #0
 8002880:	2078      	movs	r0, #120	@ 0x78
 8002882:	f000 fa87 	bl	8002d94 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8002886:	2212      	movs	r2, #18
 8002888:	2100      	movs	r1, #0
 800288a:	2078      	movs	r0, #120	@ 0x78
 800288c:	f000 fa82 	bl	8002d94 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002890:	22db      	movs	r2, #219	@ 0xdb
 8002892:	2100      	movs	r1, #0
 8002894:	2078      	movs	r0, #120	@ 0x78
 8002896:	f000 fa7d 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800289a:	2220      	movs	r2, #32
 800289c:	2100      	movs	r1, #0
 800289e:	2078      	movs	r0, #120	@ 0x78
 80028a0:	f000 fa78 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80028a4:	228d      	movs	r2, #141	@ 0x8d
 80028a6:	2100      	movs	r1, #0
 80028a8:	2078      	movs	r0, #120	@ 0x78
 80028aa:	f000 fa73 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80028ae:	2214      	movs	r2, #20
 80028b0:	2100      	movs	r1, #0
 80028b2:	2078      	movs	r0, #120	@ 0x78
 80028b4:	f000 fa6e 	bl	8002d94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80028b8:	22af      	movs	r2, #175	@ 0xaf
 80028ba:	2100      	movs	r1, #0
 80028bc:	2078      	movs	r0, #120	@ 0x78
 80028be:	f000 fa69 	bl	8002d94 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80028c2:	222e      	movs	r2, #46	@ 0x2e
 80028c4:	2100      	movs	r1, #0
 80028c6:	2078      	movs	r0, #120	@ 0x78
 80028c8:	f000 fa64 	bl	8002d94 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80028cc:	2000      	movs	r0, #0
 80028ce:	f000 f843 	bl	8002958 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80028d2:	f000 f813 	bl	80028fc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80028d6:	4b08      	ldr	r3, [pc, #32]	@ (80028f8 <SSD1306_Init+0x184>)
 80028d8:	2200      	movs	r2, #0
 80028da:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80028dc:	4b06      	ldr	r3, [pc, #24]	@ (80028f8 <SSD1306_Init+0x184>)
 80028de:	2200      	movs	r2, #0
 80028e0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80028e2:	4b05      	ldr	r3, [pc, #20]	@ (80028f8 <SSD1306_Init+0x184>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80028e8:	2301      	movs	r3, #1
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000284 	.word	0x20000284
 80028f8:	200007dc 	.word	0x200007dc

080028fc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002902:	2300      	movs	r3, #0
 8002904:	71fb      	strb	r3, [r7, #7]
 8002906:	e01d      	b.n	8002944 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	3b50      	subs	r3, #80	@ 0x50
 800290c:	b2db      	uxtb	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	2100      	movs	r1, #0
 8002912:	2078      	movs	r0, #120	@ 0x78
 8002914:	f000 fa3e 	bl	8002d94 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002918:	2200      	movs	r2, #0
 800291a:	2100      	movs	r1, #0
 800291c:	2078      	movs	r0, #120	@ 0x78
 800291e:	f000 fa39 	bl	8002d94 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002922:	2210      	movs	r2, #16
 8002924:	2100      	movs	r1, #0
 8002926:	2078      	movs	r0, #120	@ 0x78
 8002928:	f000 fa34 	bl	8002d94 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	01db      	lsls	r3, r3, #7
 8002930:	4a08      	ldr	r2, [pc, #32]	@ (8002954 <SSD1306_UpdateScreen+0x58>)
 8002932:	441a      	add	r2, r3
 8002934:	2380      	movs	r3, #128	@ 0x80
 8002936:	2140      	movs	r1, #64	@ 0x40
 8002938:	2078      	movs	r0, #120	@ 0x78
 800293a:	f000 f9c5 	bl	8002cc8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	3301      	adds	r3, #1
 8002942:	71fb      	strb	r3, [r7, #7]
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	2b07      	cmp	r3, #7
 8002948:	d9de      	bls.n	8002908 <SSD1306_UpdateScreen+0xc>
	}
}
 800294a:	bf00      	nop
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	200003dc 	.word	0x200003dc

08002958 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <SSD1306_Fill+0x14>
 8002968:	2300      	movs	r3, #0
 800296a:	e000      	b.n	800296e <SSD1306_Fill+0x16>
 800296c:	23ff      	movs	r3, #255	@ 0xff
 800296e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002972:	4619      	mov	r1, r3
 8002974:	4803      	ldr	r0, [pc, #12]	@ (8002984 <SSD1306_Fill+0x2c>)
 8002976:	f010 fb57 	bl	8013028 <memset>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	200003dc 	.word	0x200003dc

08002988 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	80fb      	strh	r3, [r7, #6]
 8002992:	460b      	mov	r3, r1
 8002994:	80bb      	strh	r3, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	70fb      	strb	r3, [r7, #3]
	if (
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	2b7f      	cmp	r3, #127	@ 0x7f
 800299e:	d848      	bhi.n	8002a32 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80029a0:	88bb      	ldrh	r3, [r7, #4]
 80029a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80029a4:	d845      	bhi.n	8002a32 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80029a6:	4b26      	ldr	r3, [pc, #152]	@ (8002a40 <SSD1306_DrawPixel+0xb8>)
 80029a8:	791b      	ldrb	r3, [r3, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d006      	beq.n	80029bc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80029ae:	78fb      	ldrb	r3, [r7, #3]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d11a      	bne.n	80029f8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80029c2:	88fa      	ldrh	r2, [r7, #6]
 80029c4:	88bb      	ldrh	r3, [r7, #4]
 80029c6:	08db      	lsrs	r3, r3, #3
 80029c8:	b298      	uxth	r0, r3
 80029ca:	4603      	mov	r3, r0
 80029cc:	01db      	lsls	r3, r3, #7
 80029ce:	4413      	add	r3, r2
 80029d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002a44 <SSD1306_DrawPixel+0xbc>)
 80029d2:	5cd3      	ldrb	r3, [r2, r3]
 80029d4:	b25a      	sxtb	r2, r3
 80029d6:	88bb      	ldrh	r3, [r7, #4]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	2101      	movs	r1, #1
 80029de:	fa01 f303 	lsl.w	r3, r1, r3
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	4313      	orrs	r3, r2
 80029e6:	b259      	sxtb	r1, r3
 80029e8:	88fa      	ldrh	r2, [r7, #6]
 80029ea:	4603      	mov	r3, r0
 80029ec:	01db      	lsls	r3, r3, #7
 80029ee:	4413      	add	r3, r2
 80029f0:	b2c9      	uxtb	r1, r1
 80029f2:	4a14      	ldr	r2, [pc, #80]	@ (8002a44 <SSD1306_DrawPixel+0xbc>)
 80029f4:	54d1      	strb	r1, [r2, r3]
 80029f6:	e01d      	b.n	8002a34 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80029f8:	88fa      	ldrh	r2, [r7, #6]
 80029fa:	88bb      	ldrh	r3, [r7, #4]
 80029fc:	08db      	lsrs	r3, r3, #3
 80029fe:	b298      	uxth	r0, r3
 8002a00:	4603      	mov	r3, r0
 8002a02:	01db      	lsls	r3, r3, #7
 8002a04:	4413      	add	r3, r2
 8002a06:	4a0f      	ldr	r2, [pc, #60]	@ (8002a44 <SSD1306_DrawPixel+0xbc>)
 8002a08:	5cd3      	ldrb	r3, [r2, r3]
 8002a0a:	b25a      	sxtb	r2, r3
 8002a0c:	88bb      	ldrh	r3, [r7, #4]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	2101      	movs	r1, #1
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	b25b      	sxtb	r3, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	b25b      	sxtb	r3, r3
 8002a1e:	4013      	ands	r3, r2
 8002a20:	b259      	sxtb	r1, r3
 8002a22:	88fa      	ldrh	r2, [r7, #6]
 8002a24:	4603      	mov	r3, r0
 8002a26:	01db      	lsls	r3, r3, #7
 8002a28:	4413      	add	r3, r2
 8002a2a:	b2c9      	uxtb	r1, r1
 8002a2c:	4a05      	ldr	r2, [pc, #20]	@ (8002a44 <SSD1306_DrawPixel+0xbc>)
 8002a2e:	54d1      	strb	r1, [r2, r3]
 8002a30:	e000      	b.n	8002a34 <SSD1306_DrawPixel+0xac>
		return;
 8002a32:	bf00      	nop
	}
}
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	200007dc 	.word	0x200007dc
 8002a44:	200003dc 	.word	0x200003dc

08002a48 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	460a      	mov	r2, r1
 8002a52:	80fb      	strh	r3, [r7, #6]
 8002a54:	4613      	mov	r3, r2
 8002a56:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002a58:	4a05      	ldr	r2, [pc, #20]	@ (8002a70 <SSD1306_GotoXY+0x28>)
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002a5e:	4a04      	ldr	r2, [pc, #16]	@ (8002a70 <SSD1306_GotoXY+0x28>)
 8002a60:	88bb      	ldrh	r3, [r7, #4]
 8002a62:	8053      	strh	r3, [r2, #2]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	200007dc 	.word	0x200007dc

08002a74 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	6039      	str	r1, [r7, #0]
 8002a7e:	71fb      	strb	r3, [r7, #7]
 8002a80:	4613      	mov	r3, r2
 8002a82:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002a84:	4b39      	ldr	r3, [pc, #228]	@ (8002b6c <SSD1306_Putc+0xf8>)
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	4413      	add	r3, r2
	if (
 8002a90:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a92:	dc07      	bgt.n	8002aa4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002a94:	4b35      	ldr	r3, [pc, #212]	@ (8002b6c <SSD1306_Putc+0xf8>)
 8002a96:	885b      	ldrh	r3, [r3, #2]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	785b      	ldrb	r3, [r3, #1]
 8002a9e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002aa0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002aa2:	dd01      	ble.n	8002aa8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e05d      	b.n	8002b64 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	e04b      	b.n	8002b46 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	3b20      	subs	r3, #32
 8002ab6:	6839      	ldr	r1, [r7, #0]
 8002ab8:	7849      	ldrb	r1, [r1, #1]
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4619      	mov	r1, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	440b      	add	r3, r1
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	4413      	add	r3, r2
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	e030      	b.n	8002b34 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d010      	beq.n	8002b04 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002ae2:	4b22      	ldr	r3, [pc, #136]	@ (8002b6c <SSD1306_Putc+0xf8>)
 8002ae4:	881a      	ldrh	r2, [r3, #0]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	b298      	uxth	r0, r3
 8002aee:	4b1f      	ldr	r3, [pc, #124]	@ (8002b6c <SSD1306_Putc+0xf8>)
 8002af0:	885a      	ldrh	r2, [r3, #2]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	79ba      	ldrb	r2, [r7, #6]
 8002afc:	4619      	mov	r1, r3
 8002afe:	f7ff ff43 	bl	8002988 <SSD1306_DrawPixel>
 8002b02:	e014      	b.n	8002b2e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002b04:	4b19      	ldr	r3, [pc, #100]	@ (8002b6c <SSD1306_Putc+0xf8>)
 8002b06:	881a      	ldrh	r2, [r3, #0]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	b298      	uxth	r0, r3
 8002b10:	4b16      	ldr	r3, [pc, #88]	@ (8002b6c <SSD1306_Putc+0xf8>)
 8002b12:	885a      	ldrh	r2, [r3, #2]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	b299      	uxth	r1, r3
 8002b1c:	79bb      	ldrb	r3, [r7, #6]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	bf0c      	ite	eq
 8002b22:	2301      	moveq	r3, #1
 8002b24:	2300      	movne	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f7ff ff2d 	bl	8002988 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	3301      	adds	r3, #1
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d3c8      	bcc.n	8002ad2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3301      	adds	r3, #1
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	785b      	ldrb	r3, [r3, #1]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d3ad      	bcc.n	8002aae <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002b52:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <SSD1306_Putc+0xf8>)
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	7812      	ldrb	r2, [r2, #0]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	4b03      	ldr	r3, [pc, #12]	@ (8002b6c <SSD1306_Putc+0xf8>)
 8002b60:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002b62:	79fb      	ldrb	r3, [r7, #7]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	200007dc 	.word	0x200007dc

08002b70 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002b7e:	e012      	b.n	8002ba6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	79fa      	ldrb	r2, [r7, #7]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff73 	bl	8002a74 <SSD1306_Putc>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	461a      	mov	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d002      	beq.n	8002ba0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	e008      	b.n	8002bb2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1e8      	bne.n	8002b80 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60ba      	str	r2, [r7, #8]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	81fb      	strh	r3, [r7, #14]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	81bb      	strh	r3, [r7, #12]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002bd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bd4:	3307      	adds	r3, #7
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	da00      	bge.n	8002bdc <SSD1306_DrawBitmap+0x22>
 8002bda:	3307      	adds	r3, #7
 8002bdc:	10db      	asrs	r3, r3, #3
 8002bde:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8002be4:	2300      	movs	r3, #0
 8002be6:	82bb      	strh	r3, [r7, #20]
 8002be8:	e044      	b.n	8002c74 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8002bea:	2300      	movs	r3, #0
 8002bec:	827b      	strh	r3, [r7, #18]
 8002bee:	e02f      	b.n	8002c50 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8002bf0:	8a7b      	ldrh	r3, [r7, #18]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	75fb      	strb	r3, [r7, #23]
 8002c00:	e012      	b.n	8002c28 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002c02:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c06:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002c0a:	fb03 f202 	mul.w	r2, r3, r2
 8002c0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	da00      	bge.n	8002c18 <SSD1306_DrawBitmap+0x5e>
 8002c16:	3307      	adds	r3, #7
 8002c18:	10db      	asrs	r3, r3, #3
 8002c1a:	b21b      	sxth	r3, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4413      	add	r3, r2
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002c28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	da09      	bge.n	8002c44 <SSD1306_DrawBitmap+0x8a>
 8002c30:	89fa      	ldrh	r2, [r7, #14]
 8002c32:	8a7b      	ldrh	r3, [r7, #18]
 8002c34:	4413      	add	r3, r2
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	89b9      	ldrh	r1, [r7, #12]
 8002c3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fea2 	bl	8002988 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002c44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	827b      	strh	r3, [r7, #18]
 8002c50:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	dbc9      	blt.n	8002bf0 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002c5c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3301      	adds	r3, #1
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	82bb      	strh	r3, [r7, #20]
 8002c68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3301      	adds	r3, #1
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	81bb      	strh	r3, [r7, #12]
 8002c74:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002c78:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	dbb4      	blt.n	8002bea <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <SSD1306_Clear>:

void SSD1306_Clear (void)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002c8e:	2000      	movs	r0, #0
 8002c90:	f7ff fe62 	bl	8002958 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002c94:	f7ff fe32 	bl	80028fc <SSD1306_UpdateScreen>
}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002ca2:	4b08      	ldr	r3, [pc, #32]	@ (8002cc4 <ssd1306_I2C_Init+0x28>)
 8002ca4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002ca6:	e002      	b.n	8002cae <ssd1306_I2C_Init+0x12>
		p--;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f9      	bne.n	8002ca8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	0003d090 	.word	0x0003d090

08002cc8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002cc8:	b590      	push	{r4, r7, lr}
 8002cca:	b0c7      	sub	sp, #284	@ 0x11c
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	4604      	mov	r4, r0
 8002cd0:	4608      	mov	r0, r1
 8002cd2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8002cd6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8002cda:	600a      	str	r2, [r1, #0]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ce2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002ce6:	4622      	mov	r2, r4
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002cee:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002cfa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002cfe:	460a      	mov	r2, r1
 8002d00:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002d02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d0a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002d0e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8002d12:	7812      	ldrb	r2, [r2, #0]
 8002d14:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002d1c:	e015      	b.n	8002d4a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002d1e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002d22:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002d26:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	441a      	add	r2, r3
 8002d2e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002d32:	3301      	adds	r3, #1
 8002d34:	7811      	ldrb	r1, [r2, #0]
 8002d36:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002d3a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002d3e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002d40:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002d44:	3301      	adds	r3, #1
 8002d46:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002d4a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002d54:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002d58:	8812      	ldrh	r2, [r2, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d8df      	bhi.n	8002d1e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8002d5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d62:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	b299      	uxth	r1, r3
 8002d6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f107 020c 	add.w	r2, r7, #12
 8002d7c:	200a      	movs	r0, #10
 8002d7e:	9000      	str	r0, [sp, #0]
 8002d80:	4803      	ldr	r0, [pc, #12]	@ (8002d90 <ssd1306_I2C_WriteMulti+0xc8>)
 8002d82:	f004 fcbf 	bl	8007704 <HAL_I2C_Master_Transmit>
}
 8002d86:	bf00      	nop
 8002d88:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd90      	pop	{r4, r7, pc}
 8002d90:	20000284 	.word	0x20000284

08002d94 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	71bb      	strb	r3, [r7, #6]
 8002da2:	4613      	mov	r3, r2
 8002da4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002da6:	79bb      	ldrb	r3, [r7, #6]
 8002da8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002daa:	797b      	ldrb	r3, [r7, #5]
 8002dac:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	b299      	uxth	r1, r3
 8002db2:	f107 020c 	add.w	r2, r7, #12
 8002db6:	230a      	movs	r3, #10
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2302      	movs	r3, #2
 8002dbc:	4803      	ldr	r0, [pc, #12]	@ (8002dcc <ssd1306_I2C_Write+0x38>)
 8002dbe:	f004 fca1 	bl	8007704 <HAL_I2C_Master_Transmit>
}
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000284 	.word	0x20000284

08002dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	4b10      	ldr	r3, [pc, #64]	@ (8002e1c <HAL_MspInit+0x4c>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dde:	4a0f      	ldr	r2, [pc, #60]	@ (8002e1c <HAL_MspInit+0x4c>)
 8002de0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002de6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e1c <HAL_MspInit+0x4c>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dee:	607b      	str	r3, [r7, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	603b      	str	r3, [r7, #0]
 8002df6:	4b09      	ldr	r3, [pc, #36]	@ (8002e1c <HAL_MspInit+0x4c>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	4a08      	ldr	r2, [pc, #32]	@ (8002e1c <HAL_MspInit+0x4c>)
 8002dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e02:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <HAL_MspInit+0x4c>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e0e:	2007      	movs	r0, #7
 8002e10:	f001 fab6 	bl	8004380 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40023800 	.word	0x40023800

08002e20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	@ 0x28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002eac <HAL_ADC_MspInit+0x8c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d12f      	bne.n	8002ea2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb0 <HAL_ADC_MspInit+0x90>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4a:	4a19      	ldr	r2, [pc, #100]	@ (8002eb0 <HAL_ADC_MspInit+0x90>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e52:	4b17      	ldr	r3, [pc, #92]	@ (8002eb0 <HAL_ADC_MspInit+0x90>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	4b13      	ldr	r3, [pc, #76]	@ (8002eb0 <HAL_ADC_MspInit+0x90>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e66:	4a12      	ldr	r2, [pc, #72]	@ (8002eb0 <HAL_ADC_MspInit+0x90>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e6e:	4b10      	ldr	r3, [pc, #64]	@ (8002eb0 <HAL_ADC_MspInit+0x90>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e86:	f107 0314 	add.w	r3, r7, #20
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4809      	ldr	r0, [pc, #36]	@ (8002eb4 <HAL_ADC_MspInit+0x94>)
 8002e8e:	f001 fef7 	bl	8004c80 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2100      	movs	r1, #0
 8002e96:	2012      	movs	r0, #18
 8002e98:	f001 fa7d 	bl	8004396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002e9c:	2012      	movs	r0, #18
 8002e9e:	f001 fa96 	bl	80043ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002ea2:	bf00      	nop
 8002ea4:	3728      	adds	r7, #40	@ 0x28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40012000 	.word	0x40012000
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40020000 	.word	0x40020000

08002eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08c      	sub	sp, #48	@ 0x30
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	f107 031c 	add.w	r3, r7, #28
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a3b      	ldr	r2, [pc, #236]	@ (8002fc4 <HAL_I2C_MspInit+0x10c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d12d      	bne.n	8002f36 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	4b3a      	ldr	r3, [pc, #232]	@ (8002fc8 <HAL_I2C_MspInit+0x110>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee2:	4a39      	ldr	r2, [pc, #228]	@ (8002fc8 <HAL_I2C_MspInit+0x110>)
 8002ee4:	f043 0302 	orr.w	r3, r3, #2
 8002ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eea:	4b37      	ldr	r3, [pc, #220]	@ (8002fc8 <HAL_I2C_MspInit+0x110>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	61bb      	str	r3, [r7, #24]
 8002ef4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002ef6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002efc:	2312      	movs	r3, #18
 8002efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f00:	2301      	movs	r3, #1
 8002f02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f04:	2303      	movs	r3, #3
 8002f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f08:	2304      	movs	r3, #4
 8002f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f0c:	f107 031c 	add.w	r3, r7, #28
 8002f10:	4619      	mov	r1, r3
 8002f12:	482e      	ldr	r0, [pc, #184]	@ (8002fcc <HAL_I2C_MspInit+0x114>)
 8002f14:	f001 feb4 	bl	8004c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002fc8 <HAL_I2C_MspInit+0x110>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	4a29      	ldr	r2, [pc, #164]	@ (8002fc8 <HAL_I2C_MspInit+0x110>)
 8002f22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f26:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f28:	4b27      	ldr	r3, [pc, #156]	@ (8002fc8 <HAL_I2C_MspInit+0x110>)
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f34:	e041      	b.n	8002fba <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a25      	ldr	r2, [pc, #148]	@ (8002fd0 <HAL_I2C_MspInit+0x118>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d13c      	bne.n	8002fba <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	4b20      	ldr	r3, [pc, #128]	@ (8002fc8 <HAL_I2C_MspInit+0x110>)
 8002f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f48:	4a1f      	ldr	r2, [pc, #124]	@ (8002fc8 <HAL_I2C_MspInit+0x110>)
 8002f4a:	f043 0302 	orr.w	r3, r3, #2
 8002f4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f50:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc8 <HAL_I2C_MspInit+0x110>)
 8002f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f62:	2312      	movs	r3, #18
 8002f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f6e:	2304      	movs	r3, #4
 8002f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f72:	f107 031c 	add.w	r3, r7, #28
 8002f76:	4619      	mov	r1, r3
 8002f78:	4814      	ldr	r0, [pc, #80]	@ (8002fcc <HAL_I2C_MspInit+0x114>)
 8002f7a:	f001 fe81 	bl	8004c80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f7e:	2308      	movs	r3, #8
 8002f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f82:	2312      	movs	r3, #18
 8002f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002f8e:	2309      	movs	r3, #9
 8002f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f92:	f107 031c 	add.w	r3, r7, #28
 8002f96:	4619      	mov	r1, r3
 8002f98:	480c      	ldr	r0, [pc, #48]	@ (8002fcc <HAL_I2C_MspInit+0x114>)
 8002f9a:	f001 fe71 	bl	8004c80 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	4b09      	ldr	r3, [pc, #36]	@ (8002fc8 <HAL_I2C_MspInit+0x110>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	4a08      	ldr	r2, [pc, #32]	@ (8002fc8 <HAL_I2C_MspInit+0x110>)
 8002fa8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fae:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <HAL_I2C_MspInit+0x110>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
}
 8002fba:	bf00      	nop
 8002fbc:	3730      	adds	r7, #48	@ 0x30
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40005400 	.word	0x40005400
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40020400 	.word	0x40020400
 8002fd0:	40005800 	.word	0x40005800

08002fd4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a15      	ldr	r2, [pc, #84]	@ (8003038 <HAL_I2C_MspDeInit+0x64>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d10f      	bne.n	8003006 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002fe6:	4b15      	ldr	r3, [pc, #84]	@ (800303c <HAL_I2C_MspDeInit+0x68>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	4a14      	ldr	r2, [pc, #80]	@ (800303c <HAL_I2C_MspDeInit+0x68>)
 8002fec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ff0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8002ff2:	2140      	movs	r1, #64	@ 0x40
 8002ff4:	4812      	ldr	r0, [pc, #72]	@ (8003040 <HAL_I2C_MspDeInit+0x6c>)
 8002ff6:	f001 ffc7 	bl	8004f88 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002ffa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ffe:	4810      	ldr	r0, [pc, #64]	@ (8003040 <HAL_I2C_MspDeInit+0x6c>)
 8003000:	f001 ffc2 	bl	8004f88 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8003004:	e013      	b.n	800302e <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C2)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a0e      	ldr	r2, [pc, #56]	@ (8003044 <HAL_I2C_MspDeInit+0x70>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d10e      	bne.n	800302e <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8003010:	4b0a      	ldr	r3, [pc, #40]	@ (800303c <HAL_I2C_MspDeInit+0x68>)
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	4a09      	ldr	r2, [pc, #36]	@ (800303c <HAL_I2C_MspDeInit+0x68>)
 8003016:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800301a:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800301c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003020:	4807      	ldr	r0, [pc, #28]	@ (8003040 <HAL_I2C_MspDeInit+0x6c>)
 8003022:	f001 ffb1 	bl	8004f88 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8003026:	2108      	movs	r1, #8
 8003028:	4805      	ldr	r0, [pc, #20]	@ (8003040 <HAL_I2C_MspDeInit+0x6c>)
 800302a:	f001 ffad 	bl	8004f88 <HAL_GPIO_DeInit>
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40005400 	.word	0x40005400
 800303c:	40023800 	.word	0x40023800
 8003040:	40020400 	.word	0x40020400
 8003044:	40005800 	.word	0x40005800

08003048 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b090      	sub	sp, #64	@ 0x40
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003050:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003060:	f107 0314 	add.w	r3, r7, #20
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	60da      	str	r2, [r3, #12]
 800306e:	611a      	str	r2, [r3, #16]
 8003070:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a4f      	ldr	r2, [pc, #316]	@ (80031b4 <HAL_I2S_MspInit+0x16c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	f040 8096 	bne.w	80031aa <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800307e:	2301      	movs	r3, #1
 8003080:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8003082:	23c8      	movs	r3, #200	@ 0xc8
 8003084:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8003086:	2305      	movs	r3, #5
 8003088:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800308a:	2302      	movs	r3, #2
 800308c:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800308e:	f107 0314 	add.w	r3, r7, #20
 8003092:	4618      	mov	r0, r3
 8003094:	f007 f9f2 	bl	800a47c <HAL_RCCEx_PeriphCLKConfig>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 800309e:	f7ff fb63 	bl	8002768 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	4b44      	ldr	r3, [pc, #272]	@ (80031b8 <HAL_I2S_MspInit+0x170>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	4a43      	ldr	r2, [pc, #268]	@ (80031b8 <HAL_I2S_MspInit+0x170>)
 80030ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030b2:	4b41      	ldr	r3, [pc, #260]	@ (80031b8 <HAL_I2S_MspInit+0x170>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	4b3d      	ldr	r3, [pc, #244]	@ (80031b8 <HAL_I2S_MspInit+0x170>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c6:	4a3c      	ldr	r2, [pc, #240]	@ (80031b8 <HAL_I2S_MspInit+0x170>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ce:	4b3a      	ldr	r3, [pc, #232]	@ (80031b8 <HAL_I2S_MspInit+0x170>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	4b36      	ldr	r3, [pc, #216]	@ (80031b8 <HAL_I2S_MspInit+0x170>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e2:	4a35      	ldr	r2, [pc, #212]	@ (80031b8 <HAL_I2S_MspInit+0x170>)
 80030e4:	f043 0304 	orr.w	r3, r3, #4
 80030e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ea:	4b33      	ldr	r3, [pc, #204]	@ (80031b8 <HAL_I2S_MspInit+0x170>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030f6:	2310      	movs	r3, #16
 80030f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fa:	2302      	movs	r3, #2
 80030fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003102:	2300      	movs	r3, #0
 8003104:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003106:	2306      	movs	r3, #6
 8003108:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800310e:	4619      	mov	r1, r3
 8003110:	482a      	ldr	r0, [pc, #168]	@ (80031bc <HAL_I2S_MspInit+0x174>)
 8003112:	f001 fdb5 	bl	8004c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8003116:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800311a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311c:	2302      	movs	r3, #2
 800311e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003124:	2300      	movs	r3, #0
 8003126:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003128:	2306      	movs	r3, #6
 800312a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800312c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003130:	4619      	mov	r1, r3
 8003132:	4823      	ldr	r0, [pc, #140]	@ (80031c0 <HAL_I2S_MspInit+0x178>)
 8003134:	f001 fda4 	bl	8004c80 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8003138:	4b22      	ldr	r3, [pc, #136]	@ (80031c4 <HAL_I2S_MspInit+0x17c>)
 800313a:	4a23      	ldr	r2, [pc, #140]	@ (80031c8 <HAL_I2S_MspInit+0x180>)
 800313c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800313e:	4b21      	ldr	r3, [pc, #132]	@ (80031c4 <HAL_I2S_MspInit+0x17c>)
 8003140:	2200      	movs	r2, #0
 8003142:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003144:	4b1f      	ldr	r3, [pc, #124]	@ (80031c4 <HAL_I2S_MspInit+0x17c>)
 8003146:	2240      	movs	r2, #64	@ 0x40
 8003148:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800314a:	4b1e      	ldr	r3, [pc, #120]	@ (80031c4 <HAL_I2S_MspInit+0x17c>)
 800314c:	2200      	movs	r2, #0
 800314e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003150:	4b1c      	ldr	r3, [pc, #112]	@ (80031c4 <HAL_I2S_MspInit+0x17c>)
 8003152:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003156:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003158:	4b1a      	ldr	r3, [pc, #104]	@ (80031c4 <HAL_I2S_MspInit+0x17c>)
 800315a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800315e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003160:	4b18      	ldr	r3, [pc, #96]	@ (80031c4 <HAL_I2S_MspInit+0x17c>)
 8003162:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003166:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8003168:	4b16      	ldr	r3, [pc, #88]	@ (80031c4 <HAL_I2S_MspInit+0x17c>)
 800316a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800316e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003170:	4b14      	ldr	r3, [pc, #80]	@ (80031c4 <HAL_I2S_MspInit+0x17c>)
 8003172:	2200      	movs	r2, #0
 8003174:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003176:	4b13      	ldr	r3, [pc, #76]	@ (80031c4 <HAL_I2S_MspInit+0x17c>)
 8003178:	2204      	movs	r2, #4
 800317a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800317c:	4b11      	ldr	r3, [pc, #68]	@ (80031c4 <HAL_I2S_MspInit+0x17c>)
 800317e:	2203      	movs	r2, #3
 8003180:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003182:	4b10      	ldr	r3, [pc, #64]	@ (80031c4 <HAL_I2S_MspInit+0x17c>)
 8003184:	2200      	movs	r2, #0
 8003186:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003188:	4b0e      	ldr	r3, [pc, #56]	@ (80031c4 <HAL_I2S_MspInit+0x17c>)
 800318a:	2200      	movs	r2, #0
 800318c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800318e:	480d      	ldr	r0, [pc, #52]	@ (80031c4 <HAL_I2S_MspInit+0x17c>)
 8003190:	f001 f938 	bl	8004404 <HAL_DMA_Init>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 800319a:	f7ff fae5 	bl	8002768 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a08      	ldr	r2, [pc, #32]	@ (80031c4 <HAL_I2S_MspInit+0x17c>)
 80031a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80031a4:	4a07      	ldr	r2, [pc, #28]	@ (80031c4 <HAL_I2S_MspInit+0x17c>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80031aa:	bf00      	nop
 80031ac:	3740      	adds	r7, #64	@ 0x40
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40003c00 	.word	0x40003c00
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40020000 	.word	0x40020000
 80031c0:	40020800 	.word	0x40020800
 80031c4:	20000320 	.word	0x20000320
 80031c8:	40026088 	.word	0x40026088

080031cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a0e      	ldr	r2, [pc, #56]	@ (8003214 <HAL_TIM_Base_MspInit+0x48>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d115      	bne.n	800320a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003218 <HAL_TIM_Base_MspInit+0x4c>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003218 <HAL_TIM_Base_MspInit+0x4c>)
 80031e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003218 <HAL_TIM_Base_MspInit+0x4c>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	2019      	movs	r0, #25
 8003200:	f001 f8c9 	bl	8004396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003204:	2019      	movs	r0, #25
 8003206:	f001 f8e2 	bl	80043ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM10_MspInit 1 */

  }

}
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40014400 	.word	0x40014400
 8003218:	40023800 	.word	0x40023800

0800321c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003220:	bf00      	nop
 8003222:	e7fd      	b.n	8003220 <NMI_Handler+0x4>

08003224 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003228:	bf00      	nop
 800322a:	e7fd      	b.n	8003228 <HardFault_Handler+0x4>

0800322c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003230:	bf00      	nop
 8003232:	e7fd      	b.n	8003230 <MemManage_Handler+0x4>

08003234 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003238:	bf00      	nop
 800323a:	e7fd      	b.n	8003238 <BusFault_Handler+0x4>

0800323c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003240:	bf00      	nop
 8003242:	e7fd      	b.n	8003240 <UsageFault_Handler+0x4>

08003244 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003252:	b480      	push	{r7}
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003256:	bf00      	nop
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003272:	f000 fb05 	bl	8003880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}

0800327a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800327e:	2001      	movs	r0, #1
 8003280:	f001 ff80 	bl	8005184 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003284:	bf00      	nop
 8003286:	bd80      	pop	{r7, pc}

08003288 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800328c:	2002      	movs	r0, #2
 800328e:	f001 ff79 	bl	8005184 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}

08003296 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800329a:	2004      	movs	r0, #4
 800329c:	f001 ff72 	bl	8005184 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80032a0:	bf00      	nop
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80032a8:	4802      	ldr	r0, [pc, #8]	@ (80032b4 <DMA1_Stream5_IRQHandler+0x10>)
 80032aa:	f001 fa7f 	bl	80047ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000320 	.word	0x20000320

080032b8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80032bc:	4802      	ldr	r0, [pc, #8]	@ (80032c8 <ADC_IRQHandler+0x10>)
 80032be:	f000 fc25 	bl	8003b0c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80032c2:	bf00      	nop
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	200001e8 	.word	0x200001e8

080032cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80032d0:	4802      	ldr	r0, [pc, #8]	@ (80032dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80032d2:	f007 fb19 	bl	800a908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80032d6:	bf00      	nop
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000380 	.word	0x20000380

080032e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80032e4:	4802      	ldr	r0, [pc, #8]	@ (80032f0 <OTG_FS_IRQHandler+0x10>)
 80032e6:	f002 fa45 	bl	8005774 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200026a4 	.word	0x200026a4

080032f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032fc:	4a14      	ldr	r2, [pc, #80]	@ (8003350 <_sbrk+0x5c>)
 80032fe:	4b15      	ldr	r3, [pc, #84]	@ (8003354 <_sbrk+0x60>)
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003308:	4b13      	ldr	r3, [pc, #76]	@ (8003358 <_sbrk+0x64>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d102      	bne.n	8003316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003310:	4b11      	ldr	r3, [pc, #68]	@ (8003358 <_sbrk+0x64>)
 8003312:	4a12      	ldr	r2, [pc, #72]	@ (800335c <_sbrk+0x68>)
 8003314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003316:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <_sbrk+0x64>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4413      	add	r3, r2
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	429a      	cmp	r2, r3
 8003322:	d207      	bcs.n	8003334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003324:	f00f fec2 	bl	80130ac <__errno>
 8003328:	4603      	mov	r3, r0
 800332a:	220c      	movs	r2, #12
 800332c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800332e:	f04f 33ff 	mov.w	r3, #4294967295
 8003332:	e009      	b.n	8003348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003334:	4b08      	ldr	r3, [pc, #32]	@ (8003358 <_sbrk+0x64>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800333a:	4b07      	ldr	r3, [pc, #28]	@ (8003358 <_sbrk+0x64>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	4a05      	ldr	r2, [pc, #20]	@ (8003358 <_sbrk+0x64>)
 8003344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003346:	68fb      	ldr	r3, [r7, #12]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20020000 	.word	0x20020000
 8003354:	00000400 	.word	0x00000400
 8003358:	200007e4 	.word	0x200007e4
 800335c:	20002bd0 	.word	0x20002bd0

08003360 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003364:	4b08      	ldr	r3, [pc, #32]	@ (8003388 <SystemInit+0x28>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800336a:	4a07      	ldr	r2, [pc, #28]	@ (8003388 <SystemInit+0x28>)
 800336c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003370:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003374:	4b04      	ldr	r3, [pc, #16]	@ (8003388 <SystemInit+0x28>)
 8003376:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800337a:	609a      	str	r2, [r3, #8]
#endif
}
 800337c:	bf00      	nop
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8003394:	4b08      	ldr	r3, [pc, #32]	@ (80033b8 <PlayerInit+0x2c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	4619      	mov	r1, r3
 800339e:	2003      	movs	r0, #3
 80033a0:	f7fd f8ee 	bl	8000580 <AUDIO_OUT_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <PlayerInit+0x22>
	{
		return 1;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 80033ae:	2300      	movs	r3, #0
	}
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20000048 	.word	0x20000048

080033bc <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	71fb      	strb	r3, [r7, #7]
  int bytesread;


  f_close(&WavFile);
 80033c6:	482f      	ldr	r0, [pc, #188]	@ (8003484 <AUDIO_PLAYER_Start+0xc8>)
 80033c8:	f00e fde7 	bl	8011f9a <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 80033cc:	f7fd fd40 	bl	8000e50 <AUDIO_GetWavObjectNumber>
 80033d0:	4603      	mov	r3, r0
 80033d2:	461a      	mov	r2, r3
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	429a      	cmp	r2, r3
 80033da:	d94d      	bls.n	8003478 <AUDIO_PLAYER_Start+0xbc>
  {

	/////////////INCLUIDO POR JAVIER DIAZ-CANO////////////////////////////
	strcpy(current_song, (char *)FileList.file[idx].name);
 80033dc:	79fa      	ldrb	r2, [r7, #7]
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4413      	add	r3, r2
 80033e8:	4a27      	ldr	r2, [pc, #156]	@ (8003488 <AUDIO_PLAYER_Start+0xcc>)
 80033ea:	4413      	add	r3, r2
 80033ec:	3301      	adds	r3, #1
 80033ee:	4619      	mov	r1, r3
 80033f0:	4826      	ldr	r0, [pc, #152]	@ (800348c <AUDIO_PLAYER_Start+0xd0>)
 80033f2:	f00f fe87 	bl	8013104 <strcpy>
    /////////////////////////////////////////////////////////////////////

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 80033f6:	79fa      	ldrb	r2, [r7, #7]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4413      	add	r3, r2
 8003402:	4a21      	ldr	r2, [pc, #132]	@ (8003488 <AUDIO_PLAYER_Start+0xcc>)
 8003404:	4413      	add	r3, r2
 8003406:	3301      	adds	r3, #1
 8003408:	2201      	movs	r2, #1
 800340a:	4619      	mov	r1, r3
 800340c:	481d      	ldr	r0, [pc, #116]	@ (8003484 <AUDIO_PLAYER_Start+0xc8>)
 800340e:	f00e fa4d 	bl	80118ac <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8003412:	f107 030c 	add.w	r3, r7, #12
 8003416:	222c      	movs	r2, #44	@ 0x2c
 8003418:	491d      	ldr	r1, [pc, #116]	@ (8003490 <AUDIO_PLAYER_Start+0xd4>)
 800341a:	481a      	ldr	r0, [pc, #104]	@ (8003484 <AUDIO_PLAYER_Start+0xc8>)
 800341c:	f00e fc00 	bl	8011c20 <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 8003420:	4b1b      	ldr	r3, [pc, #108]	@ (8003490 <AUDIO_PLAYER_Start+0xd4>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ffb1 	bl	800338c <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 800342a:	4b1a      	ldr	r3, [pc, #104]	@ (8003494 <AUDIO_PLAYER_Start+0xd8>)
 800342c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 8003434:	2100      	movs	r1, #0
 8003436:	4813      	ldr	r0, [pc, #76]	@ (8003484 <AUDIO_PLAYER_Start+0xc8>)
 8003438:	f00e fdd9 	bl	8011fee <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 800343c:	f107 030c 	add.w	r3, r7, #12
 8003440:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003444:	4913      	ldr	r1, [pc, #76]	@ (8003494 <AUDIO_PLAYER_Start+0xd8>)
 8003446:	480f      	ldr	r0, [pc, #60]	@ (8003484 <AUDIO_PLAYER_Start+0xc8>)
 8003448:	f00e fbea 	bl	8011c20 <f_read>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d112      	bne.n	8003478 <AUDIO_PLAYER_Start+0xbc>
    {
      AudioState = AUDIO_STATE_PLAY;
 8003452:	4b11      	ldr	r3, [pc, #68]	@ (8003498 <AUDIO_PLAYER_Start+0xdc>)
 8003454:	2203      	movs	r2, #3
 8003456:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00c      	beq.n	8003478 <AUDIO_PLAYER_Start+0xbc>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 800345e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003462:	480c      	ldr	r0, [pc, #48]	@ (8003494 <AUDIO_PLAYER_Start+0xd8>)
 8003464:	f7fd f8da 	bl	800061c <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	461a      	mov	r2, r3
 800346c:	4b09      	ldr	r3, [pc, #36]	@ (8003494 <AUDIO_PLAYER_Start+0xd8>)
 800346e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003472:	605a      	str	r2, [r3, #4]
          return AUDIO_ERROR_NONE;
 8003474:	2300      	movs	r3, #0
 8003476:	e000      	b.n	800347a <AUDIO_PLAYER_Start+0xbe>
        }
      }
  }


  return AUDIO_ERROR_IO;
 8003478:	2301      	movs	r3, #1
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20001c24 	.word	0x20001c24
 8003488:	2000181c 	.word	0x2000181c
 800348c:	200017f4 	.word	0x200017f4
 8003490:	20001bf8 	.word	0x20001bf8
 8003494:	200007e8 	.word	0x200007e8
 8003498:	200017f0 	.word	0x200017f0

0800349c <get_name>:


///// INCLUIDO POR JAVIER DIAZ-CANO ///////////////////////////////////////////////////
char* get_name(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
    return current_song;  // Devuelve el nombre de la cancion en reproduccion
 80034a0:	4b02      	ldr	r3, [pc, #8]	@ (80034ac <get_name+0x10>)
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	200017f4 	.word	0x200017f4

080034b0 <quitar_extension>:

char* quitar_extension(const char* cad)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
    int tam = strlen(cad);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7fc fe91 	bl	80001e0 <strlen>
 80034be:	4603      	mov	r3, r0
 80034c0:	60fb      	str	r3, [r7, #12]
    char* result = malloc(tam + 1); // Reserva memoria dinamica
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3301      	adds	r3, #1
 80034c6:	4618      	mov	r0, r3
 80034c8:	f00f fcd0 	bl	8012e6c <malloc>
 80034cc:	4603      	mov	r3, r0
 80034ce:	60bb      	str	r3, [r7, #8]
    strcpy(result, cad);            // Copia la cadena original
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	68b8      	ldr	r0, [r7, #8]
 80034d4:	f00f fe16 	bl	8013104 <strcpy>
    result[tam - 4] = '\0';         // Reemplaza la extension con '\0' (elimina los ultimos 4 caracteres ".wav")
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3b04      	subs	r3, #4
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	4413      	add	r3, r2
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
    return result;
 80034e4:	68bb      	ldr	r3, [r7, #8]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop, uint32_t vol) ///// MODIFICADO POR JAVIER DIAZ-CANO
{
 80034f0:	b590      	push	{r4, r7, lr}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	6039      	str	r1, [r7, #0]
 80034fa:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	73fb      	strb	r3, [r7, #15]
  
  /////////////INCLUIDO POR JAVIER DIAZ-CANO//////////////////////////////////////////////////////////////
  uwVolume = vol;
 8003500:	4a86      	ldr	r2, [pc, #536]	@ (800371c <AUDIO_PLAYER_Process+0x22c>)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6013      	str	r3, [r2, #0]
  AUDIO_OUT_SetVolume(uwVolume);  // Actualizamos el volumen con el requerido enviado desde main.c
 8003506:	4b85      	ldr	r3, [pc, #532]	@ (800371c <AUDIO_PLAYER_Process+0x22c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	4618      	mov	r0, r3
 800350e:	f7fd f903 	bl	8000718 <AUDIO_OUT_SetVolume>
  ////////////////////////////////////////////////////////////////////////////////////////////////////////

  switch(AudioState)
 8003512:	4b83      	ldr	r3, [pc, #524]	@ (8003720 <AUDIO_PLAYER_Process+0x230>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	3b03      	subs	r3, #3
 8003518:	2b0a      	cmp	r3, #10
 800351a:	f200 80f6 	bhi.w	800370a <AUDIO_PLAYER_Process+0x21a>
 800351e:	a201      	add	r2, pc, #4	@ (adr r2, 8003524 <AUDIO_PLAYER_Process+0x34>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	08003551 	.word	0x08003551
 8003528:	0800370b 	.word	0x0800370b
 800352c:	08003617 	.word	0x08003617
 8003530:	08003665 	.word	0x08003665
 8003534:	0800370b 	.word	0x0800370b
 8003538:	0800370b 	.word	0x0800370b
 800353c:	08003605 	.word	0x08003605
 8003540:	080036a7 	.word	0x080036a7
 8003544:	080036b3 	.word	0x080036b3
 8003548:	080036bf 	.word	0x080036bf
 800354c:	080036e5 	.word	0x080036e5
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8003550:	4b74      	ldr	r3, [pc, #464]	@ (8003724 <AUDIO_PLAYER_Process+0x234>)
 8003552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	4b73      	ldr	r3, [pc, #460]	@ (8003728 <AUDIO_PLAYER_Process+0x238>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	429a      	cmp	r2, r3
 800355e:	d305      	bcc.n	800356c <AUDIO_PLAYER_Process+0x7c>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8003560:	2002      	movs	r0, #2
 8003562:	f7fd f8b1 	bl	80006c8 <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 8003566:	4b6e      	ldr	r3, [pc, #440]	@ (8003720 <AUDIO_PLAYER_Process+0x230>)
 8003568:	2205      	movs	r2, #5
 800356a:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 800356c:	4b6d      	ldr	r3, [pc, #436]	@ (8003724 <AUDIO_PLAYER_Process+0x234>)
 800356e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d11e      	bne.n	80035b6 <AUDIO_PLAYER_Process+0xc6>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8003578:	f107 0308 	add.w	r3, r7, #8
 800357c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003580:	4968      	ldr	r1, [pc, #416]	@ (8003724 <AUDIO_PLAYER_Process+0x234>)
 8003582:	486a      	ldr	r0, [pc, #424]	@ (800372c <AUDIO_PLAYER_Process+0x23c>)
 8003584:	f00e fb4c 	bl	8011c20 <f_read>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d004      	beq.n	8003598 <AUDIO_PLAYER_Process+0xa8>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800358e:	2002      	movs	r0, #2
 8003590:	f7fd f89a 	bl	80006c8 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8003594:	2301      	movs	r3, #1
 8003596:	e0bc      	b.n	8003712 <AUDIO_PLAYER_Process+0x222>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8003598:	4b62      	ldr	r3, [pc, #392]	@ (8003724 <AUDIO_PLAYER_Process+0x234>)
 800359a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 80035a2:	4b60      	ldr	r3, [pc, #384]	@ (8003724 <AUDIO_PLAYER_Process+0x234>)
 80035a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4413      	add	r3, r2
 80035ae:	4a5d      	ldr	r2, [pc, #372]	@ (8003724 <AUDIO_PLAYER_Process+0x234>)
 80035b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035b4:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 80035b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003724 <AUDIO_PLAYER_Process+0x234>)
 80035b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	f040 80a5 	bne.w	800370e <AUDIO_PLAYER_Process+0x21e>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 80035c4:	f107 0308 	add.w	r3, r7, #8
 80035c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035cc:	4958      	ldr	r1, [pc, #352]	@ (8003730 <AUDIO_PLAYER_Process+0x240>)
 80035ce:	4857      	ldr	r0, [pc, #348]	@ (800372c <AUDIO_PLAYER_Process+0x23c>)
 80035d0:	f00e fb26 	bl	8011c20 <f_read>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d004      	beq.n	80035e4 <AUDIO_PLAYER_Process+0xf4>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80035da:	2002      	movs	r0, #2
 80035dc:	f7fd f874 	bl	80006c8 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 80035e0:	2301      	movs	r3, #1
 80035e2:	e096      	b.n	8003712 <AUDIO_PLAYER_Process+0x222>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 80035e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003724 <AUDIO_PLAYER_Process+0x234>)
 80035e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035ea:	2200      	movs	r2, #0
 80035ec:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 80035ee:	4b4d      	ldr	r3, [pc, #308]	@ (8003724 <AUDIO_PLAYER_Process+0x234>)
 80035f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	4413      	add	r3, r2
 80035fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003724 <AUDIO_PLAYER_Process+0x234>)
 80035fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003600:	6053      	str	r3, [r2, #4]
    }
    break;
 8003602:	e084      	b.n	800370e <AUDIO_PLAYER_Process+0x21e>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8003604:	2002      	movs	r0, #2
 8003606:	f7fd f85f 	bl	80006c8 <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 800360a:	4b45      	ldr	r3, [pc, #276]	@ (8003720 <AUDIO_PLAYER_Process+0x230>)
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
    break;
 8003614:	e07c      	b.n	8003710 <AUDIO_PLAYER_Process+0x220>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 8003616:	4b47      	ldr	r3, [pc, #284]	@ (8003734 <AUDIO_PLAYER_Process+0x244>)
 8003618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800361c:	b29b      	uxth	r3, r3
 800361e:	3301      	adds	r3, #1
 8003620:	b29b      	uxth	r3, r3
 8003622:	b21a      	sxth	r2, r3
 8003624:	4b43      	ldr	r3, [pc, #268]	@ (8003734 <AUDIO_PLAYER_Process+0x244>)
 8003626:	801a      	strh	r2, [r3, #0]
 8003628:	4b42      	ldr	r3, [pc, #264]	@ (8003734 <AUDIO_PLAYER_Process+0x244>)
 800362a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800362e:	461c      	mov	r4, r3
 8003630:	f7fd fc0e 	bl	8000e50 <AUDIO_GetWavObjectNumber>
 8003634:	4603      	mov	r3, r0
 8003636:	429c      	cmp	r4, r3
 8003638:	db09      	blt.n	800364e <AUDIO_PLAYER_Process+0x15e>
    {
    	if (isLoop)
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <AUDIO_PLAYER_Process+0x158>
    	{
    		FilePos = 0;
 8003640:	4b3c      	ldr	r3, [pc, #240]	@ (8003734 <AUDIO_PLAYER_Process+0x244>)
 8003642:	2200      	movs	r2, #0
 8003644:	801a      	strh	r2, [r3, #0]
 8003646:	e002      	b.n	800364e <AUDIO_PLAYER_Process+0x15e>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8003648:	4b35      	ldr	r3, [pc, #212]	@ (8003720 <AUDIO_PLAYER_Process+0x230>)
 800364a:	2209      	movs	r2, #9
 800364c:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800364e:	2002      	movs	r0, #2
 8003650:	f7fd f83a 	bl	80006c8 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8003654:	4b37      	ldr	r3, [pc, #220]	@ (8003734 <AUDIO_PLAYER_Process+0x244>)
 8003656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fead 	bl	80033bc <AUDIO_PLAYER_Start>
    break;    
 8003662:	e055      	b.n	8003710 <AUDIO_PLAYER_Process+0x220>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8003664:	4b33      	ldr	r3, [pc, #204]	@ (8003734 <AUDIO_PLAYER_Process+0x244>)
 8003666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29b      	uxth	r3, r3
 8003670:	b21a      	sxth	r2, r3
 8003672:	4b30      	ldr	r3, [pc, #192]	@ (8003734 <AUDIO_PLAYER_Process+0x244>)
 8003674:	801a      	strh	r2, [r3, #0]
 8003676:	4b2f      	ldr	r3, [pc, #188]	@ (8003734 <AUDIO_PLAYER_Process+0x244>)
 8003678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800367c:	2b00      	cmp	r3, #0
 800367e:	da07      	bge.n	8003690 <AUDIO_PLAYER_Process+0x1a0>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8003680:	f7fd fbe6 	bl	8000e50 <AUDIO_GetWavObjectNumber>
 8003684:	4603      	mov	r3, r0
 8003686:	3b01      	subs	r3, #1
 8003688:	b29b      	uxth	r3, r3
 800368a:	b21a      	sxth	r2, r3
 800368c:	4b29      	ldr	r3, [pc, #164]	@ (8003734 <AUDIO_PLAYER_Process+0x244>)
 800368e:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8003690:	2002      	movs	r0, #2
 8003692:	f7fd f819 	bl	80006c8 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8003696:	4b27      	ldr	r3, [pc, #156]	@ (8003734 <AUDIO_PLAYER_Process+0x244>)
 8003698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fe8c 	bl	80033bc <AUDIO_PLAYER_Start>
    break;   
 80036a4:	e034      	b.n	8003710 <AUDIO_PLAYER_Process+0x220>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 80036a6:	f7fc ffe3 	bl	8000670 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 80036aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003720 <AUDIO_PLAYER_Process+0x230>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	701a      	strb	r2, [r3, #0]
    break;
 80036b0:	e02e      	b.n	8003710 <AUDIO_PLAYER_Process+0x220>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 80036b2:	f7fc fff3 	bl	800069c <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 80036b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003720 <AUDIO_PLAYER_Process+0x230>)
 80036b8:	2203      	movs	r2, #3
 80036ba:	701a      	strb	r2, [r3, #0]
    break;
 80036bc:	e028      	b.n	8003710 <AUDIO_PLAYER_Process+0x220>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 80036be:	4b17      	ldr	r3, [pc, #92]	@ (800371c <AUDIO_PLAYER_Process+0x22c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b5a      	cmp	r3, #90	@ 0x5a
 80036c4:	d804      	bhi.n	80036d0 <AUDIO_PLAYER_Process+0x1e0>
    {
      uwVolume += 10;
 80036c6:	4b15      	ldr	r3, [pc, #84]	@ (800371c <AUDIO_PLAYER_Process+0x22c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	330a      	adds	r3, #10
 80036cc:	4a13      	ldr	r2, [pc, #76]	@ (800371c <AUDIO_PLAYER_Process+0x22c>)
 80036ce:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 80036d0:	4b12      	ldr	r3, [pc, #72]	@ (800371c <AUDIO_PLAYER_Process+0x22c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fd f81e 	bl	8000718 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 80036dc:	4b10      	ldr	r3, [pc, #64]	@ (8003720 <AUDIO_PLAYER_Process+0x230>)
 80036de:	2203      	movs	r2, #3
 80036e0:	701a      	strb	r2, [r3, #0]
    break;
 80036e2:	e015      	b.n	8003710 <AUDIO_PLAYER_Process+0x220>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 80036e4:	4b0d      	ldr	r3, [pc, #52]	@ (800371c <AUDIO_PLAYER_Process+0x22c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b09      	cmp	r3, #9
 80036ea:	d904      	bls.n	80036f6 <AUDIO_PLAYER_Process+0x206>
    {
      uwVolume -= 10;
 80036ec:	4b0b      	ldr	r3, [pc, #44]	@ (800371c <AUDIO_PLAYER_Process+0x22c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3b0a      	subs	r3, #10
 80036f2:	4a0a      	ldr	r2, [pc, #40]	@ (800371c <AUDIO_PLAYER_Process+0x22c>)
 80036f4:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 80036f6:	4b09      	ldr	r3, [pc, #36]	@ (800371c <AUDIO_PLAYER_Process+0x22c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fd f80b 	bl	8000718 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8003702:	4b07      	ldr	r3, [pc, #28]	@ (8003720 <AUDIO_PLAYER_Process+0x230>)
 8003704:	2203      	movs	r2, #3
 8003706:	701a      	strb	r2, [r3, #0]
    break;
 8003708:	e002      	b.n	8003710 <AUDIO_PLAYER_Process+0x220>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 800370a:	bf00      	nop
 800370c:	e000      	b.n	8003710 <AUDIO_PLAYER_Process+0x220>
    break;
 800370e:	bf00      	nop
  }
  return audio_error;
 8003710:	7bfb      	ldrb	r3, [r7, #15]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	bd90      	pop	{r4, r7, pc}
 800371a:	bf00      	nop
 800371c:	20000048 	.word	0x20000048
 8003720:	200017f0 	.word	0x200017f0
 8003724:	200007e8 	.word	0x200007e8
 8003728:	20001bf8 	.word	0x20001bf8
 800372c:	20001c24 	.word	0x20001c24
 8003730:	20000fe8 	.word	0x20000fe8
 8003734:	200017f2 	.word	0x200017f2

08003738 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 800373c:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b03      	cmp	r3, #3
 8003742:	d104      	bne.n	800374e <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8003744:	4b05      	ldr	r3, [pc, #20]	@ (800375c <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8003746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800374a:	2202      	movs	r2, #2
 800374c:	701a      	strb	r2, [r3, #0]
  }
}
 800374e:	bf00      	nop
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	200017f0 	.word	0x200017f0
 800375c:	200007e8 	.word	0x200007e8

08003760 <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8003764:	4b06      	ldr	r3, [pc, #24]	@ (8003780 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b03      	cmp	r3, #3
 800376a:	d104      	bne.n	8003776 <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 800376c:	4b05      	ldr	r3, [pc, #20]	@ (8003784 <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 800376e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003772:	2201      	movs	r2, #1
 8003774:	701a      	strb	r2, [r3, #0]
  }
}
 8003776:	bf00      	nop
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	200017f0 	.word	0x200017f0
 8003784:	200007e8 	.word	0x200007e8

08003788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003788:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800378c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800378e:	e003      	b.n	8003798 <LoopCopyDataInit>

08003790 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003790:	4b0c      	ldr	r3, [pc, #48]	@ (80037c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003792:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003794:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003796:	3104      	adds	r1, #4

08003798 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003798:	480b      	ldr	r0, [pc, #44]	@ (80037c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800379a:	4b0c      	ldr	r3, [pc, #48]	@ (80037cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800379c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800379e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80037a0:	d3f6      	bcc.n	8003790 <CopyDataInit>
  ldr  r2, =_sbss
 80037a2:	4a0b      	ldr	r2, [pc, #44]	@ (80037d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80037a4:	e002      	b.n	80037ac <LoopFillZerobss>

080037a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80037a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037a8:	f842 3b04 	str.w	r3, [r2], #4

080037ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037ac:	4b09      	ldr	r3, [pc, #36]	@ (80037d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80037ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037b0:	d3f9      	bcc.n	80037a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037b2:	f7ff fdd5 	bl	8003360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037b6:	f00f fc7f 	bl	80130b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037ba:	f7fe fd53 	bl	8002264 <main>
  bx  lr    
 80037be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80037c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80037c4:	08018f3c 	.word	0x08018f3c
  ldr  r0, =_sdata
 80037c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037cc:	200000c4 	.word	0x200000c4
  ldr  r2, =_sbss
 80037d0:	200000c4 	.word	0x200000c4
  ldr  r3, = _ebss
 80037d4:	20002bcc 	.word	0x20002bcc

080037d8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037d8:	e7fe      	b.n	80037d8 <DMA1_Stream0_IRQHandler>
	...

080037dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037e0:	4b0e      	ldr	r3, [pc, #56]	@ (800381c <HAL_Init+0x40>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a0d      	ldr	r2, [pc, #52]	@ (800381c <HAL_Init+0x40>)
 80037e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037ec:	4b0b      	ldr	r3, [pc, #44]	@ (800381c <HAL_Init+0x40>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a0a      	ldr	r2, [pc, #40]	@ (800381c <HAL_Init+0x40>)
 80037f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037f8:	4b08      	ldr	r3, [pc, #32]	@ (800381c <HAL_Init+0x40>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a07      	ldr	r2, [pc, #28]	@ (800381c <HAL_Init+0x40>)
 80037fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003804:	2003      	movs	r0, #3
 8003806:	f000 fdbb 	bl	8004380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800380a:	2000      	movs	r0, #0
 800380c:	f000 f808 	bl	8003820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003810:	f7ff fade 	bl	8002dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40023c00 	.word	0x40023c00

08003820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003828:	4b12      	ldr	r3, [pc, #72]	@ (8003874 <HAL_InitTick+0x54>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	4b12      	ldr	r3, [pc, #72]	@ (8003878 <HAL_InitTick+0x58>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	4619      	mov	r1, r3
 8003832:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003836:	fbb3 f3f1 	udiv	r3, r3, r1
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fdd3 	bl	80043ea <HAL_SYSTICK_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e00e      	b.n	800386c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b0f      	cmp	r3, #15
 8003852:	d80a      	bhi.n	800386a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003854:	2200      	movs	r2, #0
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	f04f 30ff 	mov.w	r0, #4294967295
 800385c:	f000 fd9b 	bl	8004396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003860:	4a06      	ldr	r2, [pc, #24]	@ (800387c <HAL_InitTick+0x5c>)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	e000      	b.n	800386c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000044 	.word	0x20000044
 8003878:	20000050 	.word	0x20000050
 800387c:	2000004c 	.word	0x2000004c

08003880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003884:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <HAL_IncTick+0x20>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <HAL_IncTick+0x24>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4413      	add	r3, r2
 8003890:	4a04      	ldr	r2, [pc, #16]	@ (80038a4 <HAL_IncTick+0x24>)
 8003892:	6013      	str	r3, [r2, #0]
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20000050 	.word	0x20000050
 80038a4:	20001e54 	.word	0x20001e54

080038a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return uwTick;
 80038ac:	4b03      	ldr	r3, [pc, #12]	@ (80038bc <HAL_GetTick+0x14>)
 80038ae:	681b      	ldr	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20001e54 	.word	0x20001e54

080038c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038c8:	f7ff ffee 	bl	80038a8 <HAL_GetTick>
 80038cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d005      	beq.n	80038e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038da:	4b0a      	ldr	r3, [pc, #40]	@ (8003904 <HAL_Delay+0x44>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038e6:	bf00      	nop
 80038e8:	f7ff ffde 	bl	80038a8 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d8f7      	bhi.n	80038e8 <HAL_Delay+0x28>
  {
  }
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000050 	.word	0x20000050

08003908 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e033      	b.n	8003986 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d109      	bne.n	800393a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff fa7a 	bl	8002e20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b00      	cmp	r3, #0
 8003944:	d118      	bne.n	8003978 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800394e:	f023 0302 	bic.w	r3, r3, #2
 8003952:	f043 0202 	orr.w	r2, r3, #2
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fb3a 	bl	8003fd4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	f023 0303 	bic.w	r3, r3, #3
 800396e:	f043 0201 	orr.w	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	641a      	str	r2, [r3, #64]	@ 0x40
 8003976:	e001      	b.n	800397c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003984:	7bfb      	ldrb	r3, [r7, #15]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_ADC_Start_IT+0x1a>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e0a1      	b.n	8003aee <HAL_ADC_Start_IT+0x15e>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d018      	beq.n	80039f2 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039d0:	4b4a      	ldr	r3, [pc, #296]	@ (8003afc <HAL_ADC_Start_IT+0x16c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003b00 <HAL_ADC_Start_IT+0x170>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	0c9a      	lsrs	r2, r3, #18
 80039dc:	4613      	mov	r3, r2
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	4413      	add	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80039e4:	e002      	b.n	80039ec <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f9      	bne.n	80039e6 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d169      	bne.n	8003ad4 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a04:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a2a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a3e:	d106      	bne.n	8003a4e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a44:	f023 0206 	bic.w	r2, r3, #6
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	645a      	str	r2, [r3, #68]	@ 0x44
 8003a4c:	e002      	b.n	8003a54 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a5c:	4b29      	ldr	r3, [pc, #164]	@ (8003b04 <HAL_ADC_Start_IT+0x174>)
 8003a5e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003a68:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a78:	f043 0320 	orr.w	r3, r3, #32
 8003a7c:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10f      	bne.n	8003aaa <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d129      	bne.n	8003aec <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	e020      	b.n	8003aec <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a16      	ldr	r2, [pc, #88]	@ (8003b08 <HAL_ADC_Start_IT+0x178>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d11b      	bne.n	8003aec <HAL_ADC_Start_IT+0x15c>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d114      	bne.n	8003aec <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003ad0:	609a      	str	r2, [r3, #8]
 8003ad2:	e00b      	b.n	8003aec <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad8:	f043 0210 	orr.w	r2, r3, #16
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae4:	f043 0201 	orr.w	r2, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	20000044 	.word	0x20000044
 8003b00:	431bde83 	.word	0x431bde83
 8003b04:	40012300 	.word	0x40012300
 8003b08:	40012000 	.word	0x40012000

08003b0c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	2300      	movs	r3, #0
 8003b1a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d049      	beq.n	8003bd6 <HAL_ADC_IRQHandler+0xca>
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d046      	beq.n	8003bd6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d105      	bne.n	8003b60 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d12b      	bne.n	8003bc6 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d127      	bne.n	8003bc6 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d006      	beq.n	8003b92 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d119      	bne.n	8003bc6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0220 	bic.w	r2, r2, #32
 8003ba0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d105      	bne.n	8003bc6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	f043 0201 	orr.w	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fd fcaa 	bl	8001520 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0212 	mvn.w	r2, #18
 8003bd4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d057      	beq.n	8003c9c <HAL_ADC_IRQHandler+0x190>
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d054      	beq.n	8003c9c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d105      	bne.n	8003c0a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d139      	bne.n	8003c8c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d006      	beq.n	8003c34 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d12b      	bne.n	8003c8c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d124      	bne.n	8003c8c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d11d      	bne.n	8003c8c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d119      	bne.n	8003c8c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c66:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	f043 0201 	orr.w	r2, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fa9d 	bl	80041cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f06f 020c 	mvn.w	r2, #12
 8003c9a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003caa:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d017      	beq.n	8003ce2 <HAL_ADC_IRQHandler+0x1d6>
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d014      	beq.n	8003ce2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d10d      	bne.n	8003ce2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f837 	bl	8003d46 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0201 	mvn.w	r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cf0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d015      	beq.n	8003d24 <HAL_ADC_IRQHandler+0x218>
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d012      	beq.n	8003d24 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d02:	f043 0202 	orr.w	r2, r3, #2
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f06f 0220 	mvn.w	r2, #32
 8003d12:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f820 	bl	8003d5a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f06f 0220 	mvn.w	r2, #32
 8003d22:	601a      	str	r2, [r3, #0]
  }
}
 8003d24:	bf00      	nop
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x1c>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e113      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x244>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b09      	cmp	r3, #9
 8003d9a:	d925      	bls.n	8003de8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68d9      	ldr	r1, [r3, #12]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	4613      	mov	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	4413      	add	r3, r2
 8003db0:	3b1e      	subs	r3, #30
 8003db2:	2207      	movs	r2, #7
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43da      	mvns	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	400a      	ands	r2, r1
 8003dc0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68d9      	ldr	r1, [r3, #12]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	4403      	add	r3, r0
 8003dda:	3b1e      	subs	r3, #30
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	60da      	str	r2, [r3, #12]
 8003de6:	e022      	b.n	8003e2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6919      	ldr	r1, [r3, #16]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	461a      	mov	r2, r3
 8003df6:	4613      	mov	r3, r2
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	4413      	add	r3, r2
 8003dfc:	2207      	movs	r2, #7
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43da      	mvns	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	400a      	ands	r2, r1
 8003e0a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6919      	ldr	r1, [r3, #16]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	4403      	add	r3, r0
 8003e24:	409a      	lsls	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b06      	cmp	r3, #6
 8003e34:	d824      	bhi.n	8003e80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	3b05      	subs	r3, #5
 8003e48:	221f      	movs	r2, #31
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43da      	mvns	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	400a      	ands	r2, r1
 8003e56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	4618      	mov	r0, r3
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	3b05      	subs	r3, #5
 8003e72:	fa00 f203 	lsl.w	r2, r0, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e7e:	e04c      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b0c      	cmp	r3, #12
 8003e86:	d824      	bhi.n	8003ed2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	3b23      	subs	r3, #35	@ 0x23
 8003e9a:	221f      	movs	r2, #31
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	43da      	mvns	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	400a      	ands	r2, r1
 8003ea8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3b23      	subs	r3, #35	@ 0x23
 8003ec4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ed0:	e023      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	3b41      	subs	r3, #65	@ 0x41
 8003ee4:	221f      	movs	r2, #31
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43da      	mvns	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	400a      	ands	r2, r1
 8003ef2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	4618      	mov	r0, r3
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3b41      	subs	r3, #65	@ 0x41
 8003f0e:	fa00 f203 	lsl.w	r2, r0, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f1a:	4b29      	ldr	r3, [pc, #164]	@ (8003fc0 <HAL_ADC_ConfigChannel+0x250>)
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a28      	ldr	r2, [pc, #160]	@ (8003fc4 <HAL_ADC_ConfigChannel+0x254>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d10f      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x1d8>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b12      	cmp	r3, #18
 8003f2e:	d10b      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003fc4 <HAL_ADC_ConfigChannel+0x254>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d12b      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x23a>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1c      	ldr	r2, [pc, #112]	@ (8003fc8 <HAL_ADC_ConfigChannel+0x258>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <HAL_ADC_ConfigChannel+0x1f4>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b11      	cmp	r3, #17
 8003f62:	d122      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a11      	ldr	r2, [pc, #68]	@ (8003fc8 <HAL_ADC_ConfigChannel+0x258>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d111      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f86:	4b11      	ldr	r3, [pc, #68]	@ (8003fcc <HAL_ADC_ConfigChannel+0x25c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a11      	ldr	r2, [pc, #68]	@ (8003fd0 <HAL_ADC_ConfigChannel+0x260>)
 8003f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f90:	0c9a      	lsrs	r2, r3, #18
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003f9c:	e002      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f9      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	40012300 	.word	0x40012300
 8003fc4:	40012000 	.word	0x40012000
 8003fc8:	10000012 	.word	0x10000012
 8003fcc:	20000044 	.word	0x20000044
 8003fd0:	431bde83 	.word	0x431bde83

08003fd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fdc:	4b79      	ldr	r3, [pc, #484]	@ (80041c4 <ADC_Init+0x1f0>)
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004008:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	021a      	lsls	r2, r3, #8
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800402c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6859      	ldr	r1, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800404e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6899      	ldr	r1, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004066:	4a58      	ldr	r2, [pc, #352]	@ (80041c8 <ADC_Init+0x1f4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d022      	beq.n	80040b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800407a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6899      	ldr	r1, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800409c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6899      	ldr	r1, [r3, #8]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	e00f      	b.n	80040d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80040c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80040d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0202 	bic.w	r2, r2, #2
 80040e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6899      	ldr	r1, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	7e1b      	ldrb	r3, [r3, #24]
 80040ec:	005a      	lsls	r2, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01b      	beq.n	8004138 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800410e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800411e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6859      	ldr	r1, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412a:	3b01      	subs	r3, #1
 800412c:	035a      	lsls	r2, r3, #13
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
 8004136:	e007      	b.n	8004148 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004146:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004156:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	3b01      	subs	r3, #1
 8004164:	051a      	lsls	r2, r3, #20
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800417c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6899      	ldr	r1, [r3, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800418a:	025a      	lsls	r2, r3, #9
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6899      	ldr	r1, [r3, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	029a      	lsls	r2, r3, #10
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	609a      	str	r2, [r3, #8]
}
 80041b8:	bf00      	nop
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	40012300 	.word	0x40012300
 80041c8:	0f000001 	.word	0x0f000001

080041cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004224 <__NVIC_SetPriorityGrouping+0x44>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041fc:	4013      	ands	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800420c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004212:	4a04      	ldr	r2, [pc, #16]	@ (8004224 <__NVIC_SetPriorityGrouping+0x44>)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	60d3      	str	r3, [r2, #12]
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	e000ed00 	.word	0xe000ed00

08004228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800422c:	4b04      	ldr	r3, [pc, #16]	@ (8004240 <__NVIC_GetPriorityGrouping+0x18>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	0a1b      	lsrs	r3, r3, #8
 8004232:	f003 0307 	and.w	r3, r3, #7
}
 8004236:	4618      	mov	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	e000ed00 	.word	0xe000ed00

08004244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800424e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004252:	2b00      	cmp	r3, #0
 8004254:	db0b      	blt.n	800426e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	f003 021f 	and.w	r2, r3, #31
 800425c:	4907      	ldr	r1, [pc, #28]	@ (800427c <__NVIC_EnableIRQ+0x38>)
 800425e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	2001      	movs	r0, #1
 8004266:	fa00 f202 	lsl.w	r2, r0, r2
 800426a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	e000e100 	.word	0xe000e100

08004280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	6039      	str	r1, [r7, #0]
 800428a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800428c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004290:	2b00      	cmp	r3, #0
 8004292:	db0a      	blt.n	80042aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	b2da      	uxtb	r2, r3
 8004298:	490c      	ldr	r1, [pc, #48]	@ (80042cc <__NVIC_SetPriority+0x4c>)
 800429a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429e:	0112      	lsls	r2, r2, #4
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	440b      	add	r3, r1
 80042a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042a8:	e00a      	b.n	80042c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	4908      	ldr	r1, [pc, #32]	@ (80042d0 <__NVIC_SetPriority+0x50>)
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	3b04      	subs	r3, #4
 80042b8:	0112      	lsls	r2, r2, #4
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	440b      	add	r3, r1
 80042be:	761a      	strb	r2, [r3, #24]
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	e000e100 	.word	0xe000e100
 80042d0:	e000ed00 	.word	0xe000ed00

080042d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b089      	sub	sp, #36	@ 0x24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f1c3 0307 	rsb	r3, r3, #7
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	bf28      	it	cs
 80042f2:	2304      	movcs	r3, #4
 80042f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	3304      	adds	r3, #4
 80042fa:	2b06      	cmp	r3, #6
 80042fc:	d902      	bls.n	8004304 <NVIC_EncodePriority+0x30>
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	3b03      	subs	r3, #3
 8004302:	e000      	b.n	8004306 <NVIC_EncodePriority+0x32>
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004308:	f04f 32ff 	mov.w	r2, #4294967295
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43da      	mvns	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	401a      	ands	r2, r3
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800431c:	f04f 31ff 	mov.w	r1, #4294967295
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	fa01 f303 	lsl.w	r3, r1, r3
 8004326:	43d9      	mvns	r1, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800432c:	4313      	orrs	r3, r2
         );
}
 800432e:	4618      	mov	r0, r3
 8004330:	3724      	adds	r7, #36	@ 0x24
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
	...

0800433c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3b01      	subs	r3, #1
 8004348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800434c:	d301      	bcc.n	8004352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800434e:	2301      	movs	r3, #1
 8004350:	e00f      	b.n	8004372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004352:	4a0a      	ldr	r2, [pc, #40]	@ (800437c <SysTick_Config+0x40>)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3b01      	subs	r3, #1
 8004358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800435a:	210f      	movs	r1, #15
 800435c:	f04f 30ff 	mov.w	r0, #4294967295
 8004360:	f7ff ff8e 	bl	8004280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004364:	4b05      	ldr	r3, [pc, #20]	@ (800437c <SysTick_Config+0x40>)
 8004366:	2200      	movs	r2, #0
 8004368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800436a:	4b04      	ldr	r3, [pc, #16]	@ (800437c <SysTick_Config+0x40>)
 800436c:	2207      	movs	r2, #7
 800436e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	e000e010 	.word	0xe000e010

08004380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7ff ff29 	bl	80041e0 <__NVIC_SetPriorityGrouping>
}
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004396:	b580      	push	{r7, lr}
 8004398:	b086      	sub	sp, #24
 800439a:	af00      	add	r7, sp, #0
 800439c:	4603      	mov	r3, r0
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043a8:	f7ff ff3e 	bl	8004228 <__NVIC_GetPriorityGrouping>
 80043ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	6978      	ldr	r0, [r7, #20]
 80043b4:	f7ff ff8e 	bl	80042d4 <NVIC_EncodePriority>
 80043b8:	4602      	mov	r2, r0
 80043ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043be:	4611      	mov	r1, r2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff ff5d 	bl	8004280 <__NVIC_SetPriority>
}
 80043c6:	bf00      	nop
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b082      	sub	sp, #8
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	4603      	mov	r3, r0
 80043d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff ff31 	bl	8004244 <__NVIC_EnableIRQ>
}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff ffa2 	bl	800433c <SysTick_Config>
 80043f8:	4603      	mov	r3, r0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004410:	f7ff fa4a 	bl	80038a8 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e099      	b.n	8004554 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0201 	bic.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004440:	e00f      	b.n	8004462 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004442:	f7ff fa31 	bl	80038a8 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b05      	cmp	r3, #5
 800444e:	d908      	bls.n	8004462 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2203      	movs	r2, #3
 800445a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e078      	b.n	8004554 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e8      	bne.n	8004442 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4b38      	ldr	r3, [pc, #224]	@ (800455c <HAL_DMA_Init+0x158>)
 800447c:	4013      	ands	r3, r2
 800447e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800448e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800449a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d107      	bne.n	80044cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c4:	4313      	orrs	r3, r2
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f023 0307 	bic.w	r3, r3, #7
 80044e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d117      	bne.n	8004526 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00e      	beq.n	8004526 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fb3d 	bl	8004b88 <DMA_CheckFifoParam>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d008      	beq.n	8004526 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2240      	movs	r2, #64	@ 0x40
 8004518:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004522:	2301      	movs	r3, #1
 8004524:	e016      	b.n	8004554 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 faf4 	bl	8004b1c <DMA_CalcBaseAndBitshift>
 8004534:	4603      	mov	r3, r0
 8004536:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453c:	223f      	movs	r2, #63	@ 0x3f
 800453e:	409a      	lsls	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	f010803f 	.word	0xf010803f

08004560 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e050      	b.n	8004614 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d101      	bne.n	8004582 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800457e:	2302      	movs	r3, #2
 8004580:	e048      	b.n	8004614 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0201 	bic.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2200      	movs	r2, #0
 80045a0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2200      	movs	r2, #0
 80045a8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2200      	movs	r2, #0
 80045b8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2221      	movs	r2, #33	@ 0x21
 80045c0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 faaa 	bl	8004b1c <DMA_CalcBaseAndBitshift>
 80045c8:	4603      	mov	r3, r0
 80045ca:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f4:	223f      	movs	r2, #63	@ 0x3f
 80045f6:	409a      	lsls	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004632:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_DMA_Start_IT+0x26>
 800463e:	2302      	movs	r3, #2
 8004640:	e040      	b.n	80046c4 <HAL_DMA_Start_IT+0xa8>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b01      	cmp	r3, #1
 8004654:	d12f      	bne.n	80046b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2202      	movs	r2, #2
 800465a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 fa28 	bl	8004ac0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004674:	223f      	movs	r2, #63	@ 0x3f
 8004676:	409a      	lsls	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0216 	orr.w	r2, r2, #22
 800468a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0208 	orr.w	r2, r2, #8
 80046a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	e005      	b.n	80046c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046be:	2302      	movs	r3, #2
 80046c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046da:	f7ff f8e5 	bl	80038a8 <HAL_GetTick>
 80046de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d008      	beq.n	80046fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2280      	movs	r2, #128	@ 0x80
 80046f0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e052      	b.n	80047a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0216 	bic.w	r2, r2, #22
 800470c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695a      	ldr	r2, [r3, #20]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800471c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d103      	bne.n	800472e <HAL_DMA_Abort+0x62>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800472a:	2b00      	cmp	r3, #0
 800472c:	d007      	beq.n	800473e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0208 	bic.w	r2, r2, #8
 800473c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800474e:	e013      	b.n	8004778 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004750:	f7ff f8aa 	bl	80038a8 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b05      	cmp	r3, #5
 800475c:	d90c      	bls.n	8004778 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2220      	movs	r2, #32
 8004762:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2203      	movs	r2, #3
 8004768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e015      	b.n	80047a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e4      	bne.n	8004750 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800478a:	223f      	movs	r2, #63	@ 0x3f
 800478c:	409a      	lsls	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047b8:	4b8e      	ldr	r3, [pc, #568]	@ (80049f4 <HAL_DMA_IRQHandler+0x248>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a8e      	ldr	r2, [pc, #568]	@ (80049f8 <HAL_DMA_IRQHandler+0x24c>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	0a9b      	lsrs	r3, r3, #10
 80047c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d6:	2208      	movs	r2, #8
 80047d8:	409a      	lsls	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4013      	ands	r3, r2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d01a      	beq.n	8004818 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d013      	beq.n	8004818 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0204 	bic.w	r2, r2, #4
 80047fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004804:	2208      	movs	r2, #8
 8004806:	409a      	lsls	r2, r3
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004810:	f043 0201 	orr.w	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800481c:	2201      	movs	r2, #1
 800481e:	409a      	lsls	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4013      	ands	r3, r2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d012      	beq.n	800484e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00b      	beq.n	800484e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483a:	2201      	movs	r2, #1
 800483c:	409a      	lsls	r2, r3
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004846:	f043 0202 	orr.w	r2, r3, #2
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004852:	2204      	movs	r2, #4
 8004854:	409a      	lsls	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4013      	ands	r3, r2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d012      	beq.n	8004884 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00b      	beq.n	8004884 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004870:	2204      	movs	r2, #4
 8004872:	409a      	lsls	r2, r3
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800487c:	f043 0204 	orr.w	r2, r3, #4
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004888:	2210      	movs	r2, #16
 800488a:	409a      	lsls	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4013      	ands	r3, r2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d043      	beq.n	800491c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d03c      	beq.n	800491c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a6:	2210      	movs	r2, #16
 80048a8:	409a      	lsls	r2, r3
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d018      	beq.n	80048ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d108      	bne.n	80048dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d024      	beq.n	800491c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	4798      	blx	r3
 80048da:	e01f      	b.n	800491c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01b      	beq.n	800491c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	4798      	blx	r3
 80048ec:	e016      	b.n	800491c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d107      	bne.n	800490c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0208 	bic.w	r2, r2, #8
 800490a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004920:	2220      	movs	r2, #32
 8004922:	409a      	lsls	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4013      	ands	r3, r2
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 808f 	beq.w	8004a4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8087 	beq.w	8004a4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004942:	2220      	movs	r2, #32
 8004944:	409a      	lsls	r2, r3
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b05      	cmp	r3, #5
 8004954:	d136      	bne.n	80049c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0216 	bic.w	r2, r2, #22
 8004964:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	695a      	ldr	r2, [r3, #20]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004974:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	d103      	bne.n	8004986 <HAL_DMA_IRQHandler+0x1da>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004982:	2b00      	cmp	r3, #0
 8004984:	d007      	beq.n	8004996 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0208 	bic.w	r2, r2, #8
 8004994:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800499a:	223f      	movs	r2, #63	@ 0x3f
 800499c:	409a      	lsls	r2, r3
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d07e      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	4798      	blx	r3
        }
        return;
 80049c2:	e079      	b.n	8004ab8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d01d      	beq.n	8004a0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10d      	bne.n	80049fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d031      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	4798      	blx	r3
 80049f0:	e02c      	b.n	8004a4c <HAL_DMA_IRQHandler+0x2a0>
 80049f2:	bf00      	nop
 80049f4:	20000044 	.word	0x20000044
 80049f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d023      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	4798      	blx	r3
 8004a0c:	e01e      	b.n	8004a4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10f      	bne.n	8004a3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0210 	bic.w	r2, r2, #16
 8004a2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d032      	beq.n	8004aba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d022      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2205      	movs	r2, #5
 8004a64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0201 	bic.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d307      	bcc.n	8004a94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f2      	bne.n	8004a78 <HAL_DMA_IRQHandler+0x2cc>
 8004a92:	e000      	b.n	8004a96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d005      	beq.n	8004aba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	4798      	blx	r3
 8004ab6:	e000      	b.n	8004aba <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ab8:	bf00      	nop
    }
  }
}
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004adc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b40      	cmp	r3, #64	@ 0x40
 8004aec:	d108      	bne.n	8004b00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004afe:	e007      	b.n	8004b10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	60da      	str	r2, [r3, #12]
}
 8004b10:	bf00      	nop
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	3b10      	subs	r3, #16
 8004b2c:	4a14      	ldr	r2, [pc, #80]	@ (8004b80 <DMA_CalcBaseAndBitshift+0x64>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	091b      	lsrs	r3, r3, #4
 8004b34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b36:	4a13      	ldr	r2, [pc, #76]	@ (8004b84 <DMA_CalcBaseAndBitshift+0x68>)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d909      	bls.n	8004b5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b52:	f023 0303 	bic.w	r3, r3, #3
 8004b56:	1d1a      	adds	r2, r3, #4
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b5c:	e007      	b.n	8004b6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b66:	f023 0303 	bic.w	r3, r3, #3
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	aaaaaaab 	.word	0xaaaaaaab
 8004b84:	08018a9c 	.word	0x08018a9c

08004b88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d11f      	bne.n	8004be2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d856      	bhi.n	8004c56 <DMA_CheckFifoParam+0xce>
 8004ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb0 <DMA_CheckFifoParam+0x28>)
 8004baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bae:	bf00      	nop
 8004bb0:	08004bc1 	.word	0x08004bc1
 8004bb4:	08004bd3 	.word	0x08004bd3
 8004bb8:	08004bc1 	.word	0x08004bc1
 8004bbc:	08004c57 	.word	0x08004c57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d046      	beq.n	8004c5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bd0:	e043      	b.n	8004c5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004bda:	d140      	bne.n	8004c5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004be0:	e03d      	b.n	8004c5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bea:	d121      	bne.n	8004c30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d837      	bhi.n	8004c62 <DMA_CheckFifoParam+0xda>
 8004bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf8 <DMA_CheckFifoParam+0x70>)
 8004bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf8:	08004c09 	.word	0x08004c09
 8004bfc:	08004c0f 	.word	0x08004c0f
 8004c00:	08004c09 	.word	0x08004c09
 8004c04:	08004c21 	.word	0x08004c21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c0c:	e030      	b.n	8004c70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d025      	beq.n	8004c66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c1e:	e022      	b.n	8004c66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c24:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c28:	d11f      	bne.n	8004c6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c2e:	e01c      	b.n	8004c6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d903      	bls.n	8004c3e <DMA_CheckFifoParam+0xb6>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b03      	cmp	r3, #3
 8004c3a:	d003      	beq.n	8004c44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c3c:	e018      	b.n	8004c70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	73fb      	strb	r3, [r7, #15]
      break;
 8004c42:	e015      	b.n	8004c70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00e      	beq.n	8004c6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	73fb      	strb	r3, [r7, #15]
      break;
 8004c54:	e00b      	b.n	8004c6e <DMA_CheckFifoParam+0xe6>
      break;
 8004c56:	bf00      	nop
 8004c58:	e00a      	b.n	8004c70 <DMA_CheckFifoParam+0xe8>
      break;
 8004c5a:	bf00      	nop
 8004c5c:	e008      	b.n	8004c70 <DMA_CheckFifoParam+0xe8>
      break;
 8004c5e:	bf00      	nop
 8004c60:	e006      	b.n	8004c70 <DMA_CheckFifoParam+0xe8>
      break;
 8004c62:	bf00      	nop
 8004c64:	e004      	b.n	8004c70 <DMA_CheckFifoParam+0xe8>
      break;
 8004c66:	bf00      	nop
 8004c68:	e002      	b.n	8004c70 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c6a:	bf00      	nop
 8004c6c:	e000      	b.n	8004c70 <DMA_CheckFifoParam+0xe8>
      break;
 8004c6e:	bf00      	nop
    }
  } 
  
  return status; 
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop

08004c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b089      	sub	sp, #36	@ 0x24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c96:	2300      	movs	r3, #0
 8004c98:	61fb      	str	r3, [r7, #28]
 8004c9a:	e159      	b.n	8004f50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	4013      	ands	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	f040 8148 	bne.w	8004f4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d005      	beq.n	8004cd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d130      	bne.n	8004d34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	2203      	movs	r2, #3
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d08:	2201      	movs	r2, #1
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	43db      	mvns	r3, r3
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4013      	ands	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	091b      	lsrs	r3, r3, #4
 8004d1e:	f003 0201 	and.w	r2, r3, #1
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f003 0303 	and.w	r3, r3, #3
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d017      	beq.n	8004d70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	2203      	movs	r2, #3
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	43db      	mvns	r3, r3
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	4013      	ands	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 0303 	and.w	r3, r3, #3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d123      	bne.n	8004dc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	08da      	lsrs	r2, r3, #3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3208      	adds	r2, #8
 8004d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	220f      	movs	r2, #15
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	08da      	lsrs	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3208      	adds	r2, #8
 8004dbe:	69b9      	ldr	r1, [r7, #24]
 8004dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	2203      	movs	r2, #3
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f003 0203 	and.w	r2, r3, #3
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 80a2 	beq.w	8004f4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	4b57      	ldr	r3, [pc, #348]	@ (8004f68 <HAL_GPIO_Init+0x2e8>)
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0e:	4a56      	ldr	r2, [pc, #344]	@ (8004f68 <HAL_GPIO_Init+0x2e8>)
 8004e10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e16:	4b54      	ldr	r3, [pc, #336]	@ (8004f68 <HAL_GPIO_Init+0x2e8>)
 8004e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e22:	4a52      	ldr	r2, [pc, #328]	@ (8004f6c <HAL_GPIO_Init+0x2ec>)
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	089b      	lsrs	r3, r3, #2
 8004e28:	3302      	adds	r3, #2
 8004e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	220f      	movs	r2, #15
 8004e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3e:	43db      	mvns	r3, r3
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4013      	ands	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a49      	ldr	r2, [pc, #292]	@ (8004f70 <HAL_GPIO_Init+0x2f0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d019      	beq.n	8004e82 <HAL_GPIO_Init+0x202>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a48      	ldr	r2, [pc, #288]	@ (8004f74 <HAL_GPIO_Init+0x2f4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d013      	beq.n	8004e7e <HAL_GPIO_Init+0x1fe>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a47      	ldr	r2, [pc, #284]	@ (8004f78 <HAL_GPIO_Init+0x2f8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00d      	beq.n	8004e7a <HAL_GPIO_Init+0x1fa>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a46      	ldr	r2, [pc, #280]	@ (8004f7c <HAL_GPIO_Init+0x2fc>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d007      	beq.n	8004e76 <HAL_GPIO_Init+0x1f6>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a45      	ldr	r2, [pc, #276]	@ (8004f80 <HAL_GPIO_Init+0x300>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d101      	bne.n	8004e72 <HAL_GPIO_Init+0x1f2>
 8004e6e:	2304      	movs	r3, #4
 8004e70:	e008      	b.n	8004e84 <HAL_GPIO_Init+0x204>
 8004e72:	2307      	movs	r3, #7
 8004e74:	e006      	b.n	8004e84 <HAL_GPIO_Init+0x204>
 8004e76:	2303      	movs	r3, #3
 8004e78:	e004      	b.n	8004e84 <HAL_GPIO_Init+0x204>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e002      	b.n	8004e84 <HAL_GPIO_Init+0x204>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <HAL_GPIO_Init+0x204>
 8004e82:	2300      	movs	r3, #0
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	f002 0203 	and.w	r2, r2, #3
 8004e8a:	0092      	lsls	r2, r2, #2
 8004e8c:	4093      	lsls	r3, r2
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e94:	4935      	ldr	r1, [pc, #212]	@ (8004f6c <HAL_GPIO_Init+0x2ec>)
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	089b      	lsrs	r3, r3, #2
 8004e9a:	3302      	adds	r3, #2
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ea2:	4b38      	ldr	r3, [pc, #224]	@ (8004f84 <HAL_GPIO_Init+0x304>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	43db      	mvns	r3, r3
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ec6:	4a2f      	ldr	r2, [pc, #188]	@ (8004f84 <HAL_GPIO_Init+0x304>)
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8004f84 <HAL_GPIO_Init+0x304>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	43db      	mvns	r3, r3
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ef0:	4a24      	ldr	r2, [pc, #144]	@ (8004f84 <HAL_GPIO_Init+0x304>)
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ef6:	4b23      	ldr	r3, [pc, #140]	@ (8004f84 <HAL_GPIO_Init+0x304>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	43db      	mvns	r3, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4013      	ands	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8004f84 <HAL_GPIO_Init+0x304>)
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f20:	4b18      	ldr	r3, [pc, #96]	@ (8004f84 <HAL_GPIO_Init+0x304>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f44:	4a0f      	ldr	r2, [pc, #60]	@ (8004f84 <HAL_GPIO_Init+0x304>)
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	2b0f      	cmp	r3, #15
 8004f54:	f67f aea2 	bls.w	8004c9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	3724      	adds	r7, #36	@ 0x24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	40013800 	.word	0x40013800
 8004f70:	40020000 	.word	0x40020000
 8004f74:	40020400 	.word	0x40020400
 8004f78:	40020800 	.word	0x40020800
 8004f7c:	40020c00 	.word	0x40020c00
 8004f80:	40021000 	.word	0x40021000
 8004f84:	40013c00 	.word	0x40013c00

08004f88 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	e0bb      	b.n	800511c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	f040 80ab 	bne.w	8005116 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004fc0:	4a5c      	ldr	r2, [pc, #368]	@ (8005134 <HAL_GPIO_DeInit+0x1ac>)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	089b      	lsrs	r3, r3, #2
 8004fc6:	3302      	adds	r3, #2
 8004fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fcc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f003 0303 	and.w	r3, r3, #3
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	220f      	movs	r2, #15
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a54      	ldr	r2, [pc, #336]	@ (8005138 <HAL_GPIO_DeInit+0x1b0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d019      	beq.n	800501e <HAL_GPIO_DeInit+0x96>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a53      	ldr	r2, [pc, #332]	@ (800513c <HAL_GPIO_DeInit+0x1b4>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d013      	beq.n	800501a <HAL_GPIO_DeInit+0x92>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a52      	ldr	r2, [pc, #328]	@ (8005140 <HAL_GPIO_DeInit+0x1b8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00d      	beq.n	8005016 <HAL_GPIO_DeInit+0x8e>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a51      	ldr	r2, [pc, #324]	@ (8005144 <HAL_GPIO_DeInit+0x1bc>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d007      	beq.n	8005012 <HAL_GPIO_DeInit+0x8a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a50      	ldr	r2, [pc, #320]	@ (8005148 <HAL_GPIO_DeInit+0x1c0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d101      	bne.n	800500e <HAL_GPIO_DeInit+0x86>
 800500a:	2304      	movs	r3, #4
 800500c:	e008      	b.n	8005020 <HAL_GPIO_DeInit+0x98>
 800500e:	2307      	movs	r3, #7
 8005010:	e006      	b.n	8005020 <HAL_GPIO_DeInit+0x98>
 8005012:	2303      	movs	r3, #3
 8005014:	e004      	b.n	8005020 <HAL_GPIO_DeInit+0x98>
 8005016:	2302      	movs	r3, #2
 8005018:	e002      	b.n	8005020 <HAL_GPIO_DeInit+0x98>
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <HAL_GPIO_DeInit+0x98>
 800501e:	2300      	movs	r3, #0
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	f002 0203 	and.w	r2, r2, #3
 8005026:	0092      	lsls	r2, r2, #2
 8005028:	4093      	lsls	r3, r2
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	429a      	cmp	r2, r3
 800502e:	d132      	bne.n	8005096 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005030:	4b46      	ldr	r3, [pc, #280]	@ (800514c <HAL_GPIO_DeInit+0x1c4>)
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	43db      	mvns	r3, r3
 8005038:	4944      	ldr	r1, [pc, #272]	@ (800514c <HAL_GPIO_DeInit+0x1c4>)
 800503a:	4013      	ands	r3, r2
 800503c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800503e:	4b43      	ldr	r3, [pc, #268]	@ (800514c <HAL_GPIO_DeInit+0x1c4>)
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	43db      	mvns	r3, r3
 8005046:	4941      	ldr	r1, [pc, #260]	@ (800514c <HAL_GPIO_DeInit+0x1c4>)
 8005048:	4013      	ands	r3, r2
 800504a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800504c:	4b3f      	ldr	r3, [pc, #252]	@ (800514c <HAL_GPIO_DeInit+0x1c4>)
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	43db      	mvns	r3, r3
 8005054:	493d      	ldr	r1, [pc, #244]	@ (800514c <HAL_GPIO_DeInit+0x1c4>)
 8005056:	4013      	ands	r3, r2
 8005058:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800505a:	4b3c      	ldr	r3, [pc, #240]	@ (800514c <HAL_GPIO_DeInit+0x1c4>)
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	43db      	mvns	r3, r3
 8005062:	493a      	ldr	r1, [pc, #232]	@ (800514c <HAL_GPIO_DeInit+0x1c4>)
 8005064:	4013      	ands	r3, r2
 8005066:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	220f      	movs	r2, #15
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005078:	4a2e      	ldr	r2, [pc, #184]	@ (8005134 <HAL_GPIO_DeInit+0x1ac>)
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	089b      	lsrs	r3, r3, #2
 800507e:	3302      	adds	r3, #2
 8005080:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	43da      	mvns	r2, r3
 8005088:	482a      	ldr	r0, [pc, #168]	@ (8005134 <HAL_GPIO_DeInit+0x1ac>)
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	089b      	lsrs	r3, r3, #2
 800508e:	400a      	ands	r2, r1
 8005090:	3302      	adds	r3, #2
 8005092:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	2103      	movs	r1, #3
 80050a0:	fa01 f303 	lsl.w	r3, r1, r3
 80050a4:	43db      	mvns	r3, r3
 80050a6:	401a      	ands	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	08da      	lsrs	r2, r3, #3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3208      	adds	r2, #8
 80050b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	220f      	movs	r2, #15
 80050c2:	fa02 f303 	lsl.w	r3, r2, r3
 80050c6:	43db      	mvns	r3, r3
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	08d2      	lsrs	r2, r2, #3
 80050cc:	4019      	ands	r1, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3208      	adds	r2, #8
 80050d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	2103      	movs	r1, #3
 80050e0:	fa01 f303 	lsl.w	r3, r1, r3
 80050e4:	43db      	mvns	r3, r3
 80050e6:	401a      	ands	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	2101      	movs	r1, #1
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	fa01 f303 	lsl.w	r3, r1, r3
 80050f8:	43db      	mvns	r3, r3
 80050fa:	401a      	ands	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	2103      	movs	r1, #3
 800510a:	fa01 f303 	lsl.w	r3, r1, r3
 800510e:	43db      	mvns	r3, r3
 8005110:	401a      	ands	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	3301      	adds	r3, #1
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2b0f      	cmp	r3, #15
 8005120:	f67f af40 	bls.w	8004fa4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005124:	bf00      	nop
 8005126:	bf00      	nop
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40013800 	.word	0x40013800
 8005138:	40020000 	.word	0x40020000
 800513c:	40020400 	.word	0x40020400
 8005140:	40020800 	.word	0x40020800
 8005144:	40020c00 	.word	0x40020c00
 8005148:	40021000 	.word	0x40021000
 800514c:	40013c00 	.word	0x40013c00

08005150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	807b      	strh	r3, [r7, #2]
 800515c:	4613      	mov	r3, r2
 800515e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005160:	787b      	ldrb	r3, [r7, #1]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005166:	887a      	ldrh	r2, [r7, #2]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800516c:	e003      	b.n	8005176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800516e:	887b      	ldrh	r3, [r7, #2]
 8005170:	041a      	lsls	r2, r3, #16
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	619a      	str	r2, [r3, #24]
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
	...

08005184 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	4603      	mov	r3, r0
 800518c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800518e:	4b08      	ldr	r3, [pc, #32]	@ (80051b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005190:	695a      	ldr	r2, [r3, #20]
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	4013      	ands	r3, r2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d006      	beq.n	80051a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800519a:	4a05      	ldr	r2, [pc, #20]	@ (80051b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800519c:	88fb      	ldrh	r3, [r7, #6]
 800519e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fc fa10 	bl	80015c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80051a8:	bf00      	nop
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40013c00 	.word	0x40013c00

080051b4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e059      	b.n	800527a <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d106      	bne.n	80051e6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f00d fb63 	bl	80128ac <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2203      	movs	r2, #3
 80051ea:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051f4:	d102      	bne.n	80051fc <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f005 fdae 	bl	800ad62 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	7c1a      	ldrb	r2, [r3, #16]
 800520e:	f88d 2000 	strb.w	r2, [sp]
 8005212:	3304      	adds	r3, #4
 8005214:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005216:	f005 fd2f 	bl	800ac78 <USB_CoreInit>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e026      	b.n	800527a <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2101      	movs	r1, #1
 8005232:	4618      	mov	r0, r3
 8005234:	f005 fda6 	bl	800ad84 <USB_SetCurrentMode>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d005      	beq.n	800524a <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e017      	b.n	800527a <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	7c1a      	ldrb	r2, [r3, #16]
 8005252:	f88d 2000 	strb.w	r2, [sp]
 8005256:	3304      	adds	r3, #4
 8005258:	cb0e      	ldmia	r3, {r1, r2, r3}
 800525a:	f005 ff49 	bl	800b0f0 <USB_HostInit>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e004      	b.n	800527a <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005282:	b590      	push	{r4, r7, lr}
 8005284:	b08b      	sub	sp, #44	@ 0x2c
 8005286:	af04      	add	r7, sp, #16
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	4608      	mov	r0, r1
 800528c:	4611      	mov	r1, r2
 800528e:	461a      	mov	r2, r3
 8005290:	4603      	mov	r3, r0
 8005292:	70fb      	strb	r3, [r7, #3]
 8005294:	460b      	mov	r3, r1
 8005296:	70bb      	strb	r3, [r7, #2]
 8005298:	4613      	mov	r3, r2
 800529a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800529c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800529e:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_HCD_HC_Init+0x2c>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e09d      	b.n	80053ea <HAL_HCD_HC_Init+0x168>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80052b6:	78fa      	ldrb	r2, [r7, #3]
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	3319      	adds	r3, #25
 80052c6:	2200      	movs	r2, #0
 80052c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80052ca:	78fa      	ldrb	r2, [r7, #3]
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	1a9b      	subs	r3, r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	3314      	adds	r3, #20
 80052da:	787a      	ldrb	r2, [r7, #1]
 80052dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80052de:	78fa      	ldrb	r2, [r7, #3]
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	3315      	adds	r3, #21
 80052ee:	78fa      	ldrb	r2, [r7, #3]
 80052f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80052f2:	78fa      	ldrb	r2, [r7, #3]
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	4613      	mov	r3, r2
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	440b      	add	r3, r1
 8005300:	3326      	adds	r3, #38	@ 0x26
 8005302:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005306:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005308:	78fa      	ldrb	r2, [r7, #3]
 800530a:	78bb      	ldrb	r3, [r7, #2]
 800530c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005310:	b2d8      	uxtb	r0, r3
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	1a9b      	subs	r3, r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	3316      	adds	r3, #22
 8005320:	4602      	mov	r2, r0
 8005322:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	4619      	mov	r1, r3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fbc7 	bl	8005abc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800532e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005332:	2b00      	cmp	r3, #0
 8005334:	da0a      	bge.n	800534c <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005336:	78fa      	ldrb	r2, [r7, #3]
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	1a9b      	subs	r3, r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	440b      	add	r3, r1
 8005344:	3317      	adds	r3, #23
 8005346:	2201      	movs	r2, #1
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	e009      	b.n	8005360 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800534c:	78fa      	ldrb	r2, [r7, #3]
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	4613      	mov	r3, r2
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	3317      	adds	r3, #23
 800535c:	2200      	movs	r2, #0
 800535e:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f006 f811 	bl	800b38c <USB_GetHostSpeed>
 800536a:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800536c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005370:	2b01      	cmp	r3, #1
 8005372:	d10b      	bne.n	800538c <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8005374:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005378:	2b01      	cmp	r3, #1
 800537a:	d107      	bne.n	800538c <HAL_HCD_HC_Init+0x10a>
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d104      	bne.n	800538c <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2bbc      	cmp	r3, #188	@ 0xbc
 8005386:	d901      	bls.n	800538c <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8005388:	23bc      	movs	r3, #188	@ 0xbc
 800538a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800538c:	78fa      	ldrb	r2, [r7, #3]
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	4613      	mov	r3, r2
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	1a9b      	subs	r3, r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	3318      	adds	r3, #24
 800539c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80053a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80053a2:	78fa      	ldrb	r2, [r7, #3]
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	b298      	uxth	r0, r3
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	4613      	mov	r3, r2
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	440b      	add	r3, r1
 80053b4:	3328      	adds	r3, #40	@ 0x28
 80053b6:	4602      	mov	r2, r0
 80053b8:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	787c      	ldrb	r4, [r7, #1]
 80053c4:	78ba      	ldrb	r2, [r7, #2]
 80053c6:	78f9      	ldrb	r1, [r7, #3]
 80053c8:	9302      	str	r3, [sp, #8]
 80053ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80053ce:	9301      	str	r3, [sp, #4]
 80053d0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	4623      	mov	r3, r4
 80053d8:	f006 f800 	bl	800b3dc <USB_HC_Init>
 80053dc:	4603      	mov	r3, r0
 80053de:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd90      	pop	{r4, r7, pc}

080053f2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	460b      	mov	r3, r1
 80053fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_HCD_HC_Halt+0x1e>
 800540c:	2302      	movs	r3, #2
 800540e:	e00f      	b.n	8005430 <HAL_HCD_HC_Halt+0x3e>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	78fa      	ldrb	r2, [r7, #3]
 800541e:	4611      	mov	r1, r2
 8005420:	4618      	mov	r0, r3
 8005422:	f006 fb46 	bl	800bab2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800542e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	4608      	mov	r0, r1
 8005442:	4611      	mov	r1, r2
 8005444:	461a      	mov	r2, r3
 8005446:	4603      	mov	r3, r0
 8005448:	70fb      	strb	r3, [r7, #3]
 800544a:	460b      	mov	r3, r1
 800544c:	70bb      	strb	r3, [r7, #2]
 800544e:	4613      	mov	r3, r2
 8005450:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005452:	78fa      	ldrb	r2, [r7, #3]
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	4613      	mov	r3, r2
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	1a9b      	subs	r3, r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	3317      	adds	r3, #23
 8005462:	78ba      	ldrb	r2, [r7, #2]
 8005464:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005466:	78fa      	ldrb	r2, [r7, #3]
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	4613      	mov	r3, r2
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	1a9b      	subs	r3, r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	440b      	add	r3, r1
 8005474:	3326      	adds	r3, #38	@ 0x26
 8005476:	787a      	ldrb	r2, [r7, #1]
 8005478:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800547a:	7c3b      	ldrb	r3, [r7, #16]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d114      	bne.n	80054aa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005480:	78fa      	ldrb	r2, [r7, #3]
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	332a      	adds	r3, #42	@ 0x2a
 8005490:	2203      	movs	r2, #3
 8005492:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005494:	78fa      	ldrb	r2, [r7, #3]
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4613      	mov	r3, r2
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	3319      	adds	r3, #25
 80054a4:	7f3a      	ldrb	r2, [r7, #28]
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	e009      	b.n	80054be <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80054aa:	78fa      	ldrb	r2, [r7, #3]
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	4613      	mov	r3, r2
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	440b      	add	r3, r1
 80054b8:	332a      	adds	r3, #42	@ 0x2a
 80054ba:	2202      	movs	r2, #2
 80054bc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80054be:	787b      	ldrb	r3, [r7, #1]
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	f200 8102 	bhi.w	80056ca <HAL_HCD_HC_SubmitRequest+0x292>
 80054c6:	a201      	add	r2, pc, #4	@ (adr r2, 80054cc <HAL_HCD_HC_SubmitRequest+0x94>)
 80054c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054cc:	080054dd 	.word	0x080054dd
 80054d0:	080056b5 	.word	0x080056b5
 80054d4:	080055a1 	.word	0x080055a1
 80054d8:	0800562b 	.word	0x0800562b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80054dc:	7c3b      	ldrb	r3, [r7, #16]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	f040 80f5 	bne.w	80056ce <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80054e4:	78bb      	ldrb	r3, [r7, #2]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d12d      	bne.n	8005546 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80054ea:	8b3b      	ldrh	r3, [r7, #24]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d109      	bne.n	8005504 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80054f0:	78fa      	ldrb	r2, [r7, #3]
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	4613      	mov	r3, r2
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	1a9b      	subs	r3, r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	440b      	add	r3, r1
 80054fe:	333d      	adds	r3, #61	@ 0x3d
 8005500:	2201      	movs	r2, #1
 8005502:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8005504:	78fa      	ldrb	r2, [r7, #3]
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	4613      	mov	r3, r2
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	1a9b      	subs	r3, r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	440b      	add	r3, r1
 8005512:	333d      	adds	r3, #61	@ 0x3d
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10a      	bne.n	8005530 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800551a:	78fa      	ldrb	r2, [r7, #3]
 800551c:	6879      	ldr	r1, [r7, #4]
 800551e:	4613      	mov	r3, r2
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	1a9b      	subs	r3, r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	440b      	add	r3, r1
 8005528:	332a      	adds	r3, #42	@ 0x2a
 800552a:	2200      	movs	r2, #0
 800552c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800552e:	e0ce      	b.n	80056ce <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005530:	78fa      	ldrb	r2, [r7, #3]
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	4613      	mov	r3, r2
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	332a      	adds	r3, #42	@ 0x2a
 8005540:	2202      	movs	r2, #2
 8005542:	701a      	strb	r2, [r3, #0]
      break;
 8005544:	e0c3      	b.n	80056ce <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8005546:	78fa      	ldrb	r2, [r7, #3]
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	1a9b      	subs	r3, r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	440b      	add	r3, r1
 8005554:	331a      	adds	r3, #26
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b01      	cmp	r3, #1
 800555a:	f040 80b8 	bne.w	80056ce <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800555e:	78fa      	ldrb	r2, [r7, #3]
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	4613      	mov	r3, r2
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	440b      	add	r3, r1
 800556c:	333c      	adds	r3, #60	@ 0x3c
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10a      	bne.n	800558a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005574:	78fa      	ldrb	r2, [r7, #3]
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	4613      	mov	r3, r2
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	1a9b      	subs	r3, r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	332a      	adds	r3, #42	@ 0x2a
 8005584:	2200      	movs	r2, #0
 8005586:	701a      	strb	r2, [r3, #0]
      break;
 8005588:	e0a1      	b.n	80056ce <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800558a:	78fa      	ldrb	r2, [r7, #3]
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	4613      	mov	r3, r2
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	332a      	adds	r3, #42	@ 0x2a
 800559a:	2202      	movs	r2, #2
 800559c:	701a      	strb	r2, [r3, #0]
      break;
 800559e:	e096      	b.n	80056ce <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80055a0:	78bb      	ldrb	r3, [r7, #2]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d120      	bne.n	80055e8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80055a6:	78fa      	ldrb	r2, [r7, #3]
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	4613      	mov	r3, r2
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	1a9b      	subs	r3, r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	440b      	add	r3, r1
 80055b4:	333d      	adds	r3, #61	@ 0x3d
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10a      	bne.n	80055d2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80055bc:	78fa      	ldrb	r2, [r7, #3]
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	4613      	mov	r3, r2
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	332a      	adds	r3, #42	@ 0x2a
 80055cc:	2200      	movs	r2, #0
 80055ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80055d0:	e07e      	b.n	80056d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80055d2:	78fa      	ldrb	r2, [r7, #3]
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	4613      	mov	r3, r2
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	1a9b      	subs	r3, r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	440b      	add	r3, r1
 80055e0:	332a      	adds	r3, #42	@ 0x2a
 80055e2:	2202      	movs	r2, #2
 80055e4:	701a      	strb	r2, [r3, #0]
      break;
 80055e6:	e073      	b.n	80056d0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80055e8:	78fa      	ldrb	r2, [r7, #3]
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	4613      	mov	r3, r2
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	1a9b      	subs	r3, r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	333c      	adds	r3, #60	@ 0x3c
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10a      	bne.n	8005614 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80055fe:	78fa      	ldrb	r2, [r7, #3]
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	4613      	mov	r3, r2
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	440b      	add	r3, r1
 800560c:	332a      	adds	r3, #42	@ 0x2a
 800560e:	2200      	movs	r2, #0
 8005610:	701a      	strb	r2, [r3, #0]
      break;
 8005612:	e05d      	b.n	80056d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005614:	78fa      	ldrb	r2, [r7, #3]
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	1a9b      	subs	r3, r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	332a      	adds	r3, #42	@ 0x2a
 8005624:	2202      	movs	r2, #2
 8005626:	701a      	strb	r2, [r3, #0]
      break;
 8005628:	e052      	b.n	80056d0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800562a:	78bb      	ldrb	r3, [r7, #2]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d120      	bne.n	8005672 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005630:	78fa      	ldrb	r2, [r7, #3]
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	1a9b      	subs	r3, r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	333d      	adds	r3, #61	@ 0x3d
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10a      	bne.n	800565c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005646:	78fa      	ldrb	r2, [r7, #3]
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	1a9b      	subs	r3, r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	332a      	adds	r3, #42	@ 0x2a
 8005656:	2200      	movs	r2, #0
 8005658:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800565a:	e039      	b.n	80056d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800565c:	78fa      	ldrb	r2, [r7, #3]
 800565e:	6879      	ldr	r1, [r7, #4]
 8005660:	4613      	mov	r3, r2
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	1a9b      	subs	r3, r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	332a      	adds	r3, #42	@ 0x2a
 800566c:	2202      	movs	r2, #2
 800566e:	701a      	strb	r2, [r3, #0]
      break;
 8005670:	e02e      	b.n	80056d0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005672:	78fa      	ldrb	r2, [r7, #3]
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	4613      	mov	r3, r2
 8005678:	011b      	lsls	r3, r3, #4
 800567a:	1a9b      	subs	r3, r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	440b      	add	r3, r1
 8005680:	333c      	adds	r3, #60	@ 0x3c
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10a      	bne.n	800569e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005688:	78fa      	ldrb	r2, [r7, #3]
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	1a9b      	subs	r3, r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	332a      	adds	r3, #42	@ 0x2a
 8005698:	2200      	movs	r2, #0
 800569a:	701a      	strb	r2, [r3, #0]
      break;
 800569c:	e018      	b.n	80056d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800569e:	78fa      	ldrb	r2, [r7, #3]
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	4613      	mov	r3, r2
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	1a9b      	subs	r3, r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	440b      	add	r3, r1
 80056ac:	332a      	adds	r3, #42	@ 0x2a
 80056ae:	2202      	movs	r2, #2
 80056b0:	701a      	strb	r2, [r3, #0]
      break;
 80056b2:	e00d      	b.n	80056d0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80056b4:	78fa      	ldrb	r2, [r7, #3]
 80056b6:	6879      	ldr	r1, [r7, #4]
 80056b8:	4613      	mov	r3, r2
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	1a9b      	subs	r3, r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	332a      	adds	r3, #42	@ 0x2a
 80056c4:	2200      	movs	r2, #0
 80056c6:	701a      	strb	r2, [r3, #0]
      break;
 80056c8:	e002      	b.n	80056d0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80056ca:	bf00      	nop
 80056cc:	e000      	b.n	80056d0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80056ce:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80056d0:	78fa      	ldrb	r2, [r7, #3]
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	332c      	adds	r3, #44	@ 0x2c
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80056e4:	78fa      	ldrb	r2, [r7, #3]
 80056e6:	8b39      	ldrh	r1, [r7, #24]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	4613      	mov	r3, r2
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4403      	add	r3, r0
 80056f4:	3334      	adds	r3, #52	@ 0x34
 80056f6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80056f8:	78fa      	ldrb	r2, [r7, #3]
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	4613      	mov	r3, r2
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	1a9b      	subs	r3, r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	334c      	adds	r3, #76	@ 0x4c
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800570c:	78fa      	ldrb	r2, [r7, #3]
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	4613      	mov	r3, r2
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	3338      	adds	r3, #56	@ 0x38
 800571c:	2200      	movs	r2, #0
 800571e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005720:	78fa      	ldrb	r2, [r7, #3]
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	4613      	mov	r3, r2
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	1a9b      	subs	r3, r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	440b      	add	r3, r1
 800572e:	3315      	adds	r3, #21
 8005730:	78fa      	ldrb	r2, [r7, #3]
 8005732:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005734:	78fa      	ldrb	r2, [r7, #3]
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	4613      	mov	r3, r2
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	1a9b      	subs	r3, r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	334d      	adds	r3, #77	@ 0x4d
 8005744:	2200      	movs	r2, #0
 8005746:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	78fa      	ldrb	r2, [r7, #3]
 800574e:	4613      	mov	r3, r2
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	1a9b      	subs	r3, r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	3310      	adds	r3, #16
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	4413      	add	r3, r2
 800575c:	1d19      	adds	r1, r3, #4
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	799b      	ldrb	r3, [r3, #6]
 8005762:	461a      	mov	r2, r3
 8005764:	f005 ff50 	bl	800b608 <USB_HC_StartXfer>
 8005768:	4603      	mov	r3, r0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop

08005774 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f005 fc70 	bl	800b070 <USB_GetMode>
 8005790:	4603      	mov	r3, r0
 8005792:	2b01      	cmp	r3, #1
 8005794:	f040 80fb 	bne.w	800598e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4618      	mov	r0, r3
 800579e:	f005 fc33 	bl	800b008 <USB_ReadInterrupts>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80f1 	beq.w	800598c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f005 fc2a 	bl	800b008 <USB_ReadInterrupts>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057be:	d104      	bne.n	80057ca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80057c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f005 fc1a 	bl	800b008 <USB_ReadInterrupts>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057de:	d104      	bne.n	80057ea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80057e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f005 fc0a 	bl	800b008 <USB_ReadInterrupts>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80057fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057fe:	d104      	bne.n	800580a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005808:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f005 fbfa 	bl	800b008 <USB_ReadInterrupts>
 8005814:	4603      	mov	r3, r0
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b02      	cmp	r3, #2
 800581c:	d103      	bne.n	8005826 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2202      	movs	r2, #2
 8005824:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f005 fbec 	bl	800b008 <USB_ReadInterrupts>
 8005830:	4603      	mov	r3, r0
 8005832:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800583a:	d120      	bne.n	800587e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005844:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d113      	bne.n	800587e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005856:	2110      	movs	r1, #16
 8005858:	6938      	ldr	r0, [r7, #16]
 800585a:	f005 fadf 	bl	800ae1c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800585e:	6938      	ldr	r0, [r7, #16]
 8005860:	f005 fb0e 	bl	800ae80 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	7a5b      	ldrb	r3, [r3, #9]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d105      	bne.n	8005878 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2101      	movs	r1, #1
 8005872:	4618      	mov	r0, r3
 8005874:	f005 fcea 	bl	800b24c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f00d f895 	bl	80129a8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f005 fbc0 	bl	800b008 <USB_ReadInterrupts>
 8005888:	4603      	mov	r3, r0
 800588a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800588e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005892:	d102      	bne.n	800589a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 fd4d 	bl	8007334 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4618      	mov	r0, r3
 80058a0:	f005 fbb2 	bl	800b008 <USB_ReadInterrupts>
 80058a4:	4603      	mov	r3, r0
 80058a6:	f003 0308 	and.w	r3, r3, #8
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d106      	bne.n	80058bc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f00d f85e 	bl	8012970 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2208      	movs	r2, #8
 80058ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f005 fba1 	bl	800b008 <USB_ReadInterrupts>
 80058c6:	4603      	mov	r3, r0
 80058c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058d0:	d139      	bne.n	8005946 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f006 f8da 	bl	800ba90 <USB_HC_ReadInterrupt>
 80058dc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	e025      	b.n	8005930 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	fa22 f303 	lsr.w	r3, r2, r3
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d018      	beq.n	800592a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800590a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800590e:	d106      	bne.n	800591e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	4619      	mov	r1, r3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f905 	bl	8005b26 <HCD_HC_IN_IRQHandler>
 800591c:	e005      	b.n	800592a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 ff67 	bl	80067f8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	3301      	adds	r3, #1
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	795b      	ldrb	r3, [r3, #5]
 8005934:	461a      	mov	r2, r3
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	4293      	cmp	r3, r2
 800593a:	d3d3      	bcc.n	80058e4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005944:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f005 fb5c 	bl	800b008 <USB_ReadInterrupts>
 8005950:	4603      	mov	r3, r0
 8005952:	f003 0310 	and.w	r3, r3, #16
 8005956:	2b10      	cmp	r3, #16
 8005958:	d101      	bne.n	800595e <HAL_HCD_IRQHandler+0x1ea>
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <HAL_HCD_IRQHandler+0x1ec>
 800595e:	2300      	movs	r3, #0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d014      	beq.n	800598e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0210 	bic.w	r2, r2, #16
 8005972:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f001 fbfe 	bl	8007176 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699a      	ldr	r2, [r3, #24]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0210 	orr.w	r2, r2, #16
 8005988:	619a      	str	r2, [r3, #24]
 800598a:	e000      	b.n	800598e <HAL_HCD_IRQHandler+0x21a>
      return;
 800598c:	bf00      	nop
    }
  }
}
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_HCD_Start+0x16>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e013      	b.n	80059d2 <HAL_HCD_Start+0x3e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2101      	movs	r1, #1
 80059b8:	4618      	mov	r0, r3
 80059ba:	f005 fcae 	bl	800b31a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f005 f9bc 	bl	800ad40 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b082      	sub	sp, #8
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d101      	bne.n	80059f0 <HAL_HCD_Stop+0x16>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e00d      	b.n	8005a0c <HAL_HCD_Stop+0x32>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f006 f978 	bl	800bcf2 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f005 fc50 	bl	800b2c6 <USB_ResetPort>
 8005a26:	4603      	mov	r3, r0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005a3c:	78fa      	ldrb	r2, [r7, #3]
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	4613      	mov	r3, r2
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	1a9b      	subs	r3, r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	334c      	adds	r3, #76	@ 0x4c
 8005a4c:	781b      	ldrb	r3, [r3, #0]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	460b      	mov	r3, r1
 8005a64:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005a66:	78fa      	ldrb	r2, [r7, #3]
 8005a68:	6879      	ldr	r1, [r7, #4]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	011b      	lsls	r3, r3, #4
 8005a6e:	1a9b      	subs	r3, r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	440b      	add	r3, r1
 8005a74:	3338      	adds	r3, #56	@ 0x38
 8005a76:	681b      	ldr	r3, [r3, #0]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f005 fc92 	bl	800b3ba <USB_GetCurrentFrame>
 8005a96:	4603      	mov	r3, r0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f005 fc6d 	bl	800b38c <USB_GetHostSpeed>
 8005ab2:	4603      	mov	r3, r0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8005ac8:	78fa      	ldrb	r2, [r7, #3]
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	4613      	mov	r3, r2
 8005ace:	011b      	lsls	r3, r3, #4
 8005ad0:	1a9b      	subs	r3, r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	440b      	add	r3, r1
 8005ad6:	331a      	adds	r3, #26
 8005ad8:	2200      	movs	r2, #0
 8005ada:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8005adc:	78fa      	ldrb	r2, [r7, #3]
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	1a9b      	subs	r3, r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	440b      	add	r3, r1
 8005aea:	331b      	adds	r3, #27
 8005aec:	2200      	movs	r2, #0
 8005aee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8005af0:	78fa      	ldrb	r2, [r7, #3]
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	4613      	mov	r3, r2
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	3325      	adds	r3, #37	@ 0x25
 8005b00:	2200      	movs	r2, #0
 8005b02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8005b04:	78fa      	ldrb	r2, [r7, #3]
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	1a9b      	subs	r3, r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	440b      	add	r3, r1
 8005b12:	3324      	adds	r3, #36	@ 0x24
 8005b14:	2200      	movs	r2, #0
 8005b16:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b086      	sub	sp, #24
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	78fa      	ldrb	r2, [r7, #3]
 8005b42:	4611      	mov	r1, r2
 8005b44:	4618      	mov	r0, r3
 8005b46:	f005 fa72 	bl	800b02e <USB_ReadChInterrupts>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d11a      	bne.n	8005b8a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005b54:	78fb      	ldrb	r3, [r7, #3]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b60:	461a      	mov	r2, r3
 8005b62:	2304      	movs	r3, #4
 8005b64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005b66:	78fa      	ldrb	r2, [r7, #3]
 8005b68:	6879      	ldr	r1, [r7, #4]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	1a9b      	subs	r3, r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	440b      	add	r3, r1
 8005b74:	334d      	adds	r3, #77	@ 0x4d
 8005b76:	2207      	movs	r2, #7
 8005b78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	78fa      	ldrb	r2, [r7, #3]
 8005b80:	4611      	mov	r1, r2
 8005b82:	4618      	mov	r0, r3
 8005b84:	f005 ff95 	bl	800bab2 <USB_HC_Halt>
 8005b88:	e09e      	b.n	8005cc8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	78fa      	ldrb	r2, [r7, #3]
 8005b90:	4611      	mov	r1, r2
 8005b92:	4618      	mov	r0, r3
 8005b94:	f005 fa4b 	bl	800b02e <USB_ReadChInterrupts>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ba2:	d11b      	bne.n	8005bdc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005bb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005bb8:	78fa      	ldrb	r2, [r7, #3]
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	1a9b      	subs	r3, r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	334d      	adds	r3, #77	@ 0x4d
 8005bc8:	2208      	movs	r2, #8
 8005bca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	78fa      	ldrb	r2, [r7, #3]
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f005 ff6c 	bl	800bab2 <USB_HC_Halt>
 8005bda:	e075      	b.n	8005cc8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	78fa      	ldrb	r2, [r7, #3]
 8005be2:	4611      	mov	r1, r2
 8005be4:	4618      	mov	r0, r3
 8005be6:	f005 fa22 	bl	800b02e <USB_ReadChInterrupts>
 8005bea:	4603      	mov	r3, r0
 8005bec:	f003 0308 	and.w	r3, r3, #8
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d11a      	bne.n	8005c2a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c00:	461a      	mov	r2, r3
 8005c02:	2308      	movs	r3, #8
 8005c04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005c06:	78fa      	ldrb	r2, [r7, #3]
 8005c08:	6879      	ldr	r1, [r7, #4]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	1a9b      	subs	r3, r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	440b      	add	r3, r1
 8005c14:	334d      	adds	r3, #77	@ 0x4d
 8005c16:	2206      	movs	r2, #6
 8005c18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	78fa      	ldrb	r2, [r7, #3]
 8005c20:	4611      	mov	r1, r2
 8005c22:	4618      	mov	r0, r3
 8005c24:	f005 ff45 	bl	800bab2 <USB_HC_Halt>
 8005c28:	e04e      	b.n	8005cc8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	78fa      	ldrb	r2, [r7, #3]
 8005c30:	4611      	mov	r1, r2
 8005c32:	4618      	mov	r0, r3
 8005c34:	f005 f9fb 	bl	800b02e <USB_ReadChInterrupts>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c42:	d11b      	bne.n	8005c7c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005c44:	78fb      	ldrb	r3, [r7, #3]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c50:	461a      	mov	r2, r3
 8005c52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005c58:	78fa      	ldrb	r2, [r7, #3]
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	1a9b      	subs	r3, r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	440b      	add	r3, r1
 8005c66:	334d      	adds	r3, #77	@ 0x4d
 8005c68:	2209      	movs	r2, #9
 8005c6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	78fa      	ldrb	r2, [r7, #3]
 8005c72:	4611      	mov	r1, r2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f005 ff1c 	bl	800bab2 <USB_HC_Halt>
 8005c7a:	e025      	b.n	8005cc8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	78fa      	ldrb	r2, [r7, #3]
 8005c82:	4611      	mov	r1, r2
 8005c84:	4618      	mov	r0, r3
 8005c86:	f005 f9d2 	bl	800b02e <USB_ReadChInterrupts>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c90:	2b80      	cmp	r3, #128	@ 0x80
 8005c92:	d119      	bne.n	8005cc8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	2380      	movs	r3, #128	@ 0x80
 8005ca4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005ca6:	78fa      	ldrb	r2, [r7, #3]
 8005ca8:	6879      	ldr	r1, [r7, #4]
 8005caa:	4613      	mov	r3, r2
 8005cac:	011b      	lsls	r3, r3, #4
 8005cae:	1a9b      	subs	r3, r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	440b      	add	r3, r1
 8005cb4:	334d      	adds	r3, #77	@ 0x4d
 8005cb6:	2207      	movs	r2, #7
 8005cb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	78fa      	ldrb	r2, [r7, #3]
 8005cc0:	4611      	mov	r1, r2
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f005 fef5 	bl	800bab2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	78fa      	ldrb	r2, [r7, #3]
 8005cce:	4611      	mov	r1, r2
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f005 f9ac 	bl	800b02e <USB_ReadChInterrupts>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ce0:	d112      	bne.n	8005d08 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	78fa      	ldrb	r2, [r7, #3]
 8005ce8:	4611      	mov	r1, r2
 8005cea:	4618      	mov	r0, r3
 8005cec:	f005 fee1 	bl	800bab2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d02:	6093      	str	r3, [r2, #8]
 8005d04:	f000 bd75 	b.w	80067f2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	78fa      	ldrb	r2, [r7, #3]
 8005d0e:	4611      	mov	r1, r2
 8005d10:	4618      	mov	r0, r3
 8005d12:	f005 f98c 	bl	800b02e <USB_ReadChInterrupts>
 8005d16:	4603      	mov	r3, r0
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	f040 8128 	bne.w	8005f72 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d2e:	461a      	mov	r2, r3
 8005d30:	2320      	movs	r3, #32
 8005d32:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005d34:	78fa      	ldrb	r2, [r7, #3]
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	1a9b      	subs	r3, r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	440b      	add	r3, r1
 8005d42:	331b      	adds	r3, #27
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d119      	bne.n	8005d7e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005d4a:	78fa      	ldrb	r2, [r7, #3]
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	1a9b      	subs	r3, r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	440b      	add	r3, r1
 8005d58:	331b      	adds	r3, #27
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	78fa      	ldrb	r2, [r7, #3]
 8005d6e:	0151      	lsls	r1, r2, #5
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	440a      	add	r2, r1
 8005d74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d7c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	799b      	ldrb	r3, [r3, #6]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d01b      	beq.n	8005dbe <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005d86:	78fa      	ldrb	r2, [r7, #3]
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	3330      	adds	r3, #48	@ 0x30
 8005d96:	6819      	ldr	r1, [r3, #0]
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005daa:	78fa      	ldrb	r2, [r7, #3]
 8005dac:	1ac9      	subs	r1, r1, r3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	4613      	mov	r3, r2
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	1a9b      	subs	r3, r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4403      	add	r3, r0
 8005dba:	3338      	adds	r3, #56	@ 0x38
 8005dbc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005dbe:	78fa      	ldrb	r2, [r7, #3]
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	1a9b      	subs	r3, r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	334d      	adds	r3, #77	@ 0x4d
 8005dce:	2201      	movs	r2, #1
 8005dd0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005dd2:	78fa      	ldrb	r2, [r7, #3]
 8005dd4:	6879      	ldr	r1, [r7, #4]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	011b      	lsls	r3, r3, #4
 8005dda:	1a9b      	subs	r3, r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	440b      	add	r3, r1
 8005de0:	3344      	adds	r3, #68	@ 0x44
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005de6:	78fb      	ldrb	r3, [r7, #3]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df2:	461a      	mov	r2, r3
 8005df4:	2301      	movs	r3, #1
 8005df6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005df8:	78fa      	ldrb	r2, [r7, #3]
 8005dfa:	6879      	ldr	r1, [r7, #4]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	1a9b      	subs	r3, r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	440b      	add	r3, r1
 8005e06:	3326      	adds	r3, #38	@ 0x26
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005e0e:	78fa      	ldrb	r2, [r7, #3]
 8005e10:	6879      	ldr	r1, [r7, #4]
 8005e12:	4613      	mov	r3, r2
 8005e14:	011b      	lsls	r3, r3, #4
 8005e16:	1a9b      	subs	r3, r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	440b      	add	r3, r1
 8005e1c:	3326      	adds	r3, #38	@ 0x26
 8005e1e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d110      	bne.n	8005e46 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	78fa      	ldrb	r2, [r7, #3]
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f005 fe40 	bl	800bab2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005e32:	78fb      	ldrb	r3, [r7, #3]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e3e:	461a      	mov	r2, r3
 8005e40:	2310      	movs	r3, #16
 8005e42:	6093      	str	r3, [r2, #8]
 8005e44:	e03d      	b.n	8005ec2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005e46:	78fa      	ldrb	r2, [r7, #3]
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	011b      	lsls	r3, r3, #4
 8005e4e:	1a9b      	subs	r3, r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	440b      	add	r3, r1
 8005e54:	3326      	adds	r3, #38	@ 0x26
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d00a      	beq.n	8005e72 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005e5c:	78fa      	ldrb	r2, [r7, #3]
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	4613      	mov	r3, r2
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	1a9b      	subs	r3, r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	440b      	add	r3, r1
 8005e6a:	3326      	adds	r3, #38	@ 0x26
 8005e6c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d127      	bne.n	8005ec2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	78fa      	ldrb	r2, [r7, #3]
 8005e82:	0151      	lsls	r1, r2, #5
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	440a      	add	r2, r1
 8005e88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e8c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e90:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005e92:	78fa      	ldrb	r2, [r7, #3]
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	4613      	mov	r3, r2
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	1a9b      	subs	r3, r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	334c      	adds	r3, #76	@ 0x4c
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005ea6:	78fa      	ldrb	r2, [r7, #3]
 8005ea8:	6879      	ldr	r1, [r7, #4]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	1a9b      	subs	r3, r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	440b      	add	r3, r1
 8005eb4:	334c      	adds	r3, #76	@ 0x4c
 8005eb6:	781a      	ldrb	r2, [r3, #0]
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f00c fd81 	bl	80129c4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	799b      	ldrb	r3, [r3, #6]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d13b      	bne.n	8005f42 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005eca:	78fa      	ldrb	r2, [r7, #3]
 8005ecc:	6879      	ldr	r1, [r7, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	3338      	adds	r3, #56	@ 0x38
 8005eda:	6819      	ldr	r1, [r3, #0]
 8005edc:	78fa      	ldrb	r2, [r7, #3]
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4403      	add	r3, r0
 8005eea:	3328      	adds	r3, #40	@ 0x28
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	440b      	add	r3, r1
 8005ef0:	1e59      	subs	r1, r3, #1
 8005ef2:	78fa      	ldrb	r2, [r7, #3]
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4403      	add	r3, r0
 8005f00:	3328      	adds	r3, #40	@ 0x28
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 8470 	beq.w	80067f2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005f12:	78fa      	ldrb	r2, [r7, #3]
 8005f14:	6879      	ldr	r1, [r7, #4]
 8005f16:	4613      	mov	r3, r2
 8005f18:	011b      	lsls	r3, r3, #4
 8005f1a:	1a9b      	subs	r3, r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	440b      	add	r3, r1
 8005f20:	333c      	adds	r3, #60	@ 0x3c
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	78fa      	ldrb	r2, [r7, #3]
 8005f26:	f083 0301 	eor.w	r3, r3, #1
 8005f2a:	b2d8      	uxtb	r0, r3
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	011b      	lsls	r3, r3, #4
 8005f32:	1a9b      	subs	r3, r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	333c      	adds	r3, #60	@ 0x3c
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	f000 bc58 	b.w	80067f2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005f42:	78fa      	ldrb	r2, [r7, #3]
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	4613      	mov	r3, r2
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	1a9b      	subs	r3, r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	440b      	add	r3, r1
 8005f50:	333c      	adds	r3, #60	@ 0x3c
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	78fa      	ldrb	r2, [r7, #3]
 8005f56:	f083 0301 	eor.w	r3, r3, #1
 8005f5a:	b2d8      	uxtb	r0, r3
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	1a9b      	subs	r3, r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	440b      	add	r3, r1
 8005f68:	333c      	adds	r3, #60	@ 0x3c
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	f000 bc40 	b.w	80067f2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	78fa      	ldrb	r2, [r7, #3]
 8005f78:	4611      	mov	r1, r2
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f005 f857 	bl	800b02e <USB_ReadChInterrupts>
 8005f80:	4603      	mov	r3, r0
 8005f82:	f003 0320 	and.w	r3, r3, #32
 8005f86:	2b20      	cmp	r3, #32
 8005f88:	d131      	bne.n	8005fee <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005f8a:	78fb      	ldrb	r3, [r7, #3]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f96:	461a      	mov	r2, r3
 8005f98:	2320      	movs	r3, #32
 8005f9a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005f9c:	78fa      	ldrb	r2, [r7, #3]
 8005f9e:	6879      	ldr	r1, [r7, #4]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	1a9b      	subs	r3, r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	440b      	add	r3, r1
 8005faa:	331a      	adds	r3, #26
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	f040 841f 	bne.w	80067f2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005fb4:	78fa      	ldrb	r2, [r7, #3]
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	1a9b      	subs	r3, r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	331b      	adds	r3, #27
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005fc8:	78fa      	ldrb	r2, [r7, #3]
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	1a9b      	subs	r3, r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	440b      	add	r3, r1
 8005fd6:	334d      	adds	r3, #77	@ 0x4d
 8005fd8:	2203      	movs	r2, #3
 8005fda:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	78fa      	ldrb	r2, [r7, #3]
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f005 fd64 	bl	800bab2 <USB_HC_Halt>
 8005fea:	f000 bc02 	b.w	80067f2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	78fa      	ldrb	r2, [r7, #3]
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f005 f819 	bl	800b02e <USB_ReadChInterrupts>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b02      	cmp	r3, #2
 8006004:	f040 8305 	bne.w	8006612 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	4413      	add	r3, r2
 8006010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006014:	461a      	mov	r2, r3
 8006016:	2302      	movs	r3, #2
 8006018:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800601a:	78fa      	ldrb	r2, [r7, #3]
 800601c:	6879      	ldr	r1, [r7, #4]
 800601e:	4613      	mov	r3, r2
 8006020:	011b      	lsls	r3, r3, #4
 8006022:	1a9b      	subs	r3, r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	440b      	add	r3, r1
 8006028:	334d      	adds	r3, #77	@ 0x4d
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d114      	bne.n	800605a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006030:	78fa      	ldrb	r2, [r7, #3]
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	4613      	mov	r3, r2
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	1a9b      	subs	r3, r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	440b      	add	r3, r1
 800603e:	334d      	adds	r3, #77	@ 0x4d
 8006040:	2202      	movs	r2, #2
 8006042:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006044:	78fa      	ldrb	r2, [r7, #3]
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	4613      	mov	r3, r2
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	440b      	add	r3, r1
 8006052:	334c      	adds	r3, #76	@ 0x4c
 8006054:	2201      	movs	r2, #1
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	e2cc      	b.n	80065f4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800605a:	78fa      	ldrb	r2, [r7, #3]
 800605c:	6879      	ldr	r1, [r7, #4]
 800605e:	4613      	mov	r3, r2
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	1a9b      	subs	r3, r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	440b      	add	r3, r1
 8006068:	334d      	adds	r3, #77	@ 0x4d
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b06      	cmp	r3, #6
 800606e:	d114      	bne.n	800609a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006070:	78fa      	ldrb	r2, [r7, #3]
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	4613      	mov	r3, r2
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	1a9b      	subs	r3, r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	334d      	adds	r3, #77	@ 0x4d
 8006080:	2202      	movs	r2, #2
 8006082:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8006084:	78fa      	ldrb	r2, [r7, #3]
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	4613      	mov	r3, r2
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	1a9b      	subs	r3, r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	440b      	add	r3, r1
 8006092:	334c      	adds	r3, #76	@ 0x4c
 8006094:	2205      	movs	r2, #5
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	e2ac      	b.n	80065f4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800609a:	78fa      	ldrb	r2, [r7, #3]
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	4613      	mov	r3, r2
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	1a9b      	subs	r3, r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	440b      	add	r3, r1
 80060a8:	334d      	adds	r3, #77	@ 0x4d
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b07      	cmp	r3, #7
 80060ae:	d00b      	beq.n	80060c8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80060b0:	78fa      	ldrb	r2, [r7, #3]
 80060b2:	6879      	ldr	r1, [r7, #4]
 80060b4:	4613      	mov	r3, r2
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	1a9b      	subs	r3, r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	440b      	add	r3, r1
 80060be:	334d      	adds	r3, #77	@ 0x4d
 80060c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80060c2:	2b09      	cmp	r3, #9
 80060c4:	f040 80a6 	bne.w	8006214 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80060c8:	78fa      	ldrb	r2, [r7, #3]
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	4613      	mov	r3, r2
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	1a9b      	subs	r3, r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	440b      	add	r3, r1
 80060d6:	334d      	adds	r3, #77	@ 0x4d
 80060d8:	2202      	movs	r2, #2
 80060da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80060dc:	78fa      	ldrb	r2, [r7, #3]
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	4613      	mov	r3, r2
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	1a9b      	subs	r3, r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	440b      	add	r3, r1
 80060ea:	3344      	adds	r3, #68	@ 0x44
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	1c59      	adds	r1, r3, #1
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	1a9b      	subs	r3, r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4403      	add	r3, r0
 80060fc:	3344      	adds	r3, #68	@ 0x44
 80060fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006100:	78fa      	ldrb	r2, [r7, #3]
 8006102:	6879      	ldr	r1, [r7, #4]
 8006104:	4613      	mov	r3, r2
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	1a9b      	subs	r3, r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	3344      	adds	r3, #68	@ 0x44
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b02      	cmp	r3, #2
 8006114:	d943      	bls.n	800619e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006116:	78fa      	ldrb	r2, [r7, #3]
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	4613      	mov	r3, r2
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	1a9b      	subs	r3, r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	440b      	add	r3, r1
 8006124:	3344      	adds	r3, #68	@ 0x44
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800612a:	78fa      	ldrb	r2, [r7, #3]
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	4613      	mov	r3, r2
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	1a9b      	subs	r3, r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	440b      	add	r3, r1
 8006138:	331a      	adds	r3, #26
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d123      	bne.n	8006188 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8006140:	78fa      	ldrb	r2, [r7, #3]
 8006142:	6879      	ldr	r1, [r7, #4]
 8006144:	4613      	mov	r3, r2
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	1a9b      	subs	r3, r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	440b      	add	r3, r1
 800614e:	331b      	adds	r3, #27
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8006154:	78fa      	ldrb	r2, [r7, #3]
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	4613      	mov	r3, r2
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	1a9b      	subs	r3, r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	331c      	adds	r3, #28
 8006164:	2200      	movs	r2, #0
 8006166:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4413      	add	r3, r2
 8006170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	78fa      	ldrb	r2, [r7, #3]
 8006178:	0151      	lsls	r1, r2, #5
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	440a      	add	r2, r1
 800617e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006186:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006188:	78fa      	ldrb	r2, [r7, #3]
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	4613      	mov	r3, r2
 800618e:	011b      	lsls	r3, r3, #4
 8006190:	1a9b      	subs	r3, r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	440b      	add	r3, r1
 8006196:	334c      	adds	r3, #76	@ 0x4c
 8006198:	2204      	movs	r2, #4
 800619a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800619c:	e229      	b.n	80065f2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800619e:	78fa      	ldrb	r2, [r7, #3]
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	4613      	mov	r3, r2
 80061a4:	011b      	lsls	r3, r3, #4
 80061a6:	1a9b      	subs	r3, r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	440b      	add	r3, r1
 80061ac:	334c      	adds	r3, #76	@ 0x4c
 80061ae:	2202      	movs	r2, #2
 80061b0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80061b2:	78fa      	ldrb	r2, [r7, #3]
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	1a9b      	subs	r3, r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	440b      	add	r3, r1
 80061c0:	3326      	adds	r3, #38	@ 0x26
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00b      	beq.n	80061e0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80061c8:	78fa      	ldrb	r2, [r7, #3]
 80061ca:	6879      	ldr	r1, [r7, #4]
 80061cc:	4613      	mov	r3, r2
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	1a9b      	subs	r3, r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	440b      	add	r3, r1
 80061d6:	3326      	adds	r3, #38	@ 0x26
 80061d8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80061da:	2b02      	cmp	r3, #2
 80061dc:	f040 8209 	bne.w	80065f2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80061f6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061fe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	4413      	add	r3, r2
 8006208:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800620c:	461a      	mov	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006212:	e1ee      	b.n	80065f2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006214:	78fa      	ldrb	r2, [r7, #3]
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	4613      	mov	r3, r2
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	1a9b      	subs	r3, r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	440b      	add	r3, r1
 8006222:	334d      	adds	r3, #77	@ 0x4d
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	2b05      	cmp	r3, #5
 8006228:	f040 80c8 	bne.w	80063bc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800622c:	78fa      	ldrb	r2, [r7, #3]
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	4613      	mov	r3, r2
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	1a9b      	subs	r3, r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	440b      	add	r3, r1
 800623a:	334d      	adds	r3, #77	@ 0x4d
 800623c:	2202      	movs	r2, #2
 800623e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006240:	78fa      	ldrb	r2, [r7, #3]
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	4613      	mov	r3, r2
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	1a9b      	subs	r3, r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	440b      	add	r3, r1
 800624e:	331b      	adds	r3, #27
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	2b01      	cmp	r3, #1
 8006254:	f040 81ce 	bne.w	80065f4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006258:	78fa      	ldrb	r2, [r7, #3]
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	4613      	mov	r3, r2
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	1a9b      	subs	r3, r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	440b      	add	r3, r1
 8006266:	3326      	adds	r3, #38	@ 0x26
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	2b03      	cmp	r3, #3
 800626c:	d16b      	bne.n	8006346 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800626e:	78fa      	ldrb	r2, [r7, #3]
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	4613      	mov	r3, r2
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	1a9b      	subs	r3, r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	440b      	add	r3, r1
 800627c:	3348      	adds	r3, #72	@ 0x48
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	1c59      	adds	r1, r3, #1
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	4613      	mov	r3, r2
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	1a9b      	subs	r3, r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4403      	add	r3, r0
 800628e:	3348      	adds	r3, #72	@ 0x48
 8006290:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8006292:	78fa      	ldrb	r2, [r7, #3]
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	4613      	mov	r3, r2
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	1a9b      	subs	r3, r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	440b      	add	r3, r1
 80062a0:	3348      	adds	r3, #72	@ 0x48
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d943      	bls.n	8006330 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80062a8:	78fa      	ldrb	r2, [r7, #3]
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	4613      	mov	r3, r2
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	1a9b      	subs	r3, r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	3348      	adds	r3, #72	@ 0x48
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80062bc:	78fa      	ldrb	r2, [r7, #3]
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	4613      	mov	r3, r2
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	1a9b      	subs	r3, r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	331b      	adds	r3, #27
 80062cc:	2200      	movs	r2, #0
 80062ce:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80062d0:	78fa      	ldrb	r2, [r7, #3]
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	4613      	mov	r3, r2
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	1a9b      	subs	r3, r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	440b      	add	r3, r1
 80062de:	3344      	adds	r3, #68	@ 0x44
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d809      	bhi.n	80062fa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80062e6:	78fa      	ldrb	r2, [r7, #3]
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	331c      	adds	r3, #28
 80062f6:	2201      	movs	r2, #1
 80062f8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80062fa:	78fb      	ldrb	r3, [r7, #3]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	4413      	add	r3, r2
 8006302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	78fa      	ldrb	r2, [r7, #3]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	440a      	add	r2, r1
 8006310:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006314:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006318:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800631a:	78fa      	ldrb	r2, [r7, #3]
 800631c:	6879      	ldr	r1, [r7, #4]
 800631e:	4613      	mov	r3, r2
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	1a9b      	subs	r3, r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	440b      	add	r3, r1
 8006328:	334c      	adds	r3, #76	@ 0x4c
 800632a:	2204      	movs	r2, #4
 800632c:	701a      	strb	r2, [r3, #0]
 800632e:	e014      	b.n	800635a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006330:	78fa      	ldrb	r2, [r7, #3]
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	4613      	mov	r3, r2
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	1a9b      	subs	r3, r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	440b      	add	r3, r1
 800633e:	334c      	adds	r3, #76	@ 0x4c
 8006340:	2202      	movs	r2, #2
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	e009      	b.n	800635a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006346:	78fa      	ldrb	r2, [r7, #3]
 8006348:	6879      	ldr	r1, [r7, #4]
 800634a:	4613      	mov	r3, r2
 800634c:	011b      	lsls	r3, r3, #4
 800634e:	1a9b      	subs	r3, r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	440b      	add	r3, r1
 8006354:	334c      	adds	r3, #76	@ 0x4c
 8006356:	2202      	movs	r2, #2
 8006358:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800635a:	78fa      	ldrb	r2, [r7, #3]
 800635c:	6879      	ldr	r1, [r7, #4]
 800635e:	4613      	mov	r3, r2
 8006360:	011b      	lsls	r3, r3, #4
 8006362:	1a9b      	subs	r3, r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	440b      	add	r3, r1
 8006368:	3326      	adds	r3, #38	@ 0x26
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00b      	beq.n	8006388 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006370:	78fa      	ldrb	r2, [r7, #3]
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	4613      	mov	r3, r2
 8006376:	011b      	lsls	r3, r3, #4
 8006378:	1a9b      	subs	r3, r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	440b      	add	r3, r1
 800637e:	3326      	adds	r3, #38	@ 0x26
 8006380:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006382:	2b02      	cmp	r3, #2
 8006384:	f040 8136 	bne.w	80065f4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006388:	78fb      	ldrb	r3, [r7, #3]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	4413      	add	r3, r2
 8006390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800639e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063a6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063b4:	461a      	mov	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	e11b      	b.n	80065f4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80063bc:	78fa      	ldrb	r2, [r7, #3]
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	4613      	mov	r3, r2
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	1a9b      	subs	r3, r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	440b      	add	r3, r1
 80063ca:	334d      	adds	r3, #77	@ 0x4d
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	f040 8081 	bne.w	80064d6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80063d4:	78fa      	ldrb	r2, [r7, #3]
 80063d6:	6879      	ldr	r1, [r7, #4]
 80063d8:	4613      	mov	r3, r2
 80063da:	011b      	lsls	r3, r3, #4
 80063dc:	1a9b      	subs	r3, r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	440b      	add	r3, r1
 80063e2:	334d      	adds	r3, #77	@ 0x4d
 80063e4:	2202      	movs	r2, #2
 80063e6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80063e8:	78fa      	ldrb	r2, [r7, #3]
 80063ea:	6879      	ldr	r1, [r7, #4]
 80063ec:	4613      	mov	r3, r2
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	1a9b      	subs	r3, r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	440b      	add	r3, r1
 80063f6:	331b      	adds	r3, #27
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	f040 80fa 	bne.w	80065f4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006400:	78fa      	ldrb	r2, [r7, #3]
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	4613      	mov	r3, r2
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	1a9b      	subs	r3, r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	440b      	add	r3, r1
 800640e:	334c      	adds	r3, #76	@ 0x4c
 8006410:	2202      	movs	r2, #2
 8006412:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	4413      	add	r3, r2
 800641c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	78fa      	ldrb	r2, [r7, #3]
 8006424:	0151      	lsls	r1, r2, #5
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	440a      	add	r2, r1
 800642a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800642e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006432:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	4413      	add	r3, r2
 800643c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	78fa      	ldrb	r2, [r7, #3]
 8006444:	0151      	lsls	r1, r2, #5
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	440a      	add	r2, r1
 800644a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800644e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006452:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8006454:	78fb      	ldrb	r3, [r7, #3]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	4413      	add	r3, r2
 800645c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	78fa      	ldrb	r2, [r7, #3]
 8006464:	0151      	lsls	r1, r2, #5
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	440a      	add	r2, r1
 800646a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800646e:	f023 0320 	bic.w	r3, r3, #32
 8006472:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006474:	78fa      	ldrb	r2, [r7, #3]
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	4613      	mov	r3, r2
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	1a9b      	subs	r3, r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	440b      	add	r3, r1
 8006482:	3326      	adds	r3, #38	@ 0x26
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00b      	beq.n	80064a2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800648a:	78fa      	ldrb	r2, [r7, #3]
 800648c:	6879      	ldr	r1, [r7, #4]
 800648e:	4613      	mov	r3, r2
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	1a9b      	subs	r3, r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	440b      	add	r3, r1
 8006498:	3326      	adds	r3, #38	@ 0x26
 800649a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800649c:	2b02      	cmp	r3, #2
 800649e:	f040 80a9 	bne.w	80065f4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80064a2:	78fb      	ldrb	r3, [r7, #3]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80064b8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064c0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80064c2:	78fb      	ldrb	r3, [r7, #3]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ce:	461a      	mov	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	e08e      	b.n	80065f4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80064d6:	78fa      	ldrb	r2, [r7, #3]
 80064d8:	6879      	ldr	r1, [r7, #4]
 80064da:	4613      	mov	r3, r2
 80064dc:	011b      	lsls	r3, r3, #4
 80064de:	1a9b      	subs	r3, r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	440b      	add	r3, r1
 80064e4:	334d      	adds	r3, #77	@ 0x4d
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d143      	bne.n	8006574 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80064ec:	78fa      	ldrb	r2, [r7, #3]
 80064ee:	6879      	ldr	r1, [r7, #4]
 80064f0:	4613      	mov	r3, r2
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	1a9b      	subs	r3, r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	440b      	add	r3, r1
 80064fa:	334d      	adds	r3, #77	@ 0x4d
 80064fc:	2202      	movs	r2, #2
 80064fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006500:	78fa      	ldrb	r2, [r7, #3]
 8006502:	6879      	ldr	r1, [r7, #4]
 8006504:	4613      	mov	r3, r2
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	1a9b      	subs	r3, r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	440b      	add	r3, r1
 800650e:	334c      	adds	r3, #76	@ 0x4c
 8006510:	2202      	movs	r2, #2
 8006512:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006514:	78fa      	ldrb	r2, [r7, #3]
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	4613      	mov	r3, r2
 800651a:	011b      	lsls	r3, r3, #4
 800651c:	1a9b      	subs	r3, r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	440b      	add	r3, r1
 8006522:	3326      	adds	r3, #38	@ 0x26
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800652a:	78fa      	ldrb	r2, [r7, #3]
 800652c:	6879      	ldr	r1, [r7, #4]
 800652e:	4613      	mov	r3, r2
 8006530:	011b      	lsls	r3, r3, #4
 8006532:	1a9b      	subs	r3, r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	440b      	add	r3, r1
 8006538:	3326      	adds	r3, #38	@ 0x26
 800653a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800653c:	2b02      	cmp	r3, #2
 800653e:	d159      	bne.n	80065f4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006540:	78fb      	ldrb	r3, [r7, #3]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	4413      	add	r3, r2
 8006548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006556:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800655e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006560:	78fb      	ldrb	r3, [r7, #3]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	4413      	add	r3, r2
 8006568:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800656c:	461a      	mov	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	e03f      	b.n	80065f4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8006574:	78fa      	ldrb	r2, [r7, #3]
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	4613      	mov	r3, r2
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	1a9b      	subs	r3, r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	440b      	add	r3, r1
 8006582:	334d      	adds	r3, #77	@ 0x4d
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	2b08      	cmp	r3, #8
 8006588:	d126      	bne.n	80065d8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800658a:	78fa      	ldrb	r2, [r7, #3]
 800658c:	6879      	ldr	r1, [r7, #4]
 800658e:	4613      	mov	r3, r2
 8006590:	011b      	lsls	r3, r3, #4
 8006592:	1a9b      	subs	r3, r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	440b      	add	r3, r1
 8006598:	334d      	adds	r3, #77	@ 0x4d
 800659a:	2202      	movs	r2, #2
 800659c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800659e:	78fa      	ldrb	r2, [r7, #3]
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	4613      	mov	r3, r2
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	1a9b      	subs	r3, r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	440b      	add	r3, r1
 80065ac:	3344      	adds	r3, #68	@ 0x44
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	1c59      	adds	r1, r3, #1
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	4613      	mov	r3, r2
 80065b6:	011b      	lsls	r3, r3, #4
 80065b8:	1a9b      	subs	r3, r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4403      	add	r3, r0
 80065be:	3344      	adds	r3, #68	@ 0x44
 80065c0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80065c2:	78fa      	ldrb	r2, [r7, #3]
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	4613      	mov	r3, r2
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	1a9b      	subs	r3, r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	440b      	add	r3, r1
 80065d0:	334c      	adds	r3, #76	@ 0x4c
 80065d2:	2204      	movs	r2, #4
 80065d4:	701a      	strb	r2, [r3, #0]
 80065d6:	e00d      	b.n	80065f4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80065d8:	78fa      	ldrb	r2, [r7, #3]
 80065da:	6879      	ldr	r1, [r7, #4]
 80065dc:	4613      	mov	r3, r2
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	1a9b      	subs	r3, r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	440b      	add	r3, r1
 80065e6:	334d      	adds	r3, #77	@ 0x4d
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	f000 8100 	beq.w	80067f0 <HCD_HC_IN_IRQHandler+0xcca>
 80065f0:	e000      	b.n	80065f4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80065f2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80065f4:	78fa      	ldrb	r2, [r7, #3]
 80065f6:	6879      	ldr	r1, [r7, #4]
 80065f8:	4613      	mov	r3, r2
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	1a9b      	subs	r3, r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	440b      	add	r3, r1
 8006602:	334c      	adds	r3, #76	@ 0x4c
 8006604:	781a      	ldrb	r2, [r3, #0]
 8006606:	78fb      	ldrb	r3, [r7, #3]
 8006608:	4619      	mov	r1, r3
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f00c f9da 	bl	80129c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006610:	e0ef      	b.n	80067f2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	78fa      	ldrb	r2, [r7, #3]
 8006618:	4611      	mov	r1, r2
 800661a:	4618      	mov	r0, r3
 800661c:	f004 fd07 	bl	800b02e <USB_ReadChInterrupts>
 8006620:	4603      	mov	r3, r0
 8006622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006626:	2b40      	cmp	r3, #64	@ 0x40
 8006628:	d12f      	bne.n	800668a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800662a:	78fb      	ldrb	r3, [r7, #3]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4413      	add	r3, r2
 8006632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006636:	461a      	mov	r2, r3
 8006638:	2340      	movs	r3, #64	@ 0x40
 800663a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800663c:	78fa      	ldrb	r2, [r7, #3]
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	4613      	mov	r3, r2
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	1a9b      	subs	r3, r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	440b      	add	r3, r1
 800664a:	334d      	adds	r3, #77	@ 0x4d
 800664c:	2205      	movs	r2, #5
 800664e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006650:	78fa      	ldrb	r2, [r7, #3]
 8006652:	6879      	ldr	r1, [r7, #4]
 8006654:	4613      	mov	r3, r2
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	1a9b      	subs	r3, r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	440b      	add	r3, r1
 800665e:	331a      	adds	r3, #26
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d109      	bne.n	800667a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006666:	78fa      	ldrb	r2, [r7, #3]
 8006668:	6879      	ldr	r1, [r7, #4]
 800666a:	4613      	mov	r3, r2
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	440b      	add	r3, r1
 8006674:	3344      	adds	r3, #68	@ 0x44
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	78fa      	ldrb	r2, [r7, #3]
 8006680:	4611      	mov	r1, r2
 8006682:	4618      	mov	r0, r3
 8006684:	f005 fa15 	bl	800bab2 <USB_HC_Halt>
 8006688:	e0b3      	b.n	80067f2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	78fa      	ldrb	r2, [r7, #3]
 8006690:	4611      	mov	r1, r2
 8006692:	4618      	mov	r0, r3
 8006694:	f004 fccb 	bl	800b02e <USB_ReadChInterrupts>
 8006698:	4603      	mov	r3, r0
 800669a:	f003 0310 	and.w	r3, r3, #16
 800669e:	2b10      	cmp	r3, #16
 80066a0:	f040 80a7 	bne.w	80067f2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80066a4:	78fa      	ldrb	r2, [r7, #3]
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	4613      	mov	r3, r2
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	1a9b      	subs	r3, r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	440b      	add	r3, r1
 80066b2:	3326      	adds	r3, #38	@ 0x26
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d11b      	bne.n	80066f2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80066ba:	78fa      	ldrb	r2, [r7, #3]
 80066bc:	6879      	ldr	r1, [r7, #4]
 80066be:	4613      	mov	r3, r2
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	1a9b      	subs	r3, r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	440b      	add	r3, r1
 80066c8:	3344      	adds	r3, #68	@ 0x44
 80066ca:	2200      	movs	r2, #0
 80066cc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80066ce:	78fa      	ldrb	r2, [r7, #3]
 80066d0:	6879      	ldr	r1, [r7, #4]
 80066d2:	4613      	mov	r3, r2
 80066d4:	011b      	lsls	r3, r3, #4
 80066d6:	1a9b      	subs	r3, r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	440b      	add	r3, r1
 80066dc:	334d      	adds	r3, #77	@ 0x4d
 80066de:	2204      	movs	r2, #4
 80066e0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	78fa      	ldrb	r2, [r7, #3]
 80066e8:	4611      	mov	r1, r2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f005 f9e1 	bl	800bab2 <USB_HC_Halt>
 80066f0:	e03f      	b.n	8006772 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80066f2:	78fa      	ldrb	r2, [r7, #3]
 80066f4:	6879      	ldr	r1, [r7, #4]
 80066f6:	4613      	mov	r3, r2
 80066f8:	011b      	lsls	r3, r3, #4
 80066fa:	1a9b      	subs	r3, r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	440b      	add	r3, r1
 8006700:	3326      	adds	r3, #38	@ 0x26
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00a      	beq.n	800671e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006708:	78fa      	ldrb	r2, [r7, #3]
 800670a:	6879      	ldr	r1, [r7, #4]
 800670c:	4613      	mov	r3, r2
 800670e:	011b      	lsls	r3, r3, #4
 8006710:	1a9b      	subs	r3, r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	440b      	add	r3, r1
 8006716:	3326      	adds	r3, #38	@ 0x26
 8006718:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800671a:	2b02      	cmp	r3, #2
 800671c:	d129      	bne.n	8006772 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800671e:	78fa      	ldrb	r2, [r7, #3]
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	4613      	mov	r3, r2
 8006724:	011b      	lsls	r3, r3, #4
 8006726:	1a9b      	subs	r3, r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	440b      	add	r3, r1
 800672c:	3344      	adds	r3, #68	@ 0x44
 800672e:	2200      	movs	r2, #0
 8006730:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	799b      	ldrb	r3, [r3, #6]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <HCD_HC_IN_IRQHandler+0xc2a>
 800673a:	78fa      	ldrb	r2, [r7, #3]
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	1a9b      	subs	r3, r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	440b      	add	r3, r1
 8006748:	331b      	adds	r3, #27
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d110      	bne.n	8006772 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8006750:	78fa      	ldrb	r2, [r7, #3]
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	4613      	mov	r3, r2
 8006756:	011b      	lsls	r3, r3, #4
 8006758:	1a9b      	subs	r3, r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	440b      	add	r3, r1
 800675e:	334d      	adds	r3, #77	@ 0x4d
 8006760:	2204      	movs	r2, #4
 8006762:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	78fa      	ldrb	r2, [r7, #3]
 800676a:	4611      	mov	r1, r2
 800676c:	4618      	mov	r0, r3
 800676e:	f005 f9a0 	bl	800bab2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8006772:	78fa      	ldrb	r2, [r7, #3]
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	4613      	mov	r3, r2
 8006778:	011b      	lsls	r3, r3, #4
 800677a:	1a9b      	subs	r3, r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	331b      	adds	r3, #27
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d129      	bne.n	80067dc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006788:	78fa      	ldrb	r2, [r7, #3]
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	4613      	mov	r3, r2
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	1a9b      	subs	r3, r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	331b      	adds	r3, #27
 8006798:	2200      	movs	r2, #0
 800679a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800679c:	78fb      	ldrb	r3, [r7, #3]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	78fa      	ldrb	r2, [r7, #3]
 80067ac:	0151      	lsls	r1, r2, #5
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	440a      	add	r2, r1
 80067b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067ba:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	78fa      	ldrb	r2, [r7, #3]
 80067cc:	0151      	lsls	r1, r2, #5
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	440a      	add	r2, r1
 80067d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067d6:	f043 0320 	orr.w	r3, r3, #32
 80067da:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067e8:	461a      	mov	r2, r3
 80067ea:	2310      	movs	r3, #16
 80067ec:	6093      	str	r3, [r2, #8]
 80067ee:	e000      	b.n	80067f2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80067f0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	78fa      	ldrb	r2, [r7, #3]
 8006814:	4611      	mov	r1, r2
 8006816:	4618      	mov	r0, r3
 8006818:	f004 fc09 	bl	800b02e <USB_ReadChInterrupts>
 800681c:	4603      	mov	r3, r0
 800681e:	f003 0304 	and.w	r3, r3, #4
 8006822:	2b04      	cmp	r3, #4
 8006824:	d11b      	bne.n	800685e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006826:	78fb      	ldrb	r3, [r7, #3]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	4413      	add	r3, r2
 800682e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006832:	461a      	mov	r2, r3
 8006834:	2304      	movs	r3, #4
 8006836:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006838:	78fa      	ldrb	r2, [r7, #3]
 800683a:	6879      	ldr	r1, [r7, #4]
 800683c:	4613      	mov	r3, r2
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	1a9b      	subs	r3, r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	440b      	add	r3, r1
 8006846:	334d      	adds	r3, #77	@ 0x4d
 8006848:	2207      	movs	r2, #7
 800684a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	78fa      	ldrb	r2, [r7, #3]
 8006852:	4611      	mov	r1, r2
 8006854:	4618      	mov	r0, r3
 8006856:	f005 f92c 	bl	800bab2 <USB_HC_Halt>
 800685a:	f000 bc89 	b.w	8007170 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	78fa      	ldrb	r2, [r7, #3]
 8006864:	4611      	mov	r1, r2
 8006866:	4618      	mov	r0, r3
 8006868:	f004 fbe1 	bl	800b02e <USB_ReadChInterrupts>
 800686c:	4603      	mov	r3, r0
 800686e:	f003 0320 	and.w	r3, r3, #32
 8006872:	2b20      	cmp	r3, #32
 8006874:	f040 8082 	bne.w	800697c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	4413      	add	r3, r2
 8006880:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006884:	461a      	mov	r2, r3
 8006886:	2320      	movs	r3, #32
 8006888:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800688a:	78fa      	ldrb	r2, [r7, #3]
 800688c:	6879      	ldr	r1, [r7, #4]
 800688e:	4613      	mov	r3, r2
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	1a9b      	subs	r3, r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	440b      	add	r3, r1
 8006898:	3319      	adds	r3, #25
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d124      	bne.n	80068ea <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80068a0:	78fa      	ldrb	r2, [r7, #3]
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	4613      	mov	r3, r2
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	1a9b      	subs	r3, r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	440b      	add	r3, r1
 80068ae:	3319      	adds	r3, #25
 80068b0:	2200      	movs	r2, #0
 80068b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80068b4:	78fa      	ldrb	r2, [r7, #3]
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	4613      	mov	r3, r2
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	1a9b      	subs	r3, r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	440b      	add	r3, r1
 80068c2:	334c      	adds	r3, #76	@ 0x4c
 80068c4:	2202      	movs	r2, #2
 80068c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80068c8:	78fa      	ldrb	r2, [r7, #3]
 80068ca:	6879      	ldr	r1, [r7, #4]
 80068cc:	4613      	mov	r3, r2
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	1a9b      	subs	r3, r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	440b      	add	r3, r1
 80068d6:	334d      	adds	r3, #77	@ 0x4d
 80068d8:	2203      	movs	r2, #3
 80068da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	78fa      	ldrb	r2, [r7, #3]
 80068e2:	4611      	mov	r1, r2
 80068e4:	4618      	mov	r0, r3
 80068e6:	f005 f8e4 	bl	800bab2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80068ea:	78fa      	ldrb	r2, [r7, #3]
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	4613      	mov	r3, r2
 80068f0:	011b      	lsls	r3, r3, #4
 80068f2:	1a9b      	subs	r3, r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	440b      	add	r3, r1
 80068f8:	331a      	adds	r3, #26
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	f040 8437 	bne.w	8007170 <HCD_HC_OUT_IRQHandler+0x978>
 8006902:	78fa      	ldrb	r2, [r7, #3]
 8006904:	6879      	ldr	r1, [r7, #4]
 8006906:	4613      	mov	r3, r2
 8006908:	011b      	lsls	r3, r3, #4
 800690a:	1a9b      	subs	r3, r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	440b      	add	r3, r1
 8006910:	331b      	adds	r3, #27
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	f040 842b 	bne.w	8007170 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800691a:	78fa      	ldrb	r2, [r7, #3]
 800691c:	6879      	ldr	r1, [r7, #4]
 800691e:	4613      	mov	r3, r2
 8006920:	011b      	lsls	r3, r3, #4
 8006922:	1a9b      	subs	r3, r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	440b      	add	r3, r1
 8006928:	3326      	adds	r3, #38	@ 0x26
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d009      	beq.n	8006944 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8006930:	78fa      	ldrb	r2, [r7, #3]
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	4613      	mov	r3, r2
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	1a9b      	subs	r3, r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	440b      	add	r3, r1
 800693e:	331b      	adds	r3, #27
 8006940:	2201      	movs	r2, #1
 8006942:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8006944:	78fa      	ldrb	r2, [r7, #3]
 8006946:	6879      	ldr	r1, [r7, #4]
 8006948:	4613      	mov	r3, r2
 800694a:	011b      	lsls	r3, r3, #4
 800694c:	1a9b      	subs	r3, r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	440b      	add	r3, r1
 8006952:	334d      	adds	r3, #77	@ 0x4d
 8006954:	2203      	movs	r2, #3
 8006956:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	78fa      	ldrb	r2, [r7, #3]
 800695e:	4611      	mov	r1, r2
 8006960:	4618      	mov	r0, r3
 8006962:	f005 f8a6 	bl	800bab2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8006966:	78fa      	ldrb	r2, [r7, #3]
 8006968:	6879      	ldr	r1, [r7, #4]
 800696a:	4613      	mov	r3, r2
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	1a9b      	subs	r3, r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	440b      	add	r3, r1
 8006974:	3344      	adds	r3, #68	@ 0x44
 8006976:	2200      	movs	r2, #0
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	e3f9      	b.n	8007170 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	78fa      	ldrb	r2, [r7, #3]
 8006982:	4611      	mov	r1, r2
 8006984:	4618      	mov	r0, r3
 8006986:	f004 fb52 	bl	800b02e <USB_ReadChInterrupts>
 800698a:	4603      	mov	r3, r0
 800698c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006994:	d111      	bne.n	80069ba <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8006996:	78fb      	ldrb	r3, [r7, #3]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	4413      	add	r3, r2
 800699e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069a2:	461a      	mov	r2, r3
 80069a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069a8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	78fa      	ldrb	r2, [r7, #3]
 80069b0:	4611      	mov	r1, r2
 80069b2:	4618      	mov	r0, r3
 80069b4:	f005 f87d 	bl	800bab2 <USB_HC_Halt>
 80069b8:	e3da      	b.n	8007170 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	78fa      	ldrb	r2, [r7, #3]
 80069c0:	4611      	mov	r1, r2
 80069c2:	4618      	mov	r0, r3
 80069c4:	f004 fb33 	bl	800b02e <USB_ReadChInterrupts>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d168      	bne.n	8006aa4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80069d2:	78fa      	ldrb	r2, [r7, #3]
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	4613      	mov	r3, r2
 80069d8:	011b      	lsls	r3, r3, #4
 80069da:	1a9b      	subs	r3, r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	440b      	add	r3, r1
 80069e0:	3344      	adds	r3, #68	@ 0x44
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	78fa      	ldrb	r2, [r7, #3]
 80069ec:	4611      	mov	r1, r2
 80069ee:	4618      	mov	r0, r3
 80069f0:	f004 fb1d 	bl	800b02e <USB_ReadChInterrupts>
 80069f4:	4603      	mov	r3, r0
 80069f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069fa:	2b40      	cmp	r3, #64	@ 0x40
 80069fc:	d112      	bne.n	8006a24 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80069fe:	78fa      	ldrb	r2, [r7, #3]
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	4613      	mov	r3, r2
 8006a04:	011b      	lsls	r3, r3, #4
 8006a06:	1a9b      	subs	r3, r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	440b      	add	r3, r1
 8006a0c:	3319      	adds	r3, #25
 8006a0e:	2201      	movs	r2, #1
 8006a10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006a12:	78fb      	ldrb	r3, [r7, #3]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a1e:	461a      	mov	r2, r3
 8006a20:	2340      	movs	r3, #64	@ 0x40
 8006a22:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8006a24:	78fa      	ldrb	r2, [r7, #3]
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	011b      	lsls	r3, r3, #4
 8006a2c:	1a9b      	subs	r3, r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	440b      	add	r3, r1
 8006a32:	331b      	adds	r3, #27
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d019      	beq.n	8006a6e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006a3a:	78fa      	ldrb	r2, [r7, #3]
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	011b      	lsls	r3, r3, #4
 8006a42:	1a9b      	subs	r3, r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	440b      	add	r3, r1
 8006a48:	331b      	adds	r3, #27
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006a4e:	78fb      	ldrb	r3, [r7, #3]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	78fa      	ldrb	r2, [r7, #3]
 8006a5e:	0151      	lsls	r1, r2, #5
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	440a      	add	r2, r1
 8006a64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a6c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006a6e:	78fb      	ldrb	r3, [r7, #3]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8006a80:	78fa      	ldrb	r2, [r7, #3]
 8006a82:	6879      	ldr	r1, [r7, #4]
 8006a84:	4613      	mov	r3, r2
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	1a9b      	subs	r3, r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	440b      	add	r3, r1
 8006a8e:	334d      	adds	r3, #77	@ 0x4d
 8006a90:	2201      	movs	r2, #1
 8006a92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	78fa      	ldrb	r2, [r7, #3]
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f005 f808 	bl	800bab2 <USB_HC_Halt>
 8006aa2:	e365      	b.n	8007170 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	78fa      	ldrb	r2, [r7, #3]
 8006aaa:	4611      	mov	r1, r2
 8006aac:	4618      	mov	r0, r3
 8006aae:	f004 fabe 	bl	800b02e <USB_ReadChInterrupts>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab8:	2b40      	cmp	r3, #64	@ 0x40
 8006aba:	d139      	bne.n	8006b30 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8006abc:	78fa      	ldrb	r2, [r7, #3]
 8006abe:	6879      	ldr	r1, [r7, #4]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	011b      	lsls	r3, r3, #4
 8006ac4:	1a9b      	subs	r3, r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	440b      	add	r3, r1
 8006aca:	334d      	adds	r3, #77	@ 0x4d
 8006acc:	2205      	movs	r2, #5
 8006ace:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006ad0:	78fa      	ldrb	r2, [r7, #3]
 8006ad2:	6879      	ldr	r1, [r7, #4]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	011b      	lsls	r3, r3, #4
 8006ad8:	1a9b      	subs	r3, r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	440b      	add	r3, r1
 8006ade:	331a      	adds	r3, #26
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d109      	bne.n	8006afa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006ae6:	78fa      	ldrb	r2, [r7, #3]
 8006ae8:	6879      	ldr	r1, [r7, #4]
 8006aea:	4613      	mov	r3, r2
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	1a9b      	subs	r3, r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	440b      	add	r3, r1
 8006af4:	3319      	adds	r3, #25
 8006af6:	2201      	movs	r2, #1
 8006af8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8006afa:	78fa      	ldrb	r2, [r7, #3]
 8006afc:	6879      	ldr	r1, [r7, #4]
 8006afe:	4613      	mov	r3, r2
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	1a9b      	subs	r3, r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	440b      	add	r3, r1
 8006b08:	3344      	adds	r3, #68	@ 0x44
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	78fa      	ldrb	r2, [r7, #3]
 8006b14:	4611      	mov	r1, r2
 8006b16:	4618      	mov	r0, r3
 8006b18:	f004 ffcb 	bl	800bab2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006b1c:	78fb      	ldrb	r3, [r7, #3]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b28:	461a      	mov	r2, r3
 8006b2a:	2340      	movs	r3, #64	@ 0x40
 8006b2c:	6093      	str	r3, [r2, #8]
 8006b2e:	e31f      	b.n	8007170 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	78fa      	ldrb	r2, [r7, #3]
 8006b36:	4611      	mov	r1, r2
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f004 fa78 	bl	800b02e <USB_ReadChInterrupts>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d11a      	bne.n	8006b7e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b54:	461a      	mov	r2, r3
 8006b56:	2308      	movs	r3, #8
 8006b58:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006b5a:	78fa      	ldrb	r2, [r7, #3]
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	1a9b      	subs	r3, r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	440b      	add	r3, r1
 8006b68:	334d      	adds	r3, #77	@ 0x4d
 8006b6a:	2206      	movs	r2, #6
 8006b6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	78fa      	ldrb	r2, [r7, #3]
 8006b74:	4611      	mov	r1, r2
 8006b76:	4618      	mov	r0, r3
 8006b78:	f004 ff9b 	bl	800bab2 <USB_HC_Halt>
 8006b7c:	e2f8      	b.n	8007170 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	78fa      	ldrb	r2, [r7, #3]
 8006b84:	4611      	mov	r1, r2
 8006b86:	4618      	mov	r0, r3
 8006b88:	f004 fa51 	bl	800b02e <USB_ReadChInterrupts>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	f003 0310 	and.w	r3, r3, #16
 8006b92:	2b10      	cmp	r3, #16
 8006b94:	d144      	bne.n	8006c20 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006b96:	78fa      	ldrb	r2, [r7, #3]
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	1a9b      	subs	r3, r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	440b      	add	r3, r1
 8006ba4:	3344      	adds	r3, #68	@ 0x44
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8006baa:	78fa      	ldrb	r2, [r7, #3]
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	1a9b      	subs	r3, r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	334d      	adds	r3, #77	@ 0x4d
 8006bba:	2204      	movs	r2, #4
 8006bbc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8006bbe:	78fa      	ldrb	r2, [r7, #3]
 8006bc0:	6879      	ldr	r1, [r7, #4]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	011b      	lsls	r3, r3, #4
 8006bc6:	1a9b      	subs	r3, r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	440b      	add	r3, r1
 8006bcc:	3319      	adds	r3, #25
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d114      	bne.n	8006bfe <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006bd4:	78fa      	ldrb	r2, [r7, #3]
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	011b      	lsls	r3, r3, #4
 8006bdc:	1a9b      	subs	r3, r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	440b      	add	r3, r1
 8006be2:	3318      	adds	r3, #24
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d109      	bne.n	8006bfe <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8006bea:	78fa      	ldrb	r2, [r7, #3]
 8006bec:	6879      	ldr	r1, [r7, #4]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	011b      	lsls	r3, r3, #4
 8006bf2:	1a9b      	subs	r3, r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	440b      	add	r3, r1
 8006bf8:	3319      	adds	r3, #25
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	78fa      	ldrb	r2, [r7, #3]
 8006c04:	4611      	mov	r1, r2
 8006c06:	4618      	mov	r0, r3
 8006c08:	f004 ff53 	bl	800bab2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c18:	461a      	mov	r2, r3
 8006c1a:	2310      	movs	r3, #16
 8006c1c:	6093      	str	r3, [r2, #8]
 8006c1e:	e2a7      	b.n	8007170 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	78fa      	ldrb	r2, [r7, #3]
 8006c26:	4611      	mov	r1, r2
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f004 fa00 	bl	800b02e <USB_ReadChInterrupts>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c34:	2b80      	cmp	r3, #128	@ 0x80
 8006c36:	f040 8083 	bne.w	8006d40 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	799b      	ldrb	r3, [r3, #6]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d111      	bne.n	8006c66 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8006c42:	78fa      	ldrb	r2, [r7, #3]
 8006c44:	6879      	ldr	r1, [r7, #4]
 8006c46:	4613      	mov	r3, r2
 8006c48:	011b      	lsls	r3, r3, #4
 8006c4a:	1a9b      	subs	r3, r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	440b      	add	r3, r1
 8006c50:	334d      	adds	r3, #77	@ 0x4d
 8006c52:	2207      	movs	r2, #7
 8006c54:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	78fa      	ldrb	r2, [r7, #3]
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f004 ff27 	bl	800bab2 <USB_HC_Halt>
 8006c64:	e062      	b.n	8006d2c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006c66:	78fa      	ldrb	r2, [r7, #3]
 8006c68:	6879      	ldr	r1, [r7, #4]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	011b      	lsls	r3, r3, #4
 8006c6e:	1a9b      	subs	r3, r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	440b      	add	r3, r1
 8006c74:	3344      	adds	r3, #68	@ 0x44
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	1c59      	adds	r1, r3, #1
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	1a9b      	subs	r3, r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4403      	add	r3, r0
 8006c86:	3344      	adds	r3, #68	@ 0x44
 8006c88:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006c8a:	78fa      	ldrb	r2, [r7, #3]
 8006c8c:	6879      	ldr	r1, [r7, #4]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	011b      	lsls	r3, r3, #4
 8006c92:	1a9b      	subs	r3, r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	440b      	add	r3, r1
 8006c98:	3344      	adds	r3, #68	@ 0x44
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d922      	bls.n	8006ce6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006ca0:	78fa      	ldrb	r2, [r7, #3]
 8006ca2:	6879      	ldr	r1, [r7, #4]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	011b      	lsls	r3, r3, #4
 8006ca8:	1a9b      	subs	r3, r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	440b      	add	r3, r1
 8006cae:	3344      	adds	r3, #68	@ 0x44
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006cb4:	78fa      	ldrb	r2, [r7, #3]
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	011b      	lsls	r3, r3, #4
 8006cbc:	1a9b      	subs	r3, r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	334c      	adds	r3, #76	@ 0x4c
 8006cc4:	2204      	movs	r2, #4
 8006cc6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006cc8:	78fa      	ldrb	r2, [r7, #3]
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	1a9b      	subs	r3, r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	440b      	add	r3, r1
 8006cd6:	334c      	adds	r3, #76	@ 0x4c
 8006cd8:	781a      	ldrb	r2, [r3, #0]
 8006cda:	78fb      	ldrb	r3, [r7, #3]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f00b fe70 	bl	80129c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006ce4:	e022      	b.n	8006d2c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006ce6:	78fa      	ldrb	r2, [r7, #3]
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	4613      	mov	r3, r2
 8006cec:	011b      	lsls	r3, r3, #4
 8006cee:	1a9b      	subs	r3, r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	440b      	add	r3, r1
 8006cf4:	334c      	adds	r3, #76	@ 0x4c
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006cfa:	78fb      	ldrb	r3, [r7, #3]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d10:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d18:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006d1a:	78fb      	ldrb	r3, [r7, #3]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d26:	461a      	mov	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006d2c:	78fb      	ldrb	r3, [r7, #3]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d38:	461a      	mov	r2, r3
 8006d3a:	2380      	movs	r3, #128	@ 0x80
 8006d3c:	6093      	str	r3, [r2, #8]
 8006d3e:	e217      	b.n	8007170 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	78fa      	ldrb	r2, [r7, #3]
 8006d46:	4611      	mov	r1, r2
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f004 f970 	bl	800b02e <USB_ReadChInterrupts>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d58:	d11b      	bne.n	8006d92 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006d5a:	78fa      	ldrb	r2, [r7, #3]
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	011b      	lsls	r3, r3, #4
 8006d62:	1a9b      	subs	r3, r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	440b      	add	r3, r1
 8006d68:	334d      	adds	r3, #77	@ 0x4d
 8006d6a:	2209      	movs	r2, #9
 8006d6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	78fa      	ldrb	r2, [r7, #3]
 8006d74:	4611      	mov	r1, r2
 8006d76:	4618      	mov	r0, r3
 8006d78:	f004 fe9b 	bl	800bab2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d8e:	6093      	str	r3, [r2, #8]
 8006d90:	e1ee      	b.n	8007170 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	78fa      	ldrb	r2, [r7, #3]
 8006d98:	4611      	mov	r1, r2
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f004 f947 	bl	800b02e <USB_ReadChInterrupts>
 8006da0:	4603      	mov	r3, r0
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	f040 81df 	bne.w	800716a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006dac:	78fb      	ldrb	r3, [r7, #3]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006db8:	461a      	mov	r2, r3
 8006dba:	2302      	movs	r3, #2
 8006dbc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006dbe:	78fa      	ldrb	r2, [r7, #3]
 8006dc0:	6879      	ldr	r1, [r7, #4]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	011b      	lsls	r3, r3, #4
 8006dc6:	1a9b      	subs	r3, r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	440b      	add	r3, r1
 8006dcc:	334d      	adds	r3, #77	@ 0x4d
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	f040 8093 	bne.w	8006efc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006dd6:	78fa      	ldrb	r2, [r7, #3]
 8006dd8:	6879      	ldr	r1, [r7, #4]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	011b      	lsls	r3, r3, #4
 8006dde:	1a9b      	subs	r3, r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	440b      	add	r3, r1
 8006de4:	334d      	adds	r3, #77	@ 0x4d
 8006de6:	2202      	movs	r2, #2
 8006de8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006dea:	78fa      	ldrb	r2, [r7, #3]
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	4613      	mov	r3, r2
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	1a9b      	subs	r3, r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	440b      	add	r3, r1
 8006df8:	334c      	adds	r3, #76	@ 0x4c
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006dfe:	78fa      	ldrb	r2, [r7, #3]
 8006e00:	6879      	ldr	r1, [r7, #4]
 8006e02:	4613      	mov	r3, r2
 8006e04:	011b      	lsls	r3, r3, #4
 8006e06:	1a9b      	subs	r3, r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	440b      	add	r3, r1
 8006e0c:	3326      	adds	r3, #38	@ 0x26
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d00b      	beq.n	8006e2c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8006e14:	78fa      	ldrb	r2, [r7, #3]
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	1a9b      	subs	r3, r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	440b      	add	r3, r1
 8006e22:	3326      	adds	r3, #38	@ 0x26
 8006e24:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	f040 8190 	bne.w	800714c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	799b      	ldrb	r3, [r3, #6]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d115      	bne.n	8006e60 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8006e34:	78fa      	ldrb	r2, [r7, #3]
 8006e36:	6879      	ldr	r1, [r7, #4]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	1a9b      	subs	r3, r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	440b      	add	r3, r1
 8006e42:	333d      	adds	r3, #61	@ 0x3d
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	78fa      	ldrb	r2, [r7, #3]
 8006e48:	f083 0301 	eor.w	r3, r3, #1
 8006e4c:	b2d8      	uxtb	r0, r3
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	4613      	mov	r3, r2
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	1a9b      	subs	r3, r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	333d      	adds	r3, #61	@ 0x3d
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	799b      	ldrb	r3, [r3, #6]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	f040 8171 	bne.w	800714c <HCD_HC_OUT_IRQHandler+0x954>
 8006e6a:	78fa      	ldrb	r2, [r7, #3]
 8006e6c:	6879      	ldr	r1, [r7, #4]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	011b      	lsls	r3, r3, #4
 8006e72:	1a9b      	subs	r3, r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	440b      	add	r3, r1
 8006e78:	3334      	adds	r3, #52	@ 0x34
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 8165 	beq.w	800714c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006e82:	78fa      	ldrb	r2, [r7, #3]
 8006e84:	6879      	ldr	r1, [r7, #4]
 8006e86:	4613      	mov	r3, r2
 8006e88:	011b      	lsls	r3, r3, #4
 8006e8a:	1a9b      	subs	r3, r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	440b      	add	r3, r1
 8006e90:	3334      	adds	r3, #52	@ 0x34
 8006e92:	6819      	ldr	r1, [r3, #0]
 8006e94:	78fa      	ldrb	r2, [r7, #3]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	011b      	lsls	r3, r3, #4
 8006e9c:	1a9b      	subs	r3, r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4403      	add	r3, r0
 8006ea2:	3328      	adds	r3, #40	@ 0x28
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	440b      	add	r3, r1
 8006ea8:	1e59      	subs	r1, r3, #1
 8006eaa:	78fa      	ldrb	r2, [r7, #3]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	011b      	lsls	r3, r3, #4
 8006eb2:	1a9b      	subs	r3, r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4403      	add	r3, r0
 8006eb8:	3328      	adds	r3, #40	@ 0x28
 8006eba:	881b      	ldrh	r3, [r3, #0]
 8006ebc:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ec0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 813f 	beq.w	800714c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006ece:	78fa      	ldrb	r2, [r7, #3]
 8006ed0:	6879      	ldr	r1, [r7, #4]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	011b      	lsls	r3, r3, #4
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	333d      	adds	r3, #61	@ 0x3d
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	78fa      	ldrb	r2, [r7, #3]
 8006ee2:	f083 0301 	eor.w	r3, r3, #1
 8006ee6:	b2d8      	uxtb	r0, r3
 8006ee8:	6879      	ldr	r1, [r7, #4]
 8006eea:	4613      	mov	r3, r2
 8006eec:	011b      	lsls	r3, r3, #4
 8006eee:	1a9b      	subs	r3, r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	440b      	add	r3, r1
 8006ef4:	333d      	adds	r3, #61	@ 0x3d
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	e127      	b.n	800714c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006efc:	78fa      	ldrb	r2, [r7, #3]
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	4613      	mov	r3, r2
 8006f02:	011b      	lsls	r3, r3, #4
 8006f04:	1a9b      	subs	r3, r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	334d      	adds	r3, #77	@ 0x4d
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d120      	bne.n	8006f54 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006f12:	78fa      	ldrb	r2, [r7, #3]
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	4613      	mov	r3, r2
 8006f18:	011b      	lsls	r3, r3, #4
 8006f1a:	1a9b      	subs	r3, r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	440b      	add	r3, r1
 8006f20:	334d      	adds	r3, #77	@ 0x4d
 8006f22:	2202      	movs	r2, #2
 8006f24:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006f26:	78fa      	ldrb	r2, [r7, #3]
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	1a9b      	subs	r3, r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	440b      	add	r3, r1
 8006f34:	331b      	adds	r3, #27
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	f040 8107 	bne.w	800714c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006f3e:	78fa      	ldrb	r2, [r7, #3]
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	4613      	mov	r3, r2
 8006f44:	011b      	lsls	r3, r3, #4
 8006f46:	1a9b      	subs	r3, r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	440b      	add	r3, r1
 8006f4c:	334c      	adds	r3, #76	@ 0x4c
 8006f4e:	2202      	movs	r2, #2
 8006f50:	701a      	strb	r2, [r3, #0]
 8006f52:	e0fb      	b.n	800714c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006f54:	78fa      	ldrb	r2, [r7, #3]
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	011b      	lsls	r3, r3, #4
 8006f5c:	1a9b      	subs	r3, r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	440b      	add	r3, r1
 8006f62:	334d      	adds	r3, #77	@ 0x4d
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d13a      	bne.n	8006fe0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006f6a:	78fa      	ldrb	r2, [r7, #3]
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	011b      	lsls	r3, r3, #4
 8006f72:	1a9b      	subs	r3, r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	440b      	add	r3, r1
 8006f78:	334d      	adds	r3, #77	@ 0x4d
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006f7e:	78fa      	ldrb	r2, [r7, #3]
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	4613      	mov	r3, r2
 8006f84:	011b      	lsls	r3, r3, #4
 8006f86:	1a9b      	subs	r3, r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	440b      	add	r3, r1
 8006f8c:	334c      	adds	r3, #76	@ 0x4c
 8006f8e:	2202      	movs	r2, #2
 8006f90:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006f92:	78fa      	ldrb	r2, [r7, #3]
 8006f94:	6879      	ldr	r1, [r7, #4]
 8006f96:	4613      	mov	r3, r2
 8006f98:	011b      	lsls	r3, r3, #4
 8006f9a:	1a9b      	subs	r3, r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	440b      	add	r3, r1
 8006fa0:	331b      	adds	r3, #27
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	f040 80d1 	bne.w	800714c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006faa:	78fa      	ldrb	r2, [r7, #3]
 8006fac:	6879      	ldr	r1, [r7, #4]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	011b      	lsls	r3, r3, #4
 8006fb2:	1a9b      	subs	r3, r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	440b      	add	r3, r1
 8006fb8:	331b      	adds	r3, #27
 8006fba:	2200      	movs	r2, #0
 8006fbc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006fbe:	78fb      	ldrb	r3, [r7, #3]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	78fa      	ldrb	r2, [r7, #3]
 8006fce:	0151      	lsls	r1, r2, #5
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	440a      	add	r2, r1
 8006fd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fdc:	6053      	str	r3, [r2, #4]
 8006fde:	e0b5      	b.n	800714c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006fe0:	78fa      	ldrb	r2, [r7, #3]
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	1a9b      	subs	r3, r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	440b      	add	r3, r1
 8006fee:	334d      	adds	r3, #77	@ 0x4d
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	2b05      	cmp	r3, #5
 8006ff4:	d114      	bne.n	8007020 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006ff6:	78fa      	ldrb	r2, [r7, #3]
 8006ff8:	6879      	ldr	r1, [r7, #4]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	1a9b      	subs	r3, r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	440b      	add	r3, r1
 8007004:	334d      	adds	r3, #77	@ 0x4d
 8007006:	2202      	movs	r2, #2
 8007008:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800700a:	78fa      	ldrb	r2, [r7, #3]
 800700c:	6879      	ldr	r1, [r7, #4]
 800700e:	4613      	mov	r3, r2
 8007010:	011b      	lsls	r3, r3, #4
 8007012:	1a9b      	subs	r3, r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	440b      	add	r3, r1
 8007018:	334c      	adds	r3, #76	@ 0x4c
 800701a:	2202      	movs	r2, #2
 800701c:	701a      	strb	r2, [r3, #0]
 800701e:	e095      	b.n	800714c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8007020:	78fa      	ldrb	r2, [r7, #3]
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	4613      	mov	r3, r2
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	1a9b      	subs	r3, r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	440b      	add	r3, r1
 800702e:	334d      	adds	r3, #77	@ 0x4d
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b06      	cmp	r3, #6
 8007034:	d114      	bne.n	8007060 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007036:	78fa      	ldrb	r2, [r7, #3]
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	4613      	mov	r3, r2
 800703c:	011b      	lsls	r3, r3, #4
 800703e:	1a9b      	subs	r3, r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	440b      	add	r3, r1
 8007044:	334d      	adds	r3, #77	@ 0x4d
 8007046:	2202      	movs	r2, #2
 8007048:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800704a:	78fa      	ldrb	r2, [r7, #3]
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	4613      	mov	r3, r2
 8007050:	011b      	lsls	r3, r3, #4
 8007052:	1a9b      	subs	r3, r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	440b      	add	r3, r1
 8007058:	334c      	adds	r3, #76	@ 0x4c
 800705a:	2205      	movs	r2, #5
 800705c:	701a      	strb	r2, [r3, #0]
 800705e:	e075      	b.n	800714c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007060:	78fa      	ldrb	r2, [r7, #3]
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	4613      	mov	r3, r2
 8007066:	011b      	lsls	r3, r3, #4
 8007068:	1a9b      	subs	r3, r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	440b      	add	r3, r1
 800706e:	334d      	adds	r3, #77	@ 0x4d
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	2b07      	cmp	r3, #7
 8007074:	d00a      	beq.n	800708c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8007076:	78fa      	ldrb	r2, [r7, #3]
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	4613      	mov	r3, r2
 800707c:	011b      	lsls	r3, r3, #4
 800707e:	1a9b      	subs	r3, r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	440b      	add	r3, r1
 8007084:	334d      	adds	r3, #77	@ 0x4d
 8007086:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007088:	2b09      	cmp	r3, #9
 800708a:	d170      	bne.n	800716e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800708c:	78fa      	ldrb	r2, [r7, #3]
 800708e:	6879      	ldr	r1, [r7, #4]
 8007090:	4613      	mov	r3, r2
 8007092:	011b      	lsls	r3, r3, #4
 8007094:	1a9b      	subs	r3, r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	440b      	add	r3, r1
 800709a:	334d      	adds	r3, #77	@ 0x4d
 800709c:	2202      	movs	r2, #2
 800709e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80070a0:	78fa      	ldrb	r2, [r7, #3]
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	4613      	mov	r3, r2
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	1a9b      	subs	r3, r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	440b      	add	r3, r1
 80070ae:	3344      	adds	r3, #68	@ 0x44
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	1c59      	adds	r1, r3, #1
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	4613      	mov	r3, r2
 80070b8:	011b      	lsls	r3, r3, #4
 80070ba:	1a9b      	subs	r3, r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4403      	add	r3, r0
 80070c0:	3344      	adds	r3, #68	@ 0x44
 80070c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80070c4:	78fa      	ldrb	r2, [r7, #3]
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	4613      	mov	r3, r2
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	1a9b      	subs	r3, r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	440b      	add	r3, r1
 80070d2:	3344      	adds	r3, #68	@ 0x44
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d914      	bls.n	8007104 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80070da:	78fa      	ldrb	r2, [r7, #3]
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	4613      	mov	r3, r2
 80070e0:	011b      	lsls	r3, r3, #4
 80070e2:	1a9b      	subs	r3, r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	440b      	add	r3, r1
 80070e8:	3344      	adds	r3, #68	@ 0x44
 80070ea:	2200      	movs	r2, #0
 80070ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80070ee:	78fa      	ldrb	r2, [r7, #3]
 80070f0:	6879      	ldr	r1, [r7, #4]
 80070f2:	4613      	mov	r3, r2
 80070f4:	011b      	lsls	r3, r3, #4
 80070f6:	1a9b      	subs	r3, r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	440b      	add	r3, r1
 80070fc:	334c      	adds	r3, #76	@ 0x4c
 80070fe:	2204      	movs	r2, #4
 8007100:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007102:	e022      	b.n	800714a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007104:	78fa      	ldrb	r2, [r7, #3]
 8007106:	6879      	ldr	r1, [r7, #4]
 8007108:	4613      	mov	r3, r2
 800710a:	011b      	lsls	r3, r3, #4
 800710c:	1a9b      	subs	r3, r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	440b      	add	r3, r1
 8007112:	334c      	adds	r3, #76	@ 0x4c
 8007114:	2202      	movs	r2, #2
 8007116:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007118:	78fb      	ldrb	r3, [r7, #3]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	4413      	add	r3, r2
 8007120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800712e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007136:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	4413      	add	r3, r2
 8007140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007144:	461a      	mov	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800714a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800714c:	78fa      	ldrb	r2, [r7, #3]
 800714e:	6879      	ldr	r1, [r7, #4]
 8007150:	4613      	mov	r3, r2
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	1a9b      	subs	r3, r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	440b      	add	r3, r1
 800715a:	334c      	adds	r3, #76	@ 0x4c
 800715c:	781a      	ldrb	r2, [r3, #0]
 800715e:	78fb      	ldrb	r3, [r7, #3]
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f00b fc2e 	bl	80129c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007168:	e002      	b.n	8007170 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800716a:	bf00      	nop
 800716c:	e000      	b.n	8007170 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800716e:	bf00      	nop
  }
}
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b08a      	sub	sp, #40	@ 0x28
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007186:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	0c5b      	lsrs	r3, r3, #17
 800719c:	f003 030f 	and.w	r3, r3, #15
 80071a0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	091b      	lsrs	r3, r3, #4
 80071a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071aa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d004      	beq.n	80071bc <HCD_RXQLVL_IRQHandler+0x46>
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b05      	cmp	r3, #5
 80071b6:	f000 80b6 	beq.w	8007326 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80071ba:	e0b7      	b.n	800732c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 80b3 	beq.w	800732a <HCD_RXQLVL_IRQHandler+0x1b4>
 80071c4:	6879      	ldr	r1, [r7, #4]
 80071c6:	69ba      	ldr	r2, [r7, #24]
 80071c8:	4613      	mov	r3, r2
 80071ca:	011b      	lsls	r3, r3, #4
 80071cc:	1a9b      	subs	r3, r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	440b      	add	r3, r1
 80071d2:	332c      	adds	r3, #44	@ 0x2c
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 80a7 	beq.w	800732a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80071dc:	6879      	ldr	r1, [r7, #4]
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	4613      	mov	r3, r2
 80071e2:	011b      	lsls	r3, r3, #4
 80071e4:	1a9b      	subs	r3, r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	440b      	add	r3, r1
 80071ea:	3338      	adds	r3, #56	@ 0x38
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	18d1      	adds	r1, r2, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	4613      	mov	r3, r2
 80071f8:	011b      	lsls	r3, r3, #4
 80071fa:	1a9b      	subs	r3, r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4403      	add	r3, r0
 8007200:	3334      	adds	r3, #52	@ 0x34
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4299      	cmp	r1, r3
 8007206:	f200 8083 	bhi.w	8007310 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6818      	ldr	r0, [r3, #0]
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	4613      	mov	r3, r2
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	1a9b      	subs	r3, r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	440b      	add	r3, r1
 800721c:	332c      	adds	r3, #44	@ 0x2c
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	b292      	uxth	r2, r2
 8007224:	4619      	mov	r1, r3
 8007226:	f003 fe97 	bl	800af58 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800722a:	6879      	ldr	r1, [r7, #4]
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	4613      	mov	r3, r2
 8007230:	011b      	lsls	r3, r3, #4
 8007232:	1a9b      	subs	r3, r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	440b      	add	r3, r1
 8007238:	332c      	adds	r3, #44	@ 0x2c
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	18d1      	adds	r1, r2, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	4613      	mov	r3, r2
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	1a9b      	subs	r3, r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4403      	add	r3, r0
 800724e:	332c      	adds	r3, #44	@ 0x2c
 8007250:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	4613      	mov	r3, r2
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	1a9b      	subs	r3, r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	440b      	add	r3, r1
 8007260:	3338      	adds	r3, #56	@ 0x38
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	18d1      	adds	r1, r2, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	4613      	mov	r3, r2
 800726e:	011b      	lsls	r3, r3, #4
 8007270:	1a9b      	subs	r3, r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4403      	add	r3, r0
 8007276:	3338      	adds	r3, #56	@ 0x38
 8007278:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	4413      	add	r3, r2
 8007282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	0cdb      	lsrs	r3, r3, #19
 800728a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800728e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	4613      	mov	r3, r2
 8007296:	011b      	lsls	r3, r3, #4
 8007298:	1a9b      	subs	r3, r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	440b      	add	r3, r1
 800729e:	3328      	adds	r3, #40	@ 0x28
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d13f      	bne.n	800732a <HCD_RXQLVL_IRQHandler+0x1b4>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d03c      	beq.n	800732a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80072c6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072ce:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072dc:	461a      	mov	r2, r3
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80072e2:	6879      	ldr	r1, [r7, #4]
 80072e4:	69ba      	ldr	r2, [r7, #24]
 80072e6:	4613      	mov	r3, r2
 80072e8:	011b      	lsls	r3, r3, #4
 80072ea:	1a9b      	subs	r3, r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	440b      	add	r3, r1
 80072f0:	333c      	adds	r3, #60	@ 0x3c
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	f083 0301 	eor.w	r3, r3, #1
 80072f8:	b2d8      	uxtb	r0, r3
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	4613      	mov	r3, r2
 8007300:	011b      	lsls	r3, r3, #4
 8007302:	1a9b      	subs	r3, r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	440b      	add	r3, r1
 8007308:	333c      	adds	r3, #60	@ 0x3c
 800730a:	4602      	mov	r2, r0
 800730c:	701a      	strb	r2, [r3, #0]
      break;
 800730e:	e00c      	b.n	800732a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	4613      	mov	r3, r2
 8007316:	011b      	lsls	r3, r3, #4
 8007318:	1a9b      	subs	r3, r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	440b      	add	r3, r1
 800731e:	334c      	adds	r3, #76	@ 0x4c
 8007320:	2204      	movs	r2, #4
 8007322:	701a      	strb	r2, [r3, #0]
      break;
 8007324:	e001      	b.n	800732a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8007326:	bf00      	nop
 8007328:	e000      	b.n	800732c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800732a:	bf00      	nop
  }
}
 800732c:	bf00      	nop
 800732e:	3728      	adds	r7, #40	@ 0x28
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007360:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b02      	cmp	r3, #2
 800736a:	d10b      	bne.n	8007384 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b01      	cmp	r3, #1
 8007374:	d102      	bne.n	800737c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f00b fb08 	bl	801298c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	f043 0302 	orr.w	r3, r3, #2
 8007382:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f003 0308 	and.w	r3, r3, #8
 800738a:	2b08      	cmp	r3, #8
 800738c:	d132      	bne.n	80073f4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f043 0308 	orr.w	r3, r3, #8
 8007394:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f003 0304 	and.w	r3, r3, #4
 800739c:	2b04      	cmp	r3, #4
 800739e:	d126      	bne.n	80073ee <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	7a5b      	ldrb	r3, [r3, #9]
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d113      	bne.n	80073d0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80073ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80073b2:	d106      	bne.n	80073c2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2102      	movs	r1, #2
 80073ba:	4618      	mov	r0, r3
 80073bc:	f003 ff46 	bl	800b24c <USB_InitFSLSPClkSel>
 80073c0:	e011      	b.n	80073e6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2101      	movs	r1, #1
 80073c8:	4618      	mov	r0, r3
 80073ca:	f003 ff3f 	bl	800b24c <USB_InitFSLSPClkSel>
 80073ce:	e00a      	b.n	80073e6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	79db      	ldrb	r3, [r3, #7]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d106      	bne.n	80073e6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073de:	461a      	mov	r2, r3
 80073e0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80073e4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f00b fafa 	bl	80129e0 <HAL_HCD_PortEnabled_Callback>
 80073ec:	e002      	b.n	80073f4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f00b fb04 	bl	80129fc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f003 0320 	and.w	r3, r3, #32
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d103      	bne.n	8007406 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	f043 0320 	orr.w	r3, r3, #32
 8007404:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800740c:	461a      	mov	r2, r3
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	6013      	str	r3, [r2, #0]
}
 8007412:	bf00      	nop
 8007414:	3718      	adds	r7, #24
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
	...

0800741c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e12b      	b.n	8007686 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d106      	bne.n	8007448 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fb fd38 	bl	8002eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2224      	movs	r2, #36	@ 0x24
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0201 	bic.w	r2, r2, #1
 800745e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800746e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800747e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007480:	f002 ffe8 	bl	800a454 <HAL_RCC_GetPCLK1Freq>
 8007484:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	4a81      	ldr	r2, [pc, #516]	@ (8007690 <HAL_I2C_Init+0x274>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d807      	bhi.n	80074a0 <HAL_I2C_Init+0x84>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4a80      	ldr	r2, [pc, #512]	@ (8007694 <HAL_I2C_Init+0x278>)
 8007494:	4293      	cmp	r3, r2
 8007496:	bf94      	ite	ls
 8007498:	2301      	movls	r3, #1
 800749a:	2300      	movhi	r3, #0
 800749c:	b2db      	uxtb	r3, r3
 800749e:	e006      	b.n	80074ae <HAL_I2C_Init+0x92>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4a7d      	ldr	r2, [pc, #500]	@ (8007698 <HAL_I2C_Init+0x27c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	bf94      	ite	ls
 80074a8:	2301      	movls	r3, #1
 80074aa:	2300      	movhi	r3, #0
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e0e7      	b.n	8007686 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	4a78      	ldr	r2, [pc, #480]	@ (800769c <HAL_I2C_Init+0x280>)
 80074ba:	fba2 2303 	umull	r2, r3, r2, r3
 80074be:	0c9b      	lsrs	r3, r3, #18
 80074c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	4a6a      	ldr	r2, [pc, #424]	@ (8007690 <HAL_I2C_Init+0x274>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d802      	bhi.n	80074f0 <HAL_I2C_Init+0xd4>
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	3301      	adds	r3, #1
 80074ee:	e009      	b.n	8007504 <HAL_I2C_Init+0xe8>
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80074f6:	fb02 f303 	mul.w	r3, r2, r3
 80074fa:	4a69      	ldr	r2, [pc, #420]	@ (80076a0 <HAL_I2C_Init+0x284>)
 80074fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007500:	099b      	lsrs	r3, r3, #6
 8007502:	3301      	adds	r3, #1
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	6812      	ldr	r2, [r2, #0]
 8007508:	430b      	orrs	r3, r1
 800750a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007516:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	495c      	ldr	r1, [pc, #368]	@ (8007690 <HAL_I2C_Init+0x274>)
 8007520:	428b      	cmp	r3, r1
 8007522:	d819      	bhi.n	8007558 <HAL_I2C_Init+0x13c>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	1e59      	subs	r1, r3, #1
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007532:	1c59      	adds	r1, r3, #1
 8007534:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007538:	400b      	ands	r3, r1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <HAL_I2C_Init+0x138>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	1e59      	subs	r1, r3, #1
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	fbb1 f3f3 	udiv	r3, r1, r3
 800754c:	3301      	adds	r3, #1
 800754e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007552:	e051      	b.n	80075f8 <HAL_I2C_Init+0x1dc>
 8007554:	2304      	movs	r3, #4
 8007556:	e04f      	b.n	80075f8 <HAL_I2C_Init+0x1dc>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d111      	bne.n	8007584 <HAL_I2C_Init+0x168>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	1e58      	subs	r0, r3, #1
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6859      	ldr	r1, [r3, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	005b      	lsls	r3, r3, #1
 800756c:	440b      	add	r3, r1
 800756e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007572:	3301      	adds	r3, #1
 8007574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007578:	2b00      	cmp	r3, #0
 800757a:	bf0c      	ite	eq
 800757c:	2301      	moveq	r3, #1
 800757e:	2300      	movne	r3, #0
 8007580:	b2db      	uxtb	r3, r3
 8007582:	e012      	b.n	80075aa <HAL_I2C_Init+0x18e>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	1e58      	subs	r0, r3, #1
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6859      	ldr	r1, [r3, #4]
 800758c:	460b      	mov	r3, r1
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	440b      	add	r3, r1
 8007592:	0099      	lsls	r1, r3, #2
 8007594:	440b      	add	r3, r1
 8007596:	fbb0 f3f3 	udiv	r3, r0, r3
 800759a:	3301      	adds	r3, #1
 800759c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	bf0c      	ite	eq
 80075a4:	2301      	moveq	r3, #1
 80075a6:	2300      	movne	r3, #0
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <HAL_I2C_Init+0x196>
 80075ae:	2301      	movs	r3, #1
 80075b0:	e022      	b.n	80075f8 <HAL_I2C_Init+0x1dc>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10e      	bne.n	80075d8 <HAL_I2C_Init+0x1bc>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	1e58      	subs	r0, r3, #1
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6859      	ldr	r1, [r3, #4]
 80075c2:	460b      	mov	r3, r1
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	440b      	add	r3, r1
 80075c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80075cc:	3301      	adds	r3, #1
 80075ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075d6:	e00f      	b.n	80075f8 <HAL_I2C_Init+0x1dc>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	1e58      	subs	r0, r3, #1
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6859      	ldr	r1, [r3, #4]
 80075e0:	460b      	mov	r3, r1
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	440b      	add	r3, r1
 80075e6:	0099      	lsls	r1, r3, #2
 80075e8:	440b      	add	r3, r1
 80075ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80075ee:	3301      	adds	r3, #1
 80075f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80075f8:	6879      	ldr	r1, [r7, #4]
 80075fa:	6809      	ldr	r1, [r1, #0]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69da      	ldr	r2, [r3, #28]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	431a      	orrs	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007626:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	6911      	ldr	r1, [r2, #16]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	68d2      	ldr	r2, [r2, #12]
 8007632:	4311      	orrs	r1, r2
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6812      	ldr	r2, [r2, #0]
 8007638:	430b      	orrs	r3, r1
 800763a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	695a      	ldr	r2, [r3, #20]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	431a      	orrs	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 0201 	orr.w	r2, r2, #1
 8007666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2220      	movs	r2, #32
 8007672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	000186a0 	.word	0x000186a0
 8007694:	001e847f 	.word	0x001e847f
 8007698:	003d08ff 	.word	0x003d08ff
 800769c:	431bde83 	.word	0x431bde83
 80076a0:	10624dd3 	.word	0x10624dd3

080076a4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e021      	b.n	80076fa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2224      	movs	r2, #36	@ 0x24
 80076ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 0201 	bic.w	r2, r2, #1
 80076cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7fb fc80 	bl	8002fd4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b088      	sub	sp, #32
 8007708:	af02      	add	r7, sp, #8
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	607a      	str	r2, [r7, #4]
 800770e:	461a      	mov	r2, r3
 8007710:	460b      	mov	r3, r1
 8007712:	817b      	strh	r3, [r7, #10]
 8007714:	4613      	mov	r3, r2
 8007716:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007718:	f7fc f8c6 	bl	80038a8 <HAL_GetTick>
 800771c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b20      	cmp	r3, #32
 8007728:	f040 80e0 	bne.w	80078ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	2319      	movs	r3, #25
 8007732:	2201      	movs	r2, #1
 8007734:	4970      	ldr	r1, [pc, #448]	@ (80078f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 ff4a 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007742:	2302      	movs	r3, #2
 8007744:	e0d3      	b.n	80078ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <HAL_I2C_Master_Transmit+0x50>
 8007750:	2302      	movs	r3, #2
 8007752:	e0cc      	b.n	80078ee <HAL_I2C_Master_Transmit+0x1ea>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b01      	cmp	r3, #1
 8007768:	d007      	beq.n	800777a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f042 0201 	orr.w	r2, r2, #1
 8007778:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007788:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2221      	movs	r2, #33	@ 0x21
 800778e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2210      	movs	r2, #16
 8007796:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	893a      	ldrh	r2, [r7, #8]
 80077aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	4a50      	ldr	r2, [pc, #320]	@ (80078fc <HAL_I2C_Master_Transmit+0x1f8>)
 80077ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80077bc:	8979      	ldrh	r1, [r7, #10]
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	6a3a      	ldr	r2, [r7, #32]
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 fd04 	bl	80081d0 <I2C_MasterRequestWrite>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e08d      	b.n	80078ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077d2:	2300      	movs	r3, #0
 80077d4:	613b      	str	r3, [r7, #16]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	613b      	str	r3, [r7, #16]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	613b      	str	r3, [r7, #16]
 80077e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80077e8:	e066      	b.n	80078b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	6a39      	ldr	r1, [r7, #32]
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f001 f808 	bl	8008804 <I2C_WaitOnTXEFlagUntilTimeout>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00d      	beq.n	8007816 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077fe:	2b04      	cmp	r3, #4
 8007800:	d107      	bne.n	8007812 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007810:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e06b      	b.n	80078ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800781a:	781a      	ldrb	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007830:	b29b      	uxth	r3, r3
 8007832:	3b01      	subs	r3, #1
 8007834:	b29a      	uxth	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800783e:	3b01      	subs	r3, #1
 8007840:	b29a      	uxth	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	f003 0304 	and.w	r3, r3, #4
 8007850:	2b04      	cmp	r3, #4
 8007852:	d11b      	bne.n	800788c <HAL_I2C_Master_Transmit+0x188>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007858:	2b00      	cmp	r3, #0
 800785a:	d017      	beq.n	800788c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007860:	781a      	ldrb	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007876:	b29b      	uxth	r3, r3
 8007878:	3b01      	subs	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007884:	3b01      	subs	r3, #1
 8007886:	b29a      	uxth	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	6a39      	ldr	r1, [r7, #32]
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 ffff 	bl	8008894 <I2C_WaitOnBTFFlagUntilTimeout>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00d      	beq.n	80078b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a0:	2b04      	cmp	r3, #4
 80078a2:	d107      	bne.n	80078b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e01a      	b.n	80078ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d194      	bne.n	80077ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2220      	movs	r2, #32
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	e000      	b.n	80078ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80078ec:	2302      	movs	r3, #2
  }
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	00100002 	.word	0x00100002
 80078fc:	ffff0000 	.word	0xffff0000

08007900 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af02      	add	r7, sp, #8
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	4608      	mov	r0, r1
 800790a:	4611      	mov	r1, r2
 800790c:	461a      	mov	r2, r3
 800790e:	4603      	mov	r3, r0
 8007910:	817b      	strh	r3, [r7, #10]
 8007912:	460b      	mov	r3, r1
 8007914:	813b      	strh	r3, [r7, #8]
 8007916:	4613      	mov	r3, r2
 8007918:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800791a:	f7fb ffc5 	bl	80038a8 <HAL_GetTick>
 800791e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b20      	cmp	r3, #32
 800792a:	f040 80d9 	bne.w	8007ae0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	2319      	movs	r3, #25
 8007934:	2201      	movs	r2, #1
 8007936:	496d      	ldr	r1, [pc, #436]	@ (8007aec <HAL_I2C_Mem_Write+0x1ec>)
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f000 fe49 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007944:	2302      	movs	r3, #2
 8007946:	e0cc      	b.n	8007ae2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800794e:	2b01      	cmp	r3, #1
 8007950:	d101      	bne.n	8007956 <HAL_I2C_Mem_Write+0x56>
 8007952:	2302      	movs	r3, #2
 8007954:	e0c5      	b.n	8007ae2 <HAL_I2C_Mem_Write+0x1e2>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b01      	cmp	r3, #1
 800796a:	d007      	beq.n	800797c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f042 0201 	orr.w	r2, r2, #1
 800797a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800798a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2221      	movs	r2, #33	@ 0x21
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2240      	movs	r2, #64	@ 0x40
 8007998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6a3a      	ldr	r2, [r7, #32]
 80079a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80079ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	4a4d      	ldr	r2, [pc, #308]	@ (8007af0 <HAL_I2C_Mem_Write+0x1f0>)
 80079bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80079be:	88f8      	ldrh	r0, [r7, #6]
 80079c0:	893a      	ldrh	r2, [r7, #8]
 80079c2:	8979      	ldrh	r1, [r7, #10]
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	9301      	str	r3, [sp, #4]
 80079c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	4603      	mov	r3, r0
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f000 fc80 	bl	80082d4 <I2C_RequestMemoryWrite>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d052      	beq.n	8007a80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e081      	b.n	8007ae2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 ff0e 	bl	8008804 <I2C_WaitOnTXEFlagUntilTimeout>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00d      	beq.n	8007a0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	d107      	bne.n	8007a06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e06b      	b.n	8007ae2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a0e:	781a      	ldrb	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1a:	1c5a      	adds	r2, r3, #1
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a24:	3b01      	subs	r3, #1
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	3b01      	subs	r3, #1
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	695b      	ldr	r3, [r3, #20]
 8007a40:	f003 0304 	and.w	r3, r3, #4
 8007a44:	2b04      	cmp	r3, #4
 8007a46:	d11b      	bne.n	8007a80 <HAL_I2C_Mem_Write+0x180>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d017      	beq.n	8007a80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a54:	781a      	ldrb	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1aa      	bne.n	80079de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 ff01 	bl	8008894 <I2C_WaitOnBTFFlagUntilTimeout>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00d      	beq.n	8007ab4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a9c:	2b04      	cmp	r3, #4
 8007a9e:	d107      	bne.n	8007ab0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007aae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e016      	b.n	8007ae2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2220      	movs	r2, #32
 8007ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	e000      	b.n	8007ae2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007ae0:	2302      	movs	r3, #2
  }
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	00100002 	.word	0x00100002
 8007af0:	ffff0000 	.word	0xffff0000

08007af4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08c      	sub	sp, #48	@ 0x30
 8007af8:	af02      	add	r7, sp, #8
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	4608      	mov	r0, r1
 8007afe:	4611      	mov	r1, r2
 8007b00:	461a      	mov	r2, r3
 8007b02:	4603      	mov	r3, r0
 8007b04:	817b      	strh	r3, [r7, #10]
 8007b06:	460b      	mov	r3, r1
 8007b08:	813b      	strh	r3, [r7, #8]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007b0e:	f7fb fecb 	bl	80038a8 <HAL_GetTick>
 8007b12:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b20      	cmp	r3, #32
 8007b1e:	f040 8214 	bne.w	8007f4a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	2319      	movs	r3, #25
 8007b28:	2201      	movs	r2, #1
 8007b2a:	497b      	ldr	r1, [pc, #492]	@ (8007d18 <HAL_I2C_Mem_Read+0x224>)
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 fd4f 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007b38:	2302      	movs	r3, #2
 8007b3a:	e207      	b.n	8007f4c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d101      	bne.n	8007b4a <HAL_I2C_Mem_Read+0x56>
 8007b46:	2302      	movs	r3, #2
 8007b48:	e200      	b.n	8007f4c <HAL_I2C_Mem_Read+0x458>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d007      	beq.n	8007b70 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f042 0201 	orr.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2222      	movs	r2, #34	@ 0x22
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2240      	movs	r2, #64	@ 0x40
 8007b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007ba0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4a5b      	ldr	r2, [pc, #364]	@ (8007d1c <HAL_I2C_Mem_Read+0x228>)
 8007bb0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007bb2:	88f8      	ldrh	r0, [r7, #6]
 8007bb4:	893a      	ldrh	r2, [r7, #8]
 8007bb6:	8979      	ldrh	r1, [r7, #10]
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bba:	9301      	str	r3, [sp, #4]
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 fc1c 	bl	8008400 <I2C_RequestMemoryRead>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e1bc      	b.n	8007f4c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d113      	bne.n	8007c02 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bda:	2300      	movs	r3, #0
 8007bdc:	623b      	str	r3, [r7, #32]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	623b      	str	r3, [r7, #32]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	623b      	str	r3, [r7, #32]
 8007bee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	e190      	b.n	8007f24 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d11b      	bne.n	8007c42 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	61fb      	str	r3, [r7, #28]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	61fb      	str	r3, [r7, #28]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	61fb      	str	r3, [r7, #28]
 8007c2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	e170      	b.n	8007f24 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d11b      	bne.n	8007c82 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c58:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	61bb      	str	r3, [r7, #24]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	61bb      	str	r3, [r7, #24]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	61bb      	str	r3, [r7, #24]
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	e150      	b.n	8007f24 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c82:	2300      	movs	r3, #0
 8007c84:	617b      	str	r3, [r7, #20]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	617b      	str	r3, [r7, #20]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	617b      	str	r3, [r7, #20]
 8007c96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007c98:	e144      	b.n	8007f24 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	f200 80f1 	bhi.w	8007e86 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d123      	bne.n	8007cf4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 fe37 	bl	8008924 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e145      	b.n	8007f4c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	691a      	ldr	r2, [r3, #16]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	3b01      	subs	r3, #1
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007cf2:	e117      	b.n	8007f24 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d14e      	bne.n	8007d9a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d02:	2200      	movs	r2, #0
 8007d04:	4906      	ldr	r1, [pc, #24]	@ (8007d20 <HAL_I2C_Mem_Read+0x22c>)
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 fc62 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d008      	beq.n	8007d24 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e11a      	b.n	8007f4c <HAL_I2C_Mem_Read+0x458>
 8007d16:	bf00      	nop
 8007d18:	00100002 	.word	0x00100002
 8007d1c:	ffff0000 	.word	0xffff0000
 8007d20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	691a      	ldr	r2, [r3, #16]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3e:	b2d2      	uxtb	r2, r2
 8007d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d50:	3b01      	subs	r3, #1
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	691a      	ldr	r2, [r3, #16]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d70:	b2d2      	uxtb	r2, r2
 8007d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d78:	1c5a      	adds	r2, r3, #1
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d82:	3b01      	subs	r3, #1
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	3b01      	subs	r3, #1
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007d98:	e0c4      	b.n	8007f24 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da0:	2200      	movs	r2, #0
 8007da2:	496c      	ldr	r1, [pc, #432]	@ (8007f54 <HAL_I2C_Mem_Read+0x460>)
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 fc13 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e0cb      	b.n	8007f4c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	691a      	ldr	r2, [r3, #16]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dce:	b2d2      	uxtb	r2, r2
 8007dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007de0:	3b01      	subs	r3, #1
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	3b01      	subs	r3, #1
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	4955      	ldr	r1, [pc, #340]	@ (8007f54 <HAL_I2C_Mem_Read+0x460>)
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 fbe5 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e09d      	b.n	8007f4c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	691a      	ldr	r2, [r3, #16]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2a:	b2d2      	uxtb	r2, r2
 8007e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	691a      	ldr	r2, [r3, #16]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e5c:	b2d2      	uxtb	r2, r2
 8007e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007e84:	e04e      	b.n	8007f24 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e88:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 fd4a 	bl	8008924 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e058      	b.n	8007f4c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	691a      	ldr	r2, [r3, #16]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea4:	b2d2      	uxtb	r2, r2
 8007ea6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eac:	1c5a      	adds	r2, r3, #1
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	f003 0304 	and.w	r3, r3, #4
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	d124      	bne.n	8007f24 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d107      	bne.n	8007ef2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ef0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	691a      	ldr	r2, [r3, #16]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007efc:	b2d2      	uxtb	r2, r2
 8007efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f04:	1c5a      	adds	r2, r3, #1
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f47f aeb6 	bne.w	8007c9a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2220      	movs	r2, #32
 8007f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	e000      	b.n	8007f4c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007f4a:	2302      	movs	r3, #2
  }
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3728      	adds	r7, #40	@ 0x28
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	00010004 	.word	0x00010004

08007f58 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08a      	sub	sp, #40	@ 0x28
 8007f5c:	af02      	add	r7, sp, #8
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	607a      	str	r2, [r7, #4]
 8007f62:	603b      	str	r3, [r7, #0]
 8007f64:	460b      	mov	r3, r1
 8007f66:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007f68:	f7fb fc9e 	bl	80038a8 <HAL_GetTick>
 8007f6c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b20      	cmp	r3, #32
 8007f7c:	f040 8111 	bne.w	80081a2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	2319      	movs	r3, #25
 8007f86:	2201      	movs	r2, #1
 8007f88:	4988      	ldr	r1, [pc, #544]	@ (80081ac <HAL_I2C_IsDeviceReady+0x254>)
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 fb20 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007f96:	2302      	movs	r3, #2
 8007f98:	e104      	b.n	80081a4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d101      	bne.n	8007fa8 <HAL_I2C_IsDeviceReady+0x50>
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	e0fd      	b.n	80081a4 <HAL_I2C_IsDeviceReady+0x24c>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d007      	beq.n	8007fce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f042 0201 	orr.w	r2, r2, #1
 8007fcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007fdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2224      	movs	r2, #36	@ 0x24
 8007fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4a70      	ldr	r2, [pc, #448]	@ (80081b0 <HAL_I2C_IsDeviceReady+0x258>)
 8007ff0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008000:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2200      	movs	r2, #0
 800800a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 fade 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00d      	beq.n	8008036 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008024:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008028:	d103      	bne.n	8008032 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008030:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e0b6      	b.n	80081a4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008036:	897b      	ldrh	r3, [r7, #10]
 8008038:	b2db      	uxtb	r3, r3
 800803a:	461a      	mov	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008044:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008046:	f7fb fc2f 	bl	80038a8 <HAL_GetTick>
 800804a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b02      	cmp	r3, #2
 8008058:	bf0c      	ite	eq
 800805a:	2301      	moveq	r3, #1
 800805c:	2300      	movne	r3, #0
 800805e:	b2db      	uxtb	r3, r3
 8008060:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800806c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008070:	bf0c      	ite	eq
 8008072:	2301      	moveq	r3, #1
 8008074:	2300      	movne	r3, #0
 8008076:	b2db      	uxtb	r3, r3
 8008078:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800807a:	e025      	b.n	80080c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800807c:	f7fb fc14 	bl	80038a8 <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	429a      	cmp	r2, r3
 800808a:	d302      	bcc.n	8008092 <HAL_I2C_IsDeviceReady+0x13a>
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d103      	bne.n	800809a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	22a0      	movs	r2, #160	@ 0xa0
 8008096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	f003 0302 	and.w	r3, r3, #2
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	bf0c      	ite	eq
 80080a8:	2301      	moveq	r3, #1
 80080aa:	2300      	movne	r3, #0
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080be:	bf0c      	ite	eq
 80080c0:	2301      	moveq	r3, #1
 80080c2:	2300      	movne	r3, #0
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2ba0      	cmp	r3, #160	@ 0xa0
 80080d2:	d005      	beq.n	80080e0 <HAL_I2C_IsDeviceReady+0x188>
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d102      	bne.n	80080e0 <HAL_I2C_IsDeviceReady+0x188>
 80080da:	7dbb      	ldrb	r3, [r7, #22]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d0cd      	beq.n	800807c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2220      	movs	r2, #32
 80080e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d129      	bne.n	800814a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008104:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008106:	2300      	movs	r3, #0
 8008108:	613b      	str	r3, [r7, #16]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	613b      	str	r3, [r7, #16]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	613b      	str	r3, [r7, #16]
 800811a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	2319      	movs	r3, #25
 8008122:	2201      	movs	r2, #1
 8008124:	4921      	ldr	r1, [pc, #132]	@ (80081ac <HAL_I2C_IsDeviceReady+0x254>)
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f000 fa52 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e036      	b.n	80081a4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2220      	movs	r2, #32
 800813a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	e02c      	b.n	80081a4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008158:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008162:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	2319      	movs	r3, #25
 800816a:	2201      	movs	r2, #1
 800816c:	490f      	ldr	r1, [pc, #60]	@ (80081ac <HAL_I2C_IsDeviceReady+0x254>)
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 fa2e 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e012      	b.n	80081a4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	3301      	adds	r3, #1
 8008182:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008184:	69ba      	ldr	r2, [r7, #24]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	429a      	cmp	r2, r3
 800818a:	f4ff af32 	bcc.w	8007ff2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2220      	movs	r2, #32
 8008192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e000      	b.n	80081a4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80081a2:	2302      	movs	r3, #2
  }
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3720      	adds	r7, #32
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	00100002 	.word	0x00100002
 80081b0:	ffff0000 	.word	0xffff0000

080081b4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081c2:	b2db      	uxtb	r3, r3
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	af02      	add	r7, sp, #8
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	607a      	str	r2, [r7, #4]
 80081da:	603b      	str	r3, [r7, #0]
 80081dc:	460b      	mov	r3, r1
 80081de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	d006      	beq.n	80081fa <I2C_MasterRequestWrite+0x2a>
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d003      	beq.n	80081fa <I2C_MasterRequestWrite+0x2a>
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80081f8:	d108      	bne.n	800820c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	e00b      	b.n	8008224 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008210:	2b12      	cmp	r3, #18
 8008212:	d107      	bne.n	8008224 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008222:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f000 f9cd 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00d      	beq.n	8008258 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800824a:	d103      	bne.n	8008254 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008252:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e035      	b.n	80082c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008260:	d108      	bne.n	8008274 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008262:	897b      	ldrh	r3, [r7, #10]
 8008264:	b2db      	uxtb	r3, r3
 8008266:	461a      	mov	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008270:	611a      	str	r2, [r3, #16]
 8008272:	e01b      	b.n	80082ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008274:	897b      	ldrh	r3, [r7, #10]
 8008276:	11db      	asrs	r3, r3, #7
 8008278:	b2db      	uxtb	r3, r3
 800827a:	f003 0306 	and.w	r3, r3, #6
 800827e:	b2db      	uxtb	r3, r3
 8008280:	f063 030f 	orn	r3, r3, #15
 8008284:	b2da      	uxtb	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	490e      	ldr	r1, [pc, #56]	@ (80082cc <I2C_MasterRequestWrite+0xfc>)
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 fa16 	bl	80086c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e010      	b.n	80082c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80082a2:	897b      	ldrh	r3, [r7, #10]
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	4907      	ldr	r1, [pc, #28]	@ (80082d0 <I2C_MasterRequestWrite+0x100>)
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f000 fa06 	bl	80086c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e000      	b.n	80082c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	00010008 	.word	0x00010008
 80082d0:	00010002 	.word	0x00010002

080082d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b088      	sub	sp, #32
 80082d8:	af02      	add	r7, sp, #8
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	4608      	mov	r0, r1
 80082de:	4611      	mov	r1, r2
 80082e0:	461a      	mov	r2, r3
 80082e2:	4603      	mov	r3, r0
 80082e4:	817b      	strh	r3, [r7, #10]
 80082e6:	460b      	mov	r3, r1
 80082e8:	813b      	strh	r3, [r7, #8]
 80082ea:	4613      	mov	r3, r2
 80082ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	2200      	movs	r2, #0
 8008306:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f000 f960 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00d      	beq.n	8008332 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008320:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008324:	d103      	bne.n	800832e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800832c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e05f      	b.n	80083f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008332:	897b      	ldrh	r3, [r7, #10]
 8008334:	b2db      	uxtb	r3, r3
 8008336:	461a      	mov	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008340:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008344:	6a3a      	ldr	r2, [r7, #32]
 8008346:	492d      	ldr	r1, [pc, #180]	@ (80083fc <I2C_RequestMemoryWrite+0x128>)
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 f9bb 	bl	80086c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e04c      	b.n	80083f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008358:	2300      	movs	r3, #0
 800835a:	617b      	str	r3, [r7, #20]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	617b      	str	r3, [r7, #20]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	617b      	str	r3, [r7, #20]
 800836c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800836e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008370:	6a39      	ldr	r1, [r7, #32]
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 fa46 	bl	8008804 <I2C_WaitOnTXEFlagUntilTimeout>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00d      	beq.n	800839a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008382:	2b04      	cmp	r3, #4
 8008384:	d107      	bne.n	8008396 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008394:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e02b      	b.n	80083f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800839a:	88fb      	ldrh	r3, [r7, #6]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d105      	bne.n	80083ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083a0:	893b      	ldrh	r3, [r7, #8]
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	611a      	str	r2, [r3, #16]
 80083aa:	e021      	b.n	80083f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80083ac:	893b      	ldrh	r3, [r7, #8]
 80083ae:	0a1b      	lsrs	r3, r3, #8
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083bc:	6a39      	ldr	r1, [r7, #32]
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 fa20 	bl	8008804 <I2C_WaitOnTXEFlagUntilTimeout>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00d      	beq.n	80083e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d107      	bne.n	80083e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e005      	b.n	80083f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083e6:	893b      	ldrh	r3, [r7, #8]
 80083e8:	b2da      	uxtb	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3718      	adds	r7, #24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	00010002 	.word	0x00010002

08008400 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af02      	add	r7, sp, #8
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	4608      	mov	r0, r1
 800840a:	4611      	mov	r1, r2
 800840c:	461a      	mov	r2, r3
 800840e:	4603      	mov	r3, r0
 8008410:	817b      	strh	r3, [r7, #10]
 8008412:	460b      	mov	r3, r1
 8008414:	813b      	strh	r3, [r7, #8]
 8008416:	4613      	mov	r3, r2
 8008418:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008428:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008438:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800843a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	6a3b      	ldr	r3, [r7, #32]
 8008440:	2200      	movs	r2, #0
 8008442:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f000 f8c2 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00d      	beq.n	800846e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800845c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008460:	d103      	bne.n	800846a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008468:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e0aa      	b.n	80085c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800846e:	897b      	ldrh	r3, [r7, #10]
 8008470:	b2db      	uxtb	r3, r3
 8008472:	461a      	mov	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800847c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800847e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008480:	6a3a      	ldr	r2, [r7, #32]
 8008482:	4952      	ldr	r1, [pc, #328]	@ (80085cc <I2C_RequestMemoryRead+0x1cc>)
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 f91d 	bl	80086c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e097      	b.n	80085c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008494:	2300      	movs	r3, #0
 8008496:	617b      	str	r3, [r7, #20]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	617b      	str	r3, [r7, #20]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	617b      	str	r3, [r7, #20]
 80084a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084ac:	6a39      	ldr	r1, [r7, #32]
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f000 f9a8 	bl	8008804 <I2C_WaitOnTXEFlagUntilTimeout>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00d      	beq.n	80084d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d107      	bne.n	80084d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e076      	b.n	80085c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084d6:	88fb      	ldrh	r3, [r7, #6]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d105      	bne.n	80084e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80084dc:	893b      	ldrh	r3, [r7, #8]
 80084de:	b2da      	uxtb	r2, r3
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	611a      	str	r2, [r3, #16]
 80084e6:	e021      	b.n	800852c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80084e8:	893b      	ldrh	r3, [r7, #8]
 80084ea:	0a1b      	lsrs	r3, r3, #8
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084f8:	6a39      	ldr	r1, [r7, #32]
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f000 f982 	bl	8008804 <I2C_WaitOnTXEFlagUntilTimeout>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00d      	beq.n	8008522 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800850a:	2b04      	cmp	r3, #4
 800850c:	d107      	bne.n	800851e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800851c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e050      	b.n	80085c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008522:	893b      	ldrh	r3, [r7, #8]
 8008524:	b2da      	uxtb	r2, r3
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800852c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800852e:	6a39      	ldr	r1, [r7, #32]
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 f967 	bl	8008804 <I2C_WaitOnTXEFlagUntilTimeout>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00d      	beq.n	8008558 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008540:	2b04      	cmp	r3, #4
 8008542:	d107      	bne.n	8008554 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008552:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e035      	b.n	80085c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008566:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	2200      	movs	r2, #0
 8008570:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 f82b 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00d      	beq.n	800859c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800858a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800858e:	d103      	bne.n	8008598 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008596:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e013      	b.n	80085c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800859c:	897b      	ldrh	r3, [r7, #10]
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	f043 0301 	orr.w	r3, r3, #1
 80085a4:	b2da      	uxtb	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ae:	6a3a      	ldr	r2, [r7, #32]
 80085b0:	4906      	ldr	r1, [pc, #24]	@ (80085cc <I2C_RequestMemoryRead+0x1cc>)
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f000 f886 	bl	80086c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e000      	b.n	80085c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	00010002 	.word	0x00010002

080085d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	603b      	str	r3, [r7, #0]
 80085dc:	4613      	mov	r3, r2
 80085de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085e0:	e048      	b.n	8008674 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e8:	d044      	beq.n	8008674 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ea:	f7fb f95d 	bl	80038a8 <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d302      	bcc.n	8008600 <I2C_WaitOnFlagUntilTimeout+0x30>
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d139      	bne.n	8008674 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	0c1b      	lsrs	r3, r3, #16
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b01      	cmp	r3, #1
 8008608:	d10d      	bne.n	8008626 <I2C_WaitOnFlagUntilTimeout+0x56>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	43da      	mvns	r2, r3
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	4013      	ands	r3, r2
 8008616:	b29b      	uxth	r3, r3
 8008618:	2b00      	cmp	r3, #0
 800861a:	bf0c      	ite	eq
 800861c:	2301      	moveq	r3, #1
 800861e:	2300      	movne	r3, #0
 8008620:	b2db      	uxtb	r3, r3
 8008622:	461a      	mov	r2, r3
 8008624:	e00c      	b.n	8008640 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	43da      	mvns	r2, r3
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	4013      	ands	r3, r2
 8008632:	b29b      	uxth	r3, r3
 8008634:	2b00      	cmp	r3, #0
 8008636:	bf0c      	ite	eq
 8008638:	2301      	moveq	r3, #1
 800863a:	2300      	movne	r3, #0
 800863c:	b2db      	uxtb	r3, r3
 800863e:	461a      	mov	r2, r3
 8008640:	79fb      	ldrb	r3, [r7, #7]
 8008642:	429a      	cmp	r2, r3
 8008644:	d116      	bne.n	8008674 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2220      	movs	r2, #32
 8008650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008660:	f043 0220 	orr.w	r2, r3, #32
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e023      	b.n	80086bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	0c1b      	lsrs	r3, r3, #16
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b01      	cmp	r3, #1
 800867c:	d10d      	bne.n	800869a <I2C_WaitOnFlagUntilTimeout+0xca>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	43da      	mvns	r2, r3
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	4013      	ands	r3, r2
 800868a:	b29b      	uxth	r3, r3
 800868c:	2b00      	cmp	r3, #0
 800868e:	bf0c      	ite	eq
 8008690:	2301      	moveq	r3, #1
 8008692:	2300      	movne	r3, #0
 8008694:	b2db      	uxtb	r3, r3
 8008696:	461a      	mov	r2, r3
 8008698:	e00c      	b.n	80086b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	43da      	mvns	r2, r3
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	4013      	ands	r3, r2
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	bf0c      	ite	eq
 80086ac:	2301      	moveq	r3, #1
 80086ae:	2300      	movne	r3, #0
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	461a      	mov	r2, r3
 80086b4:	79fb      	ldrb	r3, [r7, #7]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d093      	beq.n	80085e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80086d2:	e071      	b.n	80087b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086e2:	d123      	bne.n	800872c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80086fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2220      	movs	r2, #32
 8008708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008718:	f043 0204 	orr.w	r2, r3, #4
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e067      	b.n	80087fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008732:	d041      	beq.n	80087b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008734:	f7fb f8b8 	bl	80038a8 <HAL_GetTick>
 8008738:	4602      	mov	r2, r0
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	429a      	cmp	r2, r3
 8008742:	d302      	bcc.n	800874a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d136      	bne.n	80087b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	0c1b      	lsrs	r3, r3, #16
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b01      	cmp	r3, #1
 8008752:	d10c      	bne.n	800876e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	43da      	mvns	r2, r3
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	4013      	ands	r3, r2
 8008760:	b29b      	uxth	r3, r3
 8008762:	2b00      	cmp	r3, #0
 8008764:	bf14      	ite	ne
 8008766:	2301      	movne	r3, #1
 8008768:	2300      	moveq	r3, #0
 800876a:	b2db      	uxtb	r3, r3
 800876c:	e00b      	b.n	8008786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	43da      	mvns	r2, r3
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	4013      	ands	r3, r2
 800877a:	b29b      	uxth	r3, r3
 800877c:	2b00      	cmp	r3, #0
 800877e:	bf14      	ite	ne
 8008780:	2301      	movne	r3, #1
 8008782:	2300      	moveq	r3, #0
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d016      	beq.n	80087b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2220      	movs	r2, #32
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a4:	f043 0220 	orr.w	r2, r3, #32
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e021      	b.n	80087fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	0c1b      	lsrs	r3, r3, #16
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d10c      	bne.n	80087dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	43da      	mvns	r2, r3
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	4013      	ands	r3, r2
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	bf14      	ite	ne
 80087d4:	2301      	movne	r3, #1
 80087d6:	2300      	moveq	r3, #0
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	e00b      	b.n	80087f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	43da      	mvns	r2, r3
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	4013      	ands	r3, r2
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	bf14      	ite	ne
 80087ee:	2301      	movne	r3, #1
 80087f0:	2300      	moveq	r3, #0
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f47f af6d 	bne.w	80086d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008810:	e034      	b.n	800887c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f000 f8e3 	bl	80089de <I2C_IsAcknowledgeFailed>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e034      	b.n	800888c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008828:	d028      	beq.n	800887c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800882a:	f7fb f83d 	bl	80038a8 <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	429a      	cmp	r2, r3
 8008838:	d302      	bcc.n	8008840 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d11d      	bne.n	800887c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800884a:	2b80      	cmp	r3, #128	@ 0x80
 800884c:	d016      	beq.n	800887c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2220      	movs	r2, #32
 8008858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008868:	f043 0220 	orr.w	r2, r3, #32
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	e007      	b.n	800888c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008886:	2b80      	cmp	r3, #128	@ 0x80
 8008888:	d1c3      	bne.n	8008812 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088a0:	e034      	b.n	800890c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f000 f89b 	bl	80089de <I2C_IsAcknowledgeFailed>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e034      	b.n	800891c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b8:	d028      	beq.n	800890c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088ba:	f7fa fff5 	bl	80038a8 <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d302      	bcc.n	80088d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d11d      	bne.n	800890c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	f003 0304 	and.w	r3, r3, #4
 80088da:	2b04      	cmp	r3, #4
 80088dc:	d016      	beq.n	800890c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2220      	movs	r2, #32
 80088e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f8:	f043 0220 	orr.w	r2, r3, #32
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e007      	b.n	800891c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	f003 0304 	and.w	r3, r3, #4
 8008916:	2b04      	cmp	r3, #4
 8008918:	d1c3      	bne.n	80088a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008930:	e049      	b.n	80089c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	f003 0310 	and.w	r3, r3, #16
 800893c:	2b10      	cmp	r3, #16
 800893e:	d119      	bne.n	8008974 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f06f 0210 	mvn.w	r2, #16
 8008948:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2220      	movs	r2, #32
 8008954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e030      	b.n	80089d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008974:	f7fa ff98 	bl	80038a8 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	68ba      	ldr	r2, [r7, #8]
 8008980:	429a      	cmp	r2, r3
 8008982:	d302      	bcc.n	800898a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d11d      	bne.n	80089c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008994:	2b40      	cmp	r3, #64	@ 0x40
 8008996:	d016      	beq.n	80089c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2220      	movs	r2, #32
 80089a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089b2:	f043 0220 	orr.w	r2, r3, #32
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e007      	b.n	80089d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089d0:	2b40      	cmp	r3, #64	@ 0x40
 80089d2:	d1ae      	bne.n	8008932 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80089de:	b480      	push	{r7}
 80089e0:	b083      	sub	sp, #12
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089f4:	d11b      	bne.n	8008a2e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80089fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a1a:	f043 0204 	orr.w	r2, r3, #4
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e000      	b.n	8008a30 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b088      	sub	sp, #32
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e128      	b.n	8008ca0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d109      	bne.n	8008a6e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a90      	ldr	r2, [pc, #576]	@ (8008ca8 <HAL_I2S_Init+0x26c>)
 8008a66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7fa faed 	bl	8003048 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2202      	movs	r2, #2
 8008a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	69db      	ldr	r3, [r3, #28]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	6812      	ldr	r2, [r2, #0]
 8008a80:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8008a84:	f023 030f 	bic.w	r3, r3, #15
 8008a88:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d060      	beq.n	8008b5c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d102      	bne.n	8008aa8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8008aa2:	2310      	movs	r3, #16
 8008aa4:	617b      	str	r3, [r7, #20]
 8008aa6:	e001      	b.n	8008aac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008aa8:	2320      	movs	r3, #32
 8008aaa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	2b20      	cmp	r3, #32
 8008ab2:	d802      	bhi.n	8008aba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	005b      	lsls	r3, r3, #1
 8008ab8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8008aba:	2001      	movs	r0, #1
 8008abc:	f001 fe10 	bl	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008ac0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008aca:	d125      	bne.n	8008b18 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d010      	beq.n	8008af6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ade:	4613      	mov	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008af0:	3305      	adds	r3, #5
 8008af2:	613b      	str	r3, [r7, #16]
 8008af4:	e01f      	b.n	8008b36 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	00db      	lsls	r3, r3, #3
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b00:	4613      	mov	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	461a      	mov	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b12:	3305      	adds	r3, #5
 8008b14:	613b      	str	r3, [r7, #16]
 8008b16:	e00e      	b.n	8008b36 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b20:	4613      	mov	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	005b      	lsls	r3, r3, #1
 8008b28:	461a      	mov	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b32:	3305      	adds	r3, #5
 8008b34:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	4a5c      	ldr	r2, [pc, #368]	@ (8008cac <HAL_I2S_Init+0x270>)
 8008b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3e:	08db      	lsrs	r3, r3, #3
 8008b40:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	085b      	lsrs	r3, r3, #1
 8008b52:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	021b      	lsls	r3, r3, #8
 8008b58:	61bb      	str	r3, [r7, #24]
 8008b5a:	e003      	b.n	8008b64 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008b60:	2300      	movs	r3, #0
 8008b62:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d902      	bls.n	8008b70 <HAL_I2S_Init+0x134>
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	2bff      	cmp	r3, #255	@ 0xff
 8008b6e:	d907      	bls.n	8008b80 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b74:	f043 0210 	orr.w	r2, r3, #16
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e08f      	b.n	8008ca0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	691a      	ldr	r2, [r3, #16]
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	ea42 0103 	orr.w	r1, r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	430a      	orrs	r2, r1
 8008b92:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8008b9e:	f023 030f 	bic.w	r3, r3, #15
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	6851      	ldr	r1, [r2, #4]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	6892      	ldr	r2, [r2, #8]
 8008baa:	4311      	orrs	r1, r2
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	68d2      	ldr	r2, [r2, #12]
 8008bb0:	4311      	orrs	r1, r2
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	6992      	ldr	r2, [r2, #24]
 8008bb6:	430a      	orrs	r2, r1
 8008bb8:	431a      	orrs	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008bc2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d161      	bne.n	8008c90 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a38      	ldr	r2, [pc, #224]	@ (8008cb0 <HAL_I2S_Init+0x274>)
 8008bd0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a37      	ldr	r2, [pc, #220]	@ (8008cb4 <HAL_I2S_Init+0x278>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d101      	bne.n	8008be0 <HAL_I2S_Init+0x1a4>
 8008bdc:	4b36      	ldr	r3, [pc, #216]	@ (8008cb8 <HAL_I2S_Init+0x27c>)
 8008bde:	e001      	b.n	8008be4 <HAL_I2S_Init+0x1a8>
 8008be0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	6812      	ldr	r2, [r2, #0]
 8008bea:	4932      	ldr	r1, [pc, #200]	@ (8008cb4 <HAL_I2S_Init+0x278>)
 8008bec:	428a      	cmp	r2, r1
 8008bee:	d101      	bne.n	8008bf4 <HAL_I2S_Init+0x1b8>
 8008bf0:	4a31      	ldr	r2, [pc, #196]	@ (8008cb8 <HAL_I2S_Init+0x27c>)
 8008bf2:	e001      	b.n	8008bf8 <HAL_I2S_Init+0x1bc>
 8008bf4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8008bf8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8008bfc:	f023 030f 	bic.w	r3, r3, #15
 8008c00:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a2b      	ldr	r2, [pc, #172]	@ (8008cb4 <HAL_I2S_Init+0x278>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d101      	bne.n	8008c10 <HAL_I2S_Init+0x1d4>
 8008c0c:	4b2a      	ldr	r3, [pc, #168]	@ (8008cb8 <HAL_I2S_Init+0x27c>)
 8008c0e:	e001      	b.n	8008c14 <HAL_I2S_Init+0x1d8>
 8008c10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008c14:	2202      	movs	r2, #2
 8008c16:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a25      	ldr	r2, [pc, #148]	@ (8008cb4 <HAL_I2S_Init+0x278>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d101      	bne.n	8008c26 <HAL_I2S_Init+0x1ea>
 8008c22:	4b25      	ldr	r3, [pc, #148]	@ (8008cb8 <HAL_I2S_Init+0x27c>)
 8008c24:	e001      	b.n	8008c2a <HAL_I2S_Init+0x1ee>
 8008c26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008c2a:	69db      	ldr	r3, [r3, #28]
 8008c2c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c36:	d003      	beq.n	8008c40 <HAL_I2S_Init+0x204>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d103      	bne.n	8008c48 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8008c40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008c44:	613b      	str	r3, [r7, #16]
 8008c46:	e001      	b.n	8008c4c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008c56:	4313      	orrs	r3, r2
 8008c58:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008c60:	4313      	orrs	r3, r2
 8008c62:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	897b      	ldrh	r3, [r7, #10]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008c78:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8008cb4 <HAL_I2S_Init+0x278>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d101      	bne.n	8008c88 <HAL_I2S_Init+0x24c>
 8008c84:	4b0c      	ldr	r3, [pc, #48]	@ (8008cb8 <HAL_I2S_Init+0x27c>)
 8008c86:	e001      	b.n	8008c8c <HAL_I2S_Init+0x250>
 8008c88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008c8c:	897a      	ldrh	r2, [r7, #10]
 8008c8e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3720      	adds	r7, #32
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	08009539 	.word	0x08009539
 8008cac:	cccccccd 	.word	0xcccccccd
 8008cb0:	080096c1 	.word	0x080096c1
 8008cb4:	40003800 	.word	0x40003800
 8008cb8:	40003400 	.word	0x40003400

08008cbc <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <HAL_I2S_Transmit_DMA+0x1a>
 8008cd0:	88fb      	ldrh	r3, [r7, #6]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e08a      	b.n	8008df0 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d001      	beq.n	8008cea <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	e082      	b.n	8008df0 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d101      	bne.n	8008cfa <HAL_I2S_Transmit_DMA+0x3e>
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	e07a      	b.n	8008df0 <HAL_I2S_Transmit_DMA+0x134>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2203      	movs	r2, #3
 8008d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	69db      	ldr	r3, [r3, #28]
 8008d1c:	f003 0307 	and.w	r3, r3, #7
 8008d20:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	d002      	beq.n	8008d2e <HAL_I2S_Transmit_DMA+0x72>
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	2b05      	cmp	r3, #5
 8008d2c:	d10a      	bne.n	8008d44 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8008d2e:	88fb      	ldrh	r3, [r7, #6]
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8008d38:	88fb      	ldrh	r3, [r7, #6]
 8008d3a:	005b      	lsls	r3, r3, #1
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008d42:	e005      	b.n	8008d50 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	88fa      	ldrh	r2, [r7, #6]
 8008d48:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	88fa      	ldrh	r2, [r7, #6]
 8008d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d54:	4a28      	ldr	r2, [pc, #160]	@ (8008df8 <HAL_I2S_Transmit_DMA+0x13c>)
 8008d56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d5c:	4a27      	ldr	r2, [pc, #156]	@ (8008dfc <HAL_I2S_Transmit_DMA+0x140>)
 8008d5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d64:	4a26      	ldr	r2, [pc, #152]	@ (8008e00 <HAL_I2S_Transmit_DMA+0x144>)
 8008d66:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008d70:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008d78:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d7e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008d80:	f7fb fc4c 	bl	800461c <HAL_DMA_Start_IT>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00f      	beq.n	8008daa <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d8e:	f043 0208 	orr.w	r2, r3, #8
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e022      	b.n	8008df0 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	f003 0302 	and.w	r3, r3, #2
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d107      	bne.n	8008dd0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	685a      	ldr	r2, [r3, #4]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f042 0202 	orr.w	r2, r2, #2
 8008dce:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d107      	bne.n	8008dee <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	69da      	ldr	r2, [r3, #28]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008dec:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	08009417 	.word	0x08009417
 8008dfc:	080093d5 	.word	0x080093d5
 8008e00:	08009433 	.word	0x08009433

08008e04 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d101      	bne.n	8008e1c <HAL_I2S_DMAPause+0x18>
 8008e18:	2302      	movs	r3, #2
 8008e1a:	e04a      	b.n	8008eb2 <HAL_I2S_DMAPause+0xae>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	2b03      	cmp	r3, #3
 8008e2e:	d108      	bne.n	8008e42 <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f022 0202 	bic.w	r2, r2, #2
 8008e3e:	605a      	str	r2, [r3, #4]
 8008e40:	e032      	b.n	8008ea8 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b04      	cmp	r3, #4
 8008e4c:	d108      	bne.n	8008e60 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	685a      	ldr	r2, [r3, #4]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f022 0201 	bic.w	r2, r2, #1
 8008e5c:	605a      	str	r2, [r3, #4]
 8008e5e:	e023      	b.n	8008ea8 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	2b05      	cmp	r3, #5
 8008e6a:	d11d      	bne.n	8008ea8 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f022 0203 	bic.w	r2, r2, #3
 8008e7a:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a0f      	ldr	r2, [pc, #60]	@ (8008ec0 <HAL_I2S_DMAPause+0xbc>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d101      	bne.n	8008e8a <HAL_I2S_DMAPause+0x86>
 8008e86:	4b0f      	ldr	r3, [pc, #60]	@ (8008ec4 <HAL_I2S_DMAPause+0xc0>)
 8008e88:	e001      	b.n	8008e8e <HAL_I2S_DMAPause+0x8a>
 8008e8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	490a      	ldr	r1, [pc, #40]	@ (8008ec0 <HAL_I2S_DMAPause+0xbc>)
 8008e96:	428b      	cmp	r3, r1
 8008e98:	d101      	bne.n	8008e9e <HAL_I2S_DMAPause+0x9a>
 8008e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec4 <HAL_I2S_DMAPause+0xc0>)
 8008e9c:	e001      	b.n	8008ea2 <HAL_I2S_DMAPause+0x9e>
 8008e9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008ea2:	f022 0203 	bic.w	r2, r2, #3
 8008ea6:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	40003800 	.word	0x40003800
 8008ec4:	40003400 	.word	0x40003400

08008ec8 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d101      	bne.n	8008ee0 <HAL_I2S_DMAResume+0x18>
 8008edc:	2302      	movs	r3, #2
 8008ede:	e07d      	b.n	8008fdc <HAL_I2S_DMAResume+0x114>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b03      	cmp	r3, #3
 8008ef2:	d108      	bne.n	8008f06 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	685a      	ldr	r2, [r3, #4]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f042 0202 	orr.w	r2, r2, #2
 8008f02:	605a      	str	r2, [r3, #4]
 8008f04:	e056      	b.n	8008fb4 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b04      	cmp	r3, #4
 8008f10:	d108      	bne.n	8008f24 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f042 0201 	orr.w	r2, r2, #1
 8008f20:	605a      	str	r2, [r3, #4]
 8008f22:	e047      	b.n	8008fb4 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b05      	cmp	r3, #5
 8008f2e:	d141      	bne.n	8008fb4 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685a      	ldr	r2, [r3, #4]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f042 0203 	orr.w	r2, r2, #3
 8008f3e:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a28      	ldr	r2, [pc, #160]	@ (8008fe8 <HAL_I2S_DMAResume+0x120>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d101      	bne.n	8008f4e <HAL_I2S_DMAResume+0x86>
 8008f4a:	4b28      	ldr	r3, [pc, #160]	@ (8008fec <HAL_I2S_DMAResume+0x124>)
 8008f4c:	e001      	b.n	8008f52 <HAL_I2S_DMAResume+0x8a>
 8008f4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008f52:	685a      	ldr	r2, [r3, #4]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4923      	ldr	r1, [pc, #140]	@ (8008fe8 <HAL_I2S_DMAResume+0x120>)
 8008f5a:	428b      	cmp	r3, r1
 8008f5c:	d101      	bne.n	8008f62 <HAL_I2S_DMAResume+0x9a>
 8008f5e:	4b23      	ldr	r3, [pc, #140]	@ (8008fec <HAL_I2S_DMAResume+0x124>)
 8008f60:	e001      	b.n	8008f66 <HAL_I2S_DMAResume+0x9e>
 8008f62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008f66:	f042 0203 	orr.w	r2, r2, #3
 8008f6a:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a1d      	ldr	r2, [pc, #116]	@ (8008fe8 <HAL_I2S_DMAResume+0x120>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d101      	bne.n	8008f7a <HAL_I2S_DMAResume+0xb2>
 8008f76:	4b1d      	ldr	r3, [pc, #116]	@ (8008fec <HAL_I2S_DMAResume+0x124>)
 8008f78:	e001      	b.n	8008f7e <HAL_I2S_DMAResume+0xb6>
 8008f7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d115      	bne.n	8008fb4 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a16      	ldr	r2, [pc, #88]	@ (8008fe8 <HAL_I2S_DMAResume+0x120>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d101      	bne.n	8008f96 <HAL_I2S_DMAResume+0xce>
 8008f92:	4b16      	ldr	r3, [pc, #88]	@ (8008fec <HAL_I2S_DMAResume+0x124>)
 8008f94:	e001      	b.n	8008f9a <HAL_I2S_DMAResume+0xd2>
 8008f96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008f9a:	69da      	ldr	r2, [r3, #28]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4911      	ldr	r1, [pc, #68]	@ (8008fe8 <HAL_I2S_DMAResume+0x120>)
 8008fa2:	428b      	cmp	r3, r1
 8008fa4:	d101      	bne.n	8008faa <HAL_I2S_DMAResume+0xe2>
 8008fa6:	4b11      	ldr	r3, [pc, #68]	@ (8008fec <HAL_I2S_DMAResume+0x124>)
 8008fa8:	e001      	b.n	8008fae <HAL_I2S_DMAResume+0xe6>
 8008faa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008fae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008fb2:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	69db      	ldr	r3, [r3, #28]
 8008fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d107      	bne.n	8008fd2 <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	69da      	ldr	r2, [r3, #28]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008fd0:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr
 8008fe8:	40003800 	.word	0x40003800
 8008fec:	40003400 	.word	0x40003400

08008ff0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b088      	sub	sp, #32
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009004:	d004      	beq.n	8009010 <HAL_I2S_DMAStop+0x20>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	2b00      	cmp	r3, #0
 800900c:	f040 80d1 	bne.w	80091b2 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00f      	beq.n	8009038 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800901c:	4618      	mov	r0, r3
 800901e:	f7fb fb55 	bl	80046cc <HAL_DMA_Abort>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d007      	beq.n	8009038 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800902c:	f043 0208 	orr.w	r2, r3, #8
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8009038:	2364      	movs	r3, #100	@ 0x64
 800903a:	2201      	movs	r2, #1
 800903c:	2102      	movs	r1, #2
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fb04 	bl	800964c <I2S_WaitFlagStateUntilTimeout>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00b      	beq.n	8009062 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800904e:	f043 0201 	orr.w	r2, r3, #1
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8009062:	2364      	movs	r3, #100	@ 0x64
 8009064:	2200      	movs	r2, #0
 8009066:	2180      	movs	r1, #128	@ 0x80
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 faef 	bl	800964c <I2S_WaitFlagStateUntilTimeout>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00b      	beq.n	800908c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009078:	f043 0201 	orr.w	r2, r3, #1
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	69da      	ldr	r2, [r3, #28]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800909a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800909c:	2300      	movs	r3, #0
 800909e:	617b      	str	r3, [r7, #20]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	617b      	str	r3, [r7, #20]
 80090a8:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	685a      	ldr	r2, [r3, #4]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f022 0202 	bic.w	r2, r2, #2
 80090b8:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b05      	cmp	r3, #5
 80090c4:	f040 8165 	bne.w	8009392 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00f      	beq.n	80090f0 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7fb faf9 	bl	80046cc <HAL_DMA_Abort>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d007      	beq.n	80090f0 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090e4:	f043 0208 	orr.w	r2, r3, #8
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a8a      	ldr	r2, [pc, #552]	@ (8009320 <HAL_I2S_DMAStop+0x330>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d101      	bne.n	80090fe <HAL_I2S_DMAStop+0x10e>
 80090fa:	4b8a      	ldr	r3, [pc, #552]	@ (8009324 <HAL_I2S_DMAStop+0x334>)
 80090fc:	e001      	b.n	8009102 <HAL_I2S_DMAStop+0x112>
 80090fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009102:	69da      	ldr	r2, [r3, #28]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4985      	ldr	r1, [pc, #532]	@ (8009320 <HAL_I2S_DMAStop+0x330>)
 800910a:	428b      	cmp	r3, r1
 800910c:	d101      	bne.n	8009112 <HAL_I2S_DMAStop+0x122>
 800910e:	4b85      	ldr	r3, [pc, #532]	@ (8009324 <HAL_I2S_DMAStop+0x334>)
 8009110:	e001      	b.n	8009116 <HAL_I2S_DMAStop+0x126>
 8009112:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009116:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800911a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 800911c:	2300      	movs	r3, #0
 800911e:	613b      	str	r3, [r7, #16]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a7e      	ldr	r2, [pc, #504]	@ (8009320 <HAL_I2S_DMAStop+0x330>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d101      	bne.n	800912e <HAL_I2S_DMAStop+0x13e>
 800912a:	4b7e      	ldr	r3, [pc, #504]	@ (8009324 <HAL_I2S_DMAStop+0x334>)
 800912c:	e001      	b.n	8009132 <HAL_I2S_DMAStop+0x142>
 800912e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	613b      	str	r3, [r7, #16]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a79      	ldr	r2, [pc, #484]	@ (8009320 <HAL_I2S_DMAStop+0x330>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d101      	bne.n	8009144 <HAL_I2S_DMAStop+0x154>
 8009140:	4b78      	ldr	r3, [pc, #480]	@ (8009324 <HAL_I2S_DMAStop+0x334>)
 8009142:	e001      	b.n	8009148 <HAL_I2S_DMAStop+0x158>
 8009144:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	613b      	str	r3, [r7, #16]
 800914c:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a73      	ldr	r2, [pc, #460]	@ (8009320 <HAL_I2S_DMAStop+0x330>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d101      	bne.n	800915c <HAL_I2S_DMAStop+0x16c>
 8009158:	4b72      	ldr	r3, [pc, #456]	@ (8009324 <HAL_I2S_DMAStop+0x334>)
 800915a:	e001      	b.n	8009160 <HAL_I2S_DMAStop+0x170>
 800915c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009160:	685a      	ldr	r2, [r3, #4]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	496e      	ldr	r1, [pc, #440]	@ (8009320 <HAL_I2S_DMAStop+0x330>)
 8009168:	428b      	cmp	r3, r1
 800916a:	d101      	bne.n	8009170 <HAL_I2S_DMAStop+0x180>
 800916c:	4b6d      	ldr	r3, [pc, #436]	@ (8009324 <HAL_I2S_DMAStop+0x334>)
 800916e:	e001      	b.n	8009174 <HAL_I2S_DMAStop+0x184>
 8009170:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009174:	f022 0201 	bic.w	r2, r2, #1
 8009178:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10c      	bne.n	800919c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009186:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2201      	movs	r2, #1
 8009192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800919a:	e0fa      	b.n	8009392 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a5f      	ldr	r2, [pc, #380]	@ (8009320 <HAL_I2S_DMAStop+0x330>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d101      	bne.n	80091aa <HAL_I2S_DMAStop+0x1ba>
 80091a6:	4b5f      	ldr	r3, [pc, #380]	@ (8009324 <HAL_I2S_DMAStop+0x334>)
 80091a8:	e001      	b.n	80091ae <HAL_I2S_DMAStop+0x1be>
 80091aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80091ae:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80091b0:	e0ef      	b.n	8009392 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091ba:	d005      	beq.n	80091c8 <HAL_I2S_DMAStop+0x1d8>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091c4:	f040 80e5 	bne.w	8009392 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00f      	beq.n	80091f0 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fb fa79 	bl	80046cc <HAL_DMA_Abort>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d007      	beq.n	80091f0 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091e4:	f043 0208 	orr.w	r2, r3, #8
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b05      	cmp	r3, #5
 80091fa:	f040 809a 	bne.w	8009332 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00f      	beq.n	8009226 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800920a:	4618      	mov	r0, r3
 800920c:	f7fb fa5e 	bl	80046cc <HAL_DMA_Abort>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d007      	beq.n	8009226 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800921a:	f043 0208 	orr.w	r2, r3, #8
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8009226:	f7fa fb3f 	bl	80038a8 <HAL_GetTick>
 800922a:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800922c:	e012      	b.n	8009254 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800922e:	f7fa fb3b 	bl	80038a8 <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	2b64      	cmp	r3, #100	@ 0x64
 800923a:	d90b      	bls.n	8009254 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009240:	f043 0201 	orr.w	r2, r3, #1
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a31      	ldr	r2, [pc, #196]	@ (8009320 <HAL_I2S_DMAStop+0x330>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d101      	bne.n	8009262 <HAL_I2S_DMAStop+0x272>
 800925e:	4b31      	ldr	r3, [pc, #196]	@ (8009324 <HAL_I2S_DMAStop+0x334>)
 8009260:	e001      	b.n	8009266 <HAL_I2S_DMAStop+0x276>
 8009262:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	f003 0302 	and.w	r3, r3, #2
 800926c:	2b02      	cmp	r3, #2
 800926e:	d1de      	bne.n	800922e <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8009270:	e012      	b.n	8009298 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8009272:	f7fa fb19 	bl	80038a8 <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	2b64      	cmp	r3, #100	@ 0x64
 800927e:	d90b      	bls.n	8009298 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009284:	f043 0201 	orr.w	r2, r3, #1
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a20      	ldr	r2, [pc, #128]	@ (8009320 <HAL_I2S_DMAStop+0x330>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d101      	bne.n	80092a6 <HAL_I2S_DMAStop+0x2b6>
 80092a2:	4b20      	ldr	r3, [pc, #128]	@ (8009324 <HAL_I2S_DMAStop+0x334>)
 80092a4:	e001      	b.n	80092aa <HAL_I2S_DMAStop+0x2ba>
 80092a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092b0:	2b80      	cmp	r3, #128	@ 0x80
 80092b2:	d0de      	beq.n	8009272 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a19      	ldr	r2, [pc, #100]	@ (8009320 <HAL_I2S_DMAStop+0x330>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d101      	bne.n	80092c2 <HAL_I2S_DMAStop+0x2d2>
 80092be:	4b19      	ldr	r3, [pc, #100]	@ (8009324 <HAL_I2S_DMAStop+0x334>)
 80092c0:	e001      	b.n	80092c6 <HAL_I2S_DMAStop+0x2d6>
 80092c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80092c6:	69da      	ldr	r2, [r3, #28]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4914      	ldr	r1, [pc, #80]	@ (8009320 <HAL_I2S_DMAStop+0x330>)
 80092ce:	428b      	cmp	r3, r1
 80092d0:	d101      	bne.n	80092d6 <HAL_I2S_DMAStop+0x2e6>
 80092d2:	4b14      	ldr	r3, [pc, #80]	@ (8009324 <HAL_I2S_DMAStop+0x334>)
 80092d4:	e001      	b.n	80092da <HAL_I2S_DMAStop+0x2ea>
 80092d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80092da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092de:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80092e0:	2300      	movs	r3, #0
 80092e2:	60fb      	str	r3, [r7, #12]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a0d      	ldr	r2, [pc, #52]	@ (8009320 <HAL_I2S_DMAStop+0x330>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d101      	bne.n	80092f2 <HAL_I2S_DMAStop+0x302>
 80092ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009324 <HAL_I2S_DMAStop+0x334>)
 80092f0:	e001      	b.n	80092f6 <HAL_I2S_DMAStop+0x306>
 80092f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	60fb      	str	r3, [r7, #12]
 80092fa:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a07      	ldr	r2, [pc, #28]	@ (8009320 <HAL_I2S_DMAStop+0x330>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d101      	bne.n	800930a <HAL_I2S_DMAStop+0x31a>
 8009306:	4b07      	ldr	r3, [pc, #28]	@ (8009324 <HAL_I2S_DMAStop+0x334>)
 8009308:	e001      	b.n	800930e <HAL_I2S_DMAStop+0x31e>
 800930a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4902      	ldr	r1, [pc, #8]	@ (8009320 <HAL_I2S_DMAStop+0x330>)
 8009316:	428b      	cmp	r3, r1
 8009318:	d106      	bne.n	8009328 <HAL_I2S_DMAStop+0x338>
 800931a:	4b02      	ldr	r3, [pc, #8]	@ (8009324 <HAL_I2S_DMAStop+0x334>)
 800931c:	e006      	b.n	800932c <HAL_I2S_DMAStop+0x33c>
 800931e:	bf00      	nop
 8009320:	40003800 	.word	0x40003800
 8009324:	40003400 	.word	0x40003400
 8009328:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800932c:	f022 0202 	bic.w	r2, r2, #2
 8009330:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	69da      	ldr	r2, [r3, #28]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009340:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009342:	2300      	movs	r3, #0
 8009344:	60bb      	str	r3, [r7, #8]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	60bb      	str	r3, [r7, #8]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	60bb      	str	r3, [r7, #8]
 8009356:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	685a      	ldr	r2, [r3, #4]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f022 0201 	bic.w	r2, r2, #1
 8009366:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009370:	d10c      	bne.n	800938c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009376:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	77fb      	strb	r3, [r7, #31]
 800938a:	e002      	b.n	8009392 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 800939a:	7ffb      	ldrb	r3, [r7, #31]
}
 800939c:	4618      	mov	r0, r3
 800939e:	3720      	adds	r7, #32
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093c6:	b2db      	uxtb	r3, r3
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093e0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	69db      	ldr	r3, [r3, #28]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d10e      	bne.n	8009408 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f022 0202 	bic.w	r2, r2, #2
 80093f8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f7f7 f99d 	bl	8000748 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800940e:	bf00      	nop
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b084      	sub	sp, #16
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009422:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f7f7 f9a1 	bl	800076c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800942a:	bf00      	nop
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b084      	sub	sp, #16
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800943e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	685a      	ldr	r2, [r3, #4]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f022 0203 	bic.w	r2, r2, #3
 800944e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009468:	f043 0208 	orr.w	r2, r3, #8
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f7f7 faeb 	bl	8000a4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009476:	bf00      	nop
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b082      	sub	sp, #8
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800948a:	881a      	ldrh	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009496:	1c9a      	adds	r2, r3, #2
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	3b01      	subs	r3, #1
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10e      	bne.n	80094d2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685a      	ldr	r2, [r3, #4]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80094c2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7f7 f93b 	bl	8000748 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80094d2:	bf00      	nop
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b082      	sub	sp, #8
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68da      	ldr	r2, [r3, #12]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ec:	b292      	uxth	r2, r2
 80094ee:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f4:	1c9a      	adds	r2, r3, #2
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80094fe:	b29b      	uxth	r3, r3
 8009500:	3b01      	subs	r3, #1
 8009502:	b29a      	uxth	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800950c:	b29b      	uxth	r3, r3
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10e      	bne.n	8009530 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	685a      	ldr	r2, [r3, #4]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009520:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f7ff ff3a 	bl	80093a4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8009530:	bf00      	nop
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800954e:	b2db      	uxtb	r3, r3
 8009550:	2b04      	cmp	r3, #4
 8009552:	d13a      	bne.n	80095ca <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	f003 0301 	and.w	r3, r3, #1
 800955a:	2b01      	cmp	r3, #1
 800955c:	d109      	bne.n	8009572 <I2S_IRQHandler+0x3a>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009568:	2b40      	cmp	r3, #64	@ 0x40
 800956a:	d102      	bne.n	8009572 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7ff ffb4 	bl	80094da <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009578:	2b40      	cmp	r3, #64	@ 0x40
 800957a:	d126      	bne.n	80095ca <I2S_IRQHandler+0x92>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	f003 0320 	and.w	r3, r3, #32
 8009586:	2b20      	cmp	r3, #32
 8009588:	d11f      	bne.n	80095ca <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009598:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800959a:	2300      	movs	r3, #0
 800959c:	613b      	str	r3, [r7, #16]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	613b      	str	r3, [r7, #16]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	613b      	str	r3, [r7, #16]
 80095ae:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095bc:	f043 0202 	orr.w	r2, r3, #2
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f7f7 fa41 	bl	8000a4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	d136      	bne.n	8009644 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	f003 0302 	and.w	r3, r3, #2
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d109      	bne.n	80095f4 <I2S_IRQHandler+0xbc>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095ea:	2b80      	cmp	r3, #128	@ 0x80
 80095ec:	d102      	bne.n	80095f4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7ff ff45 	bl	800947e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	f003 0308 	and.w	r3, r3, #8
 80095fa:	2b08      	cmp	r3, #8
 80095fc:	d122      	bne.n	8009644 <I2S_IRQHandler+0x10c>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	f003 0320 	and.w	r3, r3, #32
 8009608:	2b20      	cmp	r3, #32
 800960a:	d11b      	bne.n	8009644 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	685a      	ldr	r2, [r3, #4]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800961a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800961c:	2300      	movs	r3, #0
 800961e:	60fb      	str	r3, [r7, #12]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	60fb      	str	r3, [r7, #12]
 8009628:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009636:	f043 0204 	orr.w	r2, r3, #4
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7f7 fa04 	bl	8000a4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009644:	bf00      	nop
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b086      	sub	sp, #24
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	603b      	str	r3, [r7, #0]
 8009658:	4613      	mov	r3, r2
 800965a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800965c:	f7fa f924 	bl	80038a8 <HAL_GetTick>
 8009660:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8009662:	e018      	b.n	8009696 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966a:	d014      	beq.n	8009696 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800966c:	f7fa f91c 	bl	80038a8 <HAL_GetTick>
 8009670:	4602      	mov	r2, r0
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	683a      	ldr	r2, [r7, #0]
 8009678:	429a      	cmp	r2, r3
 800967a:	d902      	bls.n	8009682 <I2S_WaitFlagStateUntilTimeout+0x36>
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d109      	bne.n	8009696 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8009692:	2303      	movs	r3, #3
 8009694:	e00f      	b.n	80096b6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	689a      	ldr	r2, [r3, #8]
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	4013      	ands	r3, r2
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	bf0c      	ite	eq
 80096a6:	2301      	moveq	r3, #1
 80096a8:	2300      	movne	r3, #0
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	461a      	mov	r2, r3
 80096ae:	79fb      	ldrb	r3, [r7, #7]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d1d7      	bne.n	8009664 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
	...

080096c0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b088      	sub	sp, #32
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a92      	ldr	r2, [pc, #584]	@ (8009920 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d101      	bne.n	80096de <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80096da:	4b92      	ldr	r3, [pc, #584]	@ (8009924 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80096dc:	e001      	b.n	80096e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80096de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a8b      	ldr	r2, [pc, #556]	@ (8009920 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d101      	bne.n	80096fc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80096f8:	4b8a      	ldr	r3, [pc, #552]	@ (8009924 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80096fa:	e001      	b.n	8009700 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80096fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800970c:	d004      	beq.n	8009718 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	f040 8099 	bne.w	800984a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	f003 0302 	and.w	r3, r3, #2
 800971e:	2b02      	cmp	r3, #2
 8009720:	d107      	bne.n	8009732 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f925 	bl	800997c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	f003 0301 	and.w	r3, r3, #1
 8009738:	2b01      	cmp	r3, #1
 800973a:	d107      	bne.n	800974c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009742:	2b00      	cmp	r3, #0
 8009744:	d002      	beq.n	800974c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f9c8 	bl	8009adc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009752:	2b40      	cmp	r3, #64	@ 0x40
 8009754:	d13a      	bne.n	80097cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	f003 0320 	and.w	r3, r3, #32
 800975c:	2b00      	cmp	r3, #0
 800975e:	d035      	beq.n	80097cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a6e      	ldr	r2, [pc, #440]	@ (8009920 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d101      	bne.n	800976e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800976a:	4b6e      	ldr	r3, [pc, #440]	@ (8009924 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800976c:	e001      	b.n	8009772 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800976e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009772:	685a      	ldr	r2, [r3, #4]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4969      	ldr	r1, [pc, #420]	@ (8009920 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800977a:	428b      	cmp	r3, r1
 800977c:	d101      	bne.n	8009782 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800977e:	4b69      	ldr	r3, [pc, #420]	@ (8009924 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009780:	e001      	b.n	8009786 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8009782:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009786:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800978a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685a      	ldr	r2, [r3, #4]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800979a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800979c:	2300      	movs	r3, #0
 800979e:	60fb      	str	r3, [r7, #12]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	60fb      	str	r3, [r7, #12]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	60fb      	str	r3, [r7, #12]
 80097b0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097be:	f043 0202 	orr.w	r2, r3, #2
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7f7 f940 	bl	8000a4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	f003 0308 	and.w	r3, r3, #8
 80097d2:	2b08      	cmp	r3, #8
 80097d4:	f040 80c3 	bne.w	800995e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	f003 0320 	and.w	r3, r3, #32
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f000 80bd 	beq.w	800995e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	685a      	ldr	r2, [r3, #4]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80097f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a49      	ldr	r2, [pc, #292]	@ (8009920 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d101      	bne.n	8009802 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80097fe:	4b49      	ldr	r3, [pc, #292]	@ (8009924 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009800:	e001      	b.n	8009806 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8009802:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4944      	ldr	r1, [pc, #272]	@ (8009920 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800980e:	428b      	cmp	r3, r1
 8009810:	d101      	bne.n	8009816 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8009812:	4b44      	ldr	r3, [pc, #272]	@ (8009924 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009814:	e001      	b.n	800981a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8009816:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800981a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800981e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8009820:	2300      	movs	r3, #0
 8009822:	60bb      	str	r3, [r7, #8]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	60bb      	str	r3, [r7, #8]
 800982c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800983a:	f043 0204 	orr.w	r2, r3, #4
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7f7 f902 	bl	8000a4c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009848:	e089      	b.n	800995e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	f003 0302 	and.w	r3, r3, #2
 8009850:	2b02      	cmp	r3, #2
 8009852:	d107      	bne.n	8009864 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800985a:	2b00      	cmp	r3, #0
 800985c:	d002      	beq.n	8009864 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f8be 	bl	80099e0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	f003 0301 	and.w	r3, r3, #1
 800986a:	2b01      	cmp	r3, #1
 800986c:	d107      	bne.n	800987e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009874:	2b00      	cmp	r3, #0
 8009876:	d002      	beq.n	800987e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f8fd 	bl	8009a78 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009884:	2b40      	cmp	r3, #64	@ 0x40
 8009886:	d12f      	bne.n	80098e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f003 0320 	and.w	r3, r3, #32
 800988e:	2b00      	cmp	r3, #0
 8009890:	d02a      	beq.n	80098e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80098a0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a1e      	ldr	r2, [pc, #120]	@ (8009920 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d101      	bne.n	80098b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80098ac:	4b1d      	ldr	r3, [pc, #116]	@ (8009924 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80098ae:	e001      	b.n	80098b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80098b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80098b4:	685a      	ldr	r2, [r3, #4]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4919      	ldr	r1, [pc, #100]	@ (8009920 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80098bc:	428b      	cmp	r3, r1
 80098be:	d101      	bne.n	80098c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80098c0:	4b18      	ldr	r3, [pc, #96]	@ (8009924 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80098c2:	e001      	b.n	80098c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80098c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80098c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80098cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098da:	f043 0202 	orr.w	r2, r3, #2
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7f7 f8b2 	bl	8000a4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	f003 0308 	and.w	r3, r3, #8
 80098ee:	2b08      	cmp	r3, #8
 80098f0:	d136      	bne.n	8009960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	f003 0320 	and.w	r3, r3, #32
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d031      	beq.n	8009960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a07      	ldr	r2, [pc, #28]	@ (8009920 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d101      	bne.n	800990a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8009906:	4b07      	ldr	r3, [pc, #28]	@ (8009924 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009908:	e001      	b.n	800990e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800990a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4902      	ldr	r1, [pc, #8]	@ (8009920 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009916:	428b      	cmp	r3, r1
 8009918:	d106      	bne.n	8009928 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800991a:	4b02      	ldr	r3, [pc, #8]	@ (8009924 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800991c:	e006      	b.n	800992c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800991e:	bf00      	nop
 8009920:	40003800 	.word	0x40003800
 8009924:	40003400 	.word	0x40003400
 8009928:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800992c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009930:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	685a      	ldr	r2, [r3, #4]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009940:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800994e:	f043 0204 	orr.w	r2, r3, #4
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7f7 f878 	bl	8000a4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800995c:	e000      	b.n	8009960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800995e:	bf00      	nop
}
 8009960:	bf00      	nop
 8009962:	3720      	adds	r7, #32
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009988:	1c99      	adds	r1, r3, #2
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	6251      	str	r1, [r2, #36]	@ 0x24
 800998e:	881a      	ldrh	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800999a:	b29b      	uxth	r3, r3
 800999c:	3b01      	subs	r3, #1
 800999e:	b29a      	uxth	r2, r3
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d113      	bne.n	80099d6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80099bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d106      	bne.n	80099d6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f7ff ffc9 	bl	8009968 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80099d6:	bf00      	nop
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
	...

080099e0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ec:	1c99      	adds	r1, r3, #2
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	6251      	str	r1, [r2, #36]	@ 0x24
 80099f2:	8819      	ldrh	r1, [r3, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009a70 <I2SEx_TxISR_I2SExt+0x90>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d101      	bne.n	8009a02 <I2SEx_TxISR_I2SExt+0x22>
 80099fe:	4b1d      	ldr	r3, [pc, #116]	@ (8009a74 <I2SEx_TxISR_I2SExt+0x94>)
 8009a00:	e001      	b.n	8009a06 <I2SEx_TxISR_I2SExt+0x26>
 8009a02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009a06:	460a      	mov	r2, r1
 8009a08:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	3b01      	subs	r3, #1
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d121      	bne.n	8009a66 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a12      	ldr	r2, [pc, #72]	@ (8009a70 <I2SEx_TxISR_I2SExt+0x90>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d101      	bne.n	8009a30 <I2SEx_TxISR_I2SExt+0x50>
 8009a2c:	4b11      	ldr	r3, [pc, #68]	@ (8009a74 <I2SEx_TxISR_I2SExt+0x94>)
 8009a2e:	e001      	b.n	8009a34 <I2SEx_TxISR_I2SExt+0x54>
 8009a30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009a34:	685a      	ldr	r2, [r3, #4]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	490d      	ldr	r1, [pc, #52]	@ (8009a70 <I2SEx_TxISR_I2SExt+0x90>)
 8009a3c:	428b      	cmp	r3, r1
 8009a3e:	d101      	bne.n	8009a44 <I2SEx_TxISR_I2SExt+0x64>
 8009a40:	4b0c      	ldr	r3, [pc, #48]	@ (8009a74 <I2SEx_TxISR_I2SExt+0x94>)
 8009a42:	e001      	b.n	8009a48 <I2SEx_TxISR_I2SExt+0x68>
 8009a44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009a48:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009a4c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d106      	bne.n	8009a66 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f7ff ff81 	bl	8009968 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009a66:	bf00      	nop
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	40003800 	.word	0x40003800
 8009a74:	40003400 	.word	0x40003400

08009a78 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	68d8      	ldr	r0, [r3, #12]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a8a:	1c99      	adds	r1, r3, #2
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8009a90:	b282      	uxth	r2, r0
 8009a92:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d113      	bne.n	8009ad4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009aba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d106      	bne.n	8009ad4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7ff ff4a 	bl	8009968 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009ad4:	bf00      	nop
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a20      	ldr	r2, [pc, #128]	@ (8009b6c <I2SEx_RxISR_I2SExt+0x90>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d101      	bne.n	8009af2 <I2SEx_RxISR_I2SExt+0x16>
 8009aee:	4b20      	ldr	r3, [pc, #128]	@ (8009b70 <I2SEx_RxISR_I2SExt+0x94>)
 8009af0:	e001      	b.n	8009af6 <I2SEx_RxISR_I2SExt+0x1a>
 8009af2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009af6:	68d8      	ldr	r0, [r3, #12]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009afc:	1c99      	adds	r1, r3, #2
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8009b02:	b282      	uxth	r2, r0
 8009b04:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	3b01      	subs	r3, #1
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d121      	bne.n	8009b62 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a12      	ldr	r2, [pc, #72]	@ (8009b6c <I2SEx_RxISR_I2SExt+0x90>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d101      	bne.n	8009b2c <I2SEx_RxISR_I2SExt+0x50>
 8009b28:	4b11      	ldr	r3, [pc, #68]	@ (8009b70 <I2SEx_RxISR_I2SExt+0x94>)
 8009b2a:	e001      	b.n	8009b30 <I2SEx_RxISR_I2SExt+0x54>
 8009b2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009b30:	685a      	ldr	r2, [r3, #4]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	490d      	ldr	r1, [pc, #52]	@ (8009b6c <I2SEx_RxISR_I2SExt+0x90>)
 8009b38:	428b      	cmp	r3, r1
 8009b3a:	d101      	bne.n	8009b40 <I2SEx_RxISR_I2SExt+0x64>
 8009b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8009b70 <I2SEx_RxISR_I2SExt+0x94>)
 8009b3e:	e001      	b.n	8009b44 <I2SEx_RxISR_I2SExt+0x68>
 8009b40:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009b44:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009b48:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d106      	bne.n	8009b62 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f7ff ff03 	bl	8009968 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009b62:	bf00      	nop
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	40003800 	.word	0x40003800
 8009b70:	40003400 	.word	0x40003400

08009b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d101      	bne.n	8009b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e267      	b.n	800a056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d075      	beq.n	8009c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009b92:	4b88      	ldr	r3, [pc, #544]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	f003 030c 	and.w	r3, r3, #12
 8009b9a:	2b04      	cmp	r3, #4
 8009b9c:	d00c      	beq.n	8009bb8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b9e:	4b85      	ldr	r3, [pc, #532]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009ba6:	2b08      	cmp	r3, #8
 8009ba8:	d112      	bne.n	8009bd0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009baa:	4b82      	ldr	r3, [pc, #520]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009bb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009bb6:	d10b      	bne.n	8009bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bb8:	4b7e      	ldr	r3, [pc, #504]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d05b      	beq.n	8009c7c <HAL_RCC_OscConfig+0x108>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d157      	bne.n	8009c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e242      	b.n	800a056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bd8:	d106      	bne.n	8009be8 <HAL_RCC_OscConfig+0x74>
 8009bda:	4b76      	ldr	r3, [pc, #472]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a75      	ldr	r2, [pc, #468]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009be4:	6013      	str	r3, [r2, #0]
 8009be6:	e01d      	b.n	8009c24 <HAL_RCC_OscConfig+0xb0>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009bf0:	d10c      	bne.n	8009c0c <HAL_RCC_OscConfig+0x98>
 8009bf2:	4b70      	ldr	r3, [pc, #448]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a6f      	ldr	r2, [pc, #444]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009bf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009bfc:	6013      	str	r3, [r2, #0]
 8009bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a6c      	ldr	r2, [pc, #432]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c08:	6013      	str	r3, [r2, #0]
 8009c0a:	e00b      	b.n	8009c24 <HAL_RCC_OscConfig+0xb0>
 8009c0c:	4b69      	ldr	r3, [pc, #420]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a68      	ldr	r2, [pc, #416]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009c12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c16:	6013      	str	r3, [r2, #0]
 8009c18:	4b66      	ldr	r3, [pc, #408]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a65      	ldr	r2, [pc, #404]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009c1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d013      	beq.n	8009c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c2c:	f7f9 fe3c 	bl	80038a8 <HAL_GetTick>
 8009c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c32:	e008      	b.n	8009c46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c34:	f7f9 fe38 	bl	80038a8 <HAL_GetTick>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	2b64      	cmp	r3, #100	@ 0x64
 8009c40:	d901      	bls.n	8009c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e207      	b.n	800a056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c46:	4b5b      	ldr	r3, [pc, #364]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d0f0      	beq.n	8009c34 <HAL_RCC_OscConfig+0xc0>
 8009c52:	e014      	b.n	8009c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c54:	f7f9 fe28 	bl	80038a8 <HAL_GetTick>
 8009c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c5a:	e008      	b.n	8009c6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c5c:	f7f9 fe24 	bl	80038a8 <HAL_GetTick>
 8009c60:	4602      	mov	r2, r0
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	2b64      	cmp	r3, #100	@ 0x64
 8009c68:	d901      	bls.n	8009c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	e1f3      	b.n	800a056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c6e:	4b51      	ldr	r3, [pc, #324]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1f0      	bne.n	8009c5c <HAL_RCC_OscConfig+0xe8>
 8009c7a:	e000      	b.n	8009c7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 0302 	and.w	r3, r3, #2
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d063      	beq.n	8009d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	f003 030c 	and.w	r3, r3, #12
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00b      	beq.n	8009cae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c96:	4b47      	ldr	r3, [pc, #284]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009c9e:	2b08      	cmp	r3, #8
 8009ca0:	d11c      	bne.n	8009cdc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ca2:	4b44      	ldr	r3, [pc, #272]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d116      	bne.n	8009cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009cae:	4b41      	ldr	r3, [pc, #260]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f003 0302 	and.w	r3, r3, #2
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d005      	beq.n	8009cc6 <HAL_RCC_OscConfig+0x152>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d001      	beq.n	8009cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e1c7      	b.n	800a056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	691b      	ldr	r3, [r3, #16]
 8009cd2:	00db      	lsls	r3, r3, #3
 8009cd4:	4937      	ldr	r1, [pc, #220]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009cda:	e03a      	b.n	8009d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d020      	beq.n	8009d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009ce4:	4b34      	ldr	r3, [pc, #208]	@ (8009db8 <HAL_RCC_OscConfig+0x244>)
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cea:	f7f9 fddd 	bl	80038a8 <HAL_GetTick>
 8009cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009cf0:	e008      	b.n	8009d04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cf2:	f7f9 fdd9 	bl	80038a8 <HAL_GetTick>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d901      	bls.n	8009d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009d00:	2303      	movs	r3, #3
 8009d02:	e1a8      	b.n	800a056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d04:	4b2b      	ldr	r3, [pc, #172]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 0302 	and.w	r3, r3, #2
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d0f0      	beq.n	8009cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d10:	4b28      	ldr	r3, [pc, #160]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	00db      	lsls	r3, r3, #3
 8009d1e:	4925      	ldr	r1, [pc, #148]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	600b      	str	r3, [r1, #0]
 8009d24:	e015      	b.n	8009d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d26:	4b24      	ldr	r3, [pc, #144]	@ (8009db8 <HAL_RCC_OscConfig+0x244>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d2c:	f7f9 fdbc 	bl	80038a8 <HAL_GetTick>
 8009d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d32:	e008      	b.n	8009d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d34:	f7f9 fdb8 	bl	80038a8 <HAL_GetTick>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	1ad3      	subs	r3, r2, r3
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d901      	bls.n	8009d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009d42:	2303      	movs	r3, #3
 8009d44:	e187      	b.n	800a056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d46:	4b1b      	ldr	r3, [pc, #108]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f003 0302 	and.w	r3, r3, #2
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1f0      	bne.n	8009d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f003 0308 	and.w	r3, r3, #8
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d036      	beq.n	8009dcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	695b      	ldr	r3, [r3, #20]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d016      	beq.n	8009d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d66:	4b15      	ldr	r3, [pc, #84]	@ (8009dbc <HAL_RCC_OscConfig+0x248>)
 8009d68:	2201      	movs	r2, #1
 8009d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d6c:	f7f9 fd9c 	bl	80038a8 <HAL_GetTick>
 8009d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d72:	e008      	b.n	8009d86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d74:	f7f9 fd98 	bl	80038a8 <HAL_GetTick>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d901      	bls.n	8009d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009d82:	2303      	movs	r3, #3
 8009d84:	e167      	b.n	800a056 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d86:	4b0b      	ldr	r3, [pc, #44]	@ (8009db4 <HAL_RCC_OscConfig+0x240>)
 8009d88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d8a:	f003 0302 	and.w	r3, r3, #2
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d0f0      	beq.n	8009d74 <HAL_RCC_OscConfig+0x200>
 8009d92:	e01b      	b.n	8009dcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d94:	4b09      	ldr	r3, [pc, #36]	@ (8009dbc <HAL_RCC_OscConfig+0x248>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d9a:	f7f9 fd85 	bl	80038a8 <HAL_GetTick>
 8009d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009da0:	e00e      	b.n	8009dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009da2:	f7f9 fd81 	bl	80038a8 <HAL_GetTick>
 8009da6:	4602      	mov	r2, r0
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d907      	bls.n	8009dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e150      	b.n	800a056 <HAL_RCC_OscConfig+0x4e2>
 8009db4:	40023800 	.word	0x40023800
 8009db8:	42470000 	.word	0x42470000
 8009dbc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009dc0:	4b88      	ldr	r3, [pc, #544]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009dc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009dc4:	f003 0302 	and.w	r3, r3, #2
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1ea      	bne.n	8009da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f003 0304 	and.w	r3, r3, #4
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f000 8097 	beq.w	8009f08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009dde:	4b81      	ldr	r3, [pc, #516]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10f      	bne.n	8009e0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009dea:	2300      	movs	r3, #0
 8009dec:	60bb      	str	r3, [r7, #8]
 8009dee:	4b7d      	ldr	r3, [pc, #500]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009df2:	4a7c      	ldr	r2, [pc, #496]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8009dfa:	4b7a      	ldr	r3, [pc, #488]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e02:	60bb      	str	r3, [r7, #8]
 8009e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009e06:	2301      	movs	r3, #1
 8009e08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e0a:	4b77      	ldr	r3, [pc, #476]	@ (8009fe8 <HAL_RCC_OscConfig+0x474>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d118      	bne.n	8009e48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009e16:	4b74      	ldr	r3, [pc, #464]	@ (8009fe8 <HAL_RCC_OscConfig+0x474>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a73      	ldr	r2, [pc, #460]	@ (8009fe8 <HAL_RCC_OscConfig+0x474>)
 8009e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e22:	f7f9 fd41 	bl	80038a8 <HAL_GetTick>
 8009e26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e28:	e008      	b.n	8009e3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e2a:	f7f9 fd3d 	bl	80038a8 <HAL_GetTick>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	1ad3      	subs	r3, r2, r3
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d901      	bls.n	8009e3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009e38:	2303      	movs	r3, #3
 8009e3a:	e10c      	b.n	800a056 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e3c:	4b6a      	ldr	r3, [pc, #424]	@ (8009fe8 <HAL_RCC_OscConfig+0x474>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d0f0      	beq.n	8009e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d106      	bne.n	8009e5e <HAL_RCC_OscConfig+0x2ea>
 8009e50:	4b64      	ldr	r3, [pc, #400]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e54:	4a63      	ldr	r2, [pc, #396]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009e56:	f043 0301 	orr.w	r3, r3, #1
 8009e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e5c:	e01c      	b.n	8009e98 <HAL_RCC_OscConfig+0x324>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	2b05      	cmp	r3, #5
 8009e64:	d10c      	bne.n	8009e80 <HAL_RCC_OscConfig+0x30c>
 8009e66:	4b5f      	ldr	r3, [pc, #380]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e6a:	4a5e      	ldr	r2, [pc, #376]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009e6c:	f043 0304 	orr.w	r3, r3, #4
 8009e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e72:	4b5c      	ldr	r3, [pc, #368]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e76:	4a5b      	ldr	r2, [pc, #364]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009e78:	f043 0301 	orr.w	r3, r3, #1
 8009e7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e7e:	e00b      	b.n	8009e98 <HAL_RCC_OscConfig+0x324>
 8009e80:	4b58      	ldr	r3, [pc, #352]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e84:	4a57      	ldr	r2, [pc, #348]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009e86:	f023 0301 	bic.w	r3, r3, #1
 8009e8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e8c:	4b55      	ldr	r3, [pc, #340]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e90:	4a54      	ldr	r2, [pc, #336]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009e92:	f023 0304 	bic.w	r3, r3, #4
 8009e96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d015      	beq.n	8009ecc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ea0:	f7f9 fd02 	bl	80038a8 <HAL_GetTick>
 8009ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ea6:	e00a      	b.n	8009ebe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ea8:	f7f9 fcfe 	bl	80038a8 <HAL_GetTick>
 8009eac:	4602      	mov	r2, r0
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d901      	bls.n	8009ebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009eba:	2303      	movs	r3, #3
 8009ebc:	e0cb      	b.n	800a056 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ebe:	4b49      	ldr	r3, [pc, #292]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ec2:	f003 0302 	and.w	r3, r3, #2
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d0ee      	beq.n	8009ea8 <HAL_RCC_OscConfig+0x334>
 8009eca:	e014      	b.n	8009ef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ecc:	f7f9 fcec 	bl	80038a8 <HAL_GetTick>
 8009ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ed2:	e00a      	b.n	8009eea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ed4:	f7f9 fce8 	bl	80038a8 <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d901      	bls.n	8009eea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e0b5      	b.n	800a056 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009eea:	4b3e      	ldr	r3, [pc, #248]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009eee:	f003 0302 	and.w	r3, r3, #2
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1ee      	bne.n	8009ed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d105      	bne.n	8009f08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009efc:	4b39      	ldr	r3, [pc, #228]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f00:	4a38      	ldr	r2, [pc, #224]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009f02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 80a1 	beq.w	800a054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009f12:	4b34      	ldr	r3, [pc, #208]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	f003 030c 	and.w	r3, r3, #12
 8009f1a:	2b08      	cmp	r3, #8
 8009f1c:	d05c      	beq.n	8009fd8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	699b      	ldr	r3, [r3, #24]
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d141      	bne.n	8009faa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f26:	4b31      	ldr	r3, [pc, #196]	@ (8009fec <HAL_RCC_OscConfig+0x478>)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f2c:	f7f9 fcbc 	bl	80038a8 <HAL_GetTick>
 8009f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f32:	e008      	b.n	8009f46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f34:	f7f9 fcb8 	bl	80038a8 <HAL_GetTick>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d901      	bls.n	8009f46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e087      	b.n	800a056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f46:	4b27      	ldr	r3, [pc, #156]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1f0      	bne.n	8009f34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	69da      	ldr	r2, [r3, #28]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6a1b      	ldr	r3, [r3, #32]
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f60:	019b      	lsls	r3, r3, #6
 8009f62:	431a      	orrs	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f68:	085b      	lsrs	r3, r3, #1
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	041b      	lsls	r3, r3, #16
 8009f6e:	431a      	orrs	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f74:	061b      	lsls	r3, r3, #24
 8009f76:	491b      	ldr	r1, [pc, #108]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8009fec <HAL_RCC_OscConfig+0x478>)
 8009f7e:	2201      	movs	r2, #1
 8009f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f82:	f7f9 fc91 	bl	80038a8 <HAL_GetTick>
 8009f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f88:	e008      	b.n	8009f9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f8a:	f7f9 fc8d 	bl	80038a8 <HAL_GetTick>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	1ad3      	subs	r3, r2, r3
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d901      	bls.n	8009f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	e05c      	b.n	800a056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f9c:	4b11      	ldr	r3, [pc, #68]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d0f0      	beq.n	8009f8a <HAL_RCC_OscConfig+0x416>
 8009fa8:	e054      	b.n	800a054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009faa:	4b10      	ldr	r3, [pc, #64]	@ (8009fec <HAL_RCC_OscConfig+0x478>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009fb0:	f7f9 fc7a 	bl	80038a8 <HAL_GetTick>
 8009fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fb6:	e008      	b.n	8009fca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fb8:	f7f9 fc76 	bl	80038a8 <HAL_GetTick>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d901      	bls.n	8009fca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	e045      	b.n	800a056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fca:	4b06      	ldr	r3, [pc, #24]	@ (8009fe4 <HAL_RCC_OscConfig+0x470>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1f0      	bne.n	8009fb8 <HAL_RCC_OscConfig+0x444>
 8009fd6:	e03d      	b.n	800a054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d107      	bne.n	8009ff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e038      	b.n	800a056 <HAL_RCC_OscConfig+0x4e2>
 8009fe4:	40023800 	.word	0x40023800
 8009fe8:	40007000 	.word	0x40007000
 8009fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009ff0:	4b1b      	ldr	r3, [pc, #108]	@ (800a060 <HAL_RCC_OscConfig+0x4ec>)
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d028      	beq.n	800a050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a008:	429a      	cmp	r2, r3
 800a00a:	d121      	bne.n	800a050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a016:	429a      	cmp	r2, r3
 800a018:	d11a      	bne.n	800a050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a020:	4013      	ands	r3, r2
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a028:	4293      	cmp	r3, r2
 800a02a:	d111      	bne.n	800a050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a036:	085b      	lsrs	r3, r3, #1
 800a038:	3b01      	subs	r3, #1
 800a03a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d107      	bne.n	800a050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a04a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d001      	beq.n	800a054 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	e000      	b.n	800a056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	40023800 	.word	0x40023800

0800a064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d101      	bne.n	800a078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	e0cc      	b.n	800a212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a078:	4b68      	ldr	r3, [pc, #416]	@ (800a21c <HAL_RCC_ClockConfig+0x1b8>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 0307 	and.w	r3, r3, #7
 800a080:	683a      	ldr	r2, [r7, #0]
 800a082:	429a      	cmp	r2, r3
 800a084:	d90c      	bls.n	800a0a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a086:	4b65      	ldr	r3, [pc, #404]	@ (800a21c <HAL_RCC_ClockConfig+0x1b8>)
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	b2d2      	uxtb	r2, r2
 800a08c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a08e:	4b63      	ldr	r3, [pc, #396]	@ (800a21c <HAL_RCC_ClockConfig+0x1b8>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 0307 	and.w	r3, r3, #7
 800a096:	683a      	ldr	r2, [r7, #0]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d001      	beq.n	800a0a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	e0b8      	b.n	800a212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f003 0302 	and.w	r3, r3, #2
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d020      	beq.n	800a0ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f003 0304 	and.w	r3, r3, #4
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d005      	beq.n	800a0c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a0b8:	4b59      	ldr	r3, [pc, #356]	@ (800a220 <HAL_RCC_ClockConfig+0x1bc>)
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	4a58      	ldr	r2, [pc, #352]	@ (800a220 <HAL_RCC_ClockConfig+0x1bc>)
 800a0be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a0c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 0308 	and.w	r3, r3, #8
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d005      	beq.n	800a0dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a0d0:	4b53      	ldr	r3, [pc, #332]	@ (800a220 <HAL_RCC_ClockConfig+0x1bc>)
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	4a52      	ldr	r2, [pc, #328]	@ (800a220 <HAL_RCC_ClockConfig+0x1bc>)
 800a0d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a0da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0dc:	4b50      	ldr	r3, [pc, #320]	@ (800a220 <HAL_RCC_ClockConfig+0x1bc>)
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	494d      	ldr	r1, [pc, #308]	@ (800a220 <HAL_RCC_ClockConfig+0x1bc>)
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f003 0301 	and.w	r3, r3, #1
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d044      	beq.n	800a184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d107      	bne.n	800a112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a102:	4b47      	ldr	r3, [pc, #284]	@ (800a220 <HAL_RCC_ClockConfig+0x1bc>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d119      	bne.n	800a142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e07f      	b.n	800a212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	2b02      	cmp	r3, #2
 800a118:	d003      	beq.n	800a122 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a11e:	2b03      	cmp	r3, #3
 800a120:	d107      	bne.n	800a132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a122:	4b3f      	ldr	r3, [pc, #252]	@ (800a220 <HAL_RCC_ClockConfig+0x1bc>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d109      	bne.n	800a142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e06f      	b.n	800a212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a132:	4b3b      	ldr	r3, [pc, #236]	@ (800a220 <HAL_RCC_ClockConfig+0x1bc>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f003 0302 	and.w	r3, r3, #2
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d101      	bne.n	800a142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e067      	b.n	800a212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a142:	4b37      	ldr	r3, [pc, #220]	@ (800a220 <HAL_RCC_ClockConfig+0x1bc>)
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	f023 0203 	bic.w	r2, r3, #3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	4934      	ldr	r1, [pc, #208]	@ (800a220 <HAL_RCC_ClockConfig+0x1bc>)
 800a150:	4313      	orrs	r3, r2
 800a152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a154:	f7f9 fba8 	bl	80038a8 <HAL_GetTick>
 800a158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a15a:	e00a      	b.n	800a172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a15c:	f7f9 fba4 	bl	80038a8 <HAL_GetTick>
 800a160:	4602      	mov	r2, r0
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d901      	bls.n	800a172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a16e:	2303      	movs	r3, #3
 800a170:	e04f      	b.n	800a212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a172:	4b2b      	ldr	r3, [pc, #172]	@ (800a220 <HAL_RCC_ClockConfig+0x1bc>)
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	f003 020c 	and.w	r2, r3, #12
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	429a      	cmp	r2, r3
 800a182:	d1eb      	bne.n	800a15c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a184:	4b25      	ldr	r3, [pc, #148]	@ (800a21c <HAL_RCC_ClockConfig+0x1b8>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 0307 	and.w	r3, r3, #7
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d20c      	bcs.n	800a1ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a192:	4b22      	ldr	r3, [pc, #136]	@ (800a21c <HAL_RCC_ClockConfig+0x1b8>)
 800a194:	683a      	ldr	r2, [r7, #0]
 800a196:	b2d2      	uxtb	r2, r2
 800a198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a19a:	4b20      	ldr	r3, [pc, #128]	@ (800a21c <HAL_RCC_ClockConfig+0x1b8>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 0307 	and.w	r3, r3, #7
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d001      	beq.n	800a1ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e032      	b.n	800a212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 0304 	and.w	r3, r3, #4
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d008      	beq.n	800a1ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a1b8:	4b19      	ldr	r3, [pc, #100]	@ (800a220 <HAL_RCC_ClockConfig+0x1bc>)
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	4916      	ldr	r1, [pc, #88]	@ (800a220 <HAL_RCC_ClockConfig+0x1bc>)
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f003 0308 	and.w	r3, r3, #8
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d009      	beq.n	800a1ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a1d6:	4b12      	ldr	r3, [pc, #72]	@ (800a220 <HAL_RCC_ClockConfig+0x1bc>)
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	00db      	lsls	r3, r3, #3
 800a1e4:	490e      	ldr	r1, [pc, #56]	@ (800a220 <HAL_RCC_ClockConfig+0x1bc>)
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a1ea:	f000 f821 	bl	800a230 <HAL_RCC_GetSysClockFreq>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	4b0b      	ldr	r3, [pc, #44]	@ (800a220 <HAL_RCC_ClockConfig+0x1bc>)
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	091b      	lsrs	r3, r3, #4
 800a1f6:	f003 030f 	and.w	r3, r3, #15
 800a1fa:	490a      	ldr	r1, [pc, #40]	@ (800a224 <HAL_RCC_ClockConfig+0x1c0>)
 800a1fc:	5ccb      	ldrb	r3, [r1, r3]
 800a1fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a202:	4a09      	ldr	r2, [pc, #36]	@ (800a228 <HAL_RCC_ClockConfig+0x1c4>)
 800a204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a206:	4b09      	ldr	r3, [pc, #36]	@ (800a22c <HAL_RCC_ClockConfig+0x1c8>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7f9 fb08 	bl	8003820 <HAL_InitTick>

  return HAL_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	40023c00 	.word	0x40023c00
 800a220:	40023800 	.word	0x40023800
 800a224:	08018a84 	.word	0x08018a84
 800a228:	20000044 	.word	0x20000044
 800a22c:	2000004c 	.word	0x2000004c

0800a230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a234:	b094      	sub	sp, #80	@ 0x50
 800a236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a238:	2300      	movs	r3, #0
 800a23a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800a23c:	2300      	movs	r3, #0
 800a23e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800a240:	2300      	movs	r3, #0
 800a242:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800a244:	2300      	movs	r3, #0
 800a246:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a248:	4b79      	ldr	r3, [pc, #484]	@ (800a430 <HAL_RCC_GetSysClockFreq+0x200>)
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	f003 030c 	and.w	r3, r3, #12
 800a250:	2b08      	cmp	r3, #8
 800a252:	d00d      	beq.n	800a270 <HAL_RCC_GetSysClockFreq+0x40>
 800a254:	2b08      	cmp	r3, #8
 800a256:	f200 80e1 	bhi.w	800a41c <HAL_RCC_GetSysClockFreq+0x1ec>
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d002      	beq.n	800a264 <HAL_RCC_GetSysClockFreq+0x34>
 800a25e:	2b04      	cmp	r3, #4
 800a260:	d003      	beq.n	800a26a <HAL_RCC_GetSysClockFreq+0x3a>
 800a262:	e0db      	b.n	800a41c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a264:	4b73      	ldr	r3, [pc, #460]	@ (800a434 <HAL_RCC_GetSysClockFreq+0x204>)
 800a266:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a268:	e0db      	b.n	800a422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a26a:	4b73      	ldr	r3, [pc, #460]	@ (800a438 <HAL_RCC_GetSysClockFreq+0x208>)
 800a26c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a26e:	e0d8      	b.n	800a422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a270:	4b6f      	ldr	r3, [pc, #444]	@ (800a430 <HAL_RCC_GetSysClockFreq+0x200>)
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a278:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a27a:	4b6d      	ldr	r3, [pc, #436]	@ (800a430 <HAL_RCC_GetSysClockFreq+0x200>)
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a282:	2b00      	cmp	r3, #0
 800a284:	d063      	beq.n	800a34e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a286:	4b6a      	ldr	r3, [pc, #424]	@ (800a430 <HAL_RCC_GetSysClockFreq+0x200>)
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	099b      	lsrs	r3, r3, #6
 800a28c:	2200      	movs	r2, #0
 800a28e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a290:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a298:	633b      	str	r3, [r7, #48]	@ 0x30
 800a29a:	2300      	movs	r3, #0
 800a29c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a29e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a2a2:	4622      	mov	r2, r4
 800a2a4:	462b      	mov	r3, r5
 800a2a6:	f04f 0000 	mov.w	r0, #0
 800a2aa:	f04f 0100 	mov.w	r1, #0
 800a2ae:	0159      	lsls	r1, r3, #5
 800a2b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a2b4:	0150      	lsls	r0, r2, #5
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	4621      	mov	r1, r4
 800a2bc:	1a51      	subs	r1, r2, r1
 800a2be:	6139      	str	r1, [r7, #16]
 800a2c0:	4629      	mov	r1, r5
 800a2c2:	eb63 0301 	sbc.w	r3, r3, r1
 800a2c6:	617b      	str	r3, [r7, #20]
 800a2c8:	f04f 0200 	mov.w	r2, #0
 800a2cc:	f04f 0300 	mov.w	r3, #0
 800a2d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a2d4:	4659      	mov	r1, fp
 800a2d6:	018b      	lsls	r3, r1, #6
 800a2d8:	4651      	mov	r1, sl
 800a2da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a2de:	4651      	mov	r1, sl
 800a2e0:	018a      	lsls	r2, r1, #6
 800a2e2:	4651      	mov	r1, sl
 800a2e4:	ebb2 0801 	subs.w	r8, r2, r1
 800a2e8:	4659      	mov	r1, fp
 800a2ea:	eb63 0901 	sbc.w	r9, r3, r1
 800a2ee:	f04f 0200 	mov.w	r2, #0
 800a2f2:	f04f 0300 	mov.w	r3, #0
 800a2f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a2fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a2fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a302:	4690      	mov	r8, r2
 800a304:	4699      	mov	r9, r3
 800a306:	4623      	mov	r3, r4
 800a308:	eb18 0303 	adds.w	r3, r8, r3
 800a30c:	60bb      	str	r3, [r7, #8]
 800a30e:	462b      	mov	r3, r5
 800a310:	eb49 0303 	adc.w	r3, r9, r3
 800a314:	60fb      	str	r3, [r7, #12]
 800a316:	f04f 0200 	mov.w	r2, #0
 800a31a:	f04f 0300 	mov.w	r3, #0
 800a31e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a322:	4629      	mov	r1, r5
 800a324:	024b      	lsls	r3, r1, #9
 800a326:	4621      	mov	r1, r4
 800a328:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a32c:	4621      	mov	r1, r4
 800a32e:	024a      	lsls	r2, r1, #9
 800a330:	4610      	mov	r0, r2
 800a332:	4619      	mov	r1, r3
 800a334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a336:	2200      	movs	r2, #0
 800a338:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a33a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a33c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a340:	f7f5 ffa6 	bl	8000290 <__aeabi_uldivmod>
 800a344:	4602      	mov	r2, r0
 800a346:	460b      	mov	r3, r1
 800a348:	4613      	mov	r3, r2
 800a34a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a34c:	e058      	b.n	800a400 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a34e:	4b38      	ldr	r3, [pc, #224]	@ (800a430 <HAL_RCC_GetSysClockFreq+0x200>)
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	099b      	lsrs	r3, r3, #6
 800a354:	2200      	movs	r2, #0
 800a356:	4618      	mov	r0, r3
 800a358:	4611      	mov	r1, r2
 800a35a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a35e:	623b      	str	r3, [r7, #32]
 800a360:	2300      	movs	r3, #0
 800a362:	627b      	str	r3, [r7, #36]	@ 0x24
 800a364:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a368:	4642      	mov	r2, r8
 800a36a:	464b      	mov	r3, r9
 800a36c:	f04f 0000 	mov.w	r0, #0
 800a370:	f04f 0100 	mov.w	r1, #0
 800a374:	0159      	lsls	r1, r3, #5
 800a376:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a37a:	0150      	lsls	r0, r2, #5
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	4641      	mov	r1, r8
 800a382:	ebb2 0a01 	subs.w	sl, r2, r1
 800a386:	4649      	mov	r1, r9
 800a388:	eb63 0b01 	sbc.w	fp, r3, r1
 800a38c:	f04f 0200 	mov.w	r2, #0
 800a390:	f04f 0300 	mov.w	r3, #0
 800a394:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a398:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a39c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a3a0:	ebb2 040a 	subs.w	r4, r2, sl
 800a3a4:	eb63 050b 	sbc.w	r5, r3, fp
 800a3a8:	f04f 0200 	mov.w	r2, #0
 800a3ac:	f04f 0300 	mov.w	r3, #0
 800a3b0:	00eb      	lsls	r3, r5, #3
 800a3b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a3b6:	00e2      	lsls	r2, r4, #3
 800a3b8:	4614      	mov	r4, r2
 800a3ba:	461d      	mov	r5, r3
 800a3bc:	4643      	mov	r3, r8
 800a3be:	18e3      	adds	r3, r4, r3
 800a3c0:	603b      	str	r3, [r7, #0]
 800a3c2:	464b      	mov	r3, r9
 800a3c4:	eb45 0303 	adc.w	r3, r5, r3
 800a3c8:	607b      	str	r3, [r7, #4]
 800a3ca:	f04f 0200 	mov.w	r2, #0
 800a3ce:	f04f 0300 	mov.w	r3, #0
 800a3d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	028b      	lsls	r3, r1, #10
 800a3da:	4621      	mov	r1, r4
 800a3dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a3e0:	4621      	mov	r1, r4
 800a3e2:	028a      	lsls	r2, r1, #10
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	61bb      	str	r3, [r7, #24]
 800a3ee:	61fa      	str	r2, [r7, #28]
 800a3f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a3f4:	f7f5 ff4c 	bl	8000290 <__aeabi_uldivmod>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a400:	4b0b      	ldr	r3, [pc, #44]	@ (800a430 <HAL_RCC_GetSysClockFreq+0x200>)
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	0c1b      	lsrs	r3, r3, #16
 800a406:	f003 0303 	and.w	r3, r3, #3
 800a40a:	3301      	adds	r3, #1
 800a40c:	005b      	lsls	r3, r3, #1
 800a40e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800a410:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a414:	fbb2 f3f3 	udiv	r3, r2, r3
 800a418:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a41a:	e002      	b.n	800a422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a41c:	4b05      	ldr	r3, [pc, #20]	@ (800a434 <HAL_RCC_GetSysClockFreq+0x204>)
 800a41e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a420:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800a424:	4618      	mov	r0, r3
 800a426:	3750      	adds	r7, #80	@ 0x50
 800a428:	46bd      	mov	sp, r7
 800a42a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a42e:	bf00      	nop
 800a430:	40023800 	.word	0x40023800
 800a434:	00f42400 	.word	0x00f42400
 800a438:	007a1200 	.word	0x007a1200

0800a43c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a43c:	b480      	push	{r7}
 800a43e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a440:	4b03      	ldr	r3, [pc, #12]	@ (800a450 <HAL_RCC_GetHCLKFreq+0x14>)
 800a442:	681b      	ldr	r3, [r3, #0]
}
 800a444:	4618      	mov	r0, r3
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	20000044 	.word	0x20000044

0800a454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a458:	f7ff fff0 	bl	800a43c <HAL_RCC_GetHCLKFreq>
 800a45c:	4602      	mov	r2, r0
 800a45e:	4b05      	ldr	r3, [pc, #20]	@ (800a474 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	0a9b      	lsrs	r3, r3, #10
 800a464:	f003 0307 	and.w	r3, r3, #7
 800a468:	4903      	ldr	r1, [pc, #12]	@ (800a478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a46a:	5ccb      	ldrb	r3, [r1, r3]
 800a46c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a470:	4618      	mov	r0, r3
 800a472:	bd80      	pop	{r7, pc}
 800a474:	40023800 	.word	0x40023800
 800a478:	08018a94 	.word	0x08018a94

0800a47c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a484:	2300      	movs	r3, #0
 800a486:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a488:	2300      	movs	r3, #0
 800a48a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0301 	and.w	r3, r3, #1
 800a494:	2b00      	cmp	r3, #0
 800a496:	d105      	bne.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d038      	beq.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a4a4:	4b68      	ldr	r3, [pc, #416]	@ (800a648 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a4aa:	f7f9 f9fd 	bl	80038a8 <HAL_GetTick>
 800a4ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a4b0:	e008      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a4b2:	f7f9 f9f9 	bl	80038a8 <HAL_GetTick>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	d901      	bls.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	e0bd      	b.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a4c4:	4b61      	ldr	r3, [pc, #388]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1f0      	bne.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	685a      	ldr	r2, [r3, #4]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	019b      	lsls	r3, r3, #6
 800a4da:	431a      	orrs	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	071b      	lsls	r3, r3, #28
 800a4e2:	495a      	ldr	r1, [pc, #360]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a4ea:	4b57      	ldr	r3, [pc, #348]	@ (800a648 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a4f0:	f7f9 f9da 	bl	80038a8 <HAL_GetTick>
 800a4f4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a4f6:	e008      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a4f8:	f7f9 f9d6 	bl	80038a8 <HAL_GetTick>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	2b02      	cmp	r3, #2
 800a504:	d901      	bls.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a506:	2303      	movs	r3, #3
 800a508:	e09a      	b.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a50a:	4b50      	ldr	r3, [pc, #320]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a512:	2b00      	cmp	r3, #0
 800a514:	d0f0      	beq.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0302 	and.w	r3, r3, #2
 800a51e:	2b00      	cmp	r3, #0
 800a520:	f000 8083 	beq.w	800a62a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a524:	2300      	movs	r3, #0
 800a526:	60fb      	str	r3, [r7, #12]
 800a528:	4b48      	ldr	r3, [pc, #288]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a52a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a52c:	4a47      	ldr	r2, [pc, #284]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a52e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a532:	6413      	str	r3, [r2, #64]	@ 0x40
 800a534:	4b45      	ldr	r3, [pc, #276]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a53c:	60fb      	str	r3, [r7, #12]
 800a53e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a540:	4b43      	ldr	r3, [pc, #268]	@ (800a650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a42      	ldr	r2, [pc, #264]	@ (800a650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a54a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a54c:	f7f9 f9ac 	bl	80038a8 <HAL_GetTick>
 800a550:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800a552:	e008      	b.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a554:	f7f9 f9a8 	bl	80038a8 <HAL_GetTick>
 800a558:	4602      	mov	r2, r0
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d901      	bls.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800a562:	2303      	movs	r3, #3
 800a564:	e06c      	b.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800a566:	4b3a      	ldr	r3, [pc, #232]	@ (800a650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d0f0      	beq.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a572:	4b36      	ldr	r3, [pc, #216]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a57a:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d02f      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a58a:	693a      	ldr	r2, [r7, #16]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d028      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a590:	4b2e      	ldr	r3, [pc, #184]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a594:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a598:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a59a:	4b2e      	ldr	r3, [pc, #184]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a59c:	2201      	movs	r2, #1
 800a59e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a5a0:	4b2c      	ldr	r3, [pc, #176]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a5a6:	4a29      	ldr	r2, [pc, #164]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a5ac:	4b27      	ldr	r3, [pc, #156]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5b0:	f003 0301 	and.w	r3, r3, #1
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d114      	bne.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a5b8:	f7f9 f976 	bl	80038a8 <HAL_GetTick>
 800a5bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a5be:	e00a      	b.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5c0:	f7f9 f972 	bl	80038a8 <HAL_GetTick>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d901      	bls.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800a5d2:	2303      	movs	r3, #3
 800a5d4:	e034      	b.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a5d6:	4b1d      	ldr	r3, [pc, #116]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5da:	f003 0302 	and.w	r3, r3, #2
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d0ee      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	691b      	ldr	r3, [r3, #16]
 800a5e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a5ee:	d10d      	bne.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x190>
 800a5f0:	4b16      	ldr	r3, [pc, #88]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	691b      	ldr	r3, [r3, #16]
 800a5fc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a604:	4911      	ldr	r1, [pc, #68]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a606:	4313      	orrs	r3, r2
 800a608:	608b      	str	r3, [r1, #8]
 800a60a:	e005      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800a60c:	4b0f      	ldr	r3, [pc, #60]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	4a0e      	ldr	r2, [pc, #56]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a612:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800a616:	6093      	str	r3, [r2, #8]
 800a618:	4b0c      	ldr	r3, [pc, #48]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a61a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	691b      	ldr	r3, [r3, #16]
 800a620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a624:	4909      	ldr	r1, [pc, #36]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a626:	4313      	orrs	r3, r2
 800a628:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f003 0308 	and.w	r3, r3, #8
 800a632:	2b00      	cmp	r3, #0
 800a634:	d003      	beq.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	7d1a      	ldrb	r2, [r3, #20]
 800a63a:	4b07      	ldr	r3, [pc, #28]	@ (800a658 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800a63c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3718      	adds	r7, #24
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	42470068 	.word	0x42470068
 800a64c:	40023800 	.word	0x40023800
 800a650:	40007000 	.word	0x40007000
 800a654:	42470e40 	.word	0x42470e40
 800a658:	424711e0 	.word	0x424711e0

0800a65c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2203      	movs	r2, #3
 800a668:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800a66a:	4b1c      	ldr	r3, [pc, #112]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800a66c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a670:	099b      	lsrs	r3, r3, #6
 800a672:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a67a:	4b18      	ldr	r3, [pc, #96]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800a67c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a680:	0f1b      	lsrs	r3, r3, #28
 800a682:	f003 0207 	and.w	r2, r3, #7
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 800a68a:	4b14      	ldr	r3, [pc, #80]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800a68c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a690:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800a698:	4b10      	ldr	r3, [pc, #64]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a6a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800a6a2:	4b0e      	ldr	r3, [pc, #56]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800a6a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6a6:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	431a      	orrs	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 800a6b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800a6b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d103      	bne.n	800a6c8 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 800a6c6:	e002      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	751a      	strb	r2, [r3, #20]
}
 800a6ce:	bf00      	nop
 800a6d0:	3714      	adds	r7, #20
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	40023800 	.word	0x40023800

0800a6e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b087      	sub	sp, #28
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d141      	bne.n	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800a6fe:	4b25      	ldr	r3, [pc, #148]	@ (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a706:	60fb      	str	r3, [r7, #12]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d006      	beq.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a714:	d131      	bne.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800a716:	4b20      	ldr	r3, [pc, #128]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800a718:	617b      	str	r3, [r7, #20]
          break;
 800a71a:	e031      	b.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a71c:	4b1d      	ldr	r3, [pc, #116]	@ (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a724:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a728:	d109      	bne.n	800a73e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800a72a:	4b1a      	ldr	r3, [pc, #104]	@ (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a72c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a730:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a734:	4a19      	ldr	r2, [pc, #100]	@ (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800a736:	fbb2 f3f3 	udiv	r3, r2, r3
 800a73a:	613b      	str	r3, [r7, #16]
 800a73c:	e008      	b.n	800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800a73e:	4b15      	ldr	r3, [pc, #84]	@ (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a740:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a744:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a748:	4a15      	ldr	r2, [pc, #84]	@ (800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800a74a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a74e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800a750:	4b10      	ldr	r3, [pc, #64]	@ (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a756:	099b      	lsrs	r3, r3, #6
 800a758:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	fb02 f303 	mul.w	r3, r2, r3
 800a762:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800a764:	4b0b      	ldr	r3, [pc, #44]	@ (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a766:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a76a:	0f1b      	lsrs	r3, r3, #28
 800a76c:	f003 0307 	and.w	r3, r3, #7
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	fbb2 f3f3 	udiv	r3, r2, r3
 800a776:	617b      	str	r3, [r7, #20]
          break;
 800a778:	e002      	b.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800a77a:	2300      	movs	r3, #0
 800a77c:	617b      	str	r3, [r7, #20]
          break;
 800a77e:	bf00      	nop
        }
      }
      break;
 800a780:	e000      	b.n	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 800a782:	bf00      	nop
    }
  }
  return frequency;
 800a784:	697b      	ldr	r3, [r7, #20]
}
 800a786:	4618      	mov	r0, r3
 800a788:	371c      	adds	r7, #28
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	40023800 	.word	0x40023800
 800a798:	00bb8000 	.word	0x00bb8000
 800a79c:	007a1200 	.word	0x007a1200
 800a7a0:	00f42400 	.word	0x00f42400

0800a7a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d101      	bne.n	800a7b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e041      	b.n	800a83a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d106      	bne.n	800a7d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f7f8 fcfe 	bl	80031cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2202      	movs	r2, #2
 800a7d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	3304      	adds	r3, #4
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	f000 f9a8 	bl	800ab38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3708      	adds	r7, #8
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
	...

0800a844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a852:	b2db      	uxtb	r3, r3
 800a854:	2b01      	cmp	r3, #1
 800a856:	d001      	beq.n	800a85c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a858:	2301      	movs	r3, #1
 800a85a:	e044      	b.n	800a8e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2202      	movs	r2, #2
 800a860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68da      	ldr	r2, [r3, #12]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f042 0201 	orr.w	r2, r2, #1
 800a872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a1e      	ldr	r2, [pc, #120]	@ (800a8f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d018      	beq.n	800a8b0 <HAL_TIM_Base_Start_IT+0x6c>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a886:	d013      	beq.n	800a8b0 <HAL_TIM_Base_Start_IT+0x6c>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a1a      	ldr	r2, [pc, #104]	@ (800a8f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d00e      	beq.n	800a8b0 <HAL_TIM_Base_Start_IT+0x6c>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a19      	ldr	r2, [pc, #100]	@ (800a8fc <HAL_TIM_Base_Start_IT+0xb8>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d009      	beq.n	800a8b0 <HAL_TIM_Base_Start_IT+0x6c>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a17      	ldr	r2, [pc, #92]	@ (800a900 <HAL_TIM_Base_Start_IT+0xbc>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d004      	beq.n	800a8b0 <HAL_TIM_Base_Start_IT+0x6c>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a16      	ldr	r2, [pc, #88]	@ (800a904 <HAL_TIM_Base_Start_IT+0xc0>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d111      	bne.n	800a8d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	f003 0307 	and.w	r3, r3, #7
 800a8ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2b06      	cmp	r3, #6
 800a8c0:	d010      	beq.n	800a8e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f042 0201 	orr.w	r2, r2, #1
 800a8d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8d2:	e007      	b.n	800a8e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f042 0201 	orr.w	r2, r2, #1
 800a8e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3714      	adds	r7, #20
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	40010000 	.word	0x40010000
 800a8f8:	40000400 	.word	0x40000400
 800a8fc:	40000800 	.word	0x40000800
 800a900:	40000c00 	.word	0x40000c00
 800a904:	40014000 	.word	0x40014000

0800a908 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	f003 0302 	and.w	r3, r3, #2
 800a926:	2b00      	cmp	r3, #0
 800a928:	d020      	beq.n	800a96c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f003 0302 	and.w	r3, r3, #2
 800a930:	2b00      	cmp	r3, #0
 800a932:	d01b      	beq.n	800a96c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f06f 0202 	mvn.w	r2, #2
 800a93c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	699b      	ldr	r3, [r3, #24]
 800a94a:	f003 0303 	and.w	r3, r3, #3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d003      	beq.n	800a95a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 f8d2 	bl	800aafc <HAL_TIM_IC_CaptureCallback>
 800a958:	e005      	b.n	800a966 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f8c4 	bl	800aae8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 f8d5 	bl	800ab10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	f003 0304 	and.w	r3, r3, #4
 800a972:	2b00      	cmp	r3, #0
 800a974:	d020      	beq.n	800a9b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f003 0304 	and.w	r3, r3, #4
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d01b      	beq.n	800a9b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f06f 0204 	mvn.w	r2, #4
 800a988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2202      	movs	r2, #2
 800a98e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	699b      	ldr	r3, [r3, #24]
 800a996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d003      	beq.n	800a9a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 f8ac 	bl	800aafc <HAL_TIM_IC_CaptureCallback>
 800a9a4:	e005      	b.n	800a9b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f89e 	bl	800aae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 f8af 	bl	800ab10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	f003 0308 	and.w	r3, r3, #8
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d020      	beq.n	800aa04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f003 0308 	and.w	r3, r3, #8
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d01b      	beq.n	800aa04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f06f 0208 	mvn.w	r2, #8
 800a9d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2204      	movs	r2, #4
 800a9da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	69db      	ldr	r3, [r3, #28]
 800a9e2:	f003 0303 	and.w	r3, r3, #3
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d003      	beq.n	800a9f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 f886 	bl	800aafc <HAL_TIM_IC_CaptureCallback>
 800a9f0:	e005      	b.n	800a9fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 f878 	bl	800aae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f889 	bl	800ab10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	f003 0310 	and.w	r3, r3, #16
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d020      	beq.n	800aa50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f003 0310 	and.w	r3, r3, #16
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d01b      	beq.n	800aa50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f06f 0210 	mvn.w	r2, #16
 800aa20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2208      	movs	r2, #8
 800aa26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	69db      	ldr	r3, [r3, #28]
 800aa2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d003      	beq.n	800aa3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 f860 	bl	800aafc <HAL_TIM_IC_CaptureCallback>
 800aa3c:	e005      	b.n	800aa4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 f852 	bl	800aae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 f863 	bl	800ab10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	f003 0301 	and.w	r3, r3, #1
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00c      	beq.n	800aa74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f003 0301 	and.w	r3, r3, #1
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d007      	beq.n	800aa74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f06f 0201 	mvn.w	r2, #1
 800aa6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7f6 fdee 	bl	8001650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00c      	beq.n	800aa98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d007      	beq.n	800aa98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800aa90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 f8e6 	bl	800ac64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00c      	beq.n	800aabc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d007      	beq.n	800aabc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 f834 	bl	800ab24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	f003 0320 	and.w	r3, r3, #32
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d00c      	beq.n	800aae0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f003 0320 	and.w	r3, r3, #32
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d007      	beq.n	800aae0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f06f 0220 	mvn.w	r2, #32
 800aad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 f8b8 	bl	800ac50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aae0:	bf00      	nop
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab04:	bf00      	nop
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab18:	bf00      	nop
 800ab1a:	370c      	adds	r7, #12
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab2c:	bf00      	nop
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a3a      	ldr	r2, [pc, #232]	@ (800ac34 <TIM_Base_SetConfig+0xfc>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d00f      	beq.n	800ab70 <TIM_Base_SetConfig+0x38>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab56:	d00b      	beq.n	800ab70 <TIM_Base_SetConfig+0x38>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a37      	ldr	r2, [pc, #220]	@ (800ac38 <TIM_Base_SetConfig+0x100>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d007      	beq.n	800ab70 <TIM_Base_SetConfig+0x38>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a36      	ldr	r2, [pc, #216]	@ (800ac3c <TIM_Base_SetConfig+0x104>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d003      	beq.n	800ab70 <TIM_Base_SetConfig+0x38>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a35      	ldr	r2, [pc, #212]	@ (800ac40 <TIM_Base_SetConfig+0x108>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d108      	bne.n	800ab82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a2b      	ldr	r2, [pc, #172]	@ (800ac34 <TIM_Base_SetConfig+0xfc>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d01b      	beq.n	800abc2 <TIM_Base_SetConfig+0x8a>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab90:	d017      	beq.n	800abc2 <TIM_Base_SetConfig+0x8a>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a28      	ldr	r2, [pc, #160]	@ (800ac38 <TIM_Base_SetConfig+0x100>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d013      	beq.n	800abc2 <TIM_Base_SetConfig+0x8a>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a27      	ldr	r2, [pc, #156]	@ (800ac3c <TIM_Base_SetConfig+0x104>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d00f      	beq.n	800abc2 <TIM_Base_SetConfig+0x8a>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a26      	ldr	r2, [pc, #152]	@ (800ac40 <TIM_Base_SetConfig+0x108>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d00b      	beq.n	800abc2 <TIM_Base_SetConfig+0x8a>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a25      	ldr	r2, [pc, #148]	@ (800ac44 <TIM_Base_SetConfig+0x10c>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d007      	beq.n	800abc2 <TIM_Base_SetConfig+0x8a>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a24      	ldr	r2, [pc, #144]	@ (800ac48 <TIM_Base_SetConfig+0x110>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d003      	beq.n	800abc2 <TIM_Base_SetConfig+0x8a>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a23      	ldr	r2, [pc, #140]	@ (800ac4c <TIM_Base_SetConfig+0x114>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d108      	bne.n	800abd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800abc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	68fa      	ldr	r2, [r7, #12]
 800abd0:	4313      	orrs	r3, r2
 800abd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	695b      	ldr	r3, [r3, #20]
 800abde:	4313      	orrs	r3, r2
 800abe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	689a      	ldr	r2, [r3, #8]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a0e      	ldr	r2, [pc, #56]	@ (800ac34 <TIM_Base_SetConfig+0xfc>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d103      	bne.n	800ac08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	691a      	ldr	r2, [r3, #16]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	f003 0301 	and.w	r3, r3, #1
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d105      	bne.n	800ac26 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	f023 0201 	bic.w	r2, r3, #1
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	611a      	str	r2, [r3, #16]
  }
}
 800ac26:	bf00      	nop
 800ac28:	3714      	adds	r7, #20
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	40010000 	.word	0x40010000
 800ac38:	40000400 	.word	0x40000400
 800ac3c:	40000800 	.word	0x40000800
 800ac40:	40000c00 	.word	0x40000c00
 800ac44:	40014000 	.word	0x40014000
 800ac48:	40014400 	.word	0x40014400
 800ac4c:	40014800 	.word	0x40014800

0800ac50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac6c:	bf00      	nop
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac78:	b084      	sub	sp, #16
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b084      	sub	sp, #16
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
 800ac82:	f107 001c 	add.w	r0, r7, #28
 800ac86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac8a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d123      	bne.n	800acda <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800aca6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800acba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d105      	bne.n	800acce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 f9dc 	bl	800b08c <USB_CoreReset>
 800acd4:	4603      	mov	r3, r0
 800acd6:	73fb      	strb	r3, [r7, #15]
 800acd8:	e01b      	b.n	800ad12 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 f9d0 	bl	800b08c <USB_CoreReset>
 800acec:	4603      	mov	r3, r0
 800acee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800acf0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d106      	bne.n	800ad06 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acfc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	639a      	str	r2, [r3, #56]	@ 0x38
 800ad04:	e005      	b.n	800ad12 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ad12:	7fbb      	ldrb	r3, [r7, #30]
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d10b      	bne.n	800ad30 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	f043 0206 	orr.w	r2, r3, #6
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	f043 0220 	orr.w	r2, r3, #32
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ad30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad3c:	b004      	add	sp, #16
 800ad3e:	4770      	bx	lr

0800ad40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	f043 0201 	orr.w	r2, r3, #1
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	370c      	adds	r7, #12
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad62:	b480      	push	{r7}
 800ad64:	b083      	sub	sp, #12
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	f023 0201 	bic.w	r2, r3, #1
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ad90:	2300      	movs	r3, #0
 800ad92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ada0:	78fb      	ldrb	r3, [r7, #3]
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d115      	bne.n	800add2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800adb2:	200a      	movs	r0, #10
 800adb4:	f7f8 fd84 	bl	80038c0 <HAL_Delay>
      ms += 10U;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	330a      	adds	r3, #10
 800adbc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f956 	bl	800b070 <USB_GetMode>
 800adc4:	4603      	mov	r3, r0
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d01e      	beq.n	800ae08 <USB_SetCurrentMode+0x84>
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2bc7      	cmp	r3, #199	@ 0xc7
 800adce:	d9f0      	bls.n	800adb2 <USB_SetCurrentMode+0x2e>
 800add0:	e01a      	b.n	800ae08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800add2:	78fb      	ldrb	r3, [r7, #3]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d115      	bne.n	800ae04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ade4:	200a      	movs	r0, #10
 800ade6:	f7f8 fd6b 	bl	80038c0 <HAL_Delay>
      ms += 10U;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	330a      	adds	r3, #10
 800adee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f93d 	bl	800b070 <USB_GetMode>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d005      	beq.n	800ae08 <USB_SetCurrentMode+0x84>
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2bc7      	cmp	r3, #199	@ 0xc7
 800ae00:	d9f0      	bls.n	800ade4 <USB_SetCurrentMode+0x60>
 800ae02:	e001      	b.n	800ae08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	e005      	b.n	800ae14 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2bc8      	cmp	r3, #200	@ 0xc8
 800ae0c:	d101      	bne.n	800ae12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e000      	b.n	800ae14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b085      	sub	sp, #20
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ae26:	2300      	movs	r3, #0
 800ae28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae36:	d901      	bls.n	800ae3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ae38:	2303      	movs	r3, #3
 800ae3a:	e01b      	b.n	800ae74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	691b      	ldr	r3, [r3, #16]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	daf2      	bge.n	800ae2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ae44:	2300      	movs	r3, #0
 800ae46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	019b      	lsls	r3, r3, #6
 800ae4c:	f043 0220 	orr.w	r2, r3, #32
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	3301      	adds	r3, #1
 800ae58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae60:	d901      	bls.n	800ae66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ae62:	2303      	movs	r3, #3
 800ae64:	e006      	b.n	800ae74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	f003 0320 	and.w	r3, r3, #32
 800ae6e:	2b20      	cmp	r3, #32
 800ae70:	d0f0      	beq.n	800ae54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae98:	d901      	bls.n	800ae9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	e018      	b.n	800aed0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	691b      	ldr	r3, [r3, #16]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	daf2      	bge.n	800ae8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800aea6:	2300      	movs	r3, #0
 800aea8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2210      	movs	r2, #16
 800aeae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aebc:	d901      	bls.n	800aec2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800aebe:	2303      	movs	r3, #3
 800aec0:	e006      	b.n	800aed0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	f003 0310 	and.w	r3, r3, #16
 800aeca:	2b10      	cmp	r3, #16
 800aecc:	d0f0      	beq.n	800aeb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3714      	adds	r7, #20
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aedc:	b480      	push	{r7}
 800aede:	b089      	sub	sp, #36	@ 0x24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	4611      	mov	r1, r2
 800aee8:	461a      	mov	r2, r3
 800aeea:	460b      	mov	r3, r1
 800aeec:	71fb      	strb	r3, [r7, #7]
 800aeee:	4613      	mov	r3, r2
 800aef0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800aefa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d123      	bne.n	800af4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800af02:	88bb      	ldrh	r3, [r7, #4]
 800af04:	3303      	adds	r3, #3
 800af06:	089b      	lsrs	r3, r3, #2
 800af08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800af0a:	2300      	movs	r3, #0
 800af0c:	61bb      	str	r3, [r7, #24]
 800af0e:	e018      	b.n	800af42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800af10:	79fb      	ldrb	r3, [r7, #7]
 800af12:	031a      	lsls	r2, r3, #12
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	4413      	add	r3, r2
 800af18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af1c:	461a      	mov	r2, r3
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	6013      	str	r3, [r2, #0]
      pSrc++;
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	3301      	adds	r3, #1
 800af28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	3301      	adds	r3, #1
 800af2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	3301      	adds	r3, #1
 800af34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	3301      	adds	r3, #1
 800af3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	3301      	adds	r3, #1
 800af40:	61bb      	str	r3, [r7, #24]
 800af42:	69ba      	ldr	r2, [r7, #24]
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	429a      	cmp	r2, r3
 800af48:	d3e2      	bcc.n	800af10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3724      	adds	r7, #36	@ 0x24
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800af58:	b480      	push	{r7}
 800af5a:	b08b      	sub	sp, #44	@ 0x2c
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	4613      	mov	r3, r2
 800af64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800af6e:	88fb      	ldrh	r3, [r7, #6]
 800af70:	089b      	lsrs	r3, r3, #2
 800af72:	b29b      	uxth	r3, r3
 800af74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800af76:	88fb      	ldrh	r3, [r7, #6]
 800af78:	f003 0303 	and.w	r3, r3, #3
 800af7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800af7e:	2300      	movs	r3, #0
 800af80:	623b      	str	r3, [r7, #32]
 800af82:	e014      	b.n	800afae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8e:	601a      	str	r2, [r3, #0]
    pDest++;
 800af90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af92:	3301      	adds	r3, #1
 800af94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af98:	3301      	adds	r3, #1
 800af9a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9e:	3301      	adds	r3, #1
 800afa0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800afa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa4:	3301      	adds	r3, #1
 800afa6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800afa8:	6a3b      	ldr	r3, [r7, #32]
 800afaa:	3301      	adds	r3, #1
 800afac:	623b      	str	r3, [r7, #32]
 800afae:	6a3a      	ldr	r2, [r7, #32]
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d3e6      	bcc.n	800af84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800afb6:	8bfb      	ldrh	r3, [r7, #30]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d01e      	beq.n	800affa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800afbc:	2300      	movs	r3, #0
 800afbe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afc6:	461a      	mov	r2, r3
 800afc8:	f107 0310 	add.w	r3, r7, #16
 800afcc:	6812      	ldr	r2, [r2, #0]
 800afce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800afd0:	693a      	ldr	r2, [r7, #16]
 800afd2:	6a3b      	ldr	r3, [r7, #32]
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	00db      	lsls	r3, r3, #3
 800afd8:	fa22 f303 	lsr.w	r3, r2, r3
 800afdc:	b2da      	uxtb	r2, r3
 800afde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe0:	701a      	strb	r2, [r3, #0]
      i++;
 800afe2:	6a3b      	ldr	r3, [r7, #32]
 800afe4:	3301      	adds	r3, #1
 800afe6:	623b      	str	r3, [r7, #32]
      pDest++;
 800afe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afea:	3301      	adds	r3, #1
 800afec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800afee:	8bfb      	ldrh	r3, [r7, #30]
 800aff0:	3b01      	subs	r3, #1
 800aff2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aff4:	8bfb      	ldrh	r3, [r7, #30]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d1ea      	bne.n	800afd0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800affa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800affc:	4618      	mov	r0, r3
 800affe:	372c      	adds	r7, #44	@ 0x2c
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr

0800b008 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	695b      	ldr	r3, [r3, #20]
 800b014:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	699b      	ldr	r3, [r3, #24]
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	4013      	ands	r3, r2
 800b01e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b020:	68fb      	ldr	r3, [r7, #12]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3714      	adds	r7, #20
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr

0800b02e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800b02e:	b480      	push	{r7}
 800b030:	b085      	sub	sp, #20
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
 800b036:	460b      	mov	r3, r1
 800b038:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800b03e:	78fb      	ldrb	r3, [r7, #3]
 800b040:	015a      	lsls	r2, r3, #5
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	4413      	add	r3, r2
 800b046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800b04e:	78fb      	ldrb	r3, [r7, #3]
 800b050:	015a      	lsls	r2, r3, #5
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	4413      	add	r3, r2
 800b056:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	68ba      	ldr	r2, [r7, #8]
 800b05e:	4013      	ands	r3, r2
 800b060:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b062:	68bb      	ldr	r3, [r7, #8]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3714      	adds	r7, #20
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr

0800b070 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	695b      	ldr	r3, [r3, #20]
 800b07c:	f003 0301 	and.w	r3, r3, #1
}
 800b080:	4618      	mov	r0, r3
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b094:	2300      	movs	r3, #0
 800b096:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3301      	adds	r3, #1
 800b09c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b0a4:	d901      	bls.n	800b0aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	e01b      	b.n	800b0e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	daf2      	bge.n	800b098 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	f043 0201 	orr.w	r2, r3, #1
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b0ce:	d901      	bls.n	800b0d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	e006      	b.n	800b0e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	f003 0301 	and.w	r3, r3, #1
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d0f0      	beq.n	800b0c2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3714      	adds	r7, #20
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
	...

0800b0f0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b0f0:	b084      	sub	sp, #16
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b086      	sub	sp, #24
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b0fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b102:	2300      	movs	r3, #0
 800b104:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b110:	461a      	mov	r2, r3
 800b112:	2300      	movs	r3, #0
 800b114:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b11a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b126:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b132:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b142:	2b00      	cmp	r3, #0
 800b144:	d119      	bne.n	800b17a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b146:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d10a      	bne.n	800b164 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b15c:	f043 0304 	orr.w	r3, r3, #4
 800b160:	6013      	str	r3, [r2, #0]
 800b162:	e014      	b.n	800b18e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68fa      	ldr	r2, [r7, #12]
 800b16e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b172:	f023 0304 	bic.w	r3, r3, #4
 800b176:	6013      	str	r3, [r2, #0]
 800b178:	e009      	b.n	800b18e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b188:	f023 0304 	bic.w	r3, r3, #4
 800b18c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b18e:	2110      	movs	r1, #16
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f7ff fe43 	bl	800ae1c <USB_FlushTxFifo>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d001      	beq.n	800b1a0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f7ff fe6d 	bl	800ae80 <USB_FlushRxFifo>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d001      	beq.n	800b1b0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	613b      	str	r3, [r7, #16]
 800b1b4:	e015      	b.n	800b1e2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	015a      	lsls	r2, r3, #5
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	4413      	add	r3, r2
 800b1be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b1c8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	015a      	lsls	r2, r3, #5
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	2300      	movs	r3, #0
 800b1da:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	613b      	str	r3, [r7, #16]
 800b1e2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d3e3      	bcc.n	800b1b6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1fa:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2280      	movs	r2, #128	@ 0x80
 800b200:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a0e      	ldr	r2, [pc, #56]	@ (800b240 <USB_HostInit+0x150>)
 800b206:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4a0e      	ldr	r2, [pc, #56]	@ (800b244 <USB_HostInit+0x154>)
 800b20c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b210:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b214:	2b00      	cmp	r3, #0
 800b216:	d105      	bne.n	800b224 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	699b      	ldr	r3, [r3, #24]
 800b21c:	f043 0210 	orr.w	r2, r3, #16
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	699a      	ldr	r2, [r3, #24]
 800b228:	4b07      	ldr	r3, [pc, #28]	@ (800b248 <USB_HostInit+0x158>)
 800b22a:	4313      	orrs	r3, r2
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800b230:	7dfb      	ldrb	r3, [r7, #23]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3718      	adds	r7, #24
 800b236:	46bd      	mov	sp, r7
 800b238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b23c:	b004      	add	sp, #16
 800b23e:	4770      	bx	lr
 800b240:	00600080 	.word	0x00600080
 800b244:	004000e0 	.word	0x004000e0
 800b248:	a3200008 	.word	0xa3200008

0800b24c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	460b      	mov	r3, r1
 800b256:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b26a:	f023 0303 	bic.w	r3, r3, #3
 800b26e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	78fb      	ldrb	r3, [r7, #3]
 800b27a:	f003 0303 	and.w	r3, r3, #3
 800b27e:	68f9      	ldr	r1, [r7, #12]
 800b280:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b284:	4313      	orrs	r3, r2
 800b286:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b288:	78fb      	ldrb	r3, [r7, #3]
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d107      	bne.n	800b29e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b294:	461a      	mov	r2, r3
 800b296:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b29a:	6053      	str	r3, [r2, #4]
 800b29c:	e00c      	b.n	800b2b8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800b29e:	78fb      	ldrb	r3, [r7, #3]
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	d107      	bne.n	800b2b4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	f241 7370 	movw	r3, #6000	@ 0x1770
 800b2b0:	6053      	str	r3, [r2, #4]
 800b2b2:	e001      	b.n	800b2b8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e000      	b.n	800b2ba <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3714      	adds	r7, #20
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr

0800b2c6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b084      	sub	sp, #16
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b2e6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b2f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b2f4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b2f6:	2064      	movs	r0, #100	@ 0x64
 800b2f8:	f7f8 fae2 	bl	80038c0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	68fa      	ldr	r2, [r7, #12]
 800b300:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b308:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b30a:	200a      	movs	r0, #10
 800b30c:	f7f8 fad8 	bl	80038c0 <HAL_Delay>

  return HAL_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b31a:	b480      	push	{r7}
 800b31c:	b085      	sub	sp, #20
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	460b      	mov	r3, r1
 800b324:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b32a:	2300      	movs	r3, #0
 800b32c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b33e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b346:	2b00      	cmp	r3, #0
 800b348:	d109      	bne.n	800b35e <USB_DriveVbus+0x44>
 800b34a:	78fb      	ldrb	r3, [r7, #3]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d106      	bne.n	800b35e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b358:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b35c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b368:	d109      	bne.n	800b37e <USB_DriveVbus+0x64>
 800b36a:	78fb      	ldrb	r3, [r7, #3]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d106      	bne.n	800b37e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	68fa      	ldr	r2, [r7, #12]
 800b374:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b378:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b37c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3714      	adds	r7, #20
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b085      	sub	sp, #20
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b398:	2300      	movs	r3, #0
 800b39a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	0c5b      	lsrs	r3, r3, #17
 800b3aa:	f003 0303 	and.w	r3, r3, #3
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3714      	adds	r7, #20
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr

0800b3ba <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800b3ba:	b480      	push	{r7}
 800b3bc:	b085      	sub	sp, #20
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	b29b      	uxth	r3, r3
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3714      	adds	r7, #20
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b088      	sub	sp, #32
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	4608      	mov	r0, r1
 800b3e6:	4611      	mov	r1, r2
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	70fb      	strb	r3, [r7, #3]
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	70bb      	strb	r3, [r7, #2]
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800b3fe:	78fb      	ldrb	r3, [r7, #3]
 800b400:	015a      	lsls	r2, r3, #5
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	4413      	add	r3, r2
 800b406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b40a:	461a      	mov	r2, r3
 800b40c:	f04f 33ff 	mov.w	r3, #4294967295
 800b410:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b412:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b416:	2b03      	cmp	r3, #3
 800b418:	d867      	bhi.n	800b4ea <USB_HC_Init+0x10e>
 800b41a:	a201      	add	r2, pc, #4	@ (adr r2, 800b420 <USB_HC_Init+0x44>)
 800b41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b420:	0800b431 	.word	0x0800b431
 800b424:	0800b4ad 	.word	0x0800b4ad
 800b428:	0800b431 	.word	0x0800b431
 800b42c:	0800b46f 	.word	0x0800b46f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b430:	78fb      	ldrb	r3, [r7, #3]
 800b432:	015a      	lsls	r2, r3, #5
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	4413      	add	r3, r2
 800b438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b43c:	461a      	mov	r2, r3
 800b43e:	f240 439d 	movw	r3, #1181	@ 0x49d
 800b442:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b444:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	da51      	bge.n	800b4f0 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b44c:	78fb      	ldrb	r3, [r7, #3]
 800b44e:	015a      	lsls	r2, r3, #5
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	4413      	add	r3, r2
 800b454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	78fa      	ldrb	r2, [r7, #3]
 800b45c:	0151      	lsls	r1, r2, #5
 800b45e:	693a      	ldr	r2, [r7, #16]
 800b460:	440a      	add	r2, r1
 800b462:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b46a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800b46c:	e040      	b.n	800b4f0 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b46e:	78fb      	ldrb	r3, [r7, #3]
 800b470:	015a      	lsls	r2, r3, #5
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	4413      	add	r3, r2
 800b476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b47a:	461a      	mov	r2, r3
 800b47c:	f240 639d 	movw	r3, #1693	@ 0x69d
 800b480:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b482:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b486:	2b00      	cmp	r3, #0
 800b488:	da34      	bge.n	800b4f4 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b48a:	78fb      	ldrb	r3, [r7, #3]
 800b48c:	015a      	lsls	r2, r3, #5
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	4413      	add	r3, r2
 800b492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	78fa      	ldrb	r2, [r7, #3]
 800b49a:	0151      	lsls	r1, r2, #5
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	440a      	add	r2, r1
 800b4a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b4a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b4a8:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b4aa:	e023      	b.n	800b4f4 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b4ac:	78fb      	ldrb	r3, [r7, #3]
 800b4ae:	015a      	lsls	r2, r3, #5
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	f240 2325 	movw	r3, #549	@ 0x225
 800b4be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b4c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	da17      	bge.n	800b4f8 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b4c8:	78fb      	ldrb	r3, [r7, #3]
 800b4ca:	015a      	lsls	r2, r3, #5
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4d4:	68db      	ldr	r3, [r3, #12]
 800b4d6:	78fa      	ldrb	r2, [r7, #3]
 800b4d8:	0151      	lsls	r1, r2, #5
 800b4da:	693a      	ldr	r2, [r7, #16]
 800b4dc:	440a      	add	r2, r1
 800b4de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b4e2:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800b4e6:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b4e8:	e006      	b.n	800b4f8 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	77fb      	strb	r3, [r7, #31]
      break;
 800b4ee:	e004      	b.n	800b4fa <USB_HC_Init+0x11e>
      break;
 800b4f0:	bf00      	nop
 800b4f2:	e002      	b.n	800b4fa <USB_HC_Init+0x11e>
      break;
 800b4f4:	bf00      	nop
 800b4f6:	e000      	b.n	800b4fa <USB_HC_Init+0x11e>
      break;
 800b4f8:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b4fa:	78fb      	ldrb	r3, [r7, #3]
 800b4fc:	015a      	lsls	r2, r3, #5
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	4413      	add	r3, r2
 800b502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b506:	461a      	mov	r2, r3
 800b508:	2300      	movs	r3, #0
 800b50a:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800b50c:	78fb      	ldrb	r3, [r7, #3]
 800b50e:	015a      	lsls	r2, r3, #5
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	4413      	add	r3, r2
 800b514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	78fa      	ldrb	r2, [r7, #3]
 800b51c:	0151      	lsls	r1, r2, #5
 800b51e:	693a      	ldr	r2, [r7, #16]
 800b520:	440a      	add	r2, r1
 800b522:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b526:	f043 0302 	orr.w	r3, r3, #2
 800b52a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b532:	699a      	ldr	r2, [r3, #24]
 800b534:	78fb      	ldrb	r3, [r7, #3]
 800b536:	f003 030f 	and.w	r3, r3, #15
 800b53a:	2101      	movs	r1, #1
 800b53c:	fa01 f303 	lsl.w	r3, r1, r3
 800b540:	6939      	ldr	r1, [r7, #16]
 800b542:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b546:	4313      	orrs	r3, r2
 800b548:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	699b      	ldr	r3, [r3, #24]
 800b54e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b556:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	da03      	bge.n	800b566 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b55e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b562:	61bb      	str	r3, [r7, #24]
 800b564:	e001      	b.n	800b56a <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 800b566:	2300      	movs	r3, #0
 800b568:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f7ff ff0e 	bl	800b38c <USB_GetHostSpeed>
 800b570:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b572:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b576:	2b02      	cmp	r3, #2
 800b578:	d106      	bne.n	800b588 <USB_HC_Init+0x1ac>
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	d003      	beq.n	800b588 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b580:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b584:	617b      	str	r3, [r7, #20]
 800b586:	e001      	b.n	800b58c <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b588:	2300      	movs	r3, #0
 800b58a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b58c:	787b      	ldrb	r3, [r7, #1]
 800b58e:	059b      	lsls	r3, r3, #22
 800b590:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b594:	78bb      	ldrb	r3, [r7, #2]
 800b596:	02db      	lsls	r3, r3, #11
 800b598:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b59c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b59e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b5a2:	049b      	lsls	r3, r3, #18
 800b5a4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b5a8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800b5aa:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b5ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b5b0:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	431a      	orrs	r2, r3
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b5ba:	78fa      	ldrb	r2, [r7, #3]
 800b5bc:	0151      	lsls	r1, r2, #5
 800b5be:	693a      	ldr	r2, [r7, #16]
 800b5c0:	440a      	add	r2, r1
 800b5c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b5c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b5ca:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800b5cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b5d0:	2b03      	cmp	r3, #3
 800b5d2:	d003      	beq.n	800b5dc <USB_HC_Init+0x200>
 800b5d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d10f      	bne.n	800b5fc <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800b5dc:	78fb      	ldrb	r3, [r7, #3]
 800b5de:	015a      	lsls	r2, r3, #5
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	4413      	add	r3, r2
 800b5e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	78fa      	ldrb	r2, [r7, #3]
 800b5ec:	0151      	lsls	r1, r2, #5
 800b5ee:	693a      	ldr	r2, [r7, #16]
 800b5f0:	440a      	add	r2, r1
 800b5f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b5f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b5fa:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b5fc:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3720      	adds	r7, #32
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop

0800b608 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b08c      	sub	sp, #48	@ 0x30
 800b60c:	af02      	add	r7, sp, #8
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	4613      	mov	r3, r2
 800b614:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	785b      	ldrb	r3, [r3, #1]
 800b61e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800b620:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b624:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	799b      	ldrb	r3, [r3, #6]
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d158      	bne.n	800b6e0 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800b62e:	2301      	movs	r3, #1
 800b630:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	78db      	ldrb	r3, [r3, #3]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d007      	beq.n	800b64a <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b63a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b63c:	68ba      	ldr	r2, [r7, #8]
 800b63e:	8a92      	ldrh	r2, [r2, #20]
 800b640:	fb03 f202 	mul.w	r2, r3, r2
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	61da      	str	r2, [r3, #28]
 800b648:	e079      	b.n	800b73e <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	7c9b      	ldrb	r3, [r3, #18]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d130      	bne.n	800b6b4 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	6a1b      	ldr	r3, [r3, #32]
 800b656:	2bbc      	cmp	r3, #188	@ 0xbc
 800b658:	d918      	bls.n	800b68c <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	8a9b      	ldrh	r3, [r3, #20]
 800b65e:	461a      	mov	r2, r3
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	69da      	ldr	r2, [r3, #28]
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	2b01      	cmp	r3, #1
 800b672:	d003      	beq.n	800b67c <USB_HC_StartXfer+0x74>
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	2b02      	cmp	r3, #2
 800b67a:	d103      	bne.n	800b684 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	2202      	movs	r2, #2
 800b680:	60da      	str	r2, [r3, #12]
 800b682:	e05c      	b.n	800b73e <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	2201      	movs	r2, #1
 800b688:	60da      	str	r2, [r3, #12]
 800b68a:	e058      	b.n	800b73e <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	6a1a      	ldr	r2, [r3, #32]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d007      	beq.n	800b6ac <USB_HC_StartXfer+0xa4>
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	2b02      	cmp	r3, #2
 800b6a2:	d003      	beq.n	800b6ac <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	2204      	movs	r2, #4
 800b6a8:	60da      	str	r2, [r3, #12]
 800b6aa:	e048      	b.n	800b73e <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	2203      	movs	r2, #3
 800b6b0:	60da      	str	r2, [r3, #12]
 800b6b2:	e044      	b.n	800b73e <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800b6b4:	79fb      	ldrb	r3, [r7, #7]
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d10d      	bne.n	800b6d6 <USB_HC_StartXfer+0xce>
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	6a1b      	ldr	r3, [r3, #32]
 800b6be:	68ba      	ldr	r2, [r7, #8]
 800b6c0:	8a92      	ldrh	r2, [r2, #20]
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d907      	bls.n	800b6d6 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b6c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b6c8:	68ba      	ldr	r2, [r7, #8]
 800b6ca:	8a92      	ldrh	r2, [r2, #20]
 800b6cc:	fb03 f202 	mul.w	r2, r3, r2
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	61da      	str	r2, [r3, #28]
 800b6d4:	e033      	b.n	800b73e <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	6a1a      	ldr	r2, [r3, #32]
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	61da      	str	r2, [r3, #28]
 800b6de:	e02e      	b.n	800b73e <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	6a1b      	ldr	r3, [r3, #32]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d018      	beq.n	800b71a <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	6a1b      	ldr	r3, [r3, #32]
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	8a92      	ldrh	r2, [r2, #20]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	68ba      	ldr	r2, [r7, #8]
 800b6f6:	8a92      	ldrh	r2, [r2, #20]
 800b6f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6fc:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800b6fe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b700:	8b7b      	ldrh	r3, [r7, #26]
 800b702:	429a      	cmp	r2, r3
 800b704:	d90b      	bls.n	800b71e <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 800b706:	8b7b      	ldrh	r3, [r7, #26]
 800b708:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b70a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	8a92      	ldrh	r2, [r2, #20]
 800b710:	fb03 f202 	mul.w	r2, r3, r2
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	61da      	str	r2, [r3, #28]
 800b718:	e001      	b.n	800b71e <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 800b71a:	2301      	movs	r3, #1
 800b71c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	78db      	ldrb	r3, [r3, #3]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d007      	beq.n	800b736 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b726:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	8a92      	ldrh	r2, [r2, #20]
 800b72c:	fb03 f202 	mul.w	r2, r3, r2
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	61da      	str	r2, [r3, #28]
 800b734:	e003      	b.n	800b73e <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	6a1a      	ldr	r2, [r3, #32]
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	69db      	ldr	r3, [r3, #28]
 800b742:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b746:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b748:	04d9      	lsls	r1, r3, #19
 800b74a:	4ba4      	ldr	r3, [pc, #656]	@ (800b9dc <USB_HC_StartXfer+0x3d4>)
 800b74c:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b74e:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	7d9b      	ldrb	r3, [r3, #22]
 800b754:	075b      	lsls	r3, r3, #29
 800b756:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b75a:	69f9      	ldr	r1, [r7, #28]
 800b75c:	0148      	lsls	r0, r1, #5
 800b75e:	6a39      	ldr	r1, [r7, #32]
 800b760:	4401      	add	r1, r0
 800b762:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b766:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b768:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b76a:	79fb      	ldrb	r3, [r7, #7]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d009      	beq.n	800b784 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	6999      	ldr	r1, [r3, #24]
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	015a      	lsls	r2, r3, #5
 800b778:	6a3b      	ldr	r3, [r7, #32]
 800b77a:	4413      	add	r3, r2
 800b77c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b780:	460a      	mov	r2, r1
 800b782:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b784:	6a3b      	ldr	r3, [r7, #32]
 800b786:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	f003 0301 	and.w	r3, r3, #1
 800b790:	2b00      	cmp	r3, #0
 800b792:	bf0c      	ite	eq
 800b794:	2301      	moveq	r3, #1
 800b796:	2300      	movne	r3, #0
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	015a      	lsls	r2, r3, #5
 800b7a0:	6a3b      	ldr	r3, [r7, #32]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	69fa      	ldr	r2, [r7, #28]
 800b7ac:	0151      	lsls	r1, r2, #5
 800b7ae:	6a3a      	ldr	r2, [r7, #32]
 800b7b0:	440a      	add	r2, r1
 800b7b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b7b6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b7ba:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	015a      	lsls	r2, r3, #5
 800b7c0:	6a3b      	ldr	r3, [r7, #32]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	7e7b      	ldrb	r3, [r7, #25]
 800b7cc:	075b      	lsls	r3, r3, #29
 800b7ce:	69f9      	ldr	r1, [r7, #28]
 800b7d0:	0148      	lsls	r0, r1, #5
 800b7d2:	6a39      	ldr	r1, [r7, #32]
 800b7d4:	4401      	add	r1, r0
 800b7d6:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	799b      	ldrb	r3, [r3, #6]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	f040 80c4 	bne.w	800b970 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	7c5b      	ldrb	r3, [r3, #17]
 800b7ec:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b7ee:	68ba      	ldr	r2, [r7, #8]
 800b7f0:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	69fa      	ldr	r2, [r7, #28]
 800b7f6:	0151      	lsls	r1, r2, #5
 800b7f8:	6a3a      	ldr	r2, [r7, #32]
 800b7fa:	440a      	add	r2, r1
 800b7fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b800:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b804:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	015a      	lsls	r2, r3, #5
 800b80a:	6a3b      	ldr	r3, [r7, #32]
 800b80c:	4413      	add	r3, r2
 800b80e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	69fa      	ldr	r2, [r7, #28]
 800b816:	0151      	lsls	r1, r2, #5
 800b818:	6a3a      	ldr	r2, [r7, #32]
 800b81a:	440a      	add	r2, r1
 800b81c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b820:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b824:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	79db      	ldrb	r3, [r3, #7]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d123      	bne.n	800b876 <USB_HC_StartXfer+0x26e>
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	78db      	ldrb	r3, [r3, #3]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d11f      	bne.n	800b876 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	015a      	lsls	r2, r3, #5
 800b83a:	6a3b      	ldr	r3, [r7, #32]
 800b83c:	4413      	add	r3, r2
 800b83e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	69fa      	ldr	r2, [r7, #28]
 800b846:	0151      	lsls	r1, r2, #5
 800b848:	6a3a      	ldr	r2, [r7, #32]
 800b84a:	440a      	add	r2, r1
 800b84c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b854:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	015a      	lsls	r2, r3, #5
 800b85a:	6a3b      	ldr	r3, [r7, #32]
 800b85c:	4413      	add	r3, r2
 800b85e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b862:	68db      	ldr	r3, [r3, #12]
 800b864:	69fa      	ldr	r2, [r7, #28]
 800b866:	0151      	lsls	r1, r2, #5
 800b868:	6a3a      	ldr	r2, [r7, #32]
 800b86a:	440a      	add	r2, r1
 800b86c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b874:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	7c9b      	ldrb	r3, [r3, #18]
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d003      	beq.n	800b886 <USB_HC_StartXfer+0x27e>
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	7c9b      	ldrb	r3, [r3, #18]
 800b882:	2b03      	cmp	r3, #3
 800b884:	d117      	bne.n	800b8b6 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d113      	bne.n	800b8b6 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	78db      	ldrb	r3, [r3, #3]
 800b892:	2b01      	cmp	r3, #1
 800b894:	d10f      	bne.n	800b8b6 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b896:	69fb      	ldr	r3, [r7, #28]
 800b898:	015a      	lsls	r2, r3, #5
 800b89a:	6a3b      	ldr	r3, [r7, #32]
 800b89c:	4413      	add	r3, r2
 800b89e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	69fa      	ldr	r2, [r7, #28]
 800b8a6:	0151      	lsls	r1, r2, #5
 800b8a8:	6a3a      	ldr	r2, [r7, #32]
 800b8aa:	440a      	add	r2, r1
 800b8ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b8b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b8b4:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	7c9b      	ldrb	r3, [r3, #18]
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d163      	bne.n	800b986 <USB_HC_StartXfer+0x37e>
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	78db      	ldrb	r3, [r3, #3]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d15f      	bne.n	800b986 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	2b03      	cmp	r3, #3
 800b8ce:	d859      	bhi.n	800b984 <USB_HC_StartXfer+0x37c>
 800b8d0:	a201      	add	r2, pc, #4	@ (adr r2, 800b8d8 <USB_HC_StartXfer+0x2d0>)
 800b8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d6:	bf00      	nop
 800b8d8:	0800b8e9 	.word	0x0800b8e9
 800b8dc:	0800b90b 	.word	0x0800b90b
 800b8e0:	0800b92d 	.word	0x0800b92d
 800b8e4:	0800b94f 	.word	0x0800b94f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	015a      	lsls	r2, r3, #5
 800b8ec:	6a3b      	ldr	r3, [r7, #32]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	69fa      	ldr	r2, [r7, #28]
 800b8f8:	0151      	lsls	r1, r2, #5
 800b8fa:	6a3a      	ldr	r2, [r7, #32]
 800b8fc:	440a      	add	r2, r1
 800b8fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b906:	6053      	str	r3, [r2, #4]
          break;
 800b908:	e03d      	b.n	800b986 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800b90a:	69fb      	ldr	r3, [r7, #28]
 800b90c:	015a      	lsls	r2, r3, #5
 800b90e:	6a3b      	ldr	r3, [r7, #32]
 800b910:	4413      	add	r3, r2
 800b912:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	69fa      	ldr	r2, [r7, #28]
 800b91a:	0151      	lsls	r1, r2, #5
 800b91c:	6a3a      	ldr	r2, [r7, #32]
 800b91e:	440a      	add	r2, r1
 800b920:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b924:	f043 030e 	orr.w	r3, r3, #14
 800b928:	6053      	str	r3, [r2, #4]
          break;
 800b92a:	e02c      	b.n	800b986 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	015a      	lsls	r2, r3, #5
 800b930:	6a3b      	ldr	r3, [r7, #32]
 800b932:	4413      	add	r3, r2
 800b934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	69fa      	ldr	r2, [r7, #28]
 800b93c:	0151      	lsls	r1, r2, #5
 800b93e:	6a3a      	ldr	r2, [r7, #32]
 800b940:	440a      	add	r2, r1
 800b942:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b946:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b94a:	6053      	str	r3, [r2, #4]
          break;
 800b94c:	e01b      	b.n	800b986 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	015a      	lsls	r2, r3, #5
 800b952:	6a3b      	ldr	r3, [r7, #32]
 800b954:	4413      	add	r3, r2
 800b956:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	69fa      	ldr	r2, [r7, #28]
 800b95e:	0151      	lsls	r1, r2, #5
 800b960:	6a3a      	ldr	r2, [r7, #32]
 800b962:	440a      	add	r2, r1
 800b964:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b968:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b96c:	6053      	str	r3, [r2, #4]
          break;
 800b96e:	e00a      	b.n	800b986 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	015a      	lsls	r2, r3, #5
 800b974:	6a3b      	ldr	r3, [r7, #32]
 800b976:	4413      	add	r3, r2
 800b978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b97c:	461a      	mov	r2, r3
 800b97e:	2300      	movs	r3, #0
 800b980:	6053      	str	r3, [r2, #4]
 800b982:	e000      	b.n	800b986 <USB_HC_StartXfer+0x37e>
          break;
 800b984:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	015a      	lsls	r2, r3, #5
 800b98a:	6a3b      	ldr	r3, [r7, #32]
 800b98c:	4413      	add	r3, r2
 800b98e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b99c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	78db      	ldrb	r3, [r3, #3]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d004      	beq.n	800b9b0 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9ac:	613b      	str	r3, [r7, #16]
 800b9ae:	e003      	b.n	800b9b8 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b9b6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b9be:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	015a      	lsls	r2, r3, #5
 800b9c4:	6a3b      	ldr	r3, [r7, #32]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b9d2:	79fb      	ldrb	r3, [r7, #7]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d003      	beq.n	800b9e0 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	e055      	b.n	800ba88 <USB_HC_StartXfer+0x480>
 800b9dc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	78db      	ldrb	r3, [r3, #3]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d14e      	bne.n	800ba86 <USB_HC_StartXfer+0x47e>
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	6a1b      	ldr	r3, [r3, #32]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d04a      	beq.n	800ba86 <USB_HC_StartXfer+0x47e>
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	79db      	ldrb	r3, [r3, #7]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d146      	bne.n	800ba86 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	7c9b      	ldrb	r3, [r3, #18]
 800b9fc:	2b03      	cmp	r3, #3
 800b9fe:	d831      	bhi.n	800ba64 <USB_HC_StartXfer+0x45c>
 800ba00:	a201      	add	r2, pc, #4	@ (adr r2, 800ba08 <USB_HC_StartXfer+0x400>)
 800ba02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba06:	bf00      	nop
 800ba08:	0800ba19 	.word	0x0800ba19
 800ba0c:	0800ba3d 	.word	0x0800ba3d
 800ba10:	0800ba19 	.word	0x0800ba19
 800ba14:	0800ba3d 	.word	0x0800ba3d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	6a1b      	ldr	r3, [r3, #32]
 800ba1c:	3303      	adds	r3, #3
 800ba1e:	089b      	lsrs	r3, r3, #2
 800ba20:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ba22:	8afa      	ldrh	r2, [r7, #22]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d91c      	bls.n	800ba68 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	699b      	ldr	r3, [r3, #24]
 800ba32:	f043 0220 	orr.w	r2, r3, #32
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	619a      	str	r2, [r3, #24]
        }
        break;
 800ba3a:	e015      	b.n	800ba68 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	6a1b      	ldr	r3, [r3, #32]
 800ba40:	3303      	adds	r3, #3
 800ba42:	089b      	lsrs	r3, r3, #2
 800ba44:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ba46:	8afa      	ldrh	r2, [r7, #22]
 800ba48:	6a3b      	ldr	r3, [r7, #32]
 800ba4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ba4e:	691b      	ldr	r3, [r3, #16]
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d90a      	bls.n	800ba6c <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	699b      	ldr	r3, [r3, #24]
 800ba5a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	619a      	str	r2, [r3, #24]
        }
        break;
 800ba62:	e003      	b.n	800ba6c <USB_HC_StartXfer+0x464>

      default:
        break;
 800ba64:	bf00      	nop
 800ba66:	e002      	b.n	800ba6e <USB_HC_StartXfer+0x466>
        break;
 800ba68:	bf00      	nop
 800ba6a:	e000      	b.n	800ba6e <USB_HC_StartXfer+0x466>
        break;
 800ba6c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	6999      	ldr	r1, [r3, #24]
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	785a      	ldrb	r2, [r3, #1]
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	6a1b      	ldr	r3, [r3, #32]
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	2000      	movs	r0, #0
 800ba7e:	9000      	str	r0, [sp, #0]
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f7ff fa2b 	bl	800aedc <USB_WritePacket>
  }

  return HAL_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3728      	adds	r7, #40	@ 0x28
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b085      	sub	sp, #20
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800baa2:	695b      	ldr	r3, [r3, #20]
 800baa4:	b29b      	uxth	r3, r3
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3714      	adds	r7, #20
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr

0800bab2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800bab2:	b480      	push	{r7}
 800bab4:	b089      	sub	sp, #36	@ 0x24
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
 800baba:	460b      	mov	r3, r1
 800babc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800bac2:	78fb      	ldrb	r3, [r7, #3]
 800bac4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800bac6:	2300      	movs	r3, #0
 800bac8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	015a      	lsls	r2, r3, #5
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	4413      	add	r3, r2
 800bad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	0c9b      	lsrs	r3, r3, #18
 800bada:	f003 0303 	and.w	r3, r3, #3
 800bade:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800bae0:	69bb      	ldr	r3, [r7, #24]
 800bae2:	015a      	lsls	r2, r3, #5
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	4413      	add	r3, r2
 800bae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	0fdb      	lsrs	r3, r3, #31
 800baf0:	f003 0301 	and.w	r3, r3, #1
 800baf4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	015a      	lsls	r2, r3, #5
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	4413      	add	r3, r2
 800bafe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	0fdb      	lsrs	r3, r3, #31
 800bb06:	f003 0301 	and.w	r3, r3, #1
 800bb0a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	f003 0320 	and.w	r3, r3, #32
 800bb14:	2b20      	cmp	r3, #32
 800bb16:	d10d      	bne.n	800bb34 <USB_HC_Halt+0x82>
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10a      	bne.n	800bb34 <USB_HC_Halt+0x82>
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d005      	beq.n	800bb30 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d002      	beq.n	800bb30 <USB_HC_Halt+0x7e>
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	2b03      	cmp	r3, #3
 800bb2e:	d101      	bne.n	800bb34 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800bb30:	2300      	movs	r3, #0
 800bb32:	e0d8      	b.n	800bce6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d002      	beq.n	800bb40 <USB_HC_Halt+0x8e>
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	2b02      	cmp	r3, #2
 800bb3e:	d173      	bne.n	800bc28 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	015a      	lsls	r2, r3, #5
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	4413      	add	r3, r2
 800bb48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	69ba      	ldr	r2, [r7, #24]
 800bb50:	0151      	lsls	r1, r2, #5
 800bb52:	69fa      	ldr	r2, [r7, #28]
 800bb54:	440a      	add	r2, r1
 800bb56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bb5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bb5e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	f003 0320 	and.w	r3, r3, #32
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d14a      	bne.n	800bc02 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d133      	bne.n	800bbe0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	015a      	lsls	r2, r3, #5
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	4413      	add	r3, r2
 800bb80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	69ba      	ldr	r2, [r7, #24]
 800bb88:	0151      	lsls	r1, r2, #5
 800bb8a:	69fa      	ldr	r2, [r7, #28]
 800bb8c:	440a      	add	r2, r1
 800bb8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bb92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb96:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	015a      	lsls	r2, r3, #5
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	4413      	add	r3, r2
 800bba0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	69ba      	ldr	r2, [r7, #24]
 800bba8:	0151      	lsls	r1, r2, #5
 800bbaa:	69fa      	ldr	r2, [r7, #28]
 800bbac:	440a      	add	r2, r1
 800bbae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bbb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bbb6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	3301      	adds	r3, #1
 800bbbc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bbc4:	d82e      	bhi.n	800bc24 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	015a      	lsls	r2, r3, #5
 800bbca:	69fb      	ldr	r3, [r7, #28]
 800bbcc:	4413      	add	r3, r2
 800bbce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bbd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bbdc:	d0ec      	beq.n	800bbb8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bbde:	e081      	b.n	800bce4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	015a      	lsls	r2, r3, #5
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	4413      	add	r3, r2
 800bbe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	69ba      	ldr	r2, [r7, #24]
 800bbf0:	0151      	lsls	r1, r2, #5
 800bbf2:	69fa      	ldr	r2, [r7, #28]
 800bbf4:	440a      	add	r2, r1
 800bbf6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bbfa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bbfe:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bc00:	e070      	b.n	800bce4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	015a      	lsls	r2, r3, #5
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	4413      	add	r3, r2
 800bc0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	69ba      	ldr	r2, [r7, #24]
 800bc12:	0151      	lsls	r1, r2, #5
 800bc14:	69fa      	ldr	r2, [r7, #28]
 800bc16:	440a      	add	r2, r1
 800bc18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bc20:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bc22:	e05f      	b.n	800bce4 <USB_HC_Halt+0x232>
            break;
 800bc24:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bc26:	e05d      	b.n	800bce4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	015a      	lsls	r2, r3, #5
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	4413      	add	r3, r2
 800bc30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	69ba      	ldr	r2, [r7, #24]
 800bc38:	0151      	lsls	r1, r2, #5
 800bc3a:	69fa      	ldr	r2, [r7, #28]
 800bc3c:	440a      	add	r2, r1
 800bc3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bc46:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bc4e:	691b      	ldr	r3, [r3, #16]
 800bc50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d133      	bne.n	800bcc0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	015a      	lsls	r2, r3, #5
 800bc5c:	69fb      	ldr	r3, [r7, #28]
 800bc5e:	4413      	add	r3, r2
 800bc60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	69ba      	ldr	r2, [r7, #24]
 800bc68:	0151      	lsls	r1, r2, #5
 800bc6a:	69fa      	ldr	r2, [r7, #28]
 800bc6c:	440a      	add	r2, r1
 800bc6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc76:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bc78:	69bb      	ldr	r3, [r7, #24]
 800bc7a:	015a      	lsls	r2, r3, #5
 800bc7c:	69fb      	ldr	r3, [r7, #28]
 800bc7e:	4413      	add	r3, r2
 800bc80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	69ba      	ldr	r2, [r7, #24]
 800bc88:	0151      	lsls	r1, r2, #5
 800bc8a:	69fa      	ldr	r2, [r7, #28]
 800bc8c:	440a      	add	r2, r1
 800bc8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bc96:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bca4:	d81d      	bhi.n	800bce2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	015a      	lsls	r2, r3, #5
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	4413      	add	r3, r2
 800bcae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bcb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bcbc:	d0ec      	beq.n	800bc98 <USB_HC_Halt+0x1e6>
 800bcbe:	e011      	b.n	800bce4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	015a      	lsls	r2, r3, #5
 800bcc4:	69fb      	ldr	r3, [r7, #28]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	69ba      	ldr	r2, [r7, #24]
 800bcd0:	0151      	lsls	r1, r2, #5
 800bcd2:	69fa      	ldr	r2, [r7, #28]
 800bcd4:	440a      	add	r2, r1
 800bcd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bcda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bcde:	6013      	str	r3, [r2, #0]
 800bce0:	e000      	b.n	800bce4 <USB_HC_Halt+0x232>
          break;
 800bce2:	bf00      	nop
    }
  }

  return HAL_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3724      	adds	r7, #36	@ 0x24
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr

0800bcf2 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b088      	sub	sp, #32
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800bd02:	2300      	movs	r3, #0
 800bd04:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f7ff f82b 	bl	800ad62 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bd0c:	2110      	movs	r1, #16
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f7ff f884 	bl	800ae1c <USB_FlushTxFifo>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d001      	beq.n	800bd1e <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f7ff f8ae 	bl	800ae80 <USB_FlushRxFifo>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d001      	beq.n	800bd2e <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800bd2e:	2300      	movs	r3, #0
 800bd30:	61bb      	str	r3, [r7, #24]
 800bd32:	e01f      	b.n	800bd74 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800bd34:	69bb      	ldr	r3, [r7, #24]
 800bd36:	015a      	lsls	r2, r3, #5
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	4413      	add	r3, r2
 800bd3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bd4a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd52:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bd5a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bd5c:	69bb      	ldr	r3, [r7, #24]
 800bd5e:	015a      	lsls	r2, r3, #5
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	4413      	add	r3, r2
 800bd64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd68:	461a      	mov	r2, r3
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	3301      	adds	r3, #1
 800bd72:	61bb      	str	r3, [r7, #24]
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	2b0f      	cmp	r3, #15
 800bd78:	d9dc      	bls.n	800bd34 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	61bb      	str	r3, [r7, #24]
 800bd7e:	e034      	b.n	800bdea <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	015a      	lsls	r2, r3, #5
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	4413      	add	r3, r2
 800bd88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bd96:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bd9e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bda6:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bda8:	69bb      	ldr	r3, [r7, #24]
 800bdaa:	015a      	lsls	r2, r3, #5
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	4413      	add	r3, r2
 800bdb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bdc6:	d80c      	bhi.n	800bde2 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	015a      	lsls	r2, r3, #5
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	4413      	add	r3, r2
 800bdd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bdda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bdde:	d0ec      	beq.n	800bdba <USB_StopHost+0xc8>
 800bde0:	e000      	b.n	800bde4 <USB_StopHost+0xf2>
        break;
 800bde2:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	3301      	adds	r3, #1
 800bde8:	61bb      	str	r3, [r7, #24]
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	2b0f      	cmp	r3, #15
 800bdee:	d9c7      	bls.n	800bd80 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	f04f 33ff 	mov.w	r3, #4294967295
 800bdfc:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f04f 32ff 	mov.w	r2, #4294967295
 800be04:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f7fe ff9a 	bl	800ad40 <USB_EnableGlobalInt>

  return ret;
 800be0c:	7ffb      	ldrb	r3, [r7, #31]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3720      	adds	r7, #32
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
	...

0800be18 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800be1c:	4904      	ldr	r1, [pc, #16]	@ (800be30 <MX_FATFS_Init+0x18>)
 800be1e:	4805      	ldr	r0, [pc, #20]	@ (800be34 <MX_FATFS_Init+0x1c>)
 800be20:	f006 fc10 	bl	8012644 <FATFS_LinkDriver>
 800be24:	4603      	mov	r3, r0
 800be26:	461a      	mov	r2, r3
 800be28:	4b03      	ldr	r3, [pc, #12]	@ (800be38 <MX_FATFS_Init+0x20>)
 800be2a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800be2c:	bf00      	nop
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	20001e5c 	.word	0x20001e5c
 800be34:	08018aa4 	.word	0x08018aa4
 800be38:	20001e58 	.word	0x20001e58

0800be3c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800be3c:	b480      	push	{r7}
 800be3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800be40:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800be42:	4618      	mov	r0, r3
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr

0800be4c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	4603      	mov	r3, r0
 800be54:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	370c      	adds	r7, #12
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	4603      	mov	r3, r0
 800be6c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800be6e:	2301      	movs	r3, #1
 800be70:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800be72:	79fb      	ldrb	r3, [r7, #7]
 800be74:	4619      	mov	r1, r3
 800be76:	4808      	ldr	r0, [pc, #32]	@ (800be98 <USBH_status+0x34>)
 800be78:	f000 fe79 	bl	800cb6e <USBH_MSC_UnitIsReady>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d002      	beq.n	800be88 <USBH_status+0x24>
  {
    res = RES_OK;
 800be82:	2300      	movs	r3, #0
 800be84:	73fb      	strb	r3, [r7, #15]
 800be86:	e001      	b.n	800be8c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800be88:	2301      	movs	r3, #1
 800be8a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800be8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	200022c8 	.word	0x200022c8

0800be9c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b094      	sub	sp, #80	@ 0x50
 800bea0:	af02      	add	r7, sp, #8
 800bea2:	60b9      	str	r1, [r7, #8]
 800bea4:	607a      	str	r2, [r7, #4]
 800bea6:	603b      	str	r3, [r7, #0]
 800bea8:	4603      	mov	r3, r0
 800beaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800beac:	2301      	movs	r3, #1
 800beae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800beb2:	7bf9      	ldrb	r1, [r7, #15]
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	9300      	str	r3, [sp, #0]
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	4813      	ldr	r0, [pc, #76]	@ (800bf0c <USBH_read+0x70>)
 800bebe:	f000 feaa 	bl	800cc16 <USBH_MSC_Read>
 800bec2:	4603      	mov	r3, r0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d103      	bne.n	800bed0 <USBH_read+0x34>
  {
    res = RES_OK;
 800bec8:	2300      	movs	r3, #0
 800beca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bece:	e017      	b.n	800bf00 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800bed0:	f107 0210 	add.w	r2, r7, #16
 800bed4:	7bfb      	ldrb	r3, [r7, #15]
 800bed6:	4619      	mov	r1, r3
 800bed8:	480c      	ldr	r0, [pc, #48]	@ (800bf0c <USBH_read+0x70>)
 800beda:	f000 fe73 	bl	800cbc4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800bede:	7f7b      	ldrb	r3, [r7, #29]
 800bee0:	2b3a      	cmp	r3, #58	@ 0x3a
 800bee2:	d005      	beq.n	800bef0 <USBH_read+0x54>
 800bee4:	2b3a      	cmp	r3, #58	@ 0x3a
 800bee6:	dc07      	bgt.n	800bef8 <USBH_read+0x5c>
 800bee8:	2b04      	cmp	r3, #4
 800beea:	d001      	beq.n	800bef0 <USBH_read+0x54>
 800beec:	2b28      	cmp	r3, #40	@ 0x28
 800beee:	d103      	bne.n	800bef8 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800bef0:	2303      	movs	r3, #3
 800bef2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800bef6:	e003      	b.n	800bf00 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800bef8:	2301      	movs	r3, #1
 800befa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800befe:	bf00      	nop
    }
  }

  return res;
 800bf00:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3748      	adds	r7, #72	@ 0x48
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	200022c8 	.word	0x200022c8

0800bf10 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b094      	sub	sp, #80	@ 0x50
 800bf14:	af02      	add	r7, sp, #8
 800bf16:	60b9      	str	r1, [r7, #8]
 800bf18:	607a      	str	r2, [r7, #4]
 800bf1a:	603b      	str	r3, [r7, #0]
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bf20:	2301      	movs	r3, #1
 800bf22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800bf26:	7bf9      	ldrb	r1, [r7, #15]
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	9300      	str	r3, [sp, #0]
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	4817      	ldr	r0, [pc, #92]	@ (800bf90 <USBH_write+0x80>)
 800bf32:	f000 fed0 	bl	800ccd6 <USBH_MSC_Write>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d103      	bne.n	800bf44 <USBH_write+0x34>
  {
    res = RES_OK;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bf42:	e01f      	b.n	800bf84 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800bf44:	f107 0210 	add.w	r2, r7, #16
 800bf48:	7bfb      	ldrb	r3, [r7, #15]
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	4810      	ldr	r0, [pc, #64]	@ (800bf90 <USBH_write+0x80>)
 800bf4e:	f000 fe39 	bl	800cbc4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800bf52:	7f7b      	ldrb	r3, [r7, #29]
 800bf54:	2b3a      	cmp	r3, #58	@ 0x3a
 800bf56:	d00d      	beq.n	800bf74 <USBH_write+0x64>
 800bf58:	2b3a      	cmp	r3, #58	@ 0x3a
 800bf5a:	dc0f      	bgt.n	800bf7c <USBH_write+0x6c>
 800bf5c:	2b28      	cmp	r3, #40	@ 0x28
 800bf5e:	d009      	beq.n	800bf74 <USBH_write+0x64>
 800bf60:	2b28      	cmp	r3, #40	@ 0x28
 800bf62:	dc0b      	bgt.n	800bf7c <USBH_write+0x6c>
 800bf64:	2b04      	cmp	r3, #4
 800bf66:	d005      	beq.n	800bf74 <USBH_write+0x64>
 800bf68:	2b27      	cmp	r3, #39	@ 0x27
 800bf6a:	d107      	bne.n	800bf7c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800bf6c:	2302      	movs	r3, #2
 800bf6e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800bf72:	e007      	b.n	800bf84 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800bf74:	2303      	movs	r3, #3
 800bf76:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800bf7a:	e003      	b.n	800bf84 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800bf82:	bf00      	nop
    }
  }

  return res;
 800bf84:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3748      	adds	r7, #72	@ 0x48
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	200022c8 	.word	0x200022c8

0800bf94 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b090      	sub	sp, #64	@ 0x40
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	603a      	str	r2, [r7, #0]
 800bf9e:	71fb      	strb	r3, [r7, #7]
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800bfaa:	79bb      	ldrb	r3, [r7, #6]
 800bfac:	2b03      	cmp	r3, #3
 800bfae:	d852      	bhi.n	800c056 <USBH_ioctl+0xc2>
 800bfb0:	a201      	add	r2, pc, #4	@ (adr r2, 800bfb8 <USBH_ioctl+0x24>)
 800bfb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb6:	bf00      	nop
 800bfb8:	0800bfc9 	.word	0x0800bfc9
 800bfbc:	0800bfd1 	.word	0x0800bfd1
 800bfc0:	0800bffb 	.word	0x0800bffb
 800bfc4:	0800c027 	.word	0x0800c027
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800bfce:	e045      	b.n	800c05c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800bfd0:	f107 0208 	add.w	r2, r7, #8
 800bfd4:	79fb      	ldrb	r3, [r7, #7]
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	4823      	ldr	r0, [pc, #140]	@ (800c068 <USBH_ioctl+0xd4>)
 800bfda:	f000 fdf3 	bl	800cbc4 <USBH_MSC_GetLUNInfo>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d106      	bne.n	800bff2 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800bfe4:	68fa      	ldr	r2, [r7, #12]
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800bfea:	2300      	movs	r3, #0
 800bfec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800bff0:	e034      	b.n	800c05c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800bff2:	2301      	movs	r3, #1
 800bff4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800bff8:	e030      	b.n	800c05c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800bffa:	f107 0208 	add.w	r2, r7, #8
 800bffe:	79fb      	ldrb	r3, [r7, #7]
 800c000:	4619      	mov	r1, r3
 800c002:	4819      	ldr	r0, [pc, #100]	@ (800c068 <USBH_ioctl+0xd4>)
 800c004:	f000 fdde 	bl	800cbc4 <USBH_MSC_GetLUNInfo>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d107      	bne.n	800c01e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800c00e:	8a3b      	ldrh	r3, [r7, #16]
 800c010:	461a      	mov	r2, r3
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800c016:	2300      	movs	r3, #0
 800c018:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800c01c:	e01e      	b.n	800c05c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800c01e:	2301      	movs	r3, #1
 800c020:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800c024:	e01a      	b.n	800c05c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800c026:	f107 0208 	add.w	r2, r7, #8
 800c02a:	79fb      	ldrb	r3, [r7, #7]
 800c02c:	4619      	mov	r1, r3
 800c02e:	480e      	ldr	r0, [pc, #56]	@ (800c068 <USBH_ioctl+0xd4>)
 800c030:	f000 fdc8 	bl	800cbc4 <USBH_MSC_GetLUNInfo>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d109      	bne.n	800c04e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800c03a:	8a3b      	ldrh	r3, [r7, #16]
 800c03c:	0a5b      	lsrs	r3, r3, #9
 800c03e:	b29b      	uxth	r3, r3
 800c040:	461a      	mov	r2, r3
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800c046:	2300      	movs	r3, #0
 800c048:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800c04c:	e006      	b.n	800c05c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800c04e:	2301      	movs	r3, #1
 800c050:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800c054:	e002      	b.n	800c05c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800c056:	2304      	movs	r3, #4
 800c058:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 800c05c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800c060:	4618      	mov	r0, r3
 800c062:	3740      	adds	r7, #64	@ 0x40
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	200022c8 	.word	0x200022c8

0800c06c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c06c:	b590      	push	{r4, r7, lr}
 800c06e:	b089      	sub	sp, #36	@ 0x24
 800c070:	af04      	add	r7, sp, #16
 800c072:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c07a:	7919      	ldrb	r1, [r3, #4]
 800c07c:	2350      	movs	r3, #80	@ 0x50
 800c07e:	2206      	movs	r2, #6
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f001 fcd7 	bl	800da34 <USBH_FindInterface>
 800c086:	4603      	mov	r3, r0
 800c088:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800c08a:	7bfb      	ldrb	r3, [r7, #15]
 800c08c:	2bff      	cmp	r3, #255	@ 0xff
 800c08e:	d002      	beq.n	800c096 <USBH_MSC_InterfaceInit+0x2a>
 800c090:	7bfb      	ldrb	r3, [r7, #15]
 800c092:	2b01      	cmp	r3, #1
 800c094:	d901      	bls.n	800c09a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c096:	2302      	movs	r3, #2
 800c098:	e106      	b.n	800c2a8 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
 800c09c:	4619      	mov	r1, r3
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f001 fcac 	bl	800d9fc <USBH_SelectInterface>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c0a8:	7bbb      	ldrb	r3, [r7, #14]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d001      	beq.n	800c0b2 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800c0ae:	2302      	movs	r3, #2
 800c0b0:	e0fa      	b.n	800c2a8 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800c0b8:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800c0bc:	f006 fed6 	bl	8012e6c <malloc>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c0ca:	69db      	ldr	r3, [r3, #28]
 800c0cc:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d101      	bne.n	800c0d8 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800c0d4:	2302      	movs	r3, #2
 800c0d6:	e0e7      	b.n	800c2a8 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800c0d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800c0dc:	2100      	movs	r1, #0
 800c0de:	68b8      	ldr	r0, [r7, #8]
 800c0e0:	f006 ffa2 	bl	8013028 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c0e4:	7bfb      	ldrb	r3, [r7, #15]
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	211a      	movs	r1, #26
 800c0ea:	fb01 f303 	mul.w	r3, r1, r3
 800c0ee:	4413      	add	r3, r2
 800c0f0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	b25b      	sxtb	r3, r3
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	da16      	bge.n	800c12a <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800c0fc:	7bfb      	ldrb	r3, [r7, #15]
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	211a      	movs	r1, #26
 800c102:	fb01 f303 	mul.w	r3, r1, r3
 800c106:	4413      	add	r3, r2
 800c108:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c10c:	781a      	ldrb	r2, [r3, #0]
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c112:	7bfb      	ldrb	r3, [r7, #15]
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	211a      	movs	r1, #26
 800c118:	fb01 f303 	mul.w	r3, r1, r3
 800c11c:	4413      	add	r3, r2
 800c11e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c122:	881a      	ldrh	r2, [r3, #0]
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	815a      	strh	r2, [r3, #10]
 800c128:	e015      	b.n	800c156 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800c12a:	7bfb      	ldrb	r3, [r7, #15]
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	211a      	movs	r1, #26
 800c130:	fb01 f303 	mul.w	r3, r1, r3
 800c134:	4413      	add	r3, r2
 800c136:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c13a:	781a      	ldrb	r2, [r3, #0]
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c140:	7bfb      	ldrb	r3, [r7, #15]
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	211a      	movs	r1, #26
 800c146:	fb01 f303 	mul.w	r3, r1, r3
 800c14a:	4413      	add	r3, r2
 800c14c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c150:	881a      	ldrh	r2, [r3, #0]
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800c156:	7bfb      	ldrb	r3, [r7, #15]
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	211a      	movs	r1, #26
 800c15c:	fb01 f303 	mul.w	r3, r1, r3
 800c160:	4413      	add	r3, r2
 800c162:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	b25b      	sxtb	r3, r3
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	da16      	bge.n	800c19c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800c16e:	7bfb      	ldrb	r3, [r7, #15]
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	211a      	movs	r1, #26
 800c174:	fb01 f303 	mul.w	r3, r1, r3
 800c178:	4413      	add	r3, r2
 800c17a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c17e:	781a      	ldrb	r2, [r3, #0]
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c184:	7bfb      	ldrb	r3, [r7, #15]
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	211a      	movs	r1, #26
 800c18a:	fb01 f303 	mul.w	r3, r1, r3
 800c18e:	4413      	add	r3, r2
 800c190:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c194:	881a      	ldrh	r2, [r3, #0]
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	815a      	strh	r2, [r3, #10]
 800c19a:	e015      	b.n	800c1c8 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800c19c:	7bfb      	ldrb	r3, [r7, #15]
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	211a      	movs	r1, #26
 800c1a2:	fb01 f303 	mul.w	r3, r1, r3
 800c1a6:	4413      	add	r3, r2
 800c1a8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c1ac:	781a      	ldrb	r2, [r3, #0]
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c1b2:	7bfb      	ldrb	r3, [r7, #15]
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	211a      	movs	r1, #26
 800c1b8:	fb01 f303 	mul.w	r3, r1, r3
 800c1bc:	4413      	add	r3, r2
 800c1be:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c1c2:	881a      	ldrh	r2, [r3, #0]
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	799b      	ldrb	r3, [r3, #6]
 800c1de:	4619      	mov	r1, r3
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f002 ffb4 	bl	800f14e <USBH_AllocPipe>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	79db      	ldrb	r3, [r3, #7]
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f002 ffaa 	bl	800f14e <USBH_AllocPipe>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 fe02 	bl	800ce0c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	799b      	ldrb	r3, [r3, #6]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d01e      	beq.n	800c24e <USBH_MSC_InterfaceInit+0x1e2>
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	891b      	ldrh	r3, [r3, #8]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d01a      	beq.n	800c24e <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	7959      	ldrb	r1, [r3, #5]
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	7998      	ldrb	r0, [r3, #6]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c22c:	68ba      	ldr	r2, [r7, #8]
 800c22e:	8912      	ldrh	r2, [r2, #8]
 800c230:	9202      	str	r2, [sp, #8]
 800c232:	2202      	movs	r2, #2
 800c234:	9201      	str	r2, [sp, #4]
 800c236:	9300      	str	r3, [sp, #0]
 800c238:	4623      	mov	r3, r4
 800c23a:	4602      	mov	r2, r0
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f002 ff57 	bl	800f0f0 <USBH_OpenPipe>
 800c242:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	79db      	ldrb	r3, [r3, #7]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d02c      	beq.n	800c2a6 <USBH_MSC_InterfaceInit+0x23a>
 800c24c:	e001      	b.n	800c252 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800c24e:	2303      	movs	r3, #3
 800c250:	e02a      	b.n	800c2a8 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	895b      	ldrh	r3, [r3, #10]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d025      	beq.n	800c2a6 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	7919      	ldrb	r1, [r3, #4]
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	79d8      	ldrb	r0, [r3, #7]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	8952      	ldrh	r2, [r2, #10]
 800c272:	9202      	str	r2, [sp, #8]
 800c274:	2202      	movs	r2, #2
 800c276:	9201      	str	r2, [sp, #4]
 800c278:	9300      	str	r3, [sp, #0]
 800c27a:	4623      	mov	r3, r4
 800c27c:	4602      	mov	r2, r0
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f002 ff36 	bl	800f0f0 <USBH_OpenPipe>
 800c284:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	791b      	ldrb	r3, [r3, #4]
 800c28a:	2200      	movs	r2, #0
 800c28c:	4619      	mov	r1, r3
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f006 fd32 	bl	8012cf8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	795b      	ldrb	r3, [r3, #5]
 800c298:	2200      	movs	r2, #0
 800c29a:	4619      	mov	r1, r3
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f006 fd2b 	bl	8012cf8 <USBH_LL_SetToggle>

  return USBH_OK;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	e000      	b.n	800c2a8 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800c2a6:	2303      	movs	r3, #3
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3714      	adds	r7, #20
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd90      	pop	{r4, r7, pc}

0800c2b0 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c2be:	69db      	ldr	r3, [r3, #28]
 800c2c0:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	795b      	ldrb	r3, [r3, #5]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d00e      	beq.n	800c2e8 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	795b      	ldrb	r3, [r3, #5]
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f002 ff2c 	bl	800f12e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	795b      	ldrb	r3, [r3, #5]
 800c2da:	4619      	mov	r1, r3
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f002 ff57 	bl	800f190 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	791b      	ldrb	r3, [r3, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00e      	beq.n	800c30e <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	791b      	ldrb	r3, [r3, #4]
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f002 ff19 	bl	800f12e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	791b      	ldrb	r3, [r3, #4]
 800c300:	4619      	mov	r1, r3
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f002 ff44 	bl	800f190 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2200      	movs	r2, #0
 800c30c:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c314:	69db      	ldr	r3, [r3, #28]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00b      	beq.n	800c332 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c320:	69db      	ldr	r3, [r3, #28]
 800c322:	4618      	mov	r0, r3
 800c324:	f006 fdaa 	bl	8012e7c <free>
    phost->pActiveClass->pData = 0U;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c32e:	2200      	movs	r2, #0
 800c330:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	3710      	adds	r7, #16
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c34a:	69db      	ldr	r3, [r3, #28]
 800c34c:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c34e:	2301      	movs	r3, #1
 800c350:	73fb      	strb	r3, [r7, #15]
  uint8_t lun_idx;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	7b9b      	ldrb	r3, [r3, #14]
 800c356:	2b03      	cmp	r3, #3
 800c358:	d041      	beq.n	800c3de <USBH_MSC_ClassRequest+0xa2>
 800c35a:	2b03      	cmp	r3, #3
 800c35c:	dc4b      	bgt.n	800c3f6 <USBH_MSC_ClassRequest+0xba>
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d001      	beq.n	800c366 <USBH_MSC_ClassRequest+0x2a>
 800c362:	2b02      	cmp	r3, #2
 800c364:	d147      	bne.n	800c3f6 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:

      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	4619      	mov	r1, r3
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 fd30 	bl	800cdd0 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800c370:	4603      	mov	r3, r0
 800c372:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800c374:	7bfb      	ldrb	r3, [r7, #15]
 800c376:	2b03      	cmp	r3, #3
 800c378:	d104      	bne.n	800c384 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	2200      	movs	r2, #0
 800c37e:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800c380:	2300      	movs	r3, #0
 800c382:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800c384:	7bfb      	ldrb	r3, [r7, #15]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d137      	bne.n	800c3fa <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	2b02      	cmp	r3, #2
 800c390:	d804      	bhi.n	800c39c <USBH_MSC_ClassRequest+0x60>
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	3301      	adds	r3, #1
 800c398:	b2da      	uxtb	r2, r3
 800c39a:	e000      	b.n	800c39e <USBH_MSC_ClassRequest+0x62>
 800c39c:	2202      	movs	r2, #2
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	73bb      	strb	r3, [r7, #14]
 800c3a6:	e014      	b.n	800c3d2 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
 800c3a8:	7bbb      	ldrb	r3, [r7, #14]
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	2134      	movs	r1, #52	@ 0x34
 800c3ae:	fb01 f303 	mul.w	r3, r1, r3
 800c3b2:	4413      	add	r3, r2
 800c3b4:	3392      	adds	r3, #146	@ 0x92
 800c3b6:	2202      	movs	r2, #2
 800c3b8:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 800c3ba:	7bbb      	ldrb	r3, [r7, #14]
 800c3bc:	68ba      	ldr	r2, [r7, #8]
 800c3be:	2134      	movs	r1, #52	@ 0x34
 800c3c0:	fb01 f303 	mul.w	r3, r1, r3
 800c3c4:	4413      	add	r3, r2
 800c3c6:	33c1      	adds	r3, #193	@ 0xc1
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	701a      	strb	r2, [r3, #0]
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 800c3cc:	7bbb      	ldrb	r3, [r7, #14]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	73bb      	strb	r3, [r7, #14]
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	7bba      	ldrb	r2, [r7, #14]
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d3e5      	bcc.n	800c3a8 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800c3dc:	e00d      	b.n	800c3fa <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800c3de:	2100      	movs	r1, #0
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f002 f8ff 	bl	800e5e4 <USBH_ClrFeature>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d108      	bne.n	800c3fe <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	7bda      	ldrb	r2, [r3, #15]
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	739a      	strb	r2, [r3, #14]
      }
      break;
 800c3f4:	e003      	b.n	800c3fe <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800c3f6:	bf00      	nop
 800c3f8:	e002      	b.n	800c400 <USBH_MSC_ClassRequest+0xc4>
      break;
 800c3fa:	bf00      	nop
 800c3fc:	e000      	b.n	800c400 <USBH_MSC_ClassRequest+0xc4>
      break;
 800c3fe:	bf00      	nop
  }

  return status;
 800c400:	7bfb      	ldrb	r3, [r7, #15]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
	...

0800c40c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b086      	sub	sp, #24
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c41a:	69db      	ldr	r3, [r3, #28]
 800c41c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800c41e:	2301      	movs	r3, #1
 800c420:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800c422:	2301      	movs	r3, #1
 800c424:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800c426:	2301      	movs	r3, #1
 800c428:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	7b1b      	ldrb	r3, [r3, #12]
 800c42e:	2b0a      	cmp	r3, #10
 800c430:	f000 8280 	beq.w	800c934 <USBH_MSC_Process+0x528>
 800c434:	2b0a      	cmp	r3, #10
 800c436:	f300 82b8 	bgt.w	800c9aa <USBH_MSC_Process+0x59e>
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d003      	beq.n	800c446 <USBH_MSC_Process+0x3a>
 800c43e:	2b01      	cmp	r3, #1
 800c440:	f000 82b0 	beq.w	800c9a4 <USBH_MSC_Process+0x598>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800c444:	e2b1      	b.n	800c9aa <USBH_MSC_Process+0x59e>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c44c:	693a      	ldr	r2, [r7, #16]
 800c44e:	7812      	ldrb	r2, [r2, #0]
 800c450:	4293      	cmp	r3, r2
 800c452:	f080 825d 	bcs.w	800c910 <USBH_MSC_Process+0x504>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c45c:	4619      	mov	r1, r3
 800c45e:	693a      	ldr	r2, [r7, #16]
 800c460:	2334      	movs	r3, #52	@ 0x34
 800c462:	fb01 f303 	mul.w	r3, r1, r3
 800c466:	4413      	add	r3, r2
 800c468:	3391      	adds	r3, #145	@ 0x91
 800c46a:	2201      	movs	r2, #1
 800c46c:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c474:	4619      	mov	r1, r3
 800c476:	693a      	ldr	r2, [r7, #16]
 800c478:	2334      	movs	r3, #52	@ 0x34
 800c47a:	fb01 f303 	mul.w	r3, r1, r3
 800c47e:	4413      	add	r3, r2
 800c480:	3390      	adds	r3, #144	@ 0x90
 800c482:	781b      	ldrb	r3, [r3, #0]
 800c484:	2b08      	cmp	r3, #8
 800c486:	f200 824b 	bhi.w	800c920 <USBH_MSC_Process+0x514>
 800c48a:	a201      	add	r2, pc, #4	@ (adr r2, 800c490 <USBH_MSC_Process+0x84>)
 800c48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c490:	0800c4b5 	.word	0x0800c4b5
 800c494:	0800c921 	.word	0x0800c921
 800c498:	0800c57f 	.word	0x0800c57f
 800c49c:	0800c705 	.word	0x0800c705
 800c4a0:	0800c4db 	.word	0x0800c4db
 800c4a4:	0800c7d1 	.word	0x0800c7d1
 800c4a8:	0800c921 	.word	0x0800c921
 800c4ac:	0800c921 	.word	0x0800c921
 800c4b0:	0800c8ff 	.word	0x0800c8ff
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	693a      	ldr	r2, [r7, #16]
 800c4be:	2334      	movs	r3, #52	@ 0x34
 800c4c0:	fb01 f303 	mul.w	r3, r1, r3
 800c4c4:	4413      	add	r3, r2
 800c4c6:	3390      	adds	r3, #144	@ 0x90
 800c4c8:	2204      	movs	r2, #4
 800c4ca:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            break;
 800c4d8:	e22b      	b.n	800c932 <USBH_MSC_Process+0x526>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c4e0:	b2d9      	uxtb	r1, r3
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	2334      	movs	r3, #52	@ 0x34
 800c4ec:	fb02 f303 	mul.w	r3, r2, r3
 800c4f0:	3398      	adds	r3, #152	@ 0x98
 800c4f2:	693a      	ldr	r2, [r7, #16]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	3307      	adds	r3, #7
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 ffa3 	bl	800d446 <USBH_MSC_SCSI_Inquiry>
 800c500:	4603      	mov	r3, r0
 800c502:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800c504:	7bfb      	ldrb	r3, [r7, #15]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d10c      	bne.n	800c524 <USBH_MSC_Process+0x118>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c510:	4619      	mov	r1, r3
 800c512:	693a      	ldr	r2, [r7, #16]
 800c514:	2334      	movs	r3, #52	@ 0x34
 800c516:	fb01 f303 	mul.w	r3, r1, r3
 800c51a:	4413      	add	r3, r2
 800c51c:	3390      	adds	r3, #144	@ 0x90
 800c51e:	2202      	movs	r2, #2
 800c520:	701a      	strb	r2, [r3, #0]
            break;
 800c522:	e1ff      	b.n	800c924 <USBH_MSC_Process+0x518>
            else if (scsi_status == USBH_FAIL)
 800c524:	7bfb      	ldrb	r3, [r7, #15]
 800c526:	2b02      	cmp	r3, #2
 800c528:	d10c      	bne.n	800c544 <USBH_MSC_Process+0x138>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c530:	4619      	mov	r1, r3
 800c532:	693a      	ldr	r2, [r7, #16]
 800c534:	2334      	movs	r3, #52	@ 0x34
 800c536:	fb01 f303 	mul.w	r3, r1, r3
 800c53a:	4413      	add	r3, r2
 800c53c:	3390      	adds	r3, #144	@ 0x90
 800c53e:	2205      	movs	r2, #5
 800c540:	701a      	strb	r2, [r3, #0]
            break;
 800c542:	e1ef      	b.n	800c924 <USBH_MSC_Process+0x518>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c544:	7bfb      	ldrb	r3, [r7, #15]
 800c546:	2b04      	cmp	r3, #4
 800c548:	f040 81ec 	bne.w	800c924 <USBH_MSC_Process+0x518>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c552:	4619      	mov	r1, r3
 800c554:	693a      	ldr	r2, [r7, #16]
 800c556:	2334      	movs	r3, #52	@ 0x34
 800c558:	fb01 f303 	mul.w	r3, r1, r3
 800c55c:	4413      	add	r3, r2
 800c55e:	3390      	adds	r3, #144	@ 0x90
 800c560:	2208      	movs	r2, #8
 800c562:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c56a:	4619      	mov	r1, r3
 800c56c:	693a      	ldr	r2, [r7, #16]
 800c56e:	2334      	movs	r3, #52	@ 0x34
 800c570:	fb01 f303 	mul.w	r3, r1, r3
 800c574:	4413      	add	r3, r2
 800c576:	3391      	adds	r3, #145	@ 0x91
 800c578:	2202      	movs	r2, #2
 800c57a:	701a      	strb	r2, [r3, #0]
            break;
 800c57c:	e1d2      	b.n	800c924 <USBH_MSC_Process+0x518>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c584:	b2db      	uxtb	r3, r3
 800c586:	4619      	mov	r1, r3
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 fe9f 	bl	800d2cc <USBH_MSC_SCSI_TestUnitReady>
 800c58e:	4603      	mov	r3, r0
 800c590:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800c592:	7bbb      	ldrb	r3, [r7, #14]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d14a      	bne.n	800c62e <USBH_MSC_Process+0x222>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c59e:	4619      	mov	r1, r3
 800c5a0:	693a      	ldr	r2, [r7, #16]
 800c5a2:	2334      	movs	r3, #52	@ 0x34
 800c5a4:	fb01 f303 	mul.w	r3, r1, r3
 800c5a8:	4413      	add	r3, r2
 800c5aa:	3392      	adds	r3, #146	@ 0x92
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00c      	beq.n	800c5cc <USBH_MSC_Process+0x1c0>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	693a      	ldr	r2, [r7, #16]
 800c5bc:	2334      	movs	r3, #52	@ 0x34
 800c5be:	fb01 f303 	mul.w	r3, r1, r3
 800c5c2:	4413      	add	r3, r2
 800c5c4:	33c1      	adds	r3, #193	@ 0xc1
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	701a      	strb	r2, [r3, #0]
 800c5ca:	e00b      	b.n	800c5e4 <USBH_MSC_Process+0x1d8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	693a      	ldr	r2, [r7, #16]
 800c5d6:	2334      	movs	r3, #52	@ 0x34
 800c5d8:	fb01 f303 	mul.w	r3, r1, r3
 800c5dc:	4413      	add	r3, r2
 800c5de:	33c1      	adds	r3, #193	@ 0xc1
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	693a      	ldr	r2, [r7, #16]
 800c5ee:	2334      	movs	r3, #52	@ 0x34
 800c5f0:	fb01 f303 	mul.w	r3, r1, r3
 800c5f4:	4413      	add	r3, r2
 800c5f6:	3390      	adds	r3, #144	@ 0x90
 800c5f8:	2203      	movs	r2, #3
 800c5fa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c602:	4619      	mov	r1, r3
 800c604:	693a      	ldr	r2, [r7, #16]
 800c606:	2334      	movs	r3, #52	@ 0x34
 800c608:	fb01 f303 	mul.w	r3, r1, r3
 800c60c:	4413      	add	r3, r2
 800c60e:	3391      	adds	r3, #145	@ 0x91
 800c610:	2200      	movs	r2, #0
 800c612:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c61a:	4619      	mov	r1, r3
 800c61c:	693a      	ldr	r2, [r7, #16]
 800c61e:	2334      	movs	r3, #52	@ 0x34
 800c620:	fb01 f303 	mul.w	r3, r1, r3
 800c624:	4413      	add	r3, r2
 800c626:	3392      	adds	r3, #146	@ 0x92
 800c628:	2200      	movs	r2, #0
 800c62a:	701a      	strb	r2, [r3, #0]
            break;
 800c62c:	e17c      	b.n	800c928 <USBH_MSC_Process+0x51c>
            else if (ready_status == USBH_FAIL)
 800c62e:	7bbb      	ldrb	r3, [r7, #14]
 800c630:	2b02      	cmp	r3, #2
 800c632:	d14a      	bne.n	800c6ca <USBH_MSC_Process+0x2be>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c63a:	4619      	mov	r1, r3
 800c63c:	693a      	ldr	r2, [r7, #16]
 800c63e:	2334      	movs	r3, #52	@ 0x34
 800c640:	fb01 f303 	mul.w	r3, r1, r3
 800c644:	4413      	add	r3, r2
 800c646:	3392      	adds	r3, #146	@ 0x92
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	2b02      	cmp	r3, #2
 800c64c:	d00c      	beq.n	800c668 <USBH_MSC_Process+0x25c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c654:	4619      	mov	r1, r3
 800c656:	693a      	ldr	r2, [r7, #16]
 800c658:	2334      	movs	r3, #52	@ 0x34
 800c65a:	fb01 f303 	mul.w	r3, r1, r3
 800c65e:	4413      	add	r3, r2
 800c660:	33c1      	adds	r3, #193	@ 0xc1
 800c662:	2201      	movs	r2, #1
 800c664:	701a      	strb	r2, [r3, #0]
 800c666:	e00b      	b.n	800c680 <USBH_MSC_Process+0x274>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c66e:	4619      	mov	r1, r3
 800c670:	693a      	ldr	r2, [r7, #16]
 800c672:	2334      	movs	r3, #52	@ 0x34
 800c674:	fb01 f303 	mul.w	r3, r1, r3
 800c678:	4413      	add	r3, r2
 800c67a:	33c1      	adds	r3, #193	@ 0xc1
 800c67c:	2200      	movs	r2, #0
 800c67e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c686:	4619      	mov	r1, r3
 800c688:	693a      	ldr	r2, [r7, #16]
 800c68a:	2334      	movs	r3, #52	@ 0x34
 800c68c:	fb01 f303 	mul.w	r3, r1, r3
 800c690:	4413      	add	r3, r2
 800c692:	3390      	adds	r3, #144	@ 0x90
 800c694:	2205      	movs	r2, #5
 800c696:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c69e:	4619      	mov	r1, r3
 800c6a0:	693a      	ldr	r2, [r7, #16]
 800c6a2:	2334      	movs	r3, #52	@ 0x34
 800c6a4:	fb01 f303 	mul.w	r3, r1, r3
 800c6a8:	4413      	add	r3, r2
 800c6aa:	3391      	adds	r3, #145	@ 0x91
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	693a      	ldr	r2, [r7, #16]
 800c6ba:	2334      	movs	r3, #52	@ 0x34
 800c6bc:	fb01 f303 	mul.w	r3, r1, r3
 800c6c0:	4413      	add	r3, r2
 800c6c2:	3392      	adds	r3, #146	@ 0x92
 800c6c4:	2202      	movs	r2, #2
 800c6c6:	701a      	strb	r2, [r3, #0]
            break;
 800c6c8:	e12e      	b.n	800c928 <USBH_MSC_Process+0x51c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800c6ca:	7bbb      	ldrb	r3, [r7, #14]
 800c6cc:	2b04      	cmp	r3, #4
 800c6ce:	f040 812b 	bne.w	800c928 <USBH_MSC_Process+0x51c>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c6d8:	4619      	mov	r1, r3
 800c6da:	693a      	ldr	r2, [r7, #16]
 800c6dc:	2334      	movs	r3, #52	@ 0x34
 800c6de:	fb01 f303 	mul.w	r3, r1, r3
 800c6e2:	4413      	add	r3, r2
 800c6e4:	3390      	adds	r3, #144	@ 0x90
 800c6e6:	2208      	movs	r2, #8
 800c6e8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	693a      	ldr	r2, [r7, #16]
 800c6f4:	2334      	movs	r3, #52	@ 0x34
 800c6f6:	fb01 f303 	mul.w	r3, r1, r3
 800c6fa:	4413      	add	r3, r2
 800c6fc:	3391      	adds	r3, #145	@ 0x91
 800c6fe:	2202      	movs	r2, #2
 800c700:	701a      	strb	r2, [r3, #0]
            break;
 800c702:	e111      	b.n	800c928 <USBH_MSC_Process+0x51c>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c70a:	b2d9      	uxtb	r1, r3
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c712:	461a      	mov	r2, r3
 800c714:	2334      	movs	r3, #52	@ 0x34
 800c716:	fb02 f303 	mul.w	r3, r2, r3
 800c71a:	3390      	adds	r3, #144	@ 0x90
 800c71c:	693a      	ldr	r2, [r7, #16]
 800c71e:	4413      	add	r3, r2
 800c720:	3304      	adds	r3, #4
 800c722:	461a      	mov	r2, r3
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 fe14 	bl	800d352 <USBH_MSC_SCSI_ReadCapacity>
 800c72a:	4603      	mov	r3, r0
 800c72c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800c72e:	7bfb      	ldrb	r3, [r7, #15]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d120      	bne.n	800c776 <USBH_MSC_Process+0x36a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c73a:	4619      	mov	r1, r3
 800c73c:	693a      	ldr	r2, [r7, #16]
 800c73e:	2334      	movs	r3, #52	@ 0x34
 800c740:	fb01 f303 	mul.w	r3, r1, r3
 800c744:	4413      	add	r3, r2
 800c746:	3390      	adds	r3, #144	@ 0x90
 800c748:	2201      	movs	r2, #1
 800c74a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c752:	4619      	mov	r1, r3
 800c754:	693a      	ldr	r2, [r7, #16]
 800c756:	2334      	movs	r3, #52	@ 0x34
 800c758:	fb01 f303 	mul.w	r3, r1, r3
 800c75c:	4413      	add	r3, r2
 800c75e:	3391      	adds	r3, #145	@ 0x91
 800c760:	2200      	movs	r2, #0
 800c762:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c76a:	3301      	adds	r3, #1
 800c76c:	b29a      	uxth	r2, r3
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800c774:	e0da      	b.n	800c92c <USBH_MSC_Process+0x520>
            else if (scsi_status == USBH_FAIL)
 800c776:	7bfb      	ldrb	r3, [r7, #15]
 800c778:	2b02      	cmp	r3, #2
 800c77a:	d10c      	bne.n	800c796 <USBH_MSC_Process+0x38a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c782:	4619      	mov	r1, r3
 800c784:	693a      	ldr	r2, [r7, #16]
 800c786:	2334      	movs	r3, #52	@ 0x34
 800c788:	fb01 f303 	mul.w	r3, r1, r3
 800c78c:	4413      	add	r3, r2
 800c78e:	3390      	adds	r3, #144	@ 0x90
 800c790:	2205      	movs	r2, #5
 800c792:	701a      	strb	r2, [r3, #0]
            break;
 800c794:	e0ca      	b.n	800c92c <USBH_MSC_Process+0x520>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c796:	7bfb      	ldrb	r3, [r7, #15]
 800c798:	2b04      	cmp	r3, #4
 800c79a:	f040 80c7 	bne.w	800c92c <USBH_MSC_Process+0x520>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	693a      	ldr	r2, [r7, #16]
 800c7a8:	2334      	movs	r3, #52	@ 0x34
 800c7aa:	fb01 f303 	mul.w	r3, r1, r3
 800c7ae:	4413      	add	r3, r2
 800c7b0:	3390      	adds	r3, #144	@ 0x90
 800c7b2:	2208      	movs	r2, #8
 800c7b4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c7bc:	4619      	mov	r1, r3
 800c7be:	693a      	ldr	r2, [r7, #16]
 800c7c0:	2334      	movs	r3, #52	@ 0x34
 800c7c2:	fb01 f303 	mul.w	r3, r1, r3
 800c7c6:	4413      	add	r3, r2
 800c7c8:	3391      	adds	r3, #145	@ 0x91
 800c7ca:	2202      	movs	r2, #2
 800c7cc:	701a      	strb	r2, [r3, #0]
            break;
 800c7ce:	e0ad      	b.n	800c92c <USBH_MSC_Process+0x520>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c7d6:	b2d9      	uxtb	r1, r3
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c7de:	461a      	mov	r2, r3
 800c7e0:	2334      	movs	r3, #52	@ 0x34
 800c7e2:	fb02 f303 	mul.w	r3, r2, r3
 800c7e6:	3398      	adds	r3, #152	@ 0x98
 800c7e8:	693a      	ldr	r2, [r7, #16]
 800c7ea:	4413      	add	r3, r2
 800c7ec:	3304      	adds	r3, #4
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 fecd 	bl	800d590 <USBH_MSC_SCSI_RequestSense>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800c7fa:	7bfb      	ldrb	r3, [r7, #15]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d146      	bne.n	800c88e <USBH_MSC_Process+0x482>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c806:	4619      	mov	r1, r3
 800c808:	693a      	ldr	r2, [r7, #16]
 800c80a:	2334      	movs	r3, #52	@ 0x34
 800c80c:	fb01 f303 	mul.w	r3, r1, r3
 800c810:	4413      	add	r3, r2
 800c812:	339c      	adds	r3, #156	@ 0x9c
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	2b06      	cmp	r3, #6
 800c818:	d00c      	beq.n	800c834 <USBH_MSC_Process+0x428>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c820:	4619      	mov	r1, r3
 800c822:	693a      	ldr	r2, [r7, #16]
 800c824:	2334      	movs	r3, #52	@ 0x34
 800c826:	fb01 f303 	mul.w	r3, r1, r3
 800c82a:	4413      	add	r3, r2
 800c82c:	339c      	adds	r3, #156	@ 0x9c
 800c82e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800c830:	2b02      	cmp	r3, #2
 800c832:	d117      	bne.n	800c864 <USBH_MSC_Process+0x458>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800c840:	1ad3      	subs	r3, r2, r3
 800c842:	f242 720f 	movw	r2, #9999	@ 0x270f
 800c846:	4293      	cmp	r3, r2
 800c848:	d80c      	bhi.n	800c864 <USBH_MSC_Process+0x458>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c850:	4619      	mov	r1, r3
 800c852:	693a      	ldr	r2, [r7, #16]
 800c854:	2334      	movs	r3, #52	@ 0x34
 800c856:	fb01 f303 	mul.w	r3, r1, r3
 800c85a:	4413      	add	r3, r2
 800c85c:	3390      	adds	r3, #144	@ 0x90
 800c85e:	2202      	movs	r2, #2
 800c860:	701a      	strb	r2, [r3, #0]
                  break;
 800c862:	e066      	b.n	800c932 <USBH_MSC_Process+0x526>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c86a:	4619      	mov	r1, r3
 800c86c:	693a      	ldr	r2, [r7, #16]
 800c86e:	2334      	movs	r3, #52	@ 0x34
 800c870:	fb01 f303 	mul.w	r3, r1, r3
 800c874:	4413      	add	r3, r2
 800c876:	3390      	adds	r3, #144	@ 0x90
 800c878:	2201      	movs	r2, #1
 800c87a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c882:	3301      	adds	r3, #1
 800c884:	b29a      	uxth	r2, r3
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800c88c:	e050      	b.n	800c930 <USBH_MSC_Process+0x524>
            else if (scsi_status == USBH_FAIL)
 800c88e:	7bfb      	ldrb	r3, [r7, #15]
 800c890:	2b02      	cmp	r3, #2
 800c892:	d118      	bne.n	800c8c6 <USBH_MSC_Process+0x4ba>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c89a:	4619      	mov	r1, r3
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	2334      	movs	r3, #52	@ 0x34
 800c8a0:	fb01 f303 	mul.w	r3, r1, r3
 800c8a4:	4413      	add	r3, r2
 800c8a6:	3390      	adds	r3, #144	@ 0x90
 800c8a8:	2208      	movs	r2, #8
 800c8aa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	693a      	ldr	r2, [r7, #16]
 800c8b6:	2334      	movs	r3, #52	@ 0x34
 800c8b8:	fb01 f303 	mul.w	r3, r1, r3
 800c8bc:	4413      	add	r3, r2
 800c8be:	3391      	adds	r3, #145	@ 0x91
 800c8c0:	2202      	movs	r2, #2
 800c8c2:	701a      	strb	r2, [r3, #0]
            break;
 800c8c4:	e034      	b.n	800c930 <USBH_MSC_Process+0x524>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c8c6:	7bfb      	ldrb	r3, [r7, #15]
 800c8c8:	2b04      	cmp	r3, #4
 800c8ca:	d131      	bne.n	800c930 <USBH_MSC_Process+0x524>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	693a      	ldr	r2, [r7, #16]
 800c8d6:	2334      	movs	r3, #52	@ 0x34
 800c8d8:	fb01 f303 	mul.w	r3, r1, r3
 800c8dc:	4413      	add	r3, r2
 800c8de:	3390      	adds	r3, #144	@ 0x90
 800c8e0:	2208      	movs	r2, #8
 800c8e2:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	693a      	ldr	r2, [r7, #16]
 800c8ee:	2334      	movs	r3, #52	@ 0x34
 800c8f0:	fb01 f303 	mul.w	r3, r1, r3
 800c8f4:	4413      	add	r3, r2
 800c8f6:	3391      	adds	r3, #145	@ 0x91
 800c8f8:	2202      	movs	r2, #2
 800c8fa:	701a      	strb	r2, [r3, #0]
            break;
 800c8fc:	e018      	b.n	800c930 <USBH_MSC_Process+0x524>
            MSC_Handle->current_lun++;
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c904:	3301      	adds	r3, #1
 800c906:	b29a      	uxth	r2, r3
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800c90e:	e010      	b.n	800c932 <USBH_MSC_Process+0x526>
        MSC_Handle->current_lun = 0U;
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	2200      	movs	r2, #0
 800c914:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_USER_NOTIFY;
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	220a      	movs	r2, #10
 800c91c:	731a      	strb	r2, [r3, #12]
      break;
 800c91e:	e045      	b.n	800c9ac <USBH_MSC_Process+0x5a0>
            break;
 800c920:	bf00      	nop
 800c922:	e043      	b.n	800c9ac <USBH_MSC_Process+0x5a0>
            break;
 800c924:	bf00      	nop
 800c926:	e041      	b.n	800c9ac <USBH_MSC_Process+0x5a0>
            break;
 800c928:	bf00      	nop
 800c92a:	e03f      	b.n	800c9ac <USBH_MSC_Process+0x5a0>
            break;
 800c92c:	bf00      	nop
 800c92e:	e03d      	b.n	800c9ac <USBH_MSC_Process+0x5a0>
            break;
 800c930:	bf00      	nop
      break;
 800c932:	e03b      	b.n	800c9ac <USBH_MSC_Process+0x5a0>
      if (MSC_Handle->lun < MSC_Handle->max_lun)
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 800c93a:	693a      	ldr	r2, [r7, #16]
 800c93c:	7812      	ldrb	r2, [r2, #0]
 800c93e:	4293      	cmp	r3, r2
 800c940:	d228      	bcs.n	800c994 <USBH_MSC_Process+0x588>
        MSC_Handle->current_lun = MSC_Handle->lun;
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800c954:	4619      	mov	r1, r3
 800c956:	693a      	ldr	r2, [r7, #16]
 800c958:	2334      	movs	r3, #52	@ 0x34
 800c95a:	fb01 f303 	mul.w	r3, r1, r3
 800c95e:	4413      	add	r3, r2
 800c960:	3391      	adds	r3, #145	@ 0x91
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d106      	bne.n	800c976 <USBH_MSC_Process+0x56a>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c96e:	2102      	movs	r1, #2
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	4798      	blx	r3
 800c974:	e005      	b.n	800c982 <USBH_MSC_Process+0x576>
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c97c:	2106      	movs	r1, #6
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	4798      	blx	r3
        MSC_Handle->lun++;
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 800c988:	3301      	adds	r3, #1
 800c98a:	b29a      	uxth	r2, r3
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
      break;
 800c992:	e00b      	b.n	800c9ac <USBH_MSC_Process+0x5a0>
        MSC_Handle->lun = 0U;
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	2200      	movs	r2, #0
 800c998:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
        MSC_Handle->state = MSC_IDLE;
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	731a      	strb	r2, [r3, #12]
      break;
 800c9a2:	e003      	b.n	800c9ac <USBH_MSC_Process+0x5a0>
      error = USBH_OK;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	75fb      	strb	r3, [r7, #23]
      break;
 800c9a8:	e000      	b.n	800c9ac <USBH_MSC_Process+0x5a0>
      break;
 800c9aa:	bf00      	nop
  }
  return error;
 800c9ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3718      	adds	r7, #24
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop

0800c9b8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b083      	sub	sp, #12
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	370c      	adds	r7, #12
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr

0800c9ce <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b088      	sub	sp, #32
 800c9d2:	af02      	add	r7, sp, #8
 800c9d4:	6078      	str	r0, [r7, #4]
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c9e0:	69db      	ldr	r3, [r3, #28]
 800c9e2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800c9ec:	78fb      	ldrb	r3, [r7, #3]
 800c9ee:	693a      	ldr	r2, [r7, #16]
 800c9f0:	2134      	movs	r1, #52	@ 0x34
 800c9f2:	fb01 f303 	mul.w	r3, r1, r3
 800c9f6:	4413      	add	r3, r2
 800c9f8:	3390      	adds	r3, #144	@ 0x90
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	2b07      	cmp	r3, #7
 800c9fe:	d03c      	beq.n	800ca7a <USBH_MSC_RdWrProcess+0xac>
 800ca00:	2b07      	cmp	r3, #7
 800ca02:	f300 80a8 	bgt.w	800cb56 <USBH_MSC_RdWrProcess+0x188>
 800ca06:	2b05      	cmp	r3, #5
 800ca08:	d06c      	beq.n	800cae4 <USBH_MSC_RdWrProcess+0x116>
 800ca0a:	2b06      	cmp	r3, #6
 800ca0c:	f040 80a3 	bne.w	800cb56 <USBH_MSC_RdWrProcess+0x188>
  {
    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800ca10:	78f9      	ldrb	r1, [r7, #3]
 800ca12:	2300      	movs	r3, #0
 800ca14:	9300      	str	r3, [sp, #0]
 800ca16:	2300      	movs	r3, #0
 800ca18:	2200      	movs	r2, #0
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f000 fea7 	bl	800d76e <USBH_MSC_SCSI_Read>
 800ca20:	4603      	mov	r3, r0
 800ca22:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d10b      	bne.n	800ca42 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ca2a:	78fb      	ldrb	r3, [r7, #3]
 800ca2c:	693a      	ldr	r2, [r7, #16]
 800ca2e:	2134      	movs	r1, #52	@ 0x34
 800ca30:	fb01 f303 	mul.w	r3, r1, r3
 800ca34:	4413      	add	r3, r2
 800ca36:	3390      	adds	r3, #144	@ 0x90
 800ca38:	2201      	movs	r2, #1
 800ca3a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ca40:	e08b      	b.n	800cb5a <USBH_MSC_RdWrProcess+0x18c>
      else if (scsi_status == USBH_FAIL)
 800ca42:	7bfb      	ldrb	r3, [r7, #15]
 800ca44:	2b02      	cmp	r3, #2
 800ca46:	d109      	bne.n	800ca5c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800ca48:	78fb      	ldrb	r3, [r7, #3]
 800ca4a:	693a      	ldr	r2, [r7, #16]
 800ca4c:	2134      	movs	r1, #52	@ 0x34
 800ca4e:	fb01 f303 	mul.w	r3, r1, r3
 800ca52:	4413      	add	r3, r2
 800ca54:	3390      	adds	r3, #144	@ 0x90
 800ca56:	2205      	movs	r2, #5
 800ca58:	701a      	strb	r2, [r3, #0]
      break;
 800ca5a:	e07e      	b.n	800cb5a <USBH_MSC_RdWrProcess+0x18c>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ca5c:	7bfb      	ldrb	r3, [r7, #15]
 800ca5e:	2b04      	cmp	r3, #4
 800ca60:	d17b      	bne.n	800cb5a <USBH_MSC_RdWrProcess+0x18c>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ca62:	78fb      	ldrb	r3, [r7, #3]
 800ca64:	693a      	ldr	r2, [r7, #16]
 800ca66:	2134      	movs	r1, #52	@ 0x34
 800ca68:	fb01 f303 	mul.w	r3, r1, r3
 800ca6c:	4413      	add	r3, r2
 800ca6e:	3390      	adds	r3, #144	@ 0x90
 800ca70:	2208      	movs	r2, #8
 800ca72:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ca74:	2302      	movs	r3, #2
 800ca76:	75fb      	strb	r3, [r7, #23]
      break;
 800ca78:	e06f      	b.n	800cb5a <USBH_MSC_RdWrProcess+0x18c>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800ca7a:	78f9      	ldrb	r1, [r7, #3]
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	9300      	str	r3, [sp, #0]
 800ca80:	2300      	movs	r3, #0
 800ca82:	2200      	movs	r2, #0
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fe02 	bl	800d68e <USBH_MSC_SCSI_Write>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800ca8e:	7bfb      	ldrb	r3, [r7, #15]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d10b      	bne.n	800caac <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ca94:	78fb      	ldrb	r3, [r7, #3]
 800ca96:	693a      	ldr	r2, [r7, #16]
 800ca98:	2134      	movs	r1, #52	@ 0x34
 800ca9a:	fb01 f303 	mul.w	r3, r1, r3
 800ca9e:	4413      	add	r3, r2
 800caa0:	3390      	adds	r3, #144	@ 0x90
 800caa2:	2201      	movs	r2, #1
 800caa4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800caa6:	2300      	movs	r3, #0
 800caa8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800caaa:	e058      	b.n	800cb5e <USBH_MSC_RdWrProcess+0x190>
      else if (scsi_status == USBH_FAIL)
 800caac:	7bfb      	ldrb	r3, [r7, #15]
 800caae:	2b02      	cmp	r3, #2
 800cab0:	d109      	bne.n	800cac6 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800cab2:	78fb      	ldrb	r3, [r7, #3]
 800cab4:	693a      	ldr	r2, [r7, #16]
 800cab6:	2134      	movs	r1, #52	@ 0x34
 800cab8:	fb01 f303 	mul.w	r3, r1, r3
 800cabc:	4413      	add	r3, r2
 800cabe:	3390      	adds	r3, #144	@ 0x90
 800cac0:	2205      	movs	r2, #5
 800cac2:	701a      	strb	r2, [r3, #0]
      break;
 800cac4:	e04b      	b.n	800cb5e <USBH_MSC_RdWrProcess+0x190>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800cac6:	7bfb      	ldrb	r3, [r7, #15]
 800cac8:	2b04      	cmp	r3, #4
 800caca:	d148      	bne.n	800cb5e <USBH_MSC_RdWrProcess+0x190>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800cacc:	78fb      	ldrb	r3, [r7, #3]
 800cace:	693a      	ldr	r2, [r7, #16]
 800cad0:	2134      	movs	r1, #52	@ 0x34
 800cad2:	fb01 f303 	mul.w	r3, r1, r3
 800cad6:	4413      	add	r3, r2
 800cad8:	3390      	adds	r3, #144	@ 0x90
 800cada:	2208      	movs	r2, #8
 800cadc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800cade:	2302      	movs	r3, #2
 800cae0:	75fb      	strb	r3, [r7, #23]
      break;
 800cae2:	e03c      	b.n	800cb5e <USBH_MSC_RdWrProcess+0x190>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800cae4:	78fb      	ldrb	r3, [r7, #3]
 800cae6:	2234      	movs	r2, #52	@ 0x34
 800cae8:	fb02 f303 	mul.w	r3, r2, r3
 800caec:	3398      	adds	r3, #152	@ 0x98
 800caee:	693a      	ldr	r2, [r7, #16]
 800caf0:	4413      	add	r3, r2
 800caf2:	1d1a      	adds	r2, r3, #4
 800caf4:	78fb      	ldrb	r3, [r7, #3]
 800caf6:	4619      	mov	r1, r3
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 fd49 	bl	800d590 <USBH_MSC_SCSI_RequestSense>
 800cafe:	4603      	mov	r3, r0
 800cb00:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800cb02:	7bfb      	ldrb	r3, [r7, #15]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d114      	bne.n	800cb32 <USBH_MSC_RdWrProcess+0x164>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800cb08:	78fb      	ldrb	r3, [r7, #3]
 800cb0a:	693a      	ldr	r2, [r7, #16]
 800cb0c:	2134      	movs	r1, #52	@ 0x34
 800cb0e:	fb01 f303 	mul.w	r3, r1, r3
 800cb12:	4413      	add	r3, r2
 800cb14:	3390      	adds	r3, #144	@ 0x90
 800cb16:	2201      	movs	r2, #1
 800cb18:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800cb1a:	78fb      	ldrb	r3, [r7, #3]
 800cb1c:	693a      	ldr	r2, [r7, #16]
 800cb1e:	2134      	movs	r1, #52	@ 0x34
 800cb20:	fb01 f303 	mul.w	r3, r1, r3
 800cb24:	4413      	add	r3, r2
 800cb26:	3391      	adds	r3, #145	@ 0x91
 800cb28:	2202      	movs	r2, #2
 800cb2a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800cb2c:	2302      	movs	r3, #2
 800cb2e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cb30:	e017      	b.n	800cb62 <USBH_MSC_RdWrProcess+0x194>
      else if (scsi_status == USBH_FAIL)
 800cb32:	7bfb      	ldrb	r3, [r7, #15]
 800cb34:	2b02      	cmp	r3, #2
 800cb36:	d014      	beq.n	800cb62 <USBH_MSC_RdWrProcess+0x194>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800cb38:	7bfb      	ldrb	r3, [r7, #15]
 800cb3a:	2b04      	cmp	r3, #4
 800cb3c:	d111      	bne.n	800cb62 <USBH_MSC_RdWrProcess+0x194>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800cb3e:	78fb      	ldrb	r3, [r7, #3]
 800cb40:	693a      	ldr	r2, [r7, #16]
 800cb42:	2134      	movs	r1, #52	@ 0x34
 800cb44:	fb01 f303 	mul.w	r3, r1, r3
 800cb48:	4413      	add	r3, r2
 800cb4a:	3390      	adds	r3, #144	@ 0x90
 800cb4c:	2208      	movs	r2, #8
 800cb4e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800cb50:	2302      	movs	r3, #2
 800cb52:	75fb      	strb	r3, [r7, #23]
      break;
 800cb54:	e005      	b.n	800cb62 <USBH_MSC_RdWrProcess+0x194>

    default:
      break;
 800cb56:	bf00      	nop
 800cb58:	e004      	b.n	800cb64 <USBH_MSC_RdWrProcess+0x196>
      break;
 800cb5a:	bf00      	nop
 800cb5c:	e002      	b.n	800cb64 <USBH_MSC_RdWrProcess+0x196>
      break;
 800cb5e:	bf00      	nop
 800cb60:	e000      	b.n	800cb64 <USBH_MSC_RdWrProcess+0x196>
      break;
 800cb62:	bf00      	nop

  }
  return error;
 800cb64:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3718      	adds	r7, #24
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800cb6e:	b480      	push	{r7}
 800cb70:	b085      	sub	sp, #20
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
 800cb76:	460b      	mov	r3, r1
 800cb78:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cb80:	69db      	ldr	r3, [r3, #28]
 800cb82:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800cb84:	78fb      	ldrb	r3, [r7, #3]
 800cb86:	b29a      	uxth	r2, r3
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	2b0b      	cmp	r3, #11
 800cb96:	d10c      	bne.n	800cbb2 <USBH_MSC_UnitIsReady+0x44>
 800cb98:	78fb      	ldrb	r3, [r7, #3]
 800cb9a:	68ba      	ldr	r2, [r7, #8]
 800cb9c:	2134      	movs	r1, #52	@ 0x34
 800cb9e:	fb01 f303 	mul.w	r3, r1, r3
 800cba2:	4413      	add	r3, r2
 800cba4:	3391      	adds	r3, #145	@ 0x91
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d102      	bne.n	800cbb2 <USBH_MSC_UnitIsReady+0x44>
  {
    res = 1U;
 800cbac:	2301      	movs	r3, #1
 800cbae:	73fb      	strb	r3, [r7, #15]
 800cbb0:	e001      	b.n	800cbb6 <USBH_MSC_UnitIsReady+0x48>
  }
  else
  {
    res = 0U;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800cbb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3714      	adds	r7, #20
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr

0800cbc4 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b086      	sub	sp, #24
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	60f8      	str	r0, [r7, #12]
 800cbcc:	460b      	mov	r3, r1
 800cbce:	607a      	str	r2, [r7, #4]
 800cbd0:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cbd8:	69db      	ldr	r3, [r3, #28]
 800cbda:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800cbdc:	7afb      	ldrb	r3, [r7, #11]
 800cbde:	b29a      	uxth	r2, r3
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if (phost->gState == HOST_CLASS)
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	2b0b      	cmp	r3, #11
 800cbee:	d10d      	bne.n	800cc0c <USBH_MSC_GetLUNInfo+0x48>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800cbf0:	7afb      	ldrb	r3, [r7, #11]
 800cbf2:	2234      	movs	r2, #52	@ 0x34
 800cbf4:	fb02 f303 	mul.w	r3, r2, r3
 800cbf8:	3390      	adds	r3, #144	@ 0x90
 800cbfa:	697a      	ldr	r2, [r7, #20]
 800cbfc:	4413      	add	r3, r2
 800cbfe:	2234      	movs	r2, #52	@ 0x34
 800cc00:	4619      	mov	r1, r3
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f006 fa86 	bl	8013114 <memcpy>
    return USBH_OK;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	e000      	b.n	800cc0e <USBH_MSC_GetLUNInfo+0x4a>
  }
  else
  {
    return USBH_FAIL;
 800cc0c:	2302      	movs	r3, #2
  }
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3718      	adds	r7, #24
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b088      	sub	sp, #32
 800cc1a:	af02      	add	r7, sp, #8
 800cc1c:	60f8      	str	r0, [r7, #12]
 800cc1e:	607a      	str	r2, [r7, #4]
 800cc20:	603b      	str	r3, [r7, #0]
 800cc22:	460b      	mov	r3, r1
 800cc24:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cc2c:	69db      	ldr	r3, [r3, #28]
 800cc2e:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800cc30:	7afb      	ldrb	r3, [r7, #11]
 800cc32:	b29a      	uxth	r2, r3
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d00e      	beq.n	800cc64 <USBH_MSC_Read+0x4e>
      (phost->gState != HOST_CLASS) ||
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800cc4c:	2b0b      	cmp	r3, #11
 800cc4e:	d109      	bne.n	800cc64 <USBH_MSC_Read+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800cc50:	7afb      	ldrb	r3, [r7, #11]
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	2134      	movs	r1, #52	@ 0x34
 800cc56:	fb01 f303 	mul.w	r3, r1, r3
 800cc5a:	4413      	add	r3, r2
 800cc5c:	3390      	adds	r3, #144	@ 0x90
 800cc5e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	d001      	beq.n	800cc68 <USBH_MSC_Read+0x52>
  {
    return  USBH_FAIL;
 800cc64:	2302      	movs	r3, #2
 800cc66:	e032      	b.n	800ccce <USBH_MSC_Read+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_READ;
 800cc68:	7afb      	ldrb	r3, [r7, #11]
 800cc6a:	697a      	ldr	r2, [r7, #20]
 800cc6c:	2134      	movs	r1, #52	@ 0x34
 800cc6e:	fb01 f303 	mul.w	r3, r1, r3
 800cc72:	4413      	add	r3, r2
 800cc74:	3390      	adds	r3, #144	@ 0x90
 800cc76:	2206      	movs	r2, #6
 800cc78:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800cc7a:	7af9      	ldrb	r1, [r7, #11]
 800cc7c:	6a3b      	ldr	r3, [r7, #32]
 800cc7e:	9300      	str	r3, [sp, #0]
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	68f8      	ldr	r0, [r7, #12]
 800cc86:	f000 fd72 	bl	800d76e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800cc90:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800cc92:	e013      	b.n	800ccbc <USBH_MSC_Read+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	1ad2      	subs	r2, r2, r3
 800cc9e:	6a3b      	ldr	r3, [r7, #32]
 800cca0:	f242 7110 	movw	r1, #10000	@ 0x2710
 800cca4:	fb01 f303 	mul.w	r3, r1, r3
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d805      	bhi.n	800ccb8 <USBH_MSC_Read+0xa2>
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800ccb2:	b2db      	uxtb	r3, r3
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d101      	bne.n	800ccbc <USBH_MSC_Read+0xa6>
    {
      return USBH_FAIL;
 800ccb8:	2302      	movs	r3, #2
 800ccba:	e008      	b.n	800ccce <USBH_MSC_Read+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ccbc:	7afb      	ldrb	r3, [r7, #11]
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f7ff fe84 	bl	800c9ce <USBH_MSC_RdWrProcess>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d0e3      	beq.n	800cc94 <USBH_MSC_Read+0x7e>
    }
  }

  return USBH_OK;
 800cccc:	2300      	movs	r3, #0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3718      	adds	r7, #24
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b088      	sub	sp, #32
 800ccda:	af02      	add	r7, sp, #8
 800ccdc:	60f8      	str	r0, [r7, #12]
 800ccde:	607a      	str	r2, [r7, #4]
 800cce0:	603b      	str	r3, [r7, #0]
 800cce2:	460b      	mov	r3, r1
 800cce4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ccec:	69db      	ldr	r3, [r3, #28]
 800ccee:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800ccf0:	7afb      	ldrb	r3, [r7, #11]
 800ccf2:	b29a      	uxth	r2, r3
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d00e      	beq.n	800cd24 <USBH_MSC_Write+0x4e>
      (phost->gState != HOST_CLASS) ||
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800cd0c:	2b0b      	cmp	r3, #11
 800cd0e:	d109      	bne.n	800cd24 <USBH_MSC_Write+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800cd10:	7afb      	ldrb	r3, [r7, #11]
 800cd12:	697a      	ldr	r2, [r7, #20]
 800cd14:	2134      	movs	r1, #52	@ 0x34
 800cd16:	fb01 f303 	mul.w	r3, r1, r3
 800cd1a:	4413      	add	r3, r2
 800cd1c:	3390      	adds	r3, #144	@ 0x90
 800cd1e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d001      	beq.n	800cd28 <USBH_MSC_Write+0x52>
  {
    return  USBH_FAIL;
 800cd24:	2302      	movs	r3, #2
 800cd26:	e032      	b.n	800cd8e <USBH_MSC_Write+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_WRITE;
 800cd28:	7afb      	ldrb	r3, [r7, #11]
 800cd2a:	697a      	ldr	r2, [r7, #20]
 800cd2c:	2134      	movs	r1, #52	@ 0x34
 800cd2e:	fb01 f303 	mul.w	r3, r1, r3
 800cd32:	4413      	add	r3, r2
 800cd34:	3390      	adds	r3, #144	@ 0x90
 800cd36:	2207      	movs	r2, #7
 800cd38:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800cd3a:	7af9      	ldrb	r1, [r7, #11]
 800cd3c:	6a3b      	ldr	r3, [r7, #32]
 800cd3e:	9300      	str	r3, [sp, #0]
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	68f8      	ldr	r0, [r7, #12]
 800cd46:	f000 fca2 	bl	800d68e <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800cd50:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800cd52:	e013      	b.n	800cd7c <USBH_MSC_Write+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	1ad2      	subs	r2, r2, r3
 800cd5e:	6a3b      	ldr	r3, [r7, #32]
 800cd60:	f242 7110 	movw	r1, #10000	@ 0x2710
 800cd64:	fb01 f303 	mul.w	r3, r1, r3
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d805      	bhi.n	800cd78 <USBH_MSC_Write+0xa2>
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d101      	bne.n	800cd7c <USBH_MSC_Write+0xa6>
    {
      return USBH_FAIL;
 800cd78:	2302      	movs	r3, #2
 800cd7a:	e008      	b.n	800cd8e <USBH_MSC_Write+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800cd7c:	7afb      	ldrb	r3, [r7, #11]
 800cd7e:	4619      	mov	r1, r3
 800cd80:	68f8      	ldr	r0, [r7, #12]
 800cd82:	f7ff fe24 	bl	800c9ce <USBH_MSC_RdWrProcess>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d0e3      	beq.n	800cd54 <USBH_MSC_Write+0x7e>
    }
  }

  return USBH_OK;
 800cd8c:	2300      	movs	r3, #0
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3718      	adds	r7, #24
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b082      	sub	sp, #8
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2221      	movs	r2, #33	@ 0x21
 800cda2:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	22ff      	movs	r2, #255	@ 0xff
 800cda8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2200      	movs	r2, #0
 800cdae:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	2100      	movs	r1, #0
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f001 ff44 	bl	800ec4e <USBH_CtlReq>
 800cdc6:	4603      	mov	r3, r0
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3708      	adds	r7, #8
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	22a1      	movs	r2, #161	@ 0xa1
 800cdde:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	22fe      	movs	r2, #254	@ 0xfe
 800cde4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2200      	movs	r2, #0
 800cdea:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	6839      	ldr	r1, [r7, #0]
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f001 ff26 	bl	800ec4e <USBH_CtlReq>
 800ce02:	4603      	mov	r3, r0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3708      	adds	r7, #8
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b085      	sub	sp, #20
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ce1a:	69db      	ldr	r3, [r3, #28]
 800ce1c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	4a09      	ldr	r2, [pc, #36]	@ (800ce48 <USBH_MSC_BOT_Init+0x3c>)
 800ce22:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	4a09      	ldr	r2, [pc, #36]	@ (800ce4c <USBH_MSC_BOT_Init+0x40>)
 800ce28:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2201      	movs	r2, #1
 800ce36:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 800ce3a:	2300      	movs	r3, #0
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3714      	adds	r7, #20
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr
 800ce48:	43425355 	.word	0x43425355
 800ce4c:	20304050 	.word	0x20304050

0800ce50 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b088      	sub	sp, #32
 800ce54:	af02      	add	r7, sp, #8
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	460b      	mov	r3, r1
 800ce5a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800ce60:	2301      	movs	r3, #1
 800ce62:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800ce64:	2301      	movs	r3, #1
 800ce66:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ce72:	69db      	ldr	r3, [r3, #28]
 800ce74:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800ce76:	2300      	movs	r3, #0
 800ce78:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ce80:	3b01      	subs	r3, #1
 800ce82:	2b0a      	cmp	r3, #10
 800ce84:	f200 819e 	bhi.w	800d1c4 <USBH_MSC_BOT_Process+0x374>
 800ce88:	a201      	add	r2, pc, #4	@ (adr r2, 800ce90 <USBH_MSC_BOT_Process+0x40>)
 800ce8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce8e:	bf00      	nop
 800ce90:	0800cebd 	.word	0x0800cebd
 800ce94:	0800cee5 	.word	0x0800cee5
 800ce98:	0800cf4f 	.word	0x0800cf4f
 800ce9c:	0800cf6d 	.word	0x0800cf6d
 800cea0:	0800cff1 	.word	0x0800cff1
 800cea4:	0800d013 	.word	0x0800d013
 800cea8:	0800d0ab 	.word	0x0800d0ab
 800ceac:	0800d0c7 	.word	0x0800d0c7
 800ceb0:	0800d119 	.word	0x0800d119
 800ceb4:	0800d149 	.word	0x0800d149
 800ceb8:	0800d1ab 	.word	0x0800d1ab
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	78fa      	ldrb	r2, [r7, #3]
 800cec0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	2202      	movs	r2, #2
 800cec8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	795b      	ldrb	r3, [r3, #5]
 800ced6:	2201      	movs	r2, #1
 800ced8:	9200      	str	r2, [sp, #0]
 800ceda:	221f      	movs	r2, #31
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f002 f8c4 	bl	800f06a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800cee2:	e17e      	b.n	800d1e2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	795b      	ldrb	r3, [r3, #5]
 800cee8:	4619      	mov	r1, r3
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f005 feda 	bl	8012ca4 <USBH_LL_GetURBState>
 800cef0:	4603      	mov	r3, r0
 800cef2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800cef4:	7d3b      	ldrb	r3, [r7, #20]
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	d118      	bne.n	800cf2c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d00f      	beq.n	800cf22 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800cf08:	b25b      	sxtb	r3, r3
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	da04      	bge.n	800cf18 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	2203      	movs	r2, #3
 800cf12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cf16:	e157      	b.n	800d1c8 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	2205      	movs	r2, #5
 800cf1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800cf20:	e152      	b.n	800d1c8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	2207      	movs	r2, #7
 800cf26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800cf2a:	e14d      	b.n	800d1c8 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cf2c:	7d3b      	ldrb	r3, [r7, #20]
 800cf2e:	2b02      	cmp	r3, #2
 800cf30:	d104      	bne.n	800cf3c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	2201      	movs	r2, #1
 800cf36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800cf3a:	e145      	b.n	800d1c8 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800cf3c:	7d3b      	ldrb	r3, [r7, #20]
 800cf3e:	2b05      	cmp	r3, #5
 800cf40:	f040 8142 	bne.w	800d1c8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_ERROR_OUT;
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	220a      	movs	r2, #10
 800cf48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800cf4c:	e13c      	b.n	800d1c8 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	895a      	ldrh	r2, [r3, #10]
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	791b      	ldrb	r3, [r3, #4]
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f002 f8a9 	bl	800f0b4 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	2204      	movs	r2, #4
 800cf66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 800cf6a:	e13a      	b.n	800d1e2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	791b      	ldrb	r3, [r3, #4]
 800cf70:	4619      	mov	r1, r3
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f005 fe96 	bl	8012ca4 <USBH_LL_GetURBState>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800cf7c:	7d3b      	ldrb	r3, [r7, #20]
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d12d      	bne.n	800cfde <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf86:	693a      	ldr	r2, [r7, #16]
 800cf88:	8952      	ldrh	r2, [r2, #10]
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d910      	bls.n	800cfb0 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cf94:	693a      	ldr	r2, [r7, #16]
 800cf96:	8952      	ldrh	r2, [r2, #10]
 800cf98:	441a      	add	r2, r3
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfa4:	693a      	ldr	r2, [r7, #16]
 800cfa6:	8952      	ldrh	r2, [r2, #10]
 800cfa8:	1a9a      	subs	r2, r3, r2
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	65da      	str	r2, [r3, #92]	@ 0x5c
 800cfae:	e002      	b.n	800cfb6 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d00a      	beq.n	800cfd4 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	895a      	ldrh	r2, [r3, #10]
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	791b      	ldrb	r3, [r3, #4]
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f002 f871 	bl	800f0b4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800cfd2:	e0fb      	b.n	800d1cc <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	2207      	movs	r2, #7
 800cfd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800cfdc:	e0f6      	b.n	800d1cc <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800cfde:	7d3b      	ldrb	r3, [r7, #20]
 800cfe0:	2b05      	cmp	r3, #5
 800cfe2:	f040 80f3 	bne.w	800d1cc <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	2209      	movs	r2, #9
 800cfea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800cfee:	e0ed      	b.n	800d1cc <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	891a      	ldrh	r2, [r3, #8]
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	795b      	ldrb	r3, [r3, #5]
 800cffe:	2001      	movs	r0, #1
 800d000:	9000      	str	r0, [sp, #0]
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f002 f831 	bl	800f06a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	2206      	movs	r2, #6
 800d00c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800d010:	e0e7      	b.n	800d1e2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	795b      	ldrb	r3, [r3, #5]
 800d016:	4619      	mov	r1, r3
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f005 fe43 	bl	8012ca4 <USBH_LL_GetURBState>
 800d01e:	4603      	mov	r3, r0
 800d020:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800d022:	7d3b      	ldrb	r3, [r7, #20]
 800d024:	2b01      	cmp	r3, #1
 800d026:	d12f      	bne.n	800d088 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d02c:	693a      	ldr	r2, [r7, #16]
 800d02e:	8912      	ldrh	r2, [r2, #8]
 800d030:	4293      	cmp	r3, r2
 800d032:	d910      	bls.n	800d056 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d03a:	693a      	ldr	r2, [r7, #16]
 800d03c:	8912      	ldrh	r2, [r2, #8]
 800d03e:	441a      	add	r2, r3
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d04a:	693a      	ldr	r2, [r7, #16]
 800d04c:	8912      	ldrh	r2, [r2, #8]
 800d04e:	1a9a      	subs	r2, r3, r2
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d054:	e002      	b.n	800d05c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	2200      	movs	r2, #0
 800d05a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d060:	2b00      	cmp	r3, #0
 800d062:	d00c      	beq.n	800d07e <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	891a      	ldrh	r2, [r3, #8]
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	795b      	ldrb	r3, [r3, #5]
 800d072:	2001      	movs	r0, #1
 800d074:	9000      	str	r0, [sp, #0]
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f001 fff7 	bl	800f06a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800d07c:	e0a8      	b.n	800d1d0 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	2207      	movs	r2, #7
 800d082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800d086:	e0a3      	b.n	800d1d0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d088:	7d3b      	ldrb	r3, [r7, #20]
 800d08a:	2b02      	cmp	r3, #2
 800d08c:	d104      	bne.n	800d098 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state = BOT_DATA_OUT;
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	2205      	movs	r2, #5
 800d092:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800d096:	e09b      	b.n	800d1d0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800d098:	7d3b      	ldrb	r3, [r7, #20]
 800d09a:	2b05      	cmp	r3, #5
 800d09c:	f040 8098 	bne.w	800d1d0 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state = BOT_ERROR_OUT;
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	220a      	movs	r2, #10
 800d0a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800d0a8:	e092      	b.n	800d1d0 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	791b      	ldrb	r3, [r3, #4]
 800d0b4:	220d      	movs	r2, #13
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f001 fffc 	bl	800f0b4 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_RECEIVE_CSW_WAIT;
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	2208      	movs	r2, #8
 800d0c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800d0c4:	e08d      	b.n	800d1e2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	791b      	ldrb	r3, [r3, #4]
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f005 fde9 	bl	8012ca4 <USBH_LL_GetURBState>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800d0d6:	7d3b      	ldrb	r3, [r7, #20]
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d115      	bne.n	800d108 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 f8a9 	bl	800d244 <USBH_MSC_DecodeCSW>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800d0f6:	7d7b      	ldrb	r3, [r7, #21]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d102      	bne.n	800d102 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800d100:	e068      	b.n	800d1d4 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800d102:	2302      	movs	r3, #2
 800d104:	75fb      	strb	r3, [r7, #23]
      break;
 800d106:	e065      	b.n	800d1d4 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800d108:	7d3b      	ldrb	r3, [r7, #20]
 800d10a:	2b05      	cmp	r3, #5
 800d10c:	d162      	bne.n	800d1d4 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	2209      	movs	r2, #9
 800d112:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800d116:	e05d      	b.n	800d1d4 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800d118:	78fb      	ldrb	r3, [r7, #3]
 800d11a:	2200      	movs	r2, #0
 800d11c:	4619      	mov	r1, r3
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 f864 	bl	800d1ec <USBH_MSC_BOT_Abort>
 800d124:	4603      	mov	r3, r0
 800d126:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800d128:	7dbb      	ldrb	r3, [r7, #22]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d104      	bne.n	800d138 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	2207      	movs	r2, #7
 800d132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800d136:	e04f      	b.n	800d1d8 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800d138:	7dbb      	ldrb	r3, [r7, #22]
 800d13a:	2b04      	cmp	r3, #4
 800d13c:	d14c      	bne.n	800d1d8 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	220b      	movs	r2, #11
 800d142:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800d146:	e047      	b.n	800d1d8 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800d148:	78fb      	ldrb	r3, [r7, #3]
 800d14a:	2201      	movs	r2, #1
 800d14c:	4619      	mov	r1, r3
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 f84c 	bl	800d1ec <USBH_MSC_BOT_Abort>
 800d154:	4603      	mov	r3, r0
 800d156:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800d158:	7dbb      	ldrb	r3, [r7, #22]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d11d      	bne.n	800d19a <USBH_MSC_BOT_Process+0x34a>
      {
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	795b      	ldrb	r3, [r3, #5]
 800d162:	4619      	mov	r1, r3
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f005 fdfa 	bl	8012d5e <USBH_LL_GetToggle>
 800d16a:	4603      	mov	r3, r0
 800d16c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	7959      	ldrb	r1, [r3, #5]
 800d172:	7bfb      	ldrb	r3, [r7, #15]
 800d174:	f1c3 0301 	rsb	r3, r3, #1
 800d178:	b2db      	uxtb	r3, r3
 800d17a:	461a      	mov	r2, r3
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f005 fdbb 	bl	8012cf8 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	791b      	ldrb	r3, [r3, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	4619      	mov	r1, r3
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f005 fdb4 	bl	8012cf8 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	2209      	movs	r2, #9
 800d194:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800d198:	e020      	b.n	800d1dc <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800d19a:	7dbb      	ldrb	r3, [r7, #22]
 800d19c:	2b04      	cmp	r3, #4
 800d19e:	d11d      	bne.n	800d1dc <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	220b      	movs	r2, #11
 800d1a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800d1a8:	e018      	b.n	800d1dc <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f7ff fdf3 	bl	800cd96 <USBH_MSC_BOT_REQ_Reset>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800d1b4:	7dfb      	ldrb	r3, [r7, #23]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d112      	bne.n	800d1e0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	2201      	movs	r2, #1
 800d1be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 800d1c2:	e00d      	b.n	800d1e0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800d1c4:	bf00      	nop
 800d1c6:	e00c      	b.n	800d1e2 <USBH_MSC_BOT_Process+0x392>
      break;
 800d1c8:	bf00      	nop
 800d1ca:	e00a      	b.n	800d1e2 <USBH_MSC_BOT_Process+0x392>
      break;
 800d1cc:	bf00      	nop
 800d1ce:	e008      	b.n	800d1e2 <USBH_MSC_BOT_Process+0x392>
      break;
 800d1d0:	bf00      	nop
 800d1d2:	e006      	b.n	800d1e2 <USBH_MSC_BOT_Process+0x392>
      break;
 800d1d4:	bf00      	nop
 800d1d6:	e004      	b.n	800d1e2 <USBH_MSC_BOT_Process+0x392>
      break;
 800d1d8:	bf00      	nop
 800d1da:	e002      	b.n	800d1e2 <USBH_MSC_BOT_Process+0x392>
      break;
 800d1dc:	bf00      	nop
 800d1de:	e000      	b.n	800d1e2 <USBH_MSC_BOT_Process+0x392>
      break;
 800d1e0:	bf00      	nop
  }
  return status;
 800d1e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3718      	adds	r7, #24
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	70fb      	strb	r3, [r7, #3]
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800d1fc:	2302      	movs	r3, #2
 800d1fe:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d206:	69db      	ldr	r3, [r3, #28]
 800d208:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800d20a:	78bb      	ldrb	r3, [r7, #2]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d002      	beq.n	800d216 <USBH_MSC_BOT_Abort+0x2a>
 800d210:	2b01      	cmp	r3, #1
 800d212:	d009      	beq.n	800d228 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800d214:	e011      	b.n	800d23a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	79db      	ldrb	r3, [r3, #7]
 800d21a:	4619      	mov	r1, r3
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f001 f9e1 	bl	800e5e4 <USBH_ClrFeature>
 800d222:	4603      	mov	r3, r0
 800d224:	73fb      	strb	r3, [r7, #15]
      break;
 800d226:	e008      	b.n	800d23a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	799b      	ldrb	r3, [r3, #6]
 800d22c:	4619      	mov	r1, r3
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f001 f9d8 	bl	800e5e4 <USBH_ClrFeature>
 800d234:	4603      	mov	r3, r0
 800d236:	73fb      	strb	r3, [r7, #15]
      break;
 800d238:	bf00      	nop
  }
  return status;
 800d23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d252:	69db      	ldr	r3, [r3, #28]
 800d254:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800d256:	2301      	movs	r3, #1
 800d258:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	791b      	ldrb	r3, [r3, #4]
 800d25e:	4619      	mov	r1, r3
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f005 fc8d 	bl	8012b80 <USBH_LL_GetLastXferSize>
 800d266:	4603      	mov	r3, r0
 800d268:	2b0d      	cmp	r3, #13
 800d26a:	d002      	beq.n	800d272 <USBH_MSC_DecodeCSW+0x2e>
    (9) Ho > Dn (Host expects to send data to the device,
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/

    status = BOT_CSW_PHASE_ERROR;
 800d26c:	2302      	movs	r3, #2
 800d26e:	73fb      	strb	r3, [r7, #15]
 800d270:	e024      	b.n	800d2bc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d276:	4a14      	ldr	r2, [pc, #80]	@ (800d2c8 <USBH_MSC_DecodeCSW+0x84>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d11d      	bne.n	800d2b8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d284:	429a      	cmp	r2, r3
 800d286:	d119      	bne.n	800d2bc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d102      	bne.n	800d298 <USBH_MSC_DecodeCSW+0x54>
          Device intends to send data to the host)
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_CMD_PASSED;
 800d292:	2300      	movs	r3, #0
 800d294:	73fb      	strb	r3, [r7, #15]
 800d296:	e011      	b.n	800d2bc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	d102      	bne.n	800d2a8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	73fb      	strb	r3, [r7, #15]
 800d2a6:	e009      	b.n	800d2bc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d2ae:	2b02      	cmp	r3, #2
 800d2b0:	d104      	bne.n	800d2bc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800d2b2:	2302      	movs	r3, #2
 800d2b4:	73fb      	strb	r3, [r7, #15]
 800d2b6:	e001      	b.n	800d2bc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800d2b8:	2302      	movs	r3, #2
 800d2ba:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800d2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3710      	adds	r7, #16
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	53425355 	.word	0x53425355

0800d2cc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b084      	sub	sp, #16
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef error = USBH_FAIL;
 800d2d8:	2302      	movs	r3, #2
 800d2da:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d2e2:	69db      	ldr	r3, [r3, #28]
 800d2e4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d002      	beq.n	800d2f6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800d2f0:	2b02      	cmp	r3, #2
 800d2f2:	d021      	beq.n	800d338 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800d2f4:	e028      	b.n	800d348 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	2200      	movs	r2, #0
 800d300:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	220a      	movs	r2, #10
 800d308:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	3363      	adds	r3, #99	@ 0x63
 800d310:	2210      	movs	r2, #16
 800d312:	2100      	movs	r1, #0
 800d314:	4618      	mov	r0, r3
 800d316:	f005 fe87 	bl	8013028 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_TEST_UNIT_READY;
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	2200      	movs	r2, #0
 800d31e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	2201      	movs	r2, #1
 800d326:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	2202      	movs	r2, #2
 800d32e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 800d332:	2301      	movs	r3, #1
 800d334:	73fb      	strb	r3, [r7, #15]
      break;
 800d336:	e007      	b.n	800d348 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d338:	78fb      	ldrb	r3, [r7, #3]
 800d33a:	4619      	mov	r1, r3
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f7ff fd87 	bl	800ce50 <USBH_MSC_BOT_Process>
 800d342:	4603      	mov	r3, r0
 800d344:	73fb      	strb	r3, [r7, #15]
      break;
 800d346:	bf00      	nop
  }

  return error;
 800d348:	7bfb      	ldrb	r3, [r7, #15]
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3710      	adds	r7, #16
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}

0800d352 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800d352:	b580      	push	{r7, lr}
 800d354:	b086      	sub	sp, #24
 800d356:	af00      	add	r7, sp, #0
 800d358:	60f8      	str	r0, [r7, #12]
 800d35a:	460b      	mov	r3, r1
 800d35c:	607a      	str	r2, [r7, #4]
 800d35e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_BUSY;
 800d360:	2301      	movs	r3, #1
 800d362:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d36a:	69db      	ldr	r3, [r3, #28]
 800d36c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800d374:	2b01      	cmp	r3, #1
 800d376:	d002      	beq.n	800d37e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800d378:	2b02      	cmp	r3, #2
 800d37a:	d027      	beq.n	800d3cc <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800d37c:	e05e      	b.n	800d43c <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	2208      	movs	r2, #8
 800d382:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	2280      	movs	r2, #128	@ 0x80
 800d388:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	220a      	movs	r2, #10
 800d390:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	3363      	adds	r3, #99	@ 0x63
 800d398:	2210      	movs	r2, #16
 800d39a:	2100      	movs	r1, #0
 800d39c:	4618      	mov	r0, r3
 800d39e:	f005 fe43 	bl	8013028 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	2225      	movs	r2, #37	@ 0x25
 800d3a6:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	2202      	movs	r2, #2
 800d3b6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	f103 0210 	add.w	r2, r3, #16
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	75fb      	strb	r3, [r7, #23]
      break;
 800d3ca:	e037      	b.n	800d43c <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d3cc:	7afb      	ldrb	r3, [r7, #11]
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	68f8      	ldr	r0, [r7, #12]
 800d3d2:	f7ff fd3d 	bl	800ce50 <USBH_MSC_BOT_Process>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800d3da:	7dfb      	ldrb	r3, [r7, #23]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d12c      	bne.n	800d43a <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d3e6:	3303      	adds	r3, #3
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d3f2:	3302      	adds	r3, #2
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	021b      	lsls	r3, r3, #8
 800d3f8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d400:	3301      	adds	r3, #1
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800d406:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	061b      	lsls	r3, r3, #24
 800d412:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d41e:	3307      	adds	r3, #7
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	461a      	mov	r2, r3
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d42a:	3306      	adds	r3, #6
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	021b      	lsls	r3, r3, #8
 800d430:	b29b      	uxth	r3, r3
 800d432:	4313      	orrs	r3, r2
 800d434:	b29a      	uxth	r2, r3
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	809a      	strh	r2, [r3, #4]
      break;
 800d43a:	bf00      	nop
  }

  return error;
 800d43c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3718      	adds	r7, #24
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}

0800d446 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800d446:	b580      	push	{r7, lr}
 800d448:	b086      	sub	sp, #24
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	60f8      	str	r0, [r7, #12]
 800d44e:	460b      	mov	r3, r1
 800d450:	607a      	str	r2, [r7, #4]
 800d452:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800d454:	2302      	movs	r3, #2
 800d456:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d45e:	69db      	ldr	r3, [r3, #28]
 800d460:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d002      	beq.n	800d472 <USBH_MSC_SCSI_Inquiry+0x2c>
 800d46c:	2b02      	cmp	r3, #2
 800d46e:	d03d      	beq.n	800d4ec <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800d470:	e089      	b.n	800d586 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	2224      	movs	r2, #36	@ 0x24
 800d476:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	2280      	movs	r2, #128	@ 0x80
 800d47c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	220a      	movs	r2, #10
 800d484:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	3363      	adds	r3, #99	@ 0x63
 800d48c:	220a      	movs	r2, #10
 800d48e:	2100      	movs	r1, #0
 800d490:	4618      	mov	r0, r3
 800d492:	f005 fdc9 	bl	8013028 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_INQUIRY;
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	2212      	movs	r2, #18
 800d49a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 800d49e:	7afb      	ldrb	r3, [r7, #11]
 800d4a0:	015b      	lsls	r3, r3, #5
 800d4a2:	b2da      	uxtb	r2, r3
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = 0x24U;
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	2224      	movs	r2, #36	@ 0x24
 800d4be:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	2202      	movs	r2, #2
 800d4d6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	f103 0210 	add.w	r2, r3, #16
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	75fb      	strb	r3, [r7, #23]
      break;
 800d4ea:	e04c      	b.n	800d586 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d4ec:	7afb      	ldrb	r3, [r7, #11]
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	f7ff fcad 	bl	800ce50 <USBH_MSC_BOT_Process>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800d4fa:	7dfb      	ldrb	r3, [r7, #23]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d141      	bne.n	800d584 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800d500:	2222      	movs	r2, #34	@ 0x22
 800d502:	2100      	movs	r1, #0
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f005 fd8f 	bl	8013028 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	f003 031f 	and.w	r3, r3, #31
 800d516:	b2da      	uxtb	r2, r3
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	095b      	lsrs	r3, r3, #5
 800d526:	b2da      	uxtb	r2, r3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d532:	3301      	adds	r3, #1
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	b25b      	sxtb	r3, r3
 800d538:	2b00      	cmp	r3, #0
 800d53a:	da03      	bge.n	800d544 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2201      	movs	r2, #1
 800d540:	709a      	strb	r2, [r3, #2]
 800d542:	e002      	b.n	800d54a <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	1cd8      	adds	r0, r3, #3
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d554:	3308      	adds	r3, #8
 800d556:	2208      	movs	r2, #8
 800d558:	4619      	mov	r1, r3
 800d55a:	f005 fddb 	bl	8013114 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f103 000c 	add.w	r0, r3, #12
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d56a:	3310      	adds	r3, #16
 800d56c:	2210      	movs	r2, #16
 800d56e:	4619      	mov	r1, r3
 800d570:	f005 fdd0 	bl	8013114 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	331d      	adds	r3, #29
 800d578:	693a      	ldr	r2, [r7, #16]
 800d57a:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800d57e:	3220      	adds	r2, #32
 800d580:	6812      	ldr	r2, [r2, #0]
 800d582:	601a      	str	r2, [r3, #0]
      break;
 800d584:	bf00      	nop
  }

  return error;
 800d586:	7dfb      	ldrb	r3, [r7, #23]
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3718      	adds	r7, #24
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b086      	sub	sp, #24
 800d594:	af00      	add	r7, sp, #0
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	460b      	mov	r3, r1
 800d59a:	607a      	str	r2, [r7, #4]
 800d59c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800d59e:	2302      	movs	r3, #2
 800d5a0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d5a8:	69db      	ldr	r3, [r3, #28]
 800d5aa:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d002      	beq.n	800d5bc <USBH_MSC_SCSI_RequestSense+0x2c>
 800d5b6:	2b02      	cmp	r3, #2
 800d5b8:	d03d      	beq.n	800d636 <USBH_MSC_SCSI_RequestSense+0xa6>

      }
      break;

    default:
      break;
 800d5ba:	e063      	b.n	800d684 <USBH_MSC_SCSI_RequestSense+0xf4>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	220e      	movs	r2, #14
 800d5c0:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	2280      	movs	r2, #128	@ 0x80
 800d5c6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	220a      	movs	r2, #10
 800d5ce:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	3363      	adds	r3, #99	@ 0x63
 800d5d6:	2210      	movs	r2, #16
 800d5d8:	2100      	movs	r1, #0
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f005 fd24 	bl	8013028 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_REQUEST_SENSE;
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	2203      	movs	r2, #3
 800d5e4:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 800d5e8:	7afb      	ldrb	r3, [r7, #11]
 800d5ea:	015b      	lsls	r3, r3, #5
 800d5ec:	b2da      	uxtb	r2, r3
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	2200      	movs	r2, #0
 800d600:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = DATA_LEN_REQUEST_SENSE;
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	220e      	movs	r2, #14
 800d608:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	2200      	movs	r2, #0
 800d610:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	2201      	movs	r2, #1
 800d618:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	2202      	movs	r2, #2
 800d620:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	f103 0210 	add.w	r2, r3, #16
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800d630:	2301      	movs	r3, #1
 800d632:	75fb      	strb	r3, [r7, #23]
      break;
 800d634:	e026      	b.n	800d684 <USBH_MSC_SCSI_RequestSense+0xf4>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d636:	7afb      	ldrb	r3, [r7, #11]
 800d638:	4619      	mov	r1, r3
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	f7ff fc08 	bl	800ce50 <USBH_MSC_BOT_Process>
 800d640:	4603      	mov	r3, r0
 800d642:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800d644:	7dfb      	ldrb	r3, [r7, #23]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d11b      	bne.n	800d682 <USBH_MSC_SCSI_RequestSense+0xf2>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d650:	3302      	adds	r3, #2
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	f003 030f 	and.w	r3, r3, #15
 800d658:	b2da      	uxtb	r2, r3
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d664:	7b1a      	ldrb	r2, [r3, #12]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d670:	7b5a      	ldrb	r2, [r3, #13]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	709a      	strb	r2, [r3, #2]
        if (sense_data->asc == SCSI_ASC_MEDIUM_NOT_PRESENT)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	785b      	ldrb	r3, [r3, #1]
 800d67a:	2b3a      	cmp	r3, #58	@ 0x3a
 800d67c:	d101      	bne.n	800d682 <USBH_MSC_SCSI_RequestSense+0xf2>
          error = USBH_UNRECOVERED_ERROR;
 800d67e:	2304      	movs	r3, #4
 800d680:	75fb      	strb	r3, [r7, #23]
      break;
 800d682:	bf00      	nop
  }

  return error;
 800d684:	7dfb      	ldrb	r3, [r7, #23]
}
 800d686:	4618      	mov	r0, r3
 800d688:	3718      	adds	r7, #24
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}

0800d68e <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800d68e:	b580      	push	{r7, lr}
 800d690:	b086      	sub	sp, #24
 800d692:	af00      	add	r7, sp, #0
 800d694:	60f8      	str	r0, [r7, #12]
 800d696:	607a      	str	r2, [r7, #4]
 800d698:	603b      	str	r3, [r7, #0]
 800d69a:	460b      	mov	r3, r1
 800d69c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800d69e:	2302      	movs	r3, #2
 800d6a0:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d6a8:	69db      	ldr	r3, [r3, #28]
 800d6aa:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d002      	beq.n	800d6bc <USBH_MSC_SCSI_Write+0x2e>
 800d6b6:	2b02      	cmp	r3, #2
 800d6b8:	d04c      	beq.n	800d754 <USBH_MSC_SCSI_Write+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800d6ba:	e053      	b.n	800d764 <USBH_MSC_SCSI_Write+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 800d6bc:	7afb      	ldrb	r3, [r7, #11]
 800d6be:	693a      	ldr	r2, [r7, #16]
 800d6c0:	2134      	movs	r1, #52	@ 0x34
 800d6c2:	fb01 f303 	mul.w	r3, r1, r3
 800d6c6:	4413      	add	r3, r2
 800d6c8:	3398      	adds	r3, #152	@ 0x98
 800d6ca:	881b      	ldrh	r3, [r3, #0]
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	6a3b      	ldr	r3, [r7, #32]
 800d6d0:	fb03 f202 	mul.w	r2, r3, r2
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	220a      	movs	r2, #10
 800d6e4:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	3363      	adds	r3, #99	@ 0x63
 800d6ec:	2210      	movs	r2, #16
 800d6ee:	2100      	movs	r1, #0
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f005 fc99 	bl	8013028 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_WRITE10;
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	222a      	movs	r2, #42	@ 0x2a
 800d6fa:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 800d6fe:	79fa      	ldrb	r2, [r7, #7]
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 800d706:	79ba      	ldrb	r2, [r7, #6]
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 800d70e:	797a      	ldrb	r2, [r7, #5]
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 800d716:	1d3b      	adds	r3, r7, #4
 800d718:	781a      	ldrb	r2, [r3, #0]
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 800d720:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 800d72a:	f107 0320 	add.w	r3, r7, #32
 800d72e:	781a      	ldrb	r2, [r3, #0]
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	2201      	movs	r2, #1
 800d73a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	2202      	movs	r2, #2
 800d742:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	683a      	ldr	r2, [r7, #0]
 800d74a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800d74e:	2301      	movs	r3, #1
 800d750:	75fb      	strb	r3, [r7, #23]
      break;
 800d752:	e007      	b.n	800d764 <USBH_MSC_SCSI_Write+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d754:	7afb      	ldrb	r3, [r7, #11]
 800d756:	4619      	mov	r1, r3
 800d758:	68f8      	ldr	r0, [r7, #12]
 800d75a:	f7ff fb79 	bl	800ce50 <USBH_MSC_BOT_Process>
 800d75e:	4603      	mov	r3, r0
 800d760:	75fb      	strb	r3, [r7, #23]
      break;
 800d762:	bf00      	nop
  }

  return error;
 800d764:	7dfb      	ldrb	r3, [r7, #23]
}
 800d766:	4618      	mov	r0, r3
 800d768:	3718      	adds	r7, #24
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800d76e:	b580      	push	{r7, lr}
 800d770:	b086      	sub	sp, #24
 800d772:	af00      	add	r7, sp, #0
 800d774:	60f8      	str	r0, [r7, #12]
 800d776:	607a      	str	r2, [r7, #4]
 800d778:	603b      	str	r3, [r7, #0]
 800d77a:	460b      	mov	r3, r1
 800d77c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800d77e:	2302      	movs	r3, #2
 800d780:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d788:	69db      	ldr	r3, [r3, #28]
 800d78a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800d792:	2b01      	cmp	r3, #1
 800d794:	d002      	beq.n	800d79c <USBH_MSC_SCSI_Read+0x2e>
 800d796:	2b02      	cmp	r3, #2
 800d798:	d04c      	beq.n	800d834 <USBH_MSC_SCSI_Read+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800d79a:	e053      	b.n	800d844 <USBH_MSC_SCSI_Read+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 800d79c:	7afb      	ldrb	r3, [r7, #11]
 800d79e:	693a      	ldr	r2, [r7, #16]
 800d7a0:	2134      	movs	r1, #52	@ 0x34
 800d7a2:	fb01 f303 	mul.w	r3, r1, r3
 800d7a6:	4413      	add	r3, r2
 800d7a8:	3398      	adds	r3, #152	@ 0x98
 800d7aa:	881b      	ldrh	r3, [r3, #0]
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	6a3b      	ldr	r3, [r7, #32]
 800d7b0:	fb03 f202 	mul.w	r2, r3, r2
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	2280      	movs	r2, #128	@ 0x80
 800d7bc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	220a      	movs	r2, #10
 800d7c4:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	3363      	adds	r3, #99	@ 0x63
 800d7cc:	2210      	movs	r2, #16
 800d7ce:	2100      	movs	r1, #0
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f005 fc29 	bl	8013028 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_READ10;
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	2228      	movs	r2, #40	@ 0x28
 800d7da:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 800d7de:	79fa      	ldrb	r2, [r7, #7]
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 800d7e6:	79ba      	ldrb	r2, [r7, #6]
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 800d7ee:	797a      	ldrb	r2, [r7, #5]
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 800d7f6:	1d3b      	adds	r3, r7, #4
 800d7f8:	781a      	ldrb	r2, [r3, #0]
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 800d800:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 800d80a:	f107 0320 	add.w	r3, r7, #32
 800d80e:	781a      	ldrb	r2, [r3, #0]
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	2201      	movs	r2, #1
 800d81a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	2202      	movs	r2, #2
 800d822:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	683a      	ldr	r2, [r7, #0]
 800d82a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800d82e:	2301      	movs	r3, #1
 800d830:	75fb      	strb	r3, [r7, #23]
      break;
 800d832:	e007      	b.n	800d844 <USBH_MSC_SCSI_Read+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d834:	7afb      	ldrb	r3, [r7, #11]
 800d836:	4619      	mov	r1, r3
 800d838:	68f8      	ldr	r0, [r7, #12]
 800d83a:	f7ff fb09 	bl	800ce50 <USBH_MSC_BOT_Process>
 800d83e:	4603      	mov	r3, r0
 800d840:	75fb      	strb	r3, [r7, #23]
      break;
 800d842:	bf00      	nop
  }

  return error;
 800d844:	7dfb      	ldrb	r3, [r7, #23]
}
 800d846:	4618      	mov	r0, r3
 800d848:	3718      	adds	r7, #24
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}

0800d84e <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800d84e:	b580      	push	{r7, lr}
 800d850:	b084      	sub	sp, #16
 800d852:	af00      	add	r7, sp, #0
 800d854:	60f8      	str	r0, [r7, #12]
 800d856:	60b9      	str	r1, [r7, #8]
 800d858:	4613      	mov	r3, r2
 800d85a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d101      	bne.n	800d866 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800d862:	2302      	movs	r3, #2
 800d864:	e029      	b.n	800d8ba <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	79fa      	ldrb	r2, [r7, #7]
 800d86a:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2200      	movs	r2, #0
 800d872:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	2200      	movs	r2, #0
 800d87a:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800d87e:	68f8      	ldr	r0, [r7, #12]
 800d880:	f000 f81f 	bl	800d8c2 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2200      	movs	r2, #0
 800d888:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2200      	movs	r2, #0
 800d890:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2200      	movs	r2, #0
 800d898:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d003      	beq.n	800d8b2 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	68ba      	ldr	r2, [r7, #8]
 800d8ae:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800d8b2:	68f8      	ldr	r0, [r7, #12]
 800d8b4:	f005 f8b0 	bl	8012a18 <USBH_LL_Init>

  return USBH_OK;
 800d8b8:	2300      	movs	r3, #0
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3710      	adds	r7, #16
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}

0800d8c2 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d8c2:	b580      	push	{r7, lr}
 800d8c4:	b084      	sub	sp, #16
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	60fb      	str	r3, [r7, #12]
 800d8d2:	e009      	b.n	800d8e8 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d8d4:	687a      	ldr	r2, [r7, #4]
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	33e0      	adds	r3, #224	@ 0xe0
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	4413      	add	r3, r2
 800d8de:	2200      	movs	r2, #0
 800d8e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	60fb      	str	r3, [r7, #12]
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2b0f      	cmp	r3, #15
 800d8ec:	d9f2      	bls.n	800d8d4 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	60fb      	str	r3, [r7, #12]
 800d8f2:	e009      	b.n	800d908 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d8f4:	687a      	ldr	r2, [r7, #4]
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d8fe:	2200      	movs	r2, #0
 800d900:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	3301      	adds	r3, #1
 800d906:	60fb      	str	r3, [r7, #12]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d90e:	d3f1      	bcc.n	800d8f4 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2200      	movs	r2, #0
 800d914:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2201      	movs	r2, #1
 800d920:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2201      	movs	r2, #1
 800d92e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2240      	movs	r2, #64	@ 0x40
 800d934:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2200      	movs	r2, #0
 800d93a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2200      	movs	r2, #0
 800d940:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2201      	movs	r2, #1
 800d948:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2200      	movs	r2, #0
 800d958:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	331c      	adds	r3, #28
 800d960:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d964:	2100      	movs	r1, #0
 800d966:	4618      	mov	r0, r3
 800d968:	f005 fb5e 	bl	8013028 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d972:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d976:	2100      	movs	r1, #0
 800d978:	4618      	mov	r0, r3
 800d97a:	f005 fb55 	bl	8013028 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800d984:	2212      	movs	r2, #18
 800d986:	2100      	movs	r1, #0
 800d988:	4618      	mov	r0, r3
 800d98a:	f005 fb4d 	bl	8013028 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800d994:	223e      	movs	r2, #62	@ 0x3e
 800d996:	2100      	movs	r1, #0
 800d998:	4618      	mov	r0, r3
 800d99a:	f005 fb45 	bl	8013028 <memset>

  return USBH_OK;
 800d99e:	2300      	movs	r3, #0
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3710      	adds	r7, #16
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b085      	sub	sp, #20
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d016      	beq.n	800d9ea <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d10e      	bne.n	800d9e4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800d9cc:	1c59      	adds	r1, r3, #1
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800d9d4:	687a      	ldr	r2, [r7, #4]
 800d9d6:	33de      	adds	r3, #222	@ 0xde
 800d9d8:	6839      	ldr	r1, [r7, #0]
 800d9da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	73fb      	strb	r3, [r7, #15]
 800d9e2:	e004      	b.n	800d9ee <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d9e4:	2302      	movs	r3, #2
 800d9e6:	73fb      	strb	r3, [r7, #15]
 800d9e8:	e001      	b.n	800d9ee <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d9ea:	2302      	movs	r3, #2
 800d9ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3714      	adds	r7, #20
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr

0800d9fc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b085      	sub	sp, #20
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	460b      	mov	r3, r1
 800da06:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800da08:	2300      	movs	r3, #0
 800da0a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800da12:	78fa      	ldrb	r2, [r7, #3]
 800da14:	429a      	cmp	r2, r3
 800da16:	d204      	bcs.n	800da22 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	78fa      	ldrb	r2, [r7, #3]
 800da1c:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800da20:	e001      	b.n	800da26 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800da22:	2302      	movs	r3, #2
 800da24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800da26:	7bfb      	ldrb	r3, [r7, #15]
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3714      	adds	r7, #20
 800da2c:	46bd      	mov	sp, r7
 800da2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da32:	4770      	bx	lr

0800da34 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800da34:	b480      	push	{r7}
 800da36:	b087      	sub	sp, #28
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	4608      	mov	r0, r1
 800da3e:	4611      	mov	r1, r2
 800da40:	461a      	mov	r2, r3
 800da42:	4603      	mov	r3, r0
 800da44:	70fb      	strb	r3, [r7, #3]
 800da46:	460b      	mov	r3, r1
 800da48:	70bb      	strb	r3, [r7, #2]
 800da4a:	4613      	mov	r3, r2
 800da4c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800da4e:	2300      	movs	r3, #0
 800da50:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800da52:	2300      	movs	r3, #0
 800da54:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800da5c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800da5e:	e025      	b.n	800daac <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800da60:	7dfb      	ldrb	r3, [r7, #23]
 800da62:	221a      	movs	r2, #26
 800da64:	fb02 f303 	mul.w	r3, r2, r3
 800da68:	3308      	adds	r3, #8
 800da6a:	68fa      	ldr	r2, [r7, #12]
 800da6c:	4413      	add	r3, r2
 800da6e:	3302      	adds	r3, #2
 800da70:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	795b      	ldrb	r3, [r3, #5]
 800da76:	78fa      	ldrb	r2, [r7, #3]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d002      	beq.n	800da82 <USBH_FindInterface+0x4e>
 800da7c:	78fb      	ldrb	r3, [r7, #3]
 800da7e:	2bff      	cmp	r3, #255	@ 0xff
 800da80:	d111      	bne.n	800daa6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800da86:	78ba      	ldrb	r2, [r7, #2]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d002      	beq.n	800da92 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800da8c:	78bb      	ldrb	r3, [r7, #2]
 800da8e:	2bff      	cmp	r3, #255	@ 0xff
 800da90:	d109      	bne.n	800daa6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800da96:	787a      	ldrb	r2, [r7, #1]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d002      	beq.n	800daa2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800da9c:	787b      	ldrb	r3, [r7, #1]
 800da9e:	2bff      	cmp	r3, #255	@ 0xff
 800daa0:	d101      	bne.n	800daa6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800daa2:	7dfb      	ldrb	r3, [r7, #23]
 800daa4:	e006      	b.n	800dab4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800daa6:	7dfb      	ldrb	r3, [r7, #23]
 800daa8:	3301      	adds	r3, #1
 800daaa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800daac:	7dfb      	ldrb	r3, [r7, #23]
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d9d6      	bls.n	800da60 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800dab2:	23ff      	movs	r3, #255	@ 0xff
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	371c      	adds	r7, #28
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr

0800dac0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f004 ffe1 	bl	8012a90 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800dace:	2101      	movs	r1, #1
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f005 f8fa 	bl	8012cca <USBH_LL_DriverVBUS>

  return USBH_OK;
 800dad6:	2300      	movs	r3, #0
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3708      	adds	r7, #8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b088      	sub	sp, #32
 800dae4:	af04      	add	r7, sp, #16
 800dae6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800dae8:	2302      	movs	r3, #2
 800daea:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800daec:	2300      	movs	r3, #0
 800daee:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800daf6:	b2db      	uxtb	r3, r3
 800daf8:	2b01      	cmp	r3, #1
 800dafa:	d102      	bne.n	800db02 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2203      	movs	r2, #3
 800db00:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	b2db      	uxtb	r3, r3
 800db08:	2b0b      	cmp	r3, #11
 800db0a:	f200 81bb 	bhi.w	800de84 <USBH_Process+0x3a4>
 800db0e:	a201      	add	r2, pc, #4	@ (adr r2, 800db14 <USBH_Process+0x34>)
 800db10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db14:	0800db45 	.word	0x0800db45
 800db18:	0800db77 	.word	0x0800db77
 800db1c:	0800dbdf 	.word	0x0800dbdf
 800db20:	0800de1f 	.word	0x0800de1f
 800db24:	0800de85 	.word	0x0800de85
 800db28:	0800dc7f 	.word	0x0800dc7f
 800db2c:	0800ddc5 	.word	0x0800ddc5
 800db30:	0800dcb5 	.word	0x0800dcb5
 800db34:	0800dcd5 	.word	0x0800dcd5
 800db38:	0800dcf3 	.word	0x0800dcf3
 800db3c:	0800dd37 	.word	0x0800dd37
 800db40:	0800de07 	.word	0x0800de07
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	f000 819b 	beq.w	800de88 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2201      	movs	r2, #1
 800db56:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800db58:	20c8      	movs	r0, #200	@ 0xc8
 800db5a:	f005 f933 	bl	8012dc4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f004 fff3 	bl	8012b4a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2200      	movs	r2, #0
 800db68:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2200      	movs	r2, #0
 800db70:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800db74:	e188      	b.n	800de88 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d107      	bne.n	800db90 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2202      	movs	r2, #2
 800db8c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800db8e:	e18a      	b.n	800dea6 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800db96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800db9a:	d914      	bls.n	800dbc6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800dba2:	3301      	adds	r3, #1
 800dba4:	b2da      	uxtb	r2, r3
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800dbb2:	2b03      	cmp	r3, #3
 800dbb4:	d903      	bls.n	800dbbe <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	220d      	movs	r2, #13
 800dbba:	701a      	strb	r2, [r3, #0]
      break;
 800dbbc:	e173      	b.n	800dea6 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	701a      	strb	r2, [r3, #0]
      break;
 800dbc4:	e16f      	b.n	800dea6 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800dbcc:	f103 020a 	add.w	r2, r3, #10
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800dbd6:	200a      	movs	r0, #10
 800dbd8:	f005 f8f4 	bl	8012dc4 <USBH_Delay>
      break;
 800dbdc:	e163      	b.n	800dea6 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d005      	beq.n	800dbf4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800dbee:	2104      	movs	r1, #4
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800dbf4:	2064      	movs	r0, #100	@ 0x64
 800dbf6:	f005 f8e5 	bl	8012dc4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f004 ff7e 	bl	8012afc <USBH_LL_GetSpeed>
 800dc00:	4603      	mov	r3, r0
 800dc02:	461a      	mov	r2, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2205      	movs	r2, #5
 800dc0e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800dc10:	2100      	movs	r1, #0
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f001 fa9b 	bl	800f14e <USBH_AllocPipe>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800dc20:	2180      	movs	r1, #128	@ 0x80
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f001 fa93 	bl	800f14e <USBH_AllocPipe>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	7919      	ldrb	r1, [r3, #4]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800dc44:	9202      	str	r2, [sp, #8]
 800dc46:	2200      	movs	r2, #0
 800dc48:	9201      	str	r2, [sp, #4]
 800dc4a:	9300      	str	r3, [sp, #0]
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	2280      	movs	r2, #128	@ 0x80
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f001 fa4d 	bl	800f0f0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	7959      	ldrb	r1, [r3, #5]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800dc6a:	9202      	str	r2, [sp, #8]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	9201      	str	r2, [sp, #4]
 800dc70:	9300      	str	r3, [sp, #0]
 800dc72:	4603      	mov	r3, r0
 800dc74:	2200      	movs	r2, #0
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f001 fa3a 	bl	800f0f0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800dc7c:	e113      	b.n	800dea6 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f000 f916 	bl	800deb0 <USBH_HandleEnum>
 800dc84:	4603      	mov	r3, r0
 800dc86:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800dc88:	7bbb      	ldrb	r3, [r7, #14]
 800dc8a:	b2db      	uxtb	r3, r3
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f040 80fd 	bne.w	800de8c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2200      	movs	r2, #0
 800dc96:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d103      	bne.n	800dcac <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2208      	movs	r2, #8
 800dca8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800dcaa:	e0ef      	b.n	800de8c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2207      	movs	r2, #7
 800dcb0:	701a      	strb	r2, [r3, #0]
      break;
 800dcb2:	e0eb      	b.n	800de8c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	f000 80e8 	beq.w	800de90 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800dcc6:	2101      	movs	r1, #1
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2208      	movs	r2, #8
 800dcd0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800dcd2:	e0dd      	b.n	800de90 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800dcda:	4619      	mov	r1, r3
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f000 fc3a 	bl	800e556 <USBH_SetCfg>
 800dce2:	4603      	mov	r3, r0
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	f040 80d5 	bne.w	800de94 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2209      	movs	r2, #9
 800dcee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800dcf0:	e0d0      	b.n	800de94 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800dcf8:	f003 0320 	and.w	r3, r3, #32
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d016      	beq.n	800dd2e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800dd00:	2101      	movs	r1, #1
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f000 fc4a 	bl	800e59c <USBH_SetFeature>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800dd0c:	7bbb      	ldrb	r3, [r7, #14]
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d103      	bne.n	800dd1c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	220a      	movs	r2, #10
 800dd18:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800dd1a:	e0bd      	b.n	800de98 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800dd1c:	7bbb      	ldrb	r3, [r7, #14]
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	2b03      	cmp	r3, #3
 800dd22:	f040 80b9 	bne.w	800de98 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	220a      	movs	r2, #10
 800dd2a:	701a      	strb	r2, [r3, #0]
      break;
 800dd2c:	e0b4      	b.n	800de98 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	220a      	movs	r2, #10
 800dd32:	701a      	strb	r2, [r3, #0]
      break;
 800dd34:	e0b0      	b.n	800de98 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	f000 80ad 	beq.w	800de9c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2200      	movs	r2, #0
 800dd46:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	73fb      	strb	r3, [r7, #15]
 800dd4e:	e016      	b.n	800dd7e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800dd50:	7bfa      	ldrb	r2, [r7, #15]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	32de      	adds	r2, #222	@ 0xde
 800dd56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd5a:	791a      	ldrb	r2, [r3, #4]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d108      	bne.n	800dd78 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800dd66:	7bfa      	ldrb	r2, [r7, #15]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	32de      	adds	r2, #222	@ 0xde
 800dd6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800dd76:	e005      	b.n	800dd84 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800dd78:	7bfb      	ldrb	r3, [r7, #15]
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	73fb      	strb	r3, [r7, #15]
 800dd7e:	7bfb      	ldrb	r3, [r7, #15]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d0e5      	beq.n	800dd50 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d016      	beq.n	800ddbc <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800dd94:	689b      	ldr	r3, [r3, #8]
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	4798      	blx	r3
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d109      	bne.n	800ddb4 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2206      	movs	r2, #6
 800dda4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ddac:	2103      	movs	r1, #3
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ddb2:	e073      	b.n	800de9c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	220d      	movs	r2, #13
 800ddb8:	701a      	strb	r2, [r3, #0]
      break;
 800ddba:	e06f      	b.n	800de9c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	220d      	movs	r2, #13
 800ddc0:	701a      	strb	r2, [r3, #0]
      break;
 800ddc2:	e06b      	b.n	800de9c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d017      	beq.n	800ddfe <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ddd4:	691b      	ldr	r3, [r3, #16]
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	4798      	blx	r3
 800ddda:	4603      	mov	r3, r0
 800dddc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ddde:	7bbb      	ldrb	r3, [r7, #14]
 800dde0:	b2db      	uxtb	r3, r3
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d103      	bne.n	800ddee <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	220b      	movs	r2, #11
 800ddea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ddec:	e058      	b.n	800dea0 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800ddee:	7bbb      	ldrb	r3, [r7, #14]
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	2b02      	cmp	r3, #2
 800ddf4:	d154      	bne.n	800dea0 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	220d      	movs	r2, #13
 800ddfa:	701a      	strb	r2, [r3, #0]
      break;
 800ddfc:	e050      	b.n	800dea0 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	220d      	movs	r2, #13
 800de02:	701a      	strb	r2, [r3, #0]
      break;
 800de04:	e04c      	b.n	800dea0 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d049      	beq.n	800dea4 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800de16:	695b      	ldr	r3, [r3, #20]
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	4798      	blx	r3
      }
      break;
 800de1c:	e042      	b.n	800dea4 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2200      	movs	r2, #0
 800de22:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f7ff fd4b 	bl	800d8c2 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800de32:	2b00      	cmp	r3, #0
 800de34:	d009      	beq.n	800de4a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800de3c:	68db      	ldr	r3, [r3, #12]
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2200      	movs	r2, #0
 800de46:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800de50:	2b00      	cmp	r3, #0
 800de52:	d005      	beq.n	800de60 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800de5a:	2105      	movs	r1, #5
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800de66:	b2db      	uxtb	r3, r3
 800de68:	2b01      	cmp	r3, #1
 800de6a:	d107      	bne.n	800de7c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2200      	movs	r2, #0
 800de70:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f7ff fe23 	bl	800dac0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800de7a:	e014      	b.n	800dea6 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f004 fe07 	bl	8012a90 <USBH_LL_Start>
      break;
 800de82:	e010      	b.n	800dea6 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800de84:	bf00      	nop
 800de86:	e00e      	b.n	800dea6 <USBH_Process+0x3c6>
      break;
 800de88:	bf00      	nop
 800de8a:	e00c      	b.n	800dea6 <USBH_Process+0x3c6>
      break;
 800de8c:	bf00      	nop
 800de8e:	e00a      	b.n	800dea6 <USBH_Process+0x3c6>
    break;
 800de90:	bf00      	nop
 800de92:	e008      	b.n	800dea6 <USBH_Process+0x3c6>
      break;
 800de94:	bf00      	nop
 800de96:	e006      	b.n	800dea6 <USBH_Process+0x3c6>
      break;
 800de98:	bf00      	nop
 800de9a:	e004      	b.n	800dea6 <USBH_Process+0x3c6>
      break;
 800de9c:	bf00      	nop
 800de9e:	e002      	b.n	800dea6 <USBH_Process+0x3c6>
      break;
 800dea0:	bf00      	nop
 800dea2:	e000      	b.n	800dea6 <USBH_Process+0x3c6>
      break;
 800dea4:	bf00      	nop
  }
  return USBH_OK;
 800dea6:	2300      	movs	r3, #0
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3710      	adds	r7, #16
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b088      	sub	sp, #32
 800deb4:	af04      	add	r7, sp, #16
 800deb6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800deb8:	2301      	movs	r3, #1
 800deba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800debc:	2301      	movs	r3, #1
 800debe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	785b      	ldrb	r3, [r3, #1]
 800dec4:	2b07      	cmp	r3, #7
 800dec6:	f200 81bd 	bhi.w	800e244 <USBH_HandleEnum+0x394>
 800deca:	a201      	add	r2, pc, #4	@ (adr r2, 800ded0 <USBH_HandleEnum+0x20>)
 800decc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ded0:	0800def1 	.word	0x0800def1
 800ded4:	0800dfab 	.word	0x0800dfab
 800ded8:	0800e015 	.word	0x0800e015
 800dedc:	0800e09f 	.word	0x0800e09f
 800dee0:	0800e109 	.word	0x0800e109
 800dee4:	0800e179 	.word	0x0800e179
 800dee8:	0800e1bf 	.word	0x0800e1bf
 800deec:	0800e205 	.word	0x0800e205
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800def0:	2108      	movs	r1, #8
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 fa4c 	bl	800e390 <USBH_Get_DevDesc>
 800def8:	4603      	mov	r3, r0
 800defa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800defc:	7bbb      	ldrb	r3, [r7, #14]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d12e      	bne.n	800df60 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2201      	movs	r2, #1
 800df10:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	7919      	ldrb	r1, [r3, #4]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800df26:	9202      	str	r2, [sp, #8]
 800df28:	2200      	movs	r2, #0
 800df2a:	9201      	str	r2, [sp, #4]
 800df2c:	9300      	str	r3, [sp, #0]
 800df2e:	4603      	mov	r3, r0
 800df30:	2280      	movs	r2, #128	@ 0x80
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f001 f8dc 	bl	800f0f0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	7959      	ldrb	r1, [r3, #5]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800df48:	687a      	ldr	r2, [r7, #4]
 800df4a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800df4c:	9202      	str	r2, [sp, #8]
 800df4e:	2200      	movs	r2, #0
 800df50:	9201      	str	r2, [sp, #4]
 800df52:	9300      	str	r3, [sp, #0]
 800df54:	4603      	mov	r3, r0
 800df56:	2200      	movs	r2, #0
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f001 f8c9 	bl	800f0f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800df5e:	e173      	b.n	800e248 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800df60:	7bbb      	ldrb	r3, [r7, #14]
 800df62:	2b03      	cmp	r3, #3
 800df64:	f040 8170 	bne.w	800e248 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800df6e:	3301      	adds	r3, #1
 800df70:	b2da      	uxtb	r2, r3
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800df7e:	2b03      	cmp	r3, #3
 800df80:	d903      	bls.n	800df8a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	220d      	movs	r2, #13
 800df86:	701a      	strb	r2, [r3, #0]
      break;
 800df88:	e15e      	b.n	800e248 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	795b      	ldrb	r3, [r3, #5]
 800df8e:	4619      	mov	r1, r3
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f001 f8fd 	bl	800f190 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	791b      	ldrb	r3, [r3, #4]
 800df9a:	4619      	mov	r1, r3
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f001 f8f7 	bl	800f190 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	701a      	strb	r2, [r3, #0]
      break;
 800dfa8:	e14e      	b.n	800e248 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800dfaa:	2112      	movs	r1, #18
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f000 f9ef 	bl	800e390 <USBH_Get_DevDesc>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800dfb6:	7bbb      	ldrb	r3, [r7, #14]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d103      	bne.n	800dfc4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2202      	movs	r2, #2
 800dfc0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800dfc2:	e143      	b.n	800e24c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dfc4:	7bbb      	ldrb	r3, [r7, #14]
 800dfc6:	2b03      	cmp	r3, #3
 800dfc8:	f040 8140 	bne.w	800e24c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	b2da      	uxtb	r2, r3
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800dfe2:	2b03      	cmp	r3, #3
 800dfe4:	d903      	bls.n	800dfee <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	220d      	movs	r2, #13
 800dfea:	701a      	strb	r2, [r3, #0]
      break;
 800dfec:	e12e      	b.n	800e24c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	795b      	ldrb	r3, [r3, #5]
 800dff2:	4619      	mov	r1, r3
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f001 f8cb 	bl	800f190 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	791b      	ldrb	r3, [r3, #4]
 800dffe:	4619      	mov	r1, r3
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f001 f8c5 	bl	800f190 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2200      	movs	r2, #0
 800e00a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2200      	movs	r2, #0
 800e010:	701a      	strb	r2, [r3, #0]
      break;
 800e012:	e11b      	b.n	800e24c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e014:	2101      	movs	r1, #1
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 fa79 	bl	800e50e <USBH_SetAddress>
 800e01c:	4603      	mov	r3, r0
 800e01e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e020:	7bbb      	ldrb	r3, [r7, #14]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d130      	bne.n	800e088 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800e026:	2002      	movs	r0, #2
 800e028:	f004 fecc 	bl	8012dc4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2201      	movs	r2, #1
 800e030:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2203      	movs	r2, #3
 800e038:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	7919      	ldrb	r1, [r3, #4]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e04a:	687a      	ldr	r2, [r7, #4]
 800e04c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e04e:	9202      	str	r2, [sp, #8]
 800e050:	2200      	movs	r2, #0
 800e052:	9201      	str	r2, [sp, #4]
 800e054:	9300      	str	r3, [sp, #0]
 800e056:	4603      	mov	r3, r0
 800e058:	2280      	movs	r2, #128	@ 0x80
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f001 f848 	bl	800f0f0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	7959      	ldrb	r1, [r3, #5]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e074:	9202      	str	r2, [sp, #8]
 800e076:	2200      	movs	r2, #0
 800e078:	9201      	str	r2, [sp, #4]
 800e07a:	9300      	str	r3, [sp, #0]
 800e07c:	4603      	mov	r3, r0
 800e07e:	2200      	movs	r2, #0
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f001 f835 	bl	800f0f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e086:	e0e3      	b.n	800e250 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e088:	7bbb      	ldrb	r3, [r7, #14]
 800e08a:	2b03      	cmp	r3, #3
 800e08c:	f040 80e0 	bne.w	800e250 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	220d      	movs	r2, #13
 800e094:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2200      	movs	r2, #0
 800e09a:	705a      	strb	r2, [r3, #1]
      break;
 800e09c:	e0d8      	b.n	800e250 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e09e:	2109      	movs	r1, #9
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 f9a1 	bl	800e3e8 <USBH_Get_CfgDesc>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e0aa:	7bbb      	ldrb	r3, [r7, #14]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d103      	bne.n	800e0b8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2204      	movs	r2, #4
 800e0b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e0b6:	e0cd      	b.n	800e254 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e0b8:	7bbb      	ldrb	r3, [r7, #14]
 800e0ba:	2b03      	cmp	r3, #3
 800e0bc:	f040 80ca 	bne.w	800e254 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	b2da      	uxtb	r2, r3
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e0d6:	2b03      	cmp	r3, #3
 800e0d8:	d903      	bls.n	800e0e2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	220d      	movs	r2, #13
 800e0de:	701a      	strb	r2, [r3, #0]
      break;
 800e0e0:	e0b8      	b.n	800e254 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	795b      	ldrb	r3, [r3, #5]
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f001 f851 	bl	800f190 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	791b      	ldrb	r3, [r3, #4]
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f001 f84b 	bl	800f190 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2200      	movs	r2, #0
 800e104:	701a      	strb	r2, [r3, #0]
      break;
 800e106:	e0a5      	b.n	800e254 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800e10e:	4619      	mov	r1, r3
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f000 f969 	bl	800e3e8 <USBH_Get_CfgDesc>
 800e116:	4603      	mov	r3, r0
 800e118:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e11a:	7bbb      	ldrb	r3, [r7, #14]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d103      	bne.n	800e128 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2205      	movs	r2, #5
 800e124:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e126:	e097      	b.n	800e258 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e128:	7bbb      	ldrb	r3, [r7, #14]
 800e12a:	2b03      	cmp	r3, #3
 800e12c:	f040 8094 	bne.w	800e258 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e136:	3301      	adds	r3, #1
 800e138:	b2da      	uxtb	r2, r3
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e146:	2b03      	cmp	r3, #3
 800e148:	d903      	bls.n	800e152 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	220d      	movs	r2, #13
 800e14e:	701a      	strb	r2, [r3, #0]
      break;
 800e150:	e082      	b.n	800e258 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	795b      	ldrb	r3, [r3, #5]
 800e156:	4619      	mov	r1, r3
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f001 f819 	bl	800f190 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	791b      	ldrb	r3, [r3, #4]
 800e162:	4619      	mov	r1, r3
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f001 f813 	bl	800f190 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2200      	movs	r2, #0
 800e16e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	701a      	strb	r2, [r3, #0]
      break;
 800e176:	e06f      	b.n	800e258 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d019      	beq.n	800e1b6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e18e:	23ff      	movs	r3, #255	@ 0xff
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f000 f953 	bl	800e43c <USBH_Get_StringDesc>
 800e196:	4603      	mov	r3, r0
 800e198:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e19a:	7bbb      	ldrb	r3, [r7, #14]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d103      	bne.n	800e1a8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2206      	movs	r2, #6
 800e1a4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e1a6:	e059      	b.n	800e25c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e1a8:	7bbb      	ldrb	r3, [r7, #14]
 800e1aa:	2b03      	cmp	r3, #3
 800e1ac:	d156      	bne.n	800e25c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2206      	movs	r2, #6
 800e1b2:	705a      	strb	r2, [r3, #1]
      break;
 800e1b4:	e052      	b.n	800e25c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2206      	movs	r2, #6
 800e1ba:	705a      	strb	r2, [r3, #1]
      break;
 800e1bc:	e04e      	b.n	800e25c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d019      	beq.n	800e1fc <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e1d4:	23ff      	movs	r3, #255	@ 0xff
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 f930 	bl	800e43c <USBH_Get_StringDesc>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e1e0:	7bbb      	ldrb	r3, [r7, #14]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d103      	bne.n	800e1ee <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2207      	movs	r2, #7
 800e1ea:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e1ec:	e038      	b.n	800e260 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e1ee:	7bbb      	ldrb	r3, [r7, #14]
 800e1f0:	2b03      	cmp	r3, #3
 800e1f2:	d135      	bne.n	800e260 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2207      	movs	r2, #7
 800e1f8:	705a      	strb	r2, [r3, #1]
      break;
 800e1fa:	e031      	b.n	800e260 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2207      	movs	r2, #7
 800e200:	705a      	strb	r2, [r3, #1]
      break;
 800e202:	e02d      	b.n	800e260 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d017      	beq.n	800e23e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e21a:	23ff      	movs	r3, #255	@ 0xff
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f000 f90d 	bl	800e43c <USBH_Get_StringDesc>
 800e222:	4603      	mov	r3, r0
 800e224:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e226:	7bbb      	ldrb	r3, [r7, #14]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d102      	bne.n	800e232 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e22c:	2300      	movs	r3, #0
 800e22e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e230:	e018      	b.n	800e264 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e232:	7bbb      	ldrb	r3, [r7, #14]
 800e234:	2b03      	cmp	r3, #3
 800e236:	d115      	bne.n	800e264 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800e238:	2300      	movs	r3, #0
 800e23a:	73fb      	strb	r3, [r7, #15]
      break;
 800e23c:	e012      	b.n	800e264 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800e23e:	2300      	movs	r3, #0
 800e240:	73fb      	strb	r3, [r7, #15]
      break;
 800e242:	e00f      	b.n	800e264 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800e244:	bf00      	nop
 800e246:	e00e      	b.n	800e266 <USBH_HandleEnum+0x3b6>
      break;
 800e248:	bf00      	nop
 800e24a:	e00c      	b.n	800e266 <USBH_HandleEnum+0x3b6>
      break;
 800e24c:	bf00      	nop
 800e24e:	e00a      	b.n	800e266 <USBH_HandleEnum+0x3b6>
      break;
 800e250:	bf00      	nop
 800e252:	e008      	b.n	800e266 <USBH_HandleEnum+0x3b6>
      break;
 800e254:	bf00      	nop
 800e256:	e006      	b.n	800e266 <USBH_HandleEnum+0x3b6>
      break;
 800e258:	bf00      	nop
 800e25a:	e004      	b.n	800e266 <USBH_HandleEnum+0x3b6>
      break;
 800e25c:	bf00      	nop
 800e25e:	e002      	b.n	800e266 <USBH_HandleEnum+0x3b6>
      break;
 800e260:	bf00      	nop
 800e262:	e000      	b.n	800e266 <USBH_HandleEnum+0x3b6>
      break;
 800e264:	bf00      	nop
  }
  return Status;
 800e266:	7bfb      	ldrb	r3, [r7, #15]
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3710      	adds	r7, #16
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e270:	b480      	push	{r7}
 800e272:	b083      	sub	sp, #12
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
 800e278:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	683a      	ldr	r2, [r7, #0]
 800e27e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800e282:	bf00      	nop
 800e284:	370c      	adds	r7, #12
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr

0800e28e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e28e:	b580      	push	{r7, lr}
 800e290:	b082      	sub	sp, #8
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e29c:	1c5a      	adds	r2, r3, #1
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 f804 	bl	800e2b2 <USBH_HandleSof>
}
 800e2aa:	bf00      	nop
 800e2ac:	3708      	adds	r7, #8
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}

0800e2b2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e2b2:	b580      	push	{r7, lr}
 800e2b4:	b082      	sub	sp, #8
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	2b0b      	cmp	r3, #11
 800e2c2:	d10a      	bne.n	800e2da <USBH_HandleSof+0x28>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d005      	beq.n	800e2da <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e2d4:	699b      	ldr	r3, [r3, #24]
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	4798      	blx	r3
  }
}
 800e2da:	bf00      	nop
 800e2dc:	3708      	adds	r7, #8
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}

0800e2e2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e2e2:	b480      	push	{r7}
 800e2e4:	b083      	sub	sp, #12
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800e2f2:	bf00      	nop
}
 800e2f4:	370c      	adds	r7, #12
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr

0800e2fe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e2fe:	b480      	push	{r7}
 800e300:	b083      	sub	sp, #12
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2200      	movs	r2, #0
 800e30a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800e30e:	bf00      	nop
}
 800e310:	370c      	adds	r7, #12
 800e312:	46bd      	mov	sp, r7
 800e314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e318:	4770      	bx	lr

0800e31a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e31a:	b480      	push	{r7}
 800e31c:	b083      	sub	sp, #12
 800e31e:	af00      	add	r7, sp, #0
 800e320:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2201      	movs	r2, #1
 800e326:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2200      	movs	r2, #0
 800e32e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2200      	movs	r2, #0
 800e336:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800e33a:	2300      	movs	r3, #0
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	370c      	adds	r7, #12
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr

0800e348 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2201      	movs	r2, #1
 800e354:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2200      	movs	r2, #0
 800e35c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2200      	movs	r2, #0
 800e364:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f004 fbac 	bl	8012ac6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	791b      	ldrb	r3, [r3, #4]
 800e372:	4619      	mov	r1, r3
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f000 ff0b 	bl	800f190 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	795b      	ldrb	r3, [r3, #5]
 800e37e:	4619      	mov	r1, r3
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 ff05 	bl	800f190 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800e386:	2300      	movs	r3, #0
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3708      	adds	r7, #8
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b086      	sub	sp, #24
 800e394:	af02      	add	r7, sp, #8
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	460b      	mov	r3, r1
 800e39a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800e39c:	887b      	ldrh	r3, [r7, #2]
 800e39e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3a2:	d901      	bls.n	800e3a8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800e3a4:	2303      	movs	r3, #3
 800e3a6:	e01b      	b.n	800e3e0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800e3ae:	887b      	ldrh	r3, [r7, #2]
 800e3b0:	9300      	str	r3, [sp, #0]
 800e3b2:	4613      	mov	r3, r2
 800e3b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e3b8:	2100      	movs	r1, #0
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 f872 	bl	800e4a4 <USBH_GetDescriptor>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800e3c4:	7bfb      	ldrb	r3, [r7, #15]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d109      	bne.n	800e3de <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800e3d0:	887a      	ldrh	r2, [r7, #2]
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f000 f929 	bl	800e62c <USBH_ParseDevDesc>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3710      	adds	r7, #16
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b086      	sub	sp, #24
 800e3ec:	af02      	add	r7, sp, #8
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	460b      	mov	r3, r1
 800e3f2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	331c      	adds	r3, #28
 800e3f8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800e3fa:	887b      	ldrh	r3, [r7, #2]
 800e3fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e400:	d901      	bls.n	800e406 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800e402:	2303      	movs	r3, #3
 800e404:	e016      	b.n	800e434 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800e406:	887b      	ldrh	r3, [r7, #2]
 800e408:	9300      	str	r3, [sp, #0]
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e410:	2100      	movs	r1, #0
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 f846 	bl	800e4a4 <USBH_GetDescriptor>
 800e418:	4603      	mov	r3, r0
 800e41a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800e41c:	7bfb      	ldrb	r3, [r7, #15]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d107      	bne.n	800e432 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800e422:	887b      	ldrh	r3, [r7, #2]
 800e424:	461a      	mov	r2, r3
 800e426:	68b9      	ldr	r1, [r7, #8]
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 f9af 	bl	800e78c <USBH_ParseCfgDesc>
 800e42e:	4603      	mov	r3, r0
 800e430:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e432:	7bfb      	ldrb	r3, [r7, #15]
}
 800e434:	4618      	mov	r0, r3
 800e436:	3710      	adds	r7, #16
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b088      	sub	sp, #32
 800e440:	af02      	add	r7, sp, #8
 800e442:	60f8      	str	r0, [r7, #12]
 800e444:	607a      	str	r2, [r7, #4]
 800e446:	461a      	mov	r2, r3
 800e448:	460b      	mov	r3, r1
 800e44a:	72fb      	strb	r3, [r7, #11]
 800e44c:	4613      	mov	r3, r2
 800e44e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800e450:	893b      	ldrh	r3, [r7, #8]
 800e452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e456:	d802      	bhi.n	800e45e <USBH_Get_StringDesc+0x22>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d101      	bne.n	800e462 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800e45e:	2303      	movs	r3, #3
 800e460:	e01c      	b.n	800e49c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800e462:	7afb      	ldrb	r3, [r7, #11]
 800e464:	b29b      	uxth	r3, r3
 800e466:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800e46a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800e472:	893b      	ldrh	r3, [r7, #8]
 800e474:	9300      	str	r3, [sp, #0]
 800e476:	460b      	mov	r3, r1
 800e478:	2100      	movs	r1, #0
 800e47a:	68f8      	ldr	r0, [r7, #12]
 800e47c:	f000 f812 	bl	800e4a4 <USBH_GetDescriptor>
 800e480:	4603      	mov	r3, r0
 800e482:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800e484:	7dfb      	ldrb	r3, [r7, #23]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d107      	bne.n	800e49a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800e490:	893a      	ldrh	r2, [r7, #8]
 800e492:	6879      	ldr	r1, [r7, #4]
 800e494:	4618      	mov	r0, r3
 800e496:	f000 fb8d 	bl	800ebb4 <USBH_ParseStringDesc>
  }

  return status;
 800e49a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3718      	adds	r7, #24
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}

0800e4a4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b084      	sub	sp, #16
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	607b      	str	r3, [r7, #4]
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	72fb      	strb	r3, [r7, #11]
 800e4b2:	4613      	mov	r3, r2
 800e4b4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	789b      	ldrb	r3, [r3, #2]
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	d11c      	bne.n	800e4f8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800e4be:	7afb      	ldrb	r3, [r7, #11]
 800e4c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e4c4:	b2da      	uxtb	r2, r3
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	2206      	movs	r2, #6
 800e4ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	893a      	ldrh	r2, [r7, #8]
 800e4d4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800e4d6:	893b      	ldrh	r3, [r7, #8]
 800e4d8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e4dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e4e0:	d104      	bne.n	800e4ec <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f240 4209 	movw	r2, #1033	@ 0x409
 800e4e8:	829a      	strh	r2, [r3, #20]
 800e4ea:	e002      	b.n	800e4f2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	8b3a      	ldrh	r2, [r7, #24]
 800e4f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800e4f8:	8b3b      	ldrh	r3, [r7, #24]
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	6879      	ldr	r1, [r7, #4]
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f000 fba5 	bl	800ec4e <USBH_CtlReq>
 800e504:	4603      	mov	r3, r0
}
 800e506:	4618      	mov	r0, r3
 800e508:	3710      	adds	r7, #16
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}

0800e50e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800e50e:	b580      	push	{r7, lr}
 800e510:	b082      	sub	sp, #8
 800e512:	af00      	add	r7, sp, #0
 800e514:	6078      	str	r0, [r7, #4]
 800e516:	460b      	mov	r3, r1
 800e518:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	789b      	ldrb	r3, [r3, #2]
 800e51e:	2b01      	cmp	r3, #1
 800e520:	d10f      	bne.n	800e542 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2200      	movs	r2, #0
 800e526:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2205      	movs	r2, #5
 800e52c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800e52e:	78fb      	ldrb	r3, [r7, #3]
 800e530:	b29a      	uxth	r2, r3
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2200      	movs	r2, #0
 800e53a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2200      	movs	r2, #0
 800e540:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e542:	2200      	movs	r2, #0
 800e544:	2100      	movs	r1, #0
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f000 fb81 	bl	800ec4e <USBH_CtlReq>
 800e54c:	4603      	mov	r3, r0
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3708      	adds	r7, #8
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}

0800e556 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800e556:	b580      	push	{r7, lr}
 800e558:	b082      	sub	sp, #8
 800e55a:	af00      	add	r7, sp, #0
 800e55c:	6078      	str	r0, [r7, #4]
 800e55e:	460b      	mov	r3, r1
 800e560:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	789b      	ldrb	r3, [r3, #2]
 800e566:	2b01      	cmp	r3, #1
 800e568:	d10e      	bne.n	800e588 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2200      	movs	r2, #0
 800e56e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2209      	movs	r2, #9
 800e574:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	887a      	ldrh	r2, [r7, #2]
 800e57a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2200      	movs	r2, #0
 800e580:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2200      	movs	r2, #0
 800e586:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e588:	2200      	movs	r2, #0
 800e58a:	2100      	movs	r1, #0
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 fb5e 	bl	800ec4e <USBH_CtlReq>
 800e592:	4603      	mov	r3, r0
}
 800e594:	4618      	mov	r0, r3
 800e596:	3708      	adds	r7, #8
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b082      	sub	sp, #8
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	789b      	ldrb	r3, [r3, #2]
 800e5ac:	2b01      	cmp	r3, #1
 800e5ae:	d10f      	bne.n	800e5d0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2203      	movs	r2, #3
 800e5ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800e5bc:	78fb      	ldrb	r3, [r7, #3]
 800e5be:	b29a      	uxth	r2, r3
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	2100      	movs	r1, #0
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f000 fb3a 	bl	800ec4e <USBH_CtlReq>
 800e5da:	4603      	mov	r3, r0
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3708      	adds	r7, #8
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	789b      	ldrb	r3, [r3, #2]
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d10f      	bne.n	800e618 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2202      	movs	r2, #2
 800e5fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2201      	movs	r2, #1
 800e602:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2200      	movs	r2, #0
 800e608:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800e60a:	78fb      	ldrb	r3, [r7, #3]
 800e60c:	b29a      	uxth	r2, r3
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2200      	movs	r2, #0
 800e616:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e618:	2200      	movs	r2, #0
 800e61a:	2100      	movs	r1, #0
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f000 fb16 	bl	800ec4e <USBH_CtlReq>
 800e622:	4603      	mov	r3, r0
}
 800e624:	4618      	mov	r0, r3
 800e626:	3708      	adds	r7, #8
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b087      	sub	sp, #28
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	4613      	mov	r3, r2
 800e638:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800e640:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800e642:	2300      	movs	r3, #0
 800e644:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d101      	bne.n	800e650 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800e64c:	2302      	movs	r3, #2
 800e64e:	e094      	b.n	800e77a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	781a      	ldrb	r2, [r3, #0]
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	785a      	ldrb	r2, [r3, #1]
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	3302      	adds	r3, #2
 800e664:	781b      	ldrb	r3, [r3, #0]
 800e666:	461a      	mov	r2, r3
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	3303      	adds	r3, #3
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	021b      	lsls	r3, r3, #8
 800e670:	b29b      	uxth	r3, r3
 800e672:	4313      	orrs	r3, r2
 800e674:	b29a      	uxth	r2, r3
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	791a      	ldrb	r2, [r3, #4]
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	795a      	ldrb	r2, [r3, #5]
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	799a      	ldrb	r2, [r3, #6]
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	79da      	ldrb	r2, [r3, #7]
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d004      	beq.n	800e6ae <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	d11b      	bne.n	800e6e6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	79db      	ldrb	r3, [r3, #7]
 800e6b2:	2b20      	cmp	r3, #32
 800e6b4:	dc0f      	bgt.n	800e6d6 <USBH_ParseDevDesc+0xaa>
 800e6b6:	2b08      	cmp	r3, #8
 800e6b8:	db0f      	blt.n	800e6da <USBH_ParseDevDesc+0xae>
 800e6ba:	3b08      	subs	r3, #8
 800e6bc:	4a32      	ldr	r2, [pc, #200]	@ (800e788 <USBH_ParseDevDesc+0x15c>)
 800e6be:	fa22 f303 	lsr.w	r3, r2, r3
 800e6c2:	f003 0301 	and.w	r3, r3, #1
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	bf14      	ite	ne
 800e6ca:	2301      	movne	r3, #1
 800e6cc:	2300      	moveq	r3, #0
 800e6ce:	b2db      	uxtb	r3, r3
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d106      	bne.n	800e6e2 <USBH_ParseDevDesc+0xb6>
 800e6d4:	e001      	b.n	800e6da <USBH_ParseDevDesc+0xae>
 800e6d6:	2b40      	cmp	r3, #64	@ 0x40
 800e6d8:	d003      	beq.n	800e6e2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	2208      	movs	r2, #8
 800e6de:	71da      	strb	r2, [r3, #7]
        break;
 800e6e0:	e000      	b.n	800e6e4 <USBH_ParseDevDesc+0xb8>
        break;
 800e6e2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800e6e4:	e00e      	b.n	800e704 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e6ec:	2b02      	cmp	r3, #2
 800e6ee:	d107      	bne.n	800e700 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	79db      	ldrb	r3, [r3, #7]
 800e6f4:	2b08      	cmp	r3, #8
 800e6f6:	d005      	beq.n	800e704 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	2208      	movs	r2, #8
 800e6fc:	71da      	strb	r2, [r3, #7]
 800e6fe:	e001      	b.n	800e704 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800e700:	2303      	movs	r3, #3
 800e702:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800e704:	88fb      	ldrh	r3, [r7, #6]
 800e706:	2b08      	cmp	r3, #8
 800e708:	d936      	bls.n	800e778 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	3308      	adds	r3, #8
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	461a      	mov	r2, r3
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	3309      	adds	r3, #9
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	021b      	lsls	r3, r3, #8
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	4313      	orrs	r3, r2
 800e71e:	b29a      	uxth	r2, r3
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	330a      	adds	r3, #10
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	461a      	mov	r2, r3
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	330b      	adds	r3, #11
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	021b      	lsls	r3, r3, #8
 800e734:	b29b      	uxth	r3, r3
 800e736:	4313      	orrs	r3, r2
 800e738:	b29a      	uxth	r2, r3
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	330c      	adds	r3, #12
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	461a      	mov	r2, r3
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	330d      	adds	r3, #13
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	021b      	lsls	r3, r3, #8
 800e74e:	b29b      	uxth	r3, r3
 800e750:	4313      	orrs	r3, r2
 800e752:	b29a      	uxth	r2, r3
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	7b9a      	ldrb	r2, [r3, #14]
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	7bda      	ldrb	r2, [r3, #15]
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	7c1a      	ldrb	r2, [r3, #16]
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	7c5a      	ldrb	r2, [r3, #17]
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800e778:	7dfb      	ldrb	r3, [r7, #23]
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	371c      	adds	r7, #28
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr
 800e786:	bf00      	nop
 800e788:	01000101 	.word	0x01000101

0800e78c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b08c      	sub	sp, #48	@ 0x30
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	4613      	mov	r3, r2
 800e798:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800e7a0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d101      	bne.n	800e7be <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800e7ba:	2302      	movs	r3, #2
 800e7bc:	e0da      	b.n	800e974 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800e7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	2b09      	cmp	r3, #9
 800e7c8:	d002      	beq.n	800e7d0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800e7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7cc:	2209      	movs	r2, #9
 800e7ce:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	781a      	ldrb	r2, [r3, #0]
 800e7d4:	6a3b      	ldr	r3, [r7, #32]
 800e7d6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	785a      	ldrb	r2, [r3, #1]
 800e7dc:	6a3b      	ldr	r3, [r7, #32]
 800e7de:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	3302      	adds	r3, #2
 800e7e4:	781b      	ldrb	r3, [r3, #0]
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	3303      	adds	r3, #3
 800e7ec:	781b      	ldrb	r3, [r3, #0]
 800e7ee:	021b      	lsls	r3, r3, #8
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	4313      	orrs	r3, r2
 800e7f4:	b29b      	uxth	r3, r3
 800e7f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e7fa:	bf28      	it	cs
 800e7fc:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800e800:	b29a      	uxth	r2, r3
 800e802:	6a3b      	ldr	r3, [r7, #32]
 800e804:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	791a      	ldrb	r2, [r3, #4]
 800e80a:	6a3b      	ldr	r3, [r7, #32]
 800e80c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	795a      	ldrb	r2, [r3, #5]
 800e812:	6a3b      	ldr	r3, [r7, #32]
 800e814:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	799a      	ldrb	r2, [r3, #6]
 800e81a:	6a3b      	ldr	r3, [r7, #32]
 800e81c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	79da      	ldrb	r2, [r3, #7]
 800e822:	6a3b      	ldr	r3, [r7, #32]
 800e824:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	7a1a      	ldrb	r2, [r3, #8]
 800e82a:	6a3b      	ldr	r3, [r7, #32]
 800e82c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e82e:	88fb      	ldrh	r3, [r7, #6]
 800e830:	2b09      	cmp	r3, #9
 800e832:	f240 809d 	bls.w	800e970 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800e836:	2309      	movs	r3, #9
 800e838:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800e83a:	2300      	movs	r3, #0
 800e83c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e83e:	e081      	b.n	800e944 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e840:	f107 0316 	add.w	r3, r7, #22
 800e844:	4619      	mov	r1, r3
 800e846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e848:	f000 f9e7 	bl	800ec1a <USBH_GetNextDesc>
 800e84c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800e84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e850:	785b      	ldrb	r3, [r3, #1]
 800e852:	2b04      	cmp	r3, #4
 800e854:	d176      	bne.n	800e944 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800e856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	2b09      	cmp	r3, #9
 800e85c:	d002      	beq.n	800e864 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800e85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e860:	2209      	movs	r2, #9
 800e862:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800e864:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e868:	221a      	movs	r2, #26
 800e86a:	fb02 f303 	mul.w	r3, r2, r3
 800e86e:	3308      	adds	r3, #8
 800e870:	6a3a      	ldr	r2, [r7, #32]
 800e872:	4413      	add	r3, r2
 800e874:	3302      	adds	r3, #2
 800e876:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800e878:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e87a:	69f8      	ldr	r0, [r7, #28]
 800e87c:	f000 f87e 	bl	800e97c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e880:	2300      	movs	r3, #0
 800e882:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800e886:	2300      	movs	r3, #0
 800e888:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e88a:	e043      	b.n	800e914 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e88c:	f107 0316 	add.w	r3, r7, #22
 800e890:	4619      	mov	r1, r3
 800e892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e894:	f000 f9c1 	bl	800ec1a <USBH_GetNextDesc>
 800e898:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e89c:	785b      	ldrb	r3, [r3, #1]
 800e89e:	2b05      	cmp	r3, #5
 800e8a0:	d138      	bne.n	800e914 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800e8a2:	69fb      	ldr	r3, [r7, #28]
 800e8a4:	795b      	ldrb	r3, [r3, #5]
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d113      	bne.n	800e8d2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800e8aa:	69fb      	ldr	r3, [r7, #28]
 800e8ac:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800e8ae:	2b02      	cmp	r3, #2
 800e8b0:	d003      	beq.n	800e8ba <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800e8b2:	69fb      	ldr	r3, [r7, #28]
 800e8b4:	799b      	ldrb	r3, [r3, #6]
 800e8b6:	2b03      	cmp	r3, #3
 800e8b8:	d10b      	bne.n	800e8d2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e8ba:	69fb      	ldr	r3, [r7, #28]
 800e8bc:	79db      	ldrb	r3, [r3, #7]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d10b      	bne.n	800e8da <USBH_ParseCfgDesc+0x14e>
 800e8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	2b09      	cmp	r3, #9
 800e8c8:	d007      	beq.n	800e8da <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800e8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8cc:	2209      	movs	r2, #9
 800e8ce:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e8d0:	e003      	b.n	800e8da <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800e8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8d4:	2207      	movs	r2, #7
 800e8d6:	701a      	strb	r2, [r3, #0]
 800e8d8:	e000      	b.n	800e8dc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e8da:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e8dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e8e0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800e8e4:	3201      	adds	r2, #1
 800e8e6:	00d2      	lsls	r2, r2, #3
 800e8e8:	211a      	movs	r1, #26
 800e8ea:	fb01 f303 	mul.w	r3, r1, r3
 800e8ee:	4413      	add	r3, r2
 800e8f0:	3308      	adds	r3, #8
 800e8f2:	6a3a      	ldr	r2, [r7, #32]
 800e8f4:	4413      	add	r3, r2
 800e8f6:	3304      	adds	r3, #4
 800e8f8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800e8fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e8fc:	69b9      	ldr	r1, [r7, #24]
 800e8fe:	68f8      	ldr	r0, [r7, #12]
 800e900:	f000 f870 	bl	800e9e4 <USBH_ParseEPDesc>
 800e904:	4603      	mov	r3, r0
 800e906:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800e90a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e90e:	3301      	adds	r3, #1
 800e910:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e914:	69fb      	ldr	r3, [r7, #28]
 800e916:	791b      	ldrb	r3, [r3, #4]
 800e918:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d204      	bcs.n	800e92a <USBH_ParseCfgDesc+0x19e>
 800e920:	6a3b      	ldr	r3, [r7, #32]
 800e922:	885a      	ldrh	r2, [r3, #2]
 800e924:	8afb      	ldrh	r3, [r7, #22]
 800e926:	429a      	cmp	r2, r3
 800e928:	d8b0      	bhi.n	800e88c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800e92a:	69fb      	ldr	r3, [r7, #28]
 800e92c:	791b      	ldrb	r3, [r3, #4]
 800e92e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800e932:	429a      	cmp	r2, r3
 800e934:	d201      	bcs.n	800e93a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800e936:	2303      	movs	r3, #3
 800e938:	e01c      	b.n	800e974 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800e93a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e93e:	3301      	adds	r3, #1
 800e940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e948:	2b01      	cmp	r3, #1
 800e94a:	d805      	bhi.n	800e958 <USBH_ParseCfgDesc+0x1cc>
 800e94c:	6a3b      	ldr	r3, [r7, #32]
 800e94e:	885a      	ldrh	r2, [r3, #2]
 800e950:	8afb      	ldrh	r3, [r7, #22]
 800e952:	429a      	cmp	r2, r3
 800e954:	f63f af74 	bhi.w	800e840 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800e958:	6a3b      	ldr	r3, [r7, #32]
 800e95a:	791b      	ldrb	r3, [r3, #4]
 800e95c:	2b02      	cmp	r3, #2
 800e95e:	bf28      	it	cs
 800e960:	2302      	movcs	r3, #2
 800e962:	b2db      	uxtb	r3, r3
 800e964:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e968:	429a      	cmp	r2, r3
 800e96a:	d201      	bcs.n	800e970 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800e96c:	2303      	movs	r3, #3
 800e96e:	e001      	b.n	800e974 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800e970:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e974:	4618      	mov	r0, r3
 800e976:	3730      	adds	r7, #48	@ 0x30
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800e97c:	b480      	push	{r7}
 800e97e:	b083      	sub	sp, #12
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	781a      	ldrb	r2, [r3, #0]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	785a      	ldrb	r2, [r3, #1]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	789a      	ldrb	r2, [r3, #2]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	78da      	ldrb	r2, [r3, #3]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	3304      	adds	r3, #4
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	2b02      	cmp	r3, #2
 800e9ae:	bf28      	it	cs
 800e9b0:	2302      	movcs	r3, #2
 800e9b2:	b2da      	uxtb	r2, r3
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	795a      	ldrb	r2, [r3, #5]
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	799a      	ldrb	r2, [r3, #6]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	79da      	ldrb	r2, [r3, #7]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	7a1a      	ldrb	r2, [r3, #8]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	721a      	strb	r2, [r3, #8]
}
 800e9d8:	bf00      	nop
 800e9da:	370c      	adds	r7, #12
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr

0800e9e4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b087      	sub	sp, #28
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	60b9      	str	r1, [r7, #8]
 800e9ee:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	781a      	ldrb	r2, [r3, #0]
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	785a      	ldrb	r2, [r3, #1]
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	789a      	ldrb	r2, [r3, #2]
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	78da      	ldrb	r2, [r3, #3]
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	3304      	adds	r3, #4
 800ea18:	781b      	ldrb	r3, [r3, #0]
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	3305      	adds	r3, #5
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	021b      	lsls	r3, r3, #8
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	4313      	orrs	r3, r2
 800ea28:	b29a      	uxth	r2, r3
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	799a      	ldrb	r2, [r3, #6]
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	889b      	ldrh	r3, [r3, #4]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d009      	beq.n	800ea52 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ea42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ea46:	d804      	bhi.n	800ea52 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ea4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea50:	d901      	bls.n	800ea56 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800ea52:	2303      	movs	r3, #3
 800ea54:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d136      	bne.n	800eace <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	78db      	ldrb	r3, [r3, #3]
 800ea64:	f003 0303 	and.w	r3, r3, #3
 800ea68:	2b02      	cmp	r3, #2
 800ea6a:	d108      	bne.n	800ea7e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	889b      	ldrh	r3, [r3, #4]
 800ea70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea74:	f240 8097 	bls.w	800eba6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ea78:	2303      	movs	r3, #3
 800ea7a:	75fb      	strb	r3, [r7, #23]
 800ea7c:	e093      	b.n	800eba6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	78db      	ldrb	r3, [r3, #3]
 800ea82:	f003 0303 	and.w	r3, r3, #3
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d107      	bne.n	800ea9a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	889b      	ldrh	r3, [r3, #4]
 800ea8e:	2b40      	cmp	r3, #64	@ 0x40
 800ea90:	f240 8089 	bls.w	800eba6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ea94:	2303      	movs	r3, #3
 800ea96:	75fb      	strb	r3, [r7, #23]
 800ea98:	e085      	b.n	800eba6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	78db      	ldrb	r3, [r3, #3]
 800ea9e:	f003 0303 	and.w	r3, r3, #3
 800eaa2:	2b01      	cmp	r3, #1
 800eaa4:	d005      	beq.n	800eab2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	78db      	ldrb	r3, [r3, #3]
 800eaaa:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800eaae:	2b03      	cmp	r3, #3
 800eab0:	d10a      	bne.n	800eac8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	799b      	ldrb	r3, [r3, #6]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d003      	beq.n	800eac2 <USBH_ParseEPDesc+0xde>
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	799b      	ldrb	r3, [r3, #6]
 800eabe:	2b10      	cmp	r3, #16
 800eac0:	d970      	bls.n	800eba4 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800eac2:	2303      	movs	r3, #3
 800eac4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800eac6:	e06d      	b.n	800eba4 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800eac8:	2303      	movs	r3, #3
 800eaca:	75fb      	strb	r3, [r7, #23]
 800eacc:	e06b      	b.n	800eba6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d13c      	bne.n	800eb52 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	78db      	ldrb	r3, [r3, #3]
 800eadc:	f003 0303 	and.w	r3, r3, #3
 800eae0:	2b02      	cmp	r3, #2
 800eae2:	d005      	beq.n	800eaf0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	78db      	ldrb	r3, [r3, #3]
 800eae8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d106      	bne.n	800eafe <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	889b      	ldrh	r3, [r3, #4]
 800eaf4:	2b40      	cmp	r3, #64	@ 0x40
 800eaf6:	d956      	bls.n	800eba6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800eaf8:	2303      	movs	r3, #3
 800eafa:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800eafc:	e053      	b.n	800eba6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	78db      	ldrb	r3, [r3, #3]
 800eb02:	f003 0303 	and.w	r3, r3, #3
 800eb06:	2b01      	cmp	r3, #1
 800eb08:	d10e      	bne.n	800eb28 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	799b      	ldrb	r3, [r3, #6]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d007      	beq.n	800eb22 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800eb16:	2b10      	cmp	r3, #16
 800eb18:	d803      	bhi.n	800eb22 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800eb1e:	2b40      	cmp	r3, #64	@ 0x40
 800eb20:	d941      	bls.n	800eba6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800eb22:	2303      	movs	r3, #3
 800eb24:	75fb      	strb	r3, [r7, #23]
 800eb26:	e03e      	b.n	800eba6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	78db      	ldrb	r3, [r3, #3]
 800eb2c:	f003 0303 	and.w	r3, r3, #3
 800eb30:	2b03      	cmp	r3, #3
 800eb32:	d10b      	bne.n	800eb4c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	799b      	ldrb	r3, [r3, #6]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d004      	beq.n	800eb46 <USBH_ParseEPDesc+0x162>
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	889b      	ldrh	r3, [r3, #4]
 800eb40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eb44:	d32f      	bcc.n	800eba6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800eb46:	2303      	movs	r3, #3
 800eb48:	75fb      	strb	r3, [r7, #23]
 800eb4a:	e02c      	b.n	800eba6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800eb4c:	2303      	movs	r3, #3
 800eb4e:	75fb      	strb	r3, [r7, #23]
 800eb50:	e029      	b.n	800eba6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800eb58:	2b02      	cmp	r3, #2
 800eb5a:	d120      	bne.n	800eb9e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	78db      	ldrb	r3, [r3, #3]
 800eb60:	f003 0303 	and.w	r3, r3, #3
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d106      	bne.n	800eb76 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	889b      	ldrh	r3, [r3, #4]
 800eb6c:	2b08      	cmp	r3, #8
 800eb6e:	d01a      	beq.n	800eba6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800eb70:	2303      	movs	r3, #3
 800eb72:	75fb      	strb	r3, [r7, #23]
 800eb74:	e017      	b.n	800eba6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	78db      	ldrb	r3, [r3, #3]
 800eb7a:	f003 0303 	and.w	r3, r3, #3
 800eb7e:	2b03      	cmp	r3, #3
 800eb80:	d10a      	bne.n	800eb98 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	799b      	ldrb	r3, [r3, #6]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d003      	beq.n	800eb92 <USBH_ParseEPDesc+0x1ae>
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	889b      	ldrh	r3, [r3, #4]
 800eb8e:	2b08      	cmp	r3, #8
 800eb90:	d909      	bls.n	800eba6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800eb92:	2303      	movs	r3, #3
 800eb94:	75fb      	strb	r3, [r7, #23]
 800eb96:	e006      	b.n	800eba6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800eb98:	2303      	movs	r3, #3
 800eb9a:	75fb      	strb	r3, [r7, #23]
 800eb9c:	e003      	b.n	800eba6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800eb9e:	2303      	movs	r3, #3
 800eba0:	75fb      	strb	r3, [r7, #23]
 800eba2:	e000      	b.n	800eba6 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800eba4:	bf00      	nop
  }

  return status;
 800eba6:	7dfb      	ldrb	r3, [r7, #23]
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	371c      	adds	r7, #28
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr

0800ebb4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b087      	sub	sp, #28
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	4613      	mov	r3, r2
 800ebc0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	781b      	ldrb	r3, [r3, #0]
 800ebc8:	2b03      	cmp	r3, #3
 800ebca:	d120      	bne.n	800ec0e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	1e9a      	subs	r2, r3, #2
 800ebd2:	88fb      	ldrh	r3, [r7, #6]
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	bf28      	it	cs
 800ebd8:	4613      	movcs	r3, r2
 800ebda:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	3302      	adds	r3, #2
 800ebe0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	82fb      	strh	r3, [r7, #22]
 800ebe6:	e00b      	b.n	800ec00 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ebe8:	8afb      	ldrh	r3, [r7, #22]
 800ebea:	68fa      	ldr	r2, [r7, #12]
 800ebec:	4413      	add	r3, r2
 800ebee:	781a      	ldrb	r2, [r3, #0]
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ebfa:	8afb      	ldrh	r3, [r7, #22]
 800ebfc:	3302      	adds	r3, #2
 800ebfe:	82fb      	strh	r3, [r7, #22]
 800ec00:	8afa      	ldrh	r2, [r7, #22]
 800ec02:	8abb      	ldrh	r3, [r7, #20]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d3ef      	bcc.n	800ebe8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	701a      	strb	r2, [r3, #0]
  }
}
 800ec0e:	bf00      	nop
 800ec10:	371c      	adds	r7, #28
 800ec12:	46bd      	mov	sp, r7
 800ec14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec18:	4770      	bx	lr

0800ec1a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ec1a:	b480      	push	{r7}
 800ec1c:	b085      	sub	sp, #20
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	6078      	str	r0, [r7, #4]
 800ec22:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	881b      	ldrh	r3, [r3, #0]
 800ec28:	687a      	ldr	r2, [r7, #4]
 800ec2a:	7812      	ldrb	r2, [r2, #0]
 800ec2c:	4413      	add	r3, r2
 800ec2e:	b29a      	uxth	r2, r3
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	781b      	ldrb	r3, [r3, #0]
 800ec38:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	4413      	add	r3, r2
 800ec3e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ec40:	68fb      	ldr	r3, [r7, #12]
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3714      	adds	r7, #20
 800ec46:	46bd      	mov	sp, r7
 800ec48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4c:	4770      	bx	lr

0800ec4e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b086      	sub	sp, #24
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	60f8      	str	r0, [r7, #12]
 800ec56:	60b9      	str	r1, [r7, #8]
 800ec58:	4613      	mov	r3, r2
 800ec5a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	789b      	ldrb	r3, [r3, #2]
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d002      	beq.n	800ec6e <USBH_CtlReq+0x20>
 800ec68:	2b02      	cmp	r3, #2
 800ec6a:	d00f      	beq.n	800ec8c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ec6c:	e027      	b.n	800ecbe <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	68ba      	ldr	r2, [r7, #8]
 800ec72:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	88fa      	ldrh	r2, [r7, #6]
 800ec78:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2202      	movs	r2, #2
 800ec84:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ec86:	2301      	movs	r3, #1
 800ec88:	75fb      	strb	r3, [r7, #23]
      break;
 800ec8a:	e018      	b.n	800ecbe <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ec8c:	68f8      	ldr	r0, [r7, #12]
 800ec8e:	f000 f81b 	bl	800ecc8 <USBH_HandleControl>
 800ec92:	4603      	mov	r3, r0
 800ec94:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ec96:	7dfb      	ldrb	r3, [r7, #23]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d002      	beq.n	800eca2 <USBH_CtlReq+0x54>
 800ec9c:	7dfb      	ldrb	r3, [r7, #23]
 800ec9e:	2b03      	cmp	r3, #3
 800eca0:	d106      	bne.n	800ecb0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2201      	movs	r2, #1
 800eca6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	761a      	strb	r2, [r3, #24]
      break;
 800ecae:	e005      	b.n	800ecbc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ecb0:	7dfb      	ldrb	r3, [r7, #23]
 800ecb2:	2b02      	cmp	r3, #2
 800ecb4:	d102      	bne.n	800ecbc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	2201      	movs	r2, #1
 800ecba:	709a      	strb	r2, [r3, #2]
      break;
 800ecbc:	bf00      	nop
  }
  return status;
 800ecbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3718      	adds	r7, #24
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b086      	sub	sp, #24
 800eccc:	af02      	add	r7, sp, #8
 800ecce:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	7e1b      	ldrb	r3, [r3, #24]
 800ecdc:	3b01      	subs	r3, #1
 800ecde:	2b0a      	cmp	r3, #10
 800ece0:	f200 8156 	bhi.w	800ef90 <USBH_HandleControl+0x2c8>
 800ece4:	a201      	add	r2, pc, #4	@ (adr r2, 800ecec <USBH_HandleControl+0x24>)
 800ece6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecea:	bf00      	nop
 800ecec:	0800ed19 	.word	0x0800ed19
 800ecf0:	0800ed33 	.word	0x0800ed33
 800ecf4:	0800ed9d 	.word	0x0800ed9d
 800ecf8:	0800edc3 	.word	0x0800edc3
 800ecfc:	0800edfb 	.word	0x0800edfb
 800ed00:	0800ee25 	.word	0x0800ee25
 800ed04:	0800ee77 	.word	0x0800ee77
 800ed08:	0800ee99 	.word	0x0800ee99
 800ed0c:	0800eed5 	.word	0x0800eed5
 800ed10:	0800eefb 	.word	0x0800eefb
 800ed14:	0800ef39 	.word	0x0800ef39
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f103 0110 	add.w	r1, r3, #16
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	795b      	ldrb	r3, [r3, #5]
 800ed22:	461a      	mov	r2, r3
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f000 f943 	bl	800efb0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2202      	movs	r2, #2
 800ed2e:	761a      	strb	r2, [r3, #24]
      break;
 800ed30:	e139      	b.n	800efa6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	795b      	ldrb	r3, [r3, #5]
 800ed36:	4619      	mov	r1, r3
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f003 ffb3 	bl	8012ca4 <USBH_LL_GetURBState>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ed42:	7bbb      	ldrb	r3, [r7, #14]
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d11e      	bne.n	800ed86 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	7c1b      	ldrb	r3, [r3, #16]
 800ed4c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ed50:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	8adb      	ldrh	r3, [r3, #22]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d00a      	beq.n	800ed70 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ed5a:	7b7b      	ldrb	r3, [r7, #13]
 800ed5c:	2b80      	cmp	r3, #128	@ 0x80
 800ed5e:	d103      	bne.n	800ed68 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2203      	movs	r2, #3
 800ed64:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ed66:	e115      	b.n	800ef94 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2205      	movs	r2, #5
 800ed6c:	761a      	strb	r2, [r3, #24]
      break;
 800ed6e:	e111      	b.n	800ef94 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ed70:	7b7b      	ldrb	r3, [r7, #13]
 800ed72:	2b80      	cmp	r3, #128	@ 0x80
 800ed74:	d103      	bne.n	800ed7e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2209      	movs	r2, #9
 800ed7a:	761a      	strb	r2, [r3, #24]
      break;
 800ed7c:	e10a      	b.n	800ef94 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2207      	movs	r2, #7
 800ed82:	761a      	strb	r2, [r3, #24]
      break;
 800ed84:	e106      	b.n	800ef94 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ed86:	7bbb      	ldrb	r3, [r7, #14]
 800ed88:	2b04      	cmp	r3, #4
 800ed8a:	d003      	beq.n	800ed94 <USBH_HandleControl+0xcc>
 800ed8c:	7bbb      	ldrb	r3, [r7, #14]
 800ed8e:	2b02      	cmp	r3, #2
 800ed90:	f040 8100 	bne.w	800ef94 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	220b      	movs	r2, #11
 800ed98:	761a      	strb	r2, [r3, #24]
      break;
 800ed9a:	e0fb      	b.n	800ef94 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800eda2:	b29a      	uxth	r2, r3
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6899      	ldr	r1, [r3, #8]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	899a      	ldrh	r2, [r3, #12]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	791b      	ldrb	r3, [r3, #4]
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f000 f93a 	bl	800f02e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2204      	movs	r2, #4
 800edbe:	761a      	strb	r2, [r3, #24]
      break;
 800edc0:	e0f1      	b.n	800efa6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	791b      	ldrb	r3, [r3, #4]
 800edc6:	4619      	mov	r1, r3
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f003 ff6b 	bl	8012ca4 <USBH_LL_GetURBState>
 800edce:	4603      	mov	r3, r0
 800edd0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800edd2:	7bbb      	ldrb	r3, [r7, #14]
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d102      	bne.n	800edde <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2209      	movs	r2, #9
 800eddc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800edde:	7bbb      	ldrb	r3, [r7, #14]
 800ede0:	2b05      	cmp	r3, #5
 800ede2:	d102      	bne.n	800edea <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ede4:	2303      	movs	r3, #3
 800ede6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ede8:	e0d6      	b.n	800ef98 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800edea:	7bbb      	ldrb	r3, [r7, #14]
 800edec:	2b04      	cmp	r3, #4
 800edee:	f040 80d3 	bne.w	800ef98 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	220b      	movs	r2, #11
 800edf6:	761a      	strb	r2, [r3, #24]
      break;
 800edf8:	e0ce      	b.n	800ef98 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6899      	ldr	r1, [r3, #8]
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	899a      	ldrh	r2, [r3, #12]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	795b      	ldrb	r3, [r3, #5]
 800ee06:	2001      	movs	r0, #1
 800ee08:	9000      	str	r0, [sp, #0]
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f000 f8ea 	bl	800efe4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ee16:	b29a      	uxth	r2, r3
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2206      	movs	r2, #6
 800ee20:	761a      	strb	r2, [r3, #24]
      break;
 800ee22:	e0c0      	b.n	800efa6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	795b      	ldrb	r3, [r3, #5]
 800ee28:	4619      	mov	r1, r3
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f003 ff3a 	bl	8012ca4 <USBH_LL_GetURBState>
 800ee30:	4603      	mov	r3, r0
 800ee32:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ee34:	7bbb      	ldrb	r3, [r7, #14]
 800ee36:	2b01      	cmp	r3, #1
 800ee38:	d103      	bne.n	800ee42 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2207      	movs	r2, #7
 800ee3e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ee40:	e0ac      	b.n	800ef9c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ee42:	7bbb      	ldrb	r3, [r7, #14]
 800ee44:	2b05      	cmp	r3, #5
 800ee46:	d105      	bne.n	800ee54 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	220c      	movs	r2, #12
 800ee4c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ee4e:	2303      	movs	r3, #3
 800ee50:	73fb      	strb	r3, [r7, #15]
      break;
 800ee52:	e0a3      	b.n	800ef9c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ee54:	7bbb      	ldrb	r3, [r7, #14]
 800ee56:	2b02      	cmp	r3, #2
 800ee58:	d103      	bne.n	800ee62 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2205      	movs	r2, #5
 800ee5e:	761a      	strb	r2, [r3, #24]
      break;
 800ee60:	e09c      	b.n	800ef9c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ee62:	7bbb      	ldrb	r3, [r7, #14]
 800ee64:	2b04      	cmp	r3, #4
 800ee66:	f040 8099 	bne.w	800ef9c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	220b      	movs	r2, #11
 800ee6e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ee70:	2302      	movs	r3, #2
 800ee72:	73fb      	strb	r3, [r7, #15]
      break;
 800ee74:	e092      	b.n	800ef9c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	791b      	ldrb	r3, [r3, #4]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	2100      	movs	r1, #0
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f000 f8d5 	bl	800f02e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ee8a:	b29a      	uxth	r2, r3
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2208      	movs	r2, #8
 800ee94:	761a      	strb	r2, [r3, #24]

      break;
 800ee96:	e086      	b.n	800efa6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	791b      	ldrb	r3, [r3, #4]
 800ee9c:	4619      	mov	r1, r3
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f003 ff00 	bl	8012ca4 <USBH_LL_GetURBState>
 800eea4:	4603      	mov	r3, r0
 800eea6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800eea8:	7bbb      	ldrb	r3, [r7, #14]
 800eeaa:	2b01      	cmp	r3, #1
 800eeac:	d105      	bne.n	800eeba <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	220d      	movs	r2, #13
 800eeb2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800eeb8:	e072      	b.n	800efa0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800eeba:	7bbb      	ldrb	r3, [r7, #14]
 800eebc:	2b04      	cmp	r3, #4
 800eebe:	d103      	bne.n	800eec8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	220b      	movs	r2, #11
 800eec4:	761a      	strb	r2, [r3, #24]
      break;
 800eec6:	e06b      	b.n	800efa0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800eec8:	7bbb      	ldrb	r3, [r7, #14]
 800eeca:	2b05      	cmp	r3, #5
 800eecc:	d168      	bne.n	800efa0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800eece:	2303      	movs	r3, #3
 800eed0:	73fb      	strb	r3, [r7, #15]
      break;
 800eed2:	e065      	b.n	800efa0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	795b      	ldrb	r3, [r3, #5]
 800eed8:	2201      	movs	r2, #1
 800eeda:	9200      	str	r2, [sp, #0]
 800eedc:	2200      	movs	r2, #0
 800eede:	2100      	movs	r1, #0
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f000 f87f 	bl	800efe4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800eeec:	b29a      	uxth	r2, r3
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	220a      	movs	r2, #10
 800eef6:	761a      	strb	r2, [r3, #24]
      break;
 800eef8:	e055      	b.n	800efa6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	795b      	ldrb	r3, [r3, #5]
 800eefe:	4619      	mov	r1, r3
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f003 fecf 	bl	8012ca4 <USBH_LL_GetURBState>
 800ef06:	4603      	mov	r3, r0
 800ef08:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ef0a:	7bbb      	ldrb	r3, [r7, #14]
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	d105      	bne.n	800ef1c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ef10:	2300      	movs	r3, #0
 800ef12:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	220d      	movs	r2, #13
 800ef18:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ef1a:	e043      	b.n	800efa4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ef1c:	7bbb      	ldrb	r3, [r7, #14]
 800ef1e:	2b02      	cmp	r3, #2
 800ef20:	d103      	bne.n	800ef2a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2209      	movs	r2, #9
 800ef26:	761a      	strb	r2, [r3, #24]
      break;
 800ef28:	e03c      	b.n	800efa4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ef2a:	7bbb      	ldrb	r3, [r7, #14]
 800ef2c:	2b04      	cmp	r3, #4
 800ef2e:	d139      	bne.n	800efa4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	220b      	movs	r2, #11
 800ef34:	761a      	strb	r2, [r3, #24]
      break;
 800ef36:	e035      	b.n	800efa4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	7e5b      	ldrb	r3, [r3, #25]
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	b2da      	uxtb	r2, r3
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	765a      	strb	r2, [r3, #25]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	7e5b      	ldrb	r3, [r3, #25]
 800ef48:	2b02      	cmp	r3, #2
 800ef4a:	d806      	bhi.n	800ef5a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2201      	movs	r2, #1
 800ef50:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2201      	movs	r2, #1
 800ef56:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ef58:	e025      	b.n	800efa6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ef60:	2106      	movs	r1, #6
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	795b      	ldrb	r3, [r3, #5]
 800ef70:	4619      	mov	r1, r3
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f000 f90c 	bl	800f190 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	791b      	ldrb	r3, [r3, #4]
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f000 f906 	bl	800f190 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2200      	movs	r2, #0
 800ef88:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ef8a:	2302      	movs	r3, #2
 800ef8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ef8e:	e00a      	b.n	800efa6 <USBH_HandleControl+0x2de>

    default:
      break;
 800ef90:	bf00      	nop
 800ef92:	e008      	b.n	800efa6 <USBH_HandleControl+0x2de>
      break;
 800ef94:	bf00      	nop
 800ef96:	e006      	b.n	800efa6 <USBH_HandleControl+0x2de>
      break;
 800ef98:	bf00      	nop
 800ef9a:	e004      	b.n	800efa6 <USBH_HandleControl+0x2de>
      break;
 800ef9c:	bf00      	nop
 800ef9e:	e002      	b.n	800efa6 <USBH_HandleControl+0x2de>
      break;
 800efa0:	bf00      	nop
 800efa2:	e000      	b.n	800efa6 <USBH_HandleControl+0x2de>
      break;
 800efa4:	bf00      	nop
  }

  return status;
 800efa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3710      	adds	r7, #16
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b088      	sub	sp, #32
 800efb4:	af04      	add	r7, sp, #16
 800efb6:	60f8      	str	r0, [r7, #12]
 800efb8:	60b9      	str	r1, [r7, #8]
 800efba:	4613      	mov	r3, r2
 800efbc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800efbe:	79f9      	ldrb	r1, [r7, #7]
 800efc0:	2300      	movs	r3, #0
 800efc2:	9303      	str	r3, [sp, #12]
 800efc4:	2308      	movs	r3, #8
 800efc6:	9302      	str	r3, [sp, #8]
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	9301      	str	r3, [sp, #4]
 800efcc:	2300      	movs	r3, #0
 800efce:	9300      	str	r3, [sp, #0]
 800efd0:	2300      	movs	r3, #0
 800efd2:	2200      	movs	r2, #0
 800efd4:	68f8      	ldr	r0, [r7, #12]
 800efd6:	f003 fe34 	bl	8012c42 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800efda:	2300      	movs	r3, #0
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3710      	adds	r7, #16
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b088      	sub	sp, #32
 800efe8:	af04      	add	r7, sp, #16
 800efea:	60f8      	str	r0, [r7, #12]
 800efec:	60b9      	str	r1, [r7, #8]
 800efee:	4611      	mov	r1, r2
 800eff0:	461a      	mov	r2, r3
 800eff2:	460b      	mov	r3, r1
 800eff4:	80fb      	strh	r3, [r7, #6]
 800eff6:	4613      	mov	r3, r2
 800eff8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f000:	2b00      	cmp	r3, #0
 800f002:	d001      	beq.n	800f008 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f004:	2300      	movs	r3, #0
 800f006:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f008:	7979      	ldrb	r1, [r7, #5]
 800f00a:	7e3b      	ldrb	r3, [r7, #24]
 800f00c:	9303      	str	r3, [sp, #12]
 800f00e:	88fb      	ldrh	r3, [r7, #6]
 800f010:	9302      	str	r3, [sp, #8]
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	9301      	str	r3, [sp, #4]
 800f016:	2301      	movs	r3, #1
 800f018:	9300      	str	r3, [sp, #0]
 800f01a:	2300      	movs	r3, #0
 800f01c:	2200      	movs	r2, #0
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f003 fe0f 	bl	8012c42 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f024:	2300      	movs	r3, #0
}
 800f026:	4618      	mov	r0, r3
 800f028:	3710      	adds	r7, #16
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}

0800f02e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f02e:	b580      	push	{r7, lr}
 800f030:	b088      	sub	sp, #32
 800f032:	af04      	add	r7, sp, #16
 800f034:	60f8      	str	r0, [r7, #12]
 800f036:	60b9      	str	r1, [r7, #8]
 800f038:	4611      	mov	r1, r2
 800f03a:	461a      	mov	r2, r3
 800f03c:	460b      	mov	r3, r1
 800f03e:	80fb      	strh	r3, [r7, #6]
 800f040:	4613      	mov	r3, r2
 800f042:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f044:	7979      	ldrb	r1, [r7, #5]
 800f046:	2300      	movs	r3, #0
 800f048:	9303      	str	r3, [sp, #12]
 800f04a:	88fb      	ldrh	r3, [r7, #6]
 800f04c:	9302      	str	r3, [sp, #8]
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	9301      	str	r3, [sp, #4]
 800f052:	2301      	movs	r3, #1
 800f054:	9300      	str	r3, [sp, #0]
 800f056:	2300      	movs	r3, #0
 800f058:	2201      	movs	r2, #1
 800f05a:	68f8      	ldr	r0, [r7, #12]
 800f05c:	f003 fdf1 	bl	8012c42 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f060:	2300      	movs	r3, #0

}
 800f062:	4618      	mov	r0, r3
 800f064:	3710      	adds	r7, #16
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}

0800f06a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f06a:	b580      	push	{r7, lr}
 800f06c:	b088      	sub	sp, #32
 800f06e:	af04      	add	r7, sp, #16
 800f070:	60f8      	str	r0, [r7, #12]
 800f072:	60b9      	str	r1, [r7, #8]
 800f074:	4611      	mov	r1, r2
 800f076:	461a      	mov	r2, r3
 800f078:	460b      	mov	r3, r1
 800f07a:	80fb      	strh	r3, [r7, #6]
 800f07c:	4613      	mov	r3, r2
 800f07e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f086:	2b00      	cmp	r3, #0
 800f088:	d001      	beq.n	800f08e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f08a:	2300      	movs	r3, #0
 800f08c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f08e:	7979      	ldrb	r1, [r7, #5]
 800f090:	7e3b      	ldrb	r3, [r7, #24]
 800f092:	9303      	str	r3, [sp, #12]
 800f094:	88fb      	ldrh	r3, [r7, #6]
 800f096:	9302      	str	r3, [sp, #8]
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	9301      	str	r3, [sp, #4]
 800f09c:	2301      	movs	r3, #1
 800f09e:	9300      	str	r3, [sp, #0]
 800f0a0:	2302      	movs	r3, #2
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	68f8      	ldr	r0, [r7, #12]
 800f0a6:	f003 fdcc 	bl	8012c42 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f0aa:	2300      	movs	r3, #0
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3710      	adds	r7, #16
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b088      	sub	sp, #32
 800f0b8:	af04      	add	r7, sp, #16
 800f0ba:	60f8      	str	r0, [r7, #12]
 800f0bc:	60b9      	str	r1, [r7, #8]
 800f0be:	4611      	mov	r1, r2
 800f0c0:	461a      	mov	r2, r3
 800f0c2:	460b      	mov	r3, r1
 800f0c4:	80fb      	strh	r3, [r7, #6]
 800f0c6:	4613      	mov	r3, r2
 800f0c8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f0ca:	7979      	ldrb	r1, [r7, #5]
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	9303      	str	r3, [sp, #12]
 800f0d0:	88fb      	ldrh	r3, [r7, #6]
 800f0d2:	9302      	str	r3, [sp, #8]
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	9301      	str	r3, [sp, #4]
 800f0d8:	2301      	movs	r3, #1
 800f0da:	9300      	str	r3, [sp, #0]
 800f0dc:	2302      	movs	r3, #2
 800f0de:	2201      	movs	r2, #1
 800f0e0:	68f8      	ldr	r0, [r7, #12]
 800f0e2:	f003 fdae 	bl	8012c42 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f0e6:	2300      	movs	r3, #0
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3710      	adds	r7, #16
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b086      	sub	sp, #24
 800f0f4:	af04      	add	r7, sp, #16
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	4608      	mov	r0, r1
 800f0fa:	4611      	mov	r1, r2
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	4603      	mov	r3, r0
 800f100:	70fb      	strb	r3, [r7, #3]
 800f102:	460b      	mov	r3, r1
 800f104:	70bb      	strb	r3, [r7, #2]
 800f106:	4613      	mov	r3, r2
 800f108:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f10a:	7878      	ldrb	r0, [r7, #1]
 800f10c:	78ba      	ldrb	r2, [r7, #2]
 800f10e:	78f9      	ldrb	r1, [r7, #3]
 800f110:	8b3b      	ldrh	r3, [r7, #24]
 800f112:	9302      	str	r3, [sp, #8]
 800f114:	7d3b      	ldrb	r3, [r7, #20]
 800f116:	9301      	str	r3, [sp, #4]
 800f118:	7c3b      	ldrb	r3, [r7, #16]
 800f11a:	9300      	str	r3, [sp, #0]
 800f11c:	4603      	mov	r3, r0
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f003 fd41 	bl	8012ba6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800f124:	2300      	movs	r3, #0
}
 800f126:	4618      	mov	r0, r3
 800f128:	3708      	adds	r7, #8
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}

0800f12e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f12e:	b580      	push	{r7, lr}
 800f130:	b082      	sub	sp, #8
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
 800f136:	460b      	mov	r3, r1
 800f138:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800f13a:	78fb      	ldrb	r3, [r7, #3]
 800f13c:	4619      	mov	r1, r3
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f003 fd60 	bl	8012c04 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f144:	2300      	movs	r3, #0
}
 800f146:	4618      	mov	r0, r3
 800f148:	3708      	adds	r7, #8
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}

0800f14e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f14e:	b580      	push	{r7, lr}
 800f150:	b084      	sub	sp, #16
 800f152:	af00      	add	r7, sp, #0
 800f154:	6078      	str	r0, [r7, #4]
 800f156:	460b      	mov	r3, r1
 800f158:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 f836 	bl	800f1cc <USBH_GetFreePipe>
 800f160:	4603      	mov	r3, r0
 800f162:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f164:	89fb      	ldrh	r3, [r7, #14]
 800f166:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d00a      	beq.n	800f184 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800f16e:	78fa      	ldrb	r2, [r7, #3]
 800f170:	89fb      	ldrh	r3, [r7, #14]
 800f172:	f003 030f 	and.w	r3, r3, #15
 800f176:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f17a:	6879      	ldr	r1, [r7, #4]
 800f17c:	33e0      	adds	r3, #224	@ 0xe0
 800f17e:	009b      	lsls	r3, r3, #2
 800f180:	440b      	add	r3, r1
 800f182:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f184:	89fb      	ldrh	r3, [r7, #14]
 800f186:	b2db      	uxtb	r3, r3
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3710      	adds	r7, #16
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f190:	b480      	push	{r7}
 800f192:	b083      	sub	sp, #12
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	460b      	mov	r3, r1
 800f19a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800f19c:	78fb      	ldrb	r3, [r7, #3]
 800f19e:	2b0f      	cmp	r3, #15
 800f1a0:	d80d      	bhi.n	800f1be <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f1a2:	78fb      	ldrb	r3, [r7, #3]
 800f1a4:	687a      	ldr	r2, [r7, #4]
 800f1a6:	33e0      	adds	r3, #224	@ 0xe0
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	4413      	add	r3, r2
 800f1ac:	685a      	ldr	r2, [r3, #4]
 800f1ae:	78fb      	ldrb	r3, [r7, #3]
 800f1b0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f1b4:	6879      	ldr	r1, [r7, #4]
 800f1b6:	33e0      	adds	r3, #224	@ 0xe0
 800f1b8:	009b      	lsls	r3, r3, #2
 800f1ba:	440b      	add	r3, r1
 800f1bc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f1be:	2300      	movs	r3, #0
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	370c      	adds	r7, #12
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ca:	4770      	bx	lr

0800f1cc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b085      	sub	sp, #20
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800f1d8:	2300      	movs	r3, #0
 800f1da:	73fb      	strb	r3, [r7, #15]
 800f1dc:	e00f      	b.n	800f1fe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f1de:	7bfb      	ldrb	r3, [r7, #15]
 800f1e0:	687a      	ldr	r2, [r7, #4]
 800f1e2:	33e0      	adds	r3, #224	@ 0xe0
 800f1e4:	009b      	lsls	r3, r3, #2
 800f1e6:	4413      	add	r3, r2
 800f1e8:	685b      	ldr	r3, [r3, #4]
 800f1ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d102      	bne.n	800f1f8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f1f2:	7bfb      	ldrb	r3, [r7, #15]
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	e007      	b.n	800f208 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800f1f8:	7bfb      	ldrb	r3, [r7, #15]
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	73fb      	strb	r3, [r7, #15]
 800f1fe:	7bfb      	ldrb	r3, [r7, #15]
 800f200:	2b0f      	cmp	r3, #15
 800f202:	d9ec      	bls.n	800f1de <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f204:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800f208:	4618      	mov	r0, r3
 800f20a:	3714      	adds	r7, #20
 800f20c:	46bd      	mov	sp, r7
 800f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f212:	4770      	bx	lr

0800f214 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	4603      	mov	r3, r0
 800f21c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f21e:	79fb      	ldrb	r3, [r7, #7]
 800f220:	4a08      	ldr	r2, [pc, #32]	@ (800f244 <disk_status+0x30>)
 800f222:	009b      	lsls	r3, r3, #2
 800f224:	4413      	add	r3, r2
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	79fa      	ldrb	r2, [r7, #7]
 800f22c:	4905      	ldr	r1, [pc, #20]	@ (800f244 <disk_status+0x30>)
 800f22e:	440a      	add	r2, r1
 800f230:	7a12      	ldrb	r2, [r2, #8]
 800f232:	4610      	mov	r0, r2
 800f234:	4798      	blx	r3
 800f236:	4603      	mov	r3, r0
 800f238:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3710      	adds	r7, #16
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}
 800f244:	200022bc 	.word	0x200022bc

0800f248 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b084      	sub	sp, #16
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	4603      	mov	r3, r0
 800f250:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f252:	2300      	movs	r3, #0
 800f254:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f256:	79fb      	ldrb	r3, [r7, #7]
 800f258:	4a0e      	ldr	r2, [pc, #56]	@ (800f294 <disk_initialize+0x4c>)
 800f25a:	5cd3      	ldrb	r3, [r2, r3]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d114      	bne.n	800f28a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f260:	79fb      	ldrb	r3, [r7, #7]
 800f262:	4a0c      	ldr	r2, [pc, #48]	@ (800f294 <disk_initialize+0x4c>)
 800f264:	009b      	lsls	r3, r3, #2
 800f266:	4413      	add	r3, r2
 800f268:	685b      	ldr	r3, [r3, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	79fa      	ldrb	r2, [r7, #7]
 800f26e:	4909      	ldr	r1, [pc, #36]	@ (800f294 <disk_initialize+0x4c>)
 800f270:	440a      	add	r2, r1
 800f272:	7a12      	ldrb	r2, [r2, #8]
 800f274:	4610      	mov	r0, r2
 800f276:	4798      	blx	r3
 800f278:	4603      	mov	r3, r0
 800f27a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800f27c:	7bfb      	ldrb	r3, [r7, #15]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d103      	bne.n	800f28a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800f282:	79fb      	ldrb	r3, [r7, #7]
 800f284:	4a03      	ldr	r2, [pc, #12]	@ (800f294 <disk_initialize+0x4c>)
 800f286:	2101      	movs	r1, #1
 800f288:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800f28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3710      	adds	r7, #16
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	200022bc 	.word	0x200022bc

0800f298 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f298:	b590      	push	{r4, r7, lr}
 800f29a:	b087      	sub	sp, #28
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	60b9      	str	r1, [r7, #8]
 800f2a0:	607a      	str	r2, [r7, #4]
 800f2a2:	603b      	str	r3, [r7, #0]
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f2a8:	7bfb      	ldrb	r3, [r7, #15]
 800f2aa:	4a0a      	ldr	r2, [pc, #40]	@ (800f2d4 <disk_read+0x3c>)
 800f2ac:	009b      	lsls	r3, r3, #2
 800f2ae:	4413      	add	r3, r2
 800f2b0:	685b      	ldr	r3, [r3, #4]
 800f2b2:	689c      	ldr	r4, [r3, #8]
 800f2b4:	7bfb      	ldrb	r3, [r7, #15]
 800f2b6:	4a07      	ldr	r2, [pc, #28]	@ (800f2d4 <disk_read+0x3c>)
 800f2b8:	4413      	add	r3, r2
 800f2ba:	7a18      	ldrb	r0, [r3, #8]
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	687a      	ldr	r2, [r7, #4]
 800f2c0:	68b9      	ldr	r1, [r7, #8]
 800f2c2:	47a0      	blx	r4
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	75fb      	strb	r3, [r7, #23]
  return res;
 800f2c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	371c      	adds	r7, #28
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd90      	pop	{r4, r7, pc}
 800f2d2:	bf00      	nop
 800f2d4:	200022bc 	.word	0x200022bc

0800f2d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f2d8:	b590      	push	{r4, r7, lr}
 800f2da:	b087      	sub	sp, #28
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	60b9      	str	r1, [r7, #8]
 800f2e0:	607a      	str	r2, [r7, #4]
 800f2e2:	603b      	str	r3, [r7, #0]
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f2e8:	7bfb      	ldrb	r3, [r7, #15]
 800f2ea:	4a0a      	ldr	r2, [pc, #40]	@ (800f314 <disk_write+0x3c>)
 800f2ec:	009b      	lsls	r3, r3, #2
 800f2ee:	4413      	add	r3, r2
 800f2f0:	685b      	ldr	r3, [r3, #4]
 800f2f2:	68dc      	ldr	r4, [r3, #12]
 800f2f4:	7bfb      	ldrb	r3, [r7, #15]
 800f2f6:	4a07      	ldr	r2, [pc, #28]	@ (800f314 <disk_write+0x3c>)
 800f2f8:	4413      	add	r3, r2
 800f2fa:	7a18      	ldrb	r0, [r3, #8]
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	68b9      	ldr	r1, [r7, #8]
 800f302:	47a0      	blx	r4
 800f304:	4603      	mov	r3, r0
 800f306:	75fb      	strb	r3, [r7, #23]
  return res;
 800f308:	7dfb      	ldrb	r3, [r7, #23]
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	371c      	adds	r7, #28
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd90      	pop	{r4, r7, pc}
 800f312:	bf00      	nop
 800f314:	200022bc 	.word	0x200022bc

0800f318 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b084      	sub	sp, #16
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	4603      	mov	r3, r0
 800f320:	603a      	str	r2, [r7, #0]
 800f322:	71fb      	strb	r3, [r7, #7]
 800f324:	460b      	mov	r3, r1
 800f326:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f328:	79fb      	ldrb	r3, [r7, #7]
 800f32a:	4a09      	ldr	r2, [pc, #36]	@ (800f350 <disk_ioctl+0x38>)
 800f32c:	009b      	lsls	r3, r3, #2
 800f32e:	4413      	add	r3, r2
 800f330:	685b      	ldr	r3, [r3, #4]
 800f332:	691b      	ldr	r3, [r3, #16]
 800f334:	79fa      	ldrb	r2, [r7, #7]
 800f336:	4906      	ldr	r1, [pc, #24]	@ (800f350 <disk_ioctl+0x38>)
 800f338:	440a      	add	r2, r1
 800f33a:	7a10      	ldrb	r0, [r2, #8]
 800f33c:	79b9      	ldrb	r1, [r7, #6]
 800f33e:	683a      	ldr	r2, [r7, #0]
 800f340:	4798      	blx	r3
 800f342:	4603      	mov	r3, r0
 800f344:	73fb      	strb	r3, [r7, #15]
  return res;
 800f346:	7bfb      	ldrb	r3, [r7, #15]
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3710      	adds	r7, #16
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}
 800f350:	200022bc 	.word	0x200022bc

0800f354 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f354:	b480      	push	{r7}
 800f356:	b085      	sub	sp, #20
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	3301      	adds	r3, #1
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f364:	89fb      	ldrh	r3, [r7, #14]
 800f366:	021b      	lsls	r3, r3, #8
 800f368:	b21a      	sxth	r2, r3
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	b21b      	sxth	r3, r3
 800f370:	4313      	orrs	r3, r2
 800f372:	b21b      	sxth	r3, r3
 800f374:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f376:	89fb      	ldrh	r3, [r7, #14]
}
 800f378:	4618      	mov	r0, r3
 800f37a:	3714      	adds	r7, #20
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr

0800f384 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f384:	b480      	push	{r7}
 800f386:	b085      	sub	sp, #20
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	3303      	adds	r3, #3
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	021b      	lsls	r3, r3, #8
 800f398:	687a      	ldr	r2, [r7, #4]
 800f39a:	3202      	adds	r2, #2
 800f39c:	7812      	ldrb	r2, [r2, #0]
 800f39e:	4313      	orrs	r3, r2
 800f3a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	021b      	lsls	r3, r3, #8
 800f3a6:	687a      	ldr	r2, [r7, #4]
 800f3a8:	3201      	adds	r2, #1
 800f3aa:	7812      	ldrb	r2, [r2, #0]
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	021b      	lsls	r3, r3, #8
 800f3b4:	687a      	ldr	r2, [r7, #4]
 800f3b6:	7812      	ldrb	r2, [r2, #0]
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	60fb      	str	r3, [r7, #12]
	return rv;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3714      	adds	r7, #20
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c8:	4770      	bx	lr

0800f3ca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f3ca:	b480      	push	{r7}
 800f3cc:	b083      	sub	sp, #12
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	6078      	str	r0, [r7, #4]
 800f3d2:	460b      	mov	r3, r1
 800f3d4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	1c5a      	adds	r2, r3, #1
 800f3da:	607a      	str	r2, [r7, #4]
 800f3dc:	887a      	ldrh	r2, [r7, #2]
 800f3de:	b2d2      	uxtb	r2, r2
 800f3e0:	701a      	strb	r2, [r3, #0]
 800f3e2:	887b      	ldrh	r3, [r7, #2]
 800f3e4:	0a1b      	lsrs	r3, r3, #8
 800f3e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	1c5a      	adds	r2, r3, #1
 800f3ec:	607a      	str	r2, [r7, #4]
 800f3ee:	887a      	ldrh	r2, [r7, #2]
 800f3f0:	b2d2      	uxtb	r2, r2
 800f3f2:	701a      	strb	r2, [r3, #0]
}
 800f3f4:	bf00      	nop
 800f3f6:	370c      	adds	r7, #12
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fe:	4770      	bx	lr

0800f400 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f400:	b480      	push	{r7}
 800f402:	b083      	sub	sp, #12
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	1c5a      	adds	r2, r3, #1
 800f40e:	607a      	str	r2, [r7, #4]
 800f410:	683a      	ldr	r2, [r7, #0]
 800f412:	b2d2      	uxtb	r2, r2
 800f414:	701a      	strb	r2, [r3, #0]
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	0a1b      	lsrs	r3, r3, #8
 800f41a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	1c5a      	adds	r2, r3, #1
 800f420:	607a      	str	r2, [r7, #4]
 800f422:	683a      	ldr	r2, [r7, #0]
 800f424:	b2d2      	uxtb	r2, r2
 800f426:	701a      	strb	r2, [r3, #0]
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	0a1b      	lsrs	r3, r3, #8
 800f42c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	1c5a      	adds	r2, r3, #1
 800f432:	607a      	str	r2, [r7, #4]
 800f434:	683a      	ldr	r2, [r7, #0]
 800f436:	b2d2      	uxtb	r2, r2
 800f438:	701a      	strb	r2, [r3, #0]
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	0a1b      	lsrs	r3, r3, #8
 800f43e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	1c5a      	adds	r2, r3, #1
 800f444:	607a      	str	r2, [r7, #4]
 800f446:	683a      	ldr	r2, [r7, #0]
 800f448:	b2d2      	uxtb	r2, r2
 800f44a:	701a      	strb	r2, [r3, #0]
}
 800f44c:	bf00      	nop
 800f44e:	370c      	adds	r7, #12
 800f450:	46bd      	mov	sp, r7
 800f452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f456:	4770      	bx	lr

0800f458 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f458:	b480      	push	{r7}
 800f45a:	b087      	sub	sp, #28
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	60f8      	str	r0, [r7, #12]
 800f460:	60b9      	str	r1, [r7, #8]
 800f462:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d00d      	beq.n	800f48e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f472:	693a      	ldr	r2, [r7, #16]
 800f474:	1c53      	adds	r3, r2, #1
 800f476:	613b      	str	r3, [r7, #16]
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	1c59      	adds	r1, r3, #1
 800f47c:	6179      	str	r1, [r7, #20]
 800f47e:	7812      	ldrb	r2, [r2, #0]
 800f480:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	3b01      	subs	r3, #1
 800f486:	607b      	str	r3, [r7, #4]
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d1f1      	bne.n	800f472 <mem_cpy+0x1a>
	}
}
 800f48e:	bf00      	nop
 800f490:	371c      	adds	r7, #28
 800f492:	46bd      	mov	sp, r7
 800f494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f498:	4770      	bx	lr

0800f49a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f49a:	b480      	push	{r7}
 800f49c:	b087      	sub	sp, #28
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	60f8      	str	r0, [r7, #12]
 800f4a2:	60b9      	str	r1, [r7, #8]
 800f4a4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	1c5a      	adds	r2, r3, #1
 800f4ae:	617a      	str	r2, [r7, #20]
 800f4b0:	68ba      	ldr	r2, [r7, #8]
 800f4b2:	b2d2      	uxtb	r2, r2
 800f4b4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	3b01      	subs	r3, #1
 800f4ba:	607b      	str	r3, [r7, #4]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d1f3      	bne.n	800f4aa <mem_set+0x10>
}
 800f4c2:	bf00      	nop
 800f4c4:	bf00      	nop
 800f4c6:	371c      	adds	r7, #28
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ce:	4770      	bx	lr

0800f4d0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f4d0:	b480      	push	{r7}
 800f4d2:	b089      	sub	sp, #36	@ 0x24
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	61fb      	str	r3, [r7, #28]
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f4e8:	69fb      	ldr	r3, [r7, #28]
 800f4ea:	1c5a      	adds	r2, r3, #1
 800f4ec:	61fa      	str	r2, [r7, #28]
 800f4ee:	781b      	ldrb	r3, [r3, #0]
 800f4f0:	4619      	mov	r1, r3
 800f4f2:	69bb      	ldr	r3, [r7, #24]
 800f4f4:	1c5a      	adds	r2, r3, #1
 800f4f6:	61ba      	str	r2, [r7, #24]
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	1acb      	subs	r3, r1, r3
 800f4fc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	3b01      	subs	r3, #1
 800f502:	607b      	str	r3, [r7, #4]
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d002      	beq.n	800f510 <mem_cmp+0x40>
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d0eb      	beq.n	800f4e8 <mem_cmp+0x18>

	return r;
 800f510:	697b      	ldr	r3, [r7, #20]
}
 800f512:	4618      	mov	r0, r3
 800f514:	3724      	adds	r7, #36	@ 0x24
 800f516:	46bd      	mov	sp, r7
 800f518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51c:	4770      	bx	lr

0800f51e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f51e:	b480      	push	{r7}
 800f520:	b083      	sub	sp, #12
 800f522:	af00      	add	r7, sp, #0
 800f524:	6078      	str	r0, [r7, #4]
 800f526:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f528:	e002      	b.n	800f530 <chk_chr+0x12>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	3301      	adds	r3, #1
 800f52e:	607b      	str	r3, [r7, #4]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d005      	beq.n	800f544 <chk_chr+0x26>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	461a      	mov	r2, r3
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	4293      	cmp	r3, r2
 800f542:	d1f2      	bne.n	800f52a <chk_chr+0xc>
	return *str;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	781b      	ldrb	r3, [r3, #0]
}
 800f548:	4618      	mov	r0, r3
 800f54a:	370c      	adds	r7, #12
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr

0800f554 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f554:	b480      	push	{r7}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f55e:	2300      	movs	r3, #0
 800f560:	60bb      	str	r3, [r7, #8]
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	60fb      	str	r3, [r7, #12]
 800f566:	e029      	b.n	800f5bc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f568:	4a27      	ldr	r2, [pc, #156]	@ (800f608 <chk_lock+0xb4>)
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	011b      	lsls	r3, r3, #4
 800f56e:	4413      	add	r3, r2
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d01d      	beq.n	800f5b2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f576:	4a24      	ldr	r2, [pc, #144]	@ (800f608 <chk_lock+0xb4>)
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	011b      	lsls	r3, r3, #4
 800f57c:	4413      	add	r3, r2
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	429a      	cmp	r2, r3
 800f586:	d116      	bne.n	800f5b6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f588:	4a1f      	ldr	r2, [pc, #124]	@ (800f608 <chk_lock+0xb4>)
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	011b      	lsls	r3, r3, #4
 800f58e:	4413      	add	r3, r2
 800f590:	3304      	adds	r3, #4
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f598:	429a      	cmp	r2, r3
 800f59a:	d10c      	bne.n	800f5b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f59c:	4a1a      	ldr	r2, [pc, #104]	@ (800f608 <chk_lock+0xb4>)
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	011b      	lsls	r3, r3, #4
 800f5a2:	4413      	add	r3, r2
 800f5a4:	3308      	adds	r3, #8
 800f5a6:	681a      	ldr	r2, [r3, #0]
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f5ac:	429a      	cmp	r2, r3
 800f5ae:	d102      	bne.n	800f5b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f5b0:	e007      	b.n	800f5c2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	60fb      	str	r3, [r7, #12]
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	d9d2      	bls.n	800f568 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2b02      	cmp	r3, #2
 800f5c6:	d109      	bne.n	800f5dc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d102      	bne.n	800f5d4 <chk_lock+0x80>
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	2b02      	cmp	r3, #2
 800f5d2:	d101      	bne.n	800f5d8 <chk_lock+0x84>
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	e010      	b.n	800f5fa <chk_lock+0xa6>
 800f5d8:	2312      	movs	r3, #18
 800f5da:	e00e      	b.n	800f5fa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d108      	bne.n	800f5f4 <chk_lock+0xa0>
 800f5e2:	4a09      	ldr	r2, [pc, #36]	@ (800f608 <chk_lock+0xb4>)
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	011b      	lsls	r3, r3, #4
 800f5e8:	4413      	add	r3, r2
 800f5ea:	330c      	adds	r3, #12
 800f5ec:	881b      	ldrh	r3, [r3, #0]
 800f5ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f5f2:	d101      	bne.n	800f5f8 <chk_lock+0xa4>
 800f5f4:	2310      	movs	r3, #16
 800f5f6:	e000      	b.n	800f5fa <chk_lock+0xa6>
 800f5f8:	2300      	movs	r3, #0
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3714      	adds	r7, #20
 800f5fe:	46bd      	mov	sp, r7
 800f600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f604:	4770      	bx	lr
 800f606:	bf00      	nop
 800f608:	2000209c 	.word	0x2000209c

0800f60c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f60c:	b480      	push	{r7}
 800f60e:	b083      	sub	sp, #12
 800f610:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f612:	2300      	movs	r3, #0
 800f614:	607b      	str	r3, [r7, #4]
 800f616:	e002      	b.n	800f61e <enq_lock+0x12>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	3301      	adds	r3, #1
 800f61c:	607b      	str	r3, [r7, #4]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2b01      	cmp	r3, #1
 800f622:	d806      	bhi.n	800f632 <enq_lock+0x26>
 800f624:	4a09      	ldr	r2, [pc, #36]	@ (800f64c <enq_lock+0x40>)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	011b      	lsls	r3, r3, #4
 800f62a:	4413      	add	r3, r2
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d1f2      	bne.n	800f618 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2b02      	cmp	r3, #2
 800f636:	bf14      	ite	ne
 800f638:	2301      	movne	r3, #1
 800f63a:	2300      	moveq	r3, #0
 800f63c:	b2db      	uxtb	r3, r3
}
 800f63e:	4618      	mov	r0, r3
 800f640:	370c      	adds	r7, #12
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr
 800f64a:	bf00      	nop
 800f64c:	2000209c 	.word	0x2000209c

0800f650 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f650:	b480      	push	{r7}
 800f652:	b085      	sub	sp, #20
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f65a:	2300      	movs	r3, #0
 800f65c:	60fb      	str	r3, [r7, #12]
 800f65e:	e01f      	b.n	800f6a0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f660:	4a41      	ldr	r2, [pc, #260]	@ (800f768 <inc_lock+0x118>)
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	011b      	lsls	r3, r3, #4
 800f666:	4413      	add	r3, r2
 800f668:	681a      	ldr	r2, [r3, #0]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	429a      	cmp	r2, r3
 800f670:	d113      	bne.n	800f69a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f672:	4a3d      	ldr	r2, [pc, #244]	@ (800f768 <inc_lock+0x118>)
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	011b      	lsls	r3, r3, #4
 800f678:	4413      	add	r3, r2
 800f67a:	3304      	adds	r3, #4
 800f67c:	681a      	ldr	r2, [r3, #0]
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f682:	429a      	cmp	r2, r3
 800f684:	d109      	bne.n	800f69a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f686:	4a38      	ldr	r2, [pc, #224]	@ (800f768 <inc_lock+0x118>)
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	011b      	lsls	r3, r3, #4
 800f68c:	4413      	add	r3, r2
 800f68e:	3308      	adds	r3, #8
 800f690:	681a      	ldr	r2, [r3, #0]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f696:	429a      	cmp	r2, r3
 800f698:	d006      	beq.n	800f6a8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	3301      	adds	r3, #1
 800f69e:	60fb      	str	r3, [r7, #12]
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2b01      	cmp	r3, #1
 800f6a4:	d9dc      	bls.n	800f660 <inc_lock+0x10>
 800f6a6:	e000      	b.n	800f6aa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f6a8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	2b02      	cmp	r3, #2
 800f6ae:	d132      	bne.n	800f716 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	60fb      	str	r3, [r7, #12]
 800f6b4:	e002      	b.n	800f6bc <inc_lock+0x6c>
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	60fb      	str	r3, [r7, #12]
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	2b01      	cmp	r3, #1
 800f6c0:	d806      	bhi.n	800f6d0 <inc_lock+0x80>
 800f6c2:	4a29      	ldr	r2, [pc, #164]	@ (800f768 <inc_lock+0x118>)
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	011b      	lsls	r3, r3, #4
 800f6c8:	4413      	add	r3, r2
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d1f2      	bne.n	800f6b6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	2b02      	cmp	r3, #2
 800f6d4:	d101      	bne.n	800f6da <inc_lock+0x8a>
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	e040      	b.n	800f75c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681a      	ldr	r2, [r3, #0]
 800f6de:	4922      	ldr	r1, [pc, #136]	@ (800f768 <inc_lock+0x118>)
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	011b      	lsls	r3, r3, #4
 800f6e4:	440b      	add	r3, r1
 800f6e6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	689a      	ldr	r2, [r3, #8]
 800f6ec:	491e      	ldr	r1, [pc, #120]	@ (800f768 <inc_lock+0x118>)
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	011b      	lsls	r3, r3, #4
 800f6f2:	440b      	add	r3, r1
 800f6f4:	3304      	adds	r3, #4
 800f6f6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	695a      	ldr	r2, [r3, #20]
 800f6fc:	491a      	ldr	r1, [pc, #104]	@ (800f768 <inc_lock+0x118>)
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	011b      	lsls	r3, r3, #4
 800f702:	440b      	add	r3, r1
 800f704:	3308      	adds	r3, #8
 800f706:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f708:	4a17      	ldr	r2, [pc, #92]	@ (800f768 <inc_lock+0x118>)
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	011b      	lsls	r3, r3, #4
 800f70e:	4413      	add	r3, r2
 800f710:	330c      	adds	r3, #12
 800f712:	2200      	movs	r2, #0
 800f714:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d009      	beq.n	800f730 <inc_lock+0xe0>
 800f71c:	4a12      	ldr	r2, [pc, #72]	@ (800f768 <inc_lock+0x118>)
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	011b      	lsls	r3, r3, #4
 800f722:	4413      	add	r3, r2
 800f724:	330c      	adds	r3, #12
 800f726:	881b      	ldrh	r3, [r3, #0]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d001      	beq.n	800f730 <inc_lock+0xe0>
 800f72c:	2300      	movs	r3, #0
 800f72e:	e015      	b.n	800f75c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d108      	bne.n	800f748 <inc_lock+0xf8>
 800f736:	4a0c      	ldr	r2, [pc, #48]	@ (800f768 <inc_lock+0x118>)
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	011b      	lsls	r3, r3, #4
 800f73c:	4413      	add	r3, r2
 800f73e:	330c      	adds	r3, #12
 800f740:	881b      	ldrh	r3, [r3, #0]
 800f742:	3301      	adds	r3, #1
 800f744:	b29a      	uxth	r2, r3
 800f746:	e001      	b.n	800f74c <inc_lock+0xfc>
 800f748:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f74c:	4906      	ldr	r1, [pc, #24]	@ (800f768 <inc_lock+0x118>)
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	011b      	lsls	r3, r3, #4
 800f752:	440b      	add	r3, r1
 800f754:	330c      	adds	r3, #12
 800f756:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	3301      	adds	r3, #1
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3714      	adds	r7, #20
 800f760:	46bd      	mov	sp, r7
 800f762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f766:	4770      	bx	lr
 800f768:	2000209c 	.word	0x2000209c

0800f76c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f76c:	b480      	push	{r7}
 800f76e:	b085      	sub	sp, #20
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	3b01      	subs	r3, #1
 800f778:	607b      	str	r3, [r7, #4]
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2b01      	cmp	r3, #1
 800f77e:	d825      	bhi.n	800f7cc <dec_lock+0x60>
		n = Files[i].ctr;
 800f780:	4a17      	ldr	r2, [pc, #92]	@ (800f7e0 <dec_lock+0x74>)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	011b      	lsls	r3, r3, #4
 800f786:	4413      	add	r3, r2
 800f788:	330c      	adds	r3, #12
 800f78a:	881b      	ldrh	r3, [r3, #0]
 800f78c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f78e:	89fb      	ldrh	r3, [r7, #14]
 800f790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f794:	d101      	bne.n	800f79a <dec_lock+0x2e>
 800f796:	2300      	movs	r3, #0
 800f798:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f79a:	89fb      	ldrh	r3, [r7, #14]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d002      	beq.n	800f7a6 <dec_lock+0x3a>
 800f7a0:	89fb      	ldrh	r3, [r7, #14]
 800f7a2:	3b01      	subs	r3, #1
 800f7a4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f7a6:	4a0e      	ldr	r2, [pc, #56]	@ (800f7e0 <dec_lock+0x74>)
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	011b      	lsls	r3, r3, #4
 800f7ac:	4413      	add	r3, r2
 800f7ae:	330c      	adds	r3, #12
 800f7b0:	89fa      	ldrh	r2, [r7, #14]
 800f7b2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f7b4:	89fb      	ldrh	r3, [r7, #14]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d105      	bne.n	800f7c6 <dec_lock+0x5a>
 800f7ba:	4a09      	ldr	r2, [pc, #36]	@ (800f7e0 <dec_lock+0x74>)
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	011b      	lsls	r3, r3, #4
 800f7c0:	4413      	add	r3, r2
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	737b      	strb	r3, [r7, #13]
 800f7ca:	e001      	b.n	800f7d0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f7cc:	2302      	movs	r3, #2
 800f7ce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f7d0:	7b7b      	ldrb	r3, [r7, #13]
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3714      	adds	r7, #20
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7dc:	4770      	bx	lr
 800f7de:	bf00      	nop
 800f7e0:	2000209c 	.word	0x2000209c

0800f7e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b085      	sub	sp, #20
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	60fb      	str	r3, [r7, #12]
 800f7f0:	e010      	b.n	800f814 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f7f2:	4a0d      	ldr	r2, [pc, #52]	@ (800f828 <clear_lock+0x44>)
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	011b      	lsls	r3, r3, #4
 800f7f8:	4413      	add	r3, r2
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	687a      	ldr	r2, [r7, #4]
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d105      	bne.n	800f80e <clear_lock+0x2a>
 800f802:	4a09      	ldr	r2, [pc, #36]	@ (800f828 <clear_lock+0x44>)
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	011b      	lsls	r3, r3, #4
 800f808:	4413      	add	r3, r2
 800f80a:	2200      	movs	r2, #0
 800f80c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	3301      	adds	r3, #1
 800f812:	60fb      	str	r3, [r7, #12]
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	2b01      	cmp	r3, #1
 800f818:	d9eb      	bls.n	800f7f2 <clear_lock+0xe>
	}
}
 800f81a:	bf00      	nop
 800f81c:	bf00      	nop
 800f81e:	3714      	adds	r7, #20
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr
 800f828:	2000209c 	.word	0x2000209c

0800f82c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b086      	sub	sp, #24
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f834:	2300      	movs	r3, #0
 800f836:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	78db      	ldrb	r3, [r3, #3]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d034      	beq.n	800f8aa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f844:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	7858      	ldrb	r0, [r3, #1]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f850:	2301      	movs	r3, #1
 800f852:	697a      	ldr	r2, [r7, #20]
 800f854:	f7ff fd40 	bl	800f2d8 <disk_write>
 800f858:	4603      	mov	r3, r0
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d002      	beq.n	800f864 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f85e:	2301      	movs	r3, #1
 800f860:	73fb      	strb	r3, [r7, #15]
 800f862:	e022      	b.n	800f8aa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2200      	movs	r2, #0
 800f868:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f86e:	697a      	ldr	r2, [r7, #20]
 800f870:	1ad2      	subs	r2, r2, r3
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	69db      	ldr	r3, [r3, #28]
 800f876:	429a      	cmp	r2, r3
 800f878:	d217      	bcs.n	800f8aa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	789b      	ldrb	r3, [r3, #2]
 800f87e:	613b      	str	r3, [r7, #16]
 800f880:	e010      	b.n	800f8a4 <sync_window+0x78>
					wsect += fs->fsize;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	69db      	ldr	r3, [r3, #28]
 800f886:	697a      	ldr	r2, [r7, #20]
 800f888:	4413      	add	r3, r2
 800f88a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	7858      	ldrb	r0, [r3, #1]
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f896:	2301      	movs	r3, #1
 800f898:	697a      	ldr	r2, [r7, #20]
 800f89a:	f7ff fd1d 	bl	800f2d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	3b01      	subs	r3, #1
 800f8a2:	613b      	str	r3, [r7, #16]
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	2b01      	cmp	r3, #1
 800f8a8:	d8eb      	bhi.n	800f882 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f8aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3718      	adds	r7, #24
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}

0800f8b4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b084      	sub	sp, #16
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8c6:	683a      	ldr	r2, [r7, #0]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d01b      	beq.n	800f904 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f7ff ffad 	bl	800f82c <sync_window>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f8d6:	7bfb      	ldrb	r3, [r7, #15]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d113      	bne.n	800f904 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	7858      	ldrb	r0, [r3, #1]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	683a      	ldr	r2, [r7, #0]
 800f8ea:	f7ff fcd5 	bl	800f298 <disk_read>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d004      	beq.n	800f8fe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f8f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f8f8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	683a      	ldr	r2, [r7, #0]
 800f902:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800f904:	7bfb      	ldrb	r3, [r7, #15]
}
 800f906:	4618      	mov	r0, r3
 800f908:	3710      	adds	r7, #16
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}
	...

0800f910 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f7ff ff87 	bl	800f82c <sync_window>
 800f91e:	4603      	mov	r3, r0
 800f920:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f922:	7bfb      	ldrb	r3, [r7, #15]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d158      	bne.n	800f9da <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	2b03      	cmp	r3, #3
 800f92e:	d148      	bne.n	800f9c2 <sync_fs+0xb2>
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	791b      	ldrb	r3, [r3, #4]
 800f934:	2b01      	cmp	r3, #1
 800f936:	d144      	bne.n	800f9c2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	3334      	adds	r3, #52	@ 0x34
 800f93c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f940:	2100      	movs	r1, #0
 800f942:	4618      	mov	r0, r3
 800f944:	f7ff fda9 	bl	800f49a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	3334      	adds	r3, #52	@ 0x34
 800f94c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f950:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f954:	4618      	mov	r0, r3
 800f956:	f7ff fd38 	bl	800f3ca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	3334      	adds	r3, #52	@ 0x34
 800f95e:	4921      	ldr	r1, [pc, #132]	@ (800f9e4 <sync_fs+0xd4>)
 800f960:	4618      	mov	r0, r3
 800f962:	f7ff fd4d 	bl	800f400 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	3334      	adds	r3, #52	@ 0x34
 800f96a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f96e:	491e      	ldr	r1, [pc, #120]	@ (800f9e8 <sync_fs+0xd8>)
 800f970:	4618      	mov	r0, r3
 800f972:	f7ff fd45 	bl	800f400 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	3334      	adds	r3, #52	@ 0x34
 800f97a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	695b      	ldr	r3, [r3, #20]
 800f982:	4619      	mov	r1, r3
 800f984:	4610      	mov	r0, r2
 800f986:	f7ff fd3b 	bl	800f400 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	3334      	adds	r3, #52	@ 0x34
 800f98e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	691b      	ldr	r3, [r3, #16]
 800f996:	4619      	mov	r1, r3
 800f998:	4610      	mov	r0, r2
 800f99a:	f7ff fd31 	bl	800f400 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6a1b      	ldr	r3, [r3, #32]
 800f9a2:	1c5a      	adds	r2, r3, #1
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	7858      	ldrb	r0, [r3, #1]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	f7ff fc8e 	bl	800f2d8 <disk_write>
			fs->fsi_flag = 0;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	785b      	ldrb	r3, [r3, #1]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	2100      	movs	r1, #0
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7ff fca4 	bl	800f318 <disk_ioctl>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d001      	beq.n	800f9da <sync_fs+0xca>
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f9da:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9dc:	4618      	mov	r0, r3
 800f9de:	3710      	adds	r7, #16
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}
 800f9e4:	41615252 	.word	0x41615252
 800f9e8:	61417272 	.word	0x61417272

0800f9ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	b083      	sub	sp, #12
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	3b02      	subs	r3, #2
 800f9fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	699b      	ldr	r3, [r3, #24]
 800fa00:	3b02      	subs	r3, #2
 800fa02:	683a      	ldr	r2, [r7, #0]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d301      	bcc.n	800fa0c <clust2sect+0x20>
 800fa08:	2300      	movs	r3, #0
 800fa0a:	e008      	b.n	800fa1e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	895b      	ldrh	r3, [r3, #10]
 800fa10:	461a      	mov	r2, r3
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	fb03 f202 	mul.w	r2, r3, r2
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa1c:	4413      	add	r3, r2
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	370c      	adds	r7, #12
 800fa22:	46bd      	mov	sp, r7
 800fa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa28:	4770      	bx	lr

0800fa2a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fa2a:	b580      	push	{r7, lr}
 800fa2c:	b086      	sub	sp, #24
 800fa2e:	af00      	add	r7, sp, #0
 800fa30:	6078      	str	r0, [r7, #4]
 800fa32:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	2b01      	cmp	r3, #1
 800fa3e:	d904      	bls.n	800fa4a <get_fat+0x20>
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	699b      	ldr	r3, [r3, #24]
 800fa44:	683a      	ldr	r2, [r7, #0]
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d302      	bcc.n	800fa50 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	617b      	str	r3, [r7, #20]
 800fa4e:	e08e      	b.n	800fb6e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fa50:	f04f 33ff 	mov.w	r3, #4294967295
 800fa54:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	781b      	ldrb	r3, [r3, #0]
 800fa5a:	2b03      	cmp	r3, #3
 800fa5c:	d061      	beq.n	800fb22 <get_fat+0xf8>
 800fa5e:	2b03      	cmp	r3, #3
 800fa60:	dc7b      	bgt.n	800fb5a <get_fat+0x130>
 800fa62:	2b01      	cmp	r3, #1
 800fa64:	d002      	beq.n	800fa6c <get_fat+0x42>
 800fa66:	2b02      	cmp	r3, #2
 800fa68:	d041      	beq.n	800faee <get_fat+0xc4>
 800fa6a:	e076      	b.n	800fb5a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	60fb      	str	r3, [r7, #12]
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	085b      	lsrs	r3, r3, #1
 800fa74:	68fa      	ldr	r2, [r7, #12]
 800fa76:	4413      	add	r3, r2
 800fa78:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	0a5b      	lsrs	r3, r3, #9
 800fa82:	4413      	add	r3, r2
 800fa84:	4619      	mov	r1, r3
 800fa86:	6938      	ldr	r0, [r7, #16]
 800fa88:	f7ff ff14 	bl	800f8b4 <move_window>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d166      	bne.n	800fb60 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	1c5a      	adds	r2, r3, #1
 800fa96:	60fa      	str	r2, [r7, #12]
 800fa98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa9c:	693a      	ldr	r2, [r7, #16]
 800fa9e:	4413      	add	r3, r2
 800faa0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800faa4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	0a5b      	lsrs	r3, r3, #9
 800faae:	4413      	add	r3, r2
 800fab0:	4619      	mov	r1, r3
 800fab2:	6938      	ldr	r0, [r7, #16]
 800fab4:	f7ff fefe 	bl	800f8b4 <move_window>
 800fab8:	4603      	mov	r3, r0
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d152      	bne.n	800fb64 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fac4:	693a      	ldr	r2, [r7, #16]
 800fac6:	4413      	add	r3, r2
 800fac8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800facc:	021b      	lsls	r3, r3, #8
 800face:	68ba      	ldr	r2, [r7, #8]
 800fad0:	4313      	orrs	r3, r2
 800fad2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	f003 0301 	and.w	r3, r3, #1
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d002      	beq.n	800fae4 <get_fat+0xba>
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	091b      	lsrs	r3, r3, #4
 800fae2:	e002      	b.n	800faea <get_fat+0xc0>
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800faea:	617b      	str	r3, [r7, #20]
			break;
 800faec:	e03f      	b.n	800fb6e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800faee:	693b      	ldr	r3, [r7, #16]
 800faf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	0a1b      	lsrs	r3, r3, #8
 800faf6:	4413      	add	r3, r2
 800faf8:	4619      	mov	r1, r3
 800fafa:	6938      	ldr	r0, [r7, #16]
 800fafc:	f7ff feda 	bl	800f8b4 <move_window>
 800fb00:	4603      	mov	r3, r0
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d130      	bne.n	800fb68 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fb06:	693b      	ldr	r3, [r7, #16]
 800fb08:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	005b      	lsls	r3, r3, #1
 800fb10:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fb14:	4413      	add	r3, r2
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7ff fc1c 	bl	800f354 <ld_word>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	617b      	str	r3, [r7, #20]
			break;
 800fb20:	e025      	b.n	800fb6e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	09db      	lsrs	r3, r3, #7
 800fb2a:	4413      	add	r3, r2
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	6938      	ldr	r0, [r7, #16]
 800fb30:	f7ff fec0 	bl	800f8b4 <move_window>
 800fb34:	4603      	mov	r3, r0
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d118      	bne.n	800fb6c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fb3a:	693b      	ldr	r3, [r7, #16]
 800fb3c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fb48:	4413      	add	r3, r2
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7ff fc1a 	bl	800f384 <ld_dword>
 800fb50:	4603      	mov	r3, r0
 800fb52:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800fb56:	617b      	str	r3, [r7, #20]
			break;
 800fb58:	e009      	b.n	800fb6e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	617b      	str	r3, [r7, #20]
 800fb5e:	e006      	b.n	800fb6e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fb60:	bf00      	nop
 800fb62:	e004      	b.n	800fb6e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fb64:	bf00      	nop
 800fb66:	e002      	b.n	800fb6e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fb68:	bf00      	nop
 800fb6a:	e000      	b.n	800fb6e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fb6c:	bf00      	nop
		}
	}

	return val;
 800fb6e:	697b      	ldr	r3, [r7, #20]
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3718      	adds	r7, #24
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}

0800fb78 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fb78:	b590      	push	{r4, r7, lr}
 800fb7a:	b089      	sub	sp, #36	@ 0x24
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	60f8      	str	r0, [r7, #12]
 800fb80:	60b9      	str	r1, [r7, #8]
 800fb82:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fb84:	2302      	movs	r3, #2
 800fb86:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	2b01      	cmp	r3, #1
 800fb8c:	f240 80d9 	bls.w	800fd42 <put_fat+0x1ca>
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	699b      	ldr	r3, [r3, #24]
 800fb94:	68ba      	ldr	r2, [r7, #8]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	f080 80d3 	bcs.w	800fd42 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	2b03      	cmp	r3, #3
 800fba2:	f000 8096 	beq.w	800fcd2 <put_fat+0x15a>
 800fba6:	2b03      	cmp	r3, #3
 800fba8:	f300 80cb 	bgt.w	800fd42 <put_fat+0x1ca>
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d002      	beq.n	800fbb6 <put_fat+0x3e>
 800fbb0:	2b02      	cmp	r3, #2
 800fbb2:	d06e      	beq.n	800fc92 <put_fat+0x11a>
 800fbb4:	e0c5      	b.n	800fd42 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	61bb      	str	r3, [r7, #24]
 800fbba:	69bb      	ldr	r3, [r7, #24]
 800fbbc:	085b      	lsrs	r3, r3, #1
 800fbbe:	69ba      	ldr	r2, [r7, #24]
 800fbc0:	4413      	add	r3, r2
 800fbc2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fbc8:	69bb      	ldr	r3, [r7, #24]
 800fbca:	0a5b      	lsrs	r3, r3, #9
 800fbcc:	4413      	add	r3, r2
 800fbce:	4619      	mov	r1, r3
 800fbd0:	68f8      	ldr	r0, [r7, #12]
 800fbd2:	f7ff fe6f 	bl	800f8b4 <move_window>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fbda:	7ffb      	ldrb	r3, [r7, #31]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	f040 80a9 	bne.w	800fd34 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fbe8:	69bb      	ldr	r3, [r7, #24]
 800fbea:	1c59      	adds	r1, r3, #1
 800fbec:	61b9      	str	r1, [r7, #24]
 800fbee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbf2:	4413      	add	r3, r2
 800fbf4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	f003 0301 	and.w	r3, r3, #1
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d00d      	beq.n	800fc1c <put_fat+0xa4>
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	b25b      	sxtb	r3, r3
 800fc06:	f003 030f 	and.w	r3, r3, #15
 800fc0a:	b25a      	sxtb	r2, r3
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	b2db      	uxtb	r3, r3
 800fc10:	011b      	lsls	r3, r3, #4
 800fc12:	b25b      	sxtb	r3, r3
 800fc14:	4313      	orrs	r3, r2
 800fc16:	b25b      	sxtb	r3, r3
 800fc18:	b2db      	uxtb	r3, r3
 800fc1a:	e001      	b.n	800fc20 <put_fat+0xa8>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	697a      	ldr	r2, [r7, #20]
 800fc22:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	2201      	movs	r2, #1
 800fc28:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc2e:	69bb      	ldr	r3, [r7, #24]
 800fc30:	0a5b      	lsrs	r3, r3, #9
 800fc32:	4413      	add	r3, r2
 800fc34:	4619      	mov	r1, r3
 800fc36:	68f8      	ldr	r0, [r7, #12]
 800fc38:	f7ff fe3c 	bl	800f8b4 <move_window>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fc40:	7ffb      	ldrb	r3, [r7, #31]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d178      	bne.n	800fd38 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fc4c:	69bb      	ldr	r3, [r7, #24]
 800fc4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc52:	4413      	add	r3, r2
 800fc54:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	f003 0301 	and.w	r3, r3, #1
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d003      	beq.n	800fc68 <put_fat+0xf0>
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	091b      	lsrs	r3, r3, #4
 800fc64:	b2db      	uxtb	r3, r3
 800fc66:	e00e      	b.n	800fc86 <put_fat+0x10e>
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	781b      	ldrb	r3, [r3, #0]
 800fc6c:	b25b      	sxtb	r3, r3
 800fc6e:	f023 030f 	bic.w	r3, r3, #15
 800fc72:	b25a      	sxtb	r2, r3
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	0a1b      	lsrs	r3, r3, #8
 800fc78:	b25b      	sxtb	r3, r3
 800fc7a:	f003 030f 	and.w	r3, r3, #15
 800fc7e:	b25b      	sxtb	r3, r3
 800fc80:	4313      	orrs	r3, r2
 800fc82:	b25b      	sxtb	r3, r3
 800fc84:	b2db      	uxtb	r3, r3
 800fc86:	697a      	ldr	r2, [r7, #20]
 800fc88:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	2201      	movs	r2, #1
 800fc8e:	70da      	strb	r2, [r3, #3]
			break;
 800fc90:	e057      	b.n	800fd42 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	0a1b      	lsrs	r3, r3, #8
 800fc9a:	4413      	add	r3, r2
 800fc9c:	4619      	mov	r1, r3
 800fc9e:	68f8      	ldr	r0, [r7, #12]
 800fca0:	f7ff fe08 	bl	800f8b4 <move_window>
 800fca4:	4603      	mov	r3, r0
 800fca6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fca8:	7ffb      	ldrb	r3, [r7, #31]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d146      	bne.n	800fd3c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	005b      	lsls	r3, r3, #1
 800fcb8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fcbc:	4413      	add	r3, r2
 800fcbe:	687a      	ldr	r2, [r7, #4]
 800fcc0:	b292      	uxth	r2, r2
 800fcc2:	4611      	mov	r1, r2
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7ff fb80 	bl	800f3ca <st_word>
			fs->wflag = 1;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2201      	movs	r2, #1
 800fcce:	70da      	strb	r2, [r3, #3]
			break;
 800fcd0:	e037      	b.n	800fd42 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	09db      	lsrs	r3, r3, #7
 800fcda:	4413      	add	r3, r2
 800fcdc:	4619      	mov	r1, r3
 800fcde:	68f8      	ldr	r0, [r7, #12]
 800fce0:	f7ff fde8 	bl	800f8b4 <move_window>
 800fce4:	4603      	mov	r3, r0
 800fce6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fce8:	7ffb      	ldrb	r3, [r7, #31]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d128      	bne.n	800fd40 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	009b      	lsls	r3, r3, #2
 800fcfe:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fd02:	4413      	add	r3, r2
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7ff fb3d 	bl	800f384 <ld_dword>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800fd10:	4323      	orrs	r3, r4
 800fd12:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	009b      	lsls	r3, r3, #2
 800fd1e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fd22:	4413      	add	r3, r2
 800fd24:	6879      	ldr	r1, [r7, #4]
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7ff fb6a 	bl	800f400 <st_dword>
			fs->wflag = 1;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2201      	movs	r2, #1
 800fd30:	70da      	strb	r2, [r3, #3]
			break;
 800fd32:	e006      	b.n	800fd42 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fd34:	bf00      	nop
 800fd36:	e004      	b.n	800fd42 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fd38:	bf00      	nop
 800fd3a:	e002      	b.n	800fd42 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fd3c:	bf00      	nop
 800fd3e:	e000      	b.n	800fd42 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fd40:	bf00      	nop
		}
	}
	return res;
 800fd42:	7ffb      	ldrb	r3, [r7, #31]
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3724      	adds	r7, #36	@ 0x24
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd90      	pop	{r4, r7, pc}

0800fd4c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b088      	sub	sp, #32
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	60f8      	str	r0, [r7, #12]
 800fd54:	60b9      	str	r1, [r7, #8]
 800fd56:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fd58:	2300      	movs	r3, #0
 800fd5a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	2b01      	cmp	r3, #1
 800fd66:	d904      	bls.n	800fd72 <remove_chain+0x26>
 800fd68:	69bb      	ldr	r3, [r7, #24]
 800fd6a:	699b      	ldr	r3, [r3, #24]
 800fd6c:	68ba      	ldr	r2, [r7, #8]
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d301      	bcc.n	800fd76 <remove_chain+0x2a>
 800fd72:	2302      	movs	r3, #2
 800fd74:	e04b      	b.n	800fe0e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d00c      	beq.n	800fd96 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fd7c:	f04f 32ff 	mov.w	r2, #4294967295
 800fd80:	6879      	ldr	r1, [r7, #4]
 800fd82:	69b8      	ldr	r0, [r7, #24]
 800fd84:	f7ff fef8 	bl	800fb78 <put_fat>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fd8c:	7ffb      	ldrb	r3, [r7, #31]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d001      	beq.n	800fd96 <remove_chain+0x4a>
 800fd92:	7ffb      	ldrb	r3, [r7, #31]
 800fd94:	e03b      	b.n	800fe0e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fd96:	68b9      	ldr	r1, [r7, #8]
 800fd98:	68f8      	ldr	r0, [r7, #12]
 800fd9a:	f7ff fe46 	bl	800fa2a <get_fat>
 800fd9e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d031      	beq.n	800fe0a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	2b01      	cmp	r3, #1
 800fdaa:	d101      	bne.n	800fdb0 <remove_chain+0x64>
 800fdac:	2302      	movs	r3, #2
 800fdae:	e02e      	b.n	800fe0e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdb6:	d101      	bne.n	800fdbc <remove_chain+0x70>
 800fdb8:	2301      	movs	r3, #1
 800fdba:	e028      	b.n	800fe0e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	68b9      	ldr	r1, [r7, #8]
 800fdc0:	69b8      	ldr	r0, [r7, #24]
 800fdc2:	f7ff fed9 	bl	800fb78 <put_fat>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fdca:	7ffb      	ldrb	r3, [r7, #31]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d001      	beq.n	800fdd4 <remove_chain+0x88>
 800fdd0:	7ffb      	ldrb	r3, [r7, #31]
 800fdd2:	e01c      	b.n	800fe0e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fdd4:	69bb      	ldr	r3, [r7, #24]
 800fdd6:	695a      	ldr	r2, [r3, #20]
 800fdd8:	69bb      	ldr	r3, [r7, #24]
 800fdda:	699b      	ldr	r3, [r3, #24]
 800fddc:	3b02      	subs	r3, #2
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d20b      	bcs.n	800fdfa <remove_chain+0xae>
			fs->free_clst++;
 800fde2:	69bb      	ldr	r3, [r7, #24]
 800fde4:	695b      	ldr	r3, [r3, #20]
 800fde6:	1c5a      	adds	r2, r3, #1
 800fde8:	69bb      	ldr	r3, [r7, #24]
 800fdea:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800fdec:	69bb      	ldr	r3, [r7, #24]
 800fdee:	791b      	ldrb	r3, [r3, #4]
 800fdf0:	f043 0301 	orr.w	r3, r3, #1
 800fdf4:	b2da      	uxtb	r2, r3
 800fdf6:	69bb      	ldr	r3, [r7, #24]
 800fdf8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fdfe:	69bb      	ldr	r3, [r7, #24]
 800fe00:	699b      	ldr	r3, [r3, #24]
 800fe02:	68ba      	ldr	r2, [r7, #8]
 800fe04:	429a      	cmp	r2, r3
 800fe06:	d3c6      	bcc.n	800fd96 <remove_chain+0x4a>
 800fe08:	e000      	b.n	800fe0c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fe0a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fe0c:	2300      	movs	r3, #0
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3720      	adds	r7, #32
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}

0800fe16 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fe16:	b580      	push	{r7, lr}
 800fe18:	b088      	sub	sp, #32
 800fe1a:	af00      	add	r7, sp, #0
 800fe1c:	6078      	str	r0, [r7, #4]
 800fe1e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d10d      	bne.n	800fe48 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	691b      	ldr	r3, [r3, #16]
 800fe30:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fe32:	69bb      	ldr	r3, [r7, #24]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d004      	beq.n	800fe42 <create_chain+0x2c>
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	699b      	ldr	r3, [r3, #24]
 800fe3c:	69ba      	ldr	r2, [r7, #24]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d31b      	bcc.n	800fe7a <create_chain+0x64>
 800fe42:	2301      	movs	r3, #1
 800fe44:	61bb      	str	r3, [r7, #24]
 800fe46:	e018      	b.n	800fe7a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fe48:	6839      	ldr	r1, [r7, #0]
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f7ff fded 	bl	800fa2a <get_fat>
 800fe50:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	2b01      	cmp	r3, #1
 800fe56:	d801      	bhi.n	800fe5c <create_chain+0x46>
 800fe58:	2301      	movs	r3, #1
 800fe5a:	e070      	b.n	800ff3e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe62:	d101      	bne.n	800fe68 <create_chain+0x52>
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	e06a      	b.n	800ff3e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fe68:	693b      	ldr	r3, [r7, #16]
 800fe6a:	699b      	ldr	r3, [r3, #24]
 800fe6c:	68fa      	ldr	r2, [r7, #12]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	d201      	bcs.n	800fe76 <create_chain+0x60>
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	e063      	b.n	800ff3e <create_chain+0x128>
		scl = clst;
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fe7e:	69fb      	ldr	r3, [r7, #28]
 800fe80:	3301      	adds	r3, #1
 800fe82:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fe84:	693b      	ldr	r3, [r7, #16]
 800fe86:	699b      	ldr	r3, [r3, #24]
 800fe88:	69fa      	ldr	r2, [r7, #28]
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	d307      	bcc.n	800fe9e <create_chain+0x88>
				ncl = 2;
 800fe8e:	2302      	movs	r3, #2
 800fe90:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fe92:	69fa      	ldr	r2, [r7, #28]
 800fe94:	69bb      	ldr	r3, [r7, #24]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d901      	bls.n	800fe9e <create_chain+0x88>
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	e04f      	b.n	800ff3e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fe9e:	69f9      	ldr	r1, [r7, #28]
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f7ff fdc2 	bl	800fa2a <get_fat>
 800fea6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d00e      	beq.n	800fecc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	2b01      	cmp	r3, #1
 800feb2:	d003      	beq.n	800febc <create_chain+0xa6>
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800feba:	d101      	bne.n	800fec0 <create_chain+0xaa>
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	e03e      	b.n	800ff3e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fec0:	69fa      	ldr	r2, [r7, #28]
 800fec2:	69bb      	ldr	r3, [r7, #24]
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d1da      	bne.n	800fe7e <create_chain+0x68>
 800fec8:	2300      	movs	r3, #0
 800feca:	e038      	b.n	800ff3e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fecc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fece:	f04f 32ff 	mov.w	r2, #4294967295
 800fed2:	69f9      	ldr	r1, [r7, #28]
 800fed4:	6938      	ldr	r0, [r7, #16]
 800fed6:	f7ff fe4f 	bl	800fb78 <put_fat>
 800feda:	4603      	mov	r3, r0
 800fedc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fede:	7dfb      	ldrb	r3, [r7, #23]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d109      	bne.n	800fef8 <create_chain+0xe2>
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d006      	beq.n	800fef8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800feea:	69fa      	ldr	r2, [r7, #28]
 800feec:	6839      	ldr	r1, [r7, #0]
 800feee:	6938      	ldr	r0, [r7, #16]
 800fef0:	f7ff fe42 	bl	800fb78 <put_fat>
 800fef4:	4603      	mov	r3, r0
 800fef6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fef8:	7dfb      	ldrb	r3, [r7, #23]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d116      	bne.n	800ff2c <create_chain+0x116>
		fs->last_clst = ncl;
 800fefe:	693b      	ldr	r3, [r7, #16]
 800ff00:	69fa      	ldr	r2, [r7, #28]
 800ff02:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ff04:	693b      	ldr	r3, [r7, #16]
 800ff06:	695a      	ldr	r2, [r3, #20]
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	699b      	ldr	r3, [r3, #24]
 800ff0c:	3b02      	subs	r3, #2
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d804      	bhi.n	800ff1c <create_chain+0x106>
 800ff12:	693b      	ldr	r3, [r7, #16]
 800ff14:	695b      	ldr	r3, [r3, #20]
 800ff16:	1e5a      	subs	r2, r3, #1
 800ff18:	693b      	ldr	r3, [r7, #16]
 800ff1a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	791b      	ldrb	r3, [r3, #4]
 800ff20:	f043 0301 	orr.w	r3, r3, #1
 800ff24:	b2da      	uxtb	r2, r3
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	711a      	strb	r2, [r3, #4]
 800ff2a:	e007      	b.n	800ff3c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ff2c:	7dfb      	ldrb	r3, [r7, #23]
 800ff2e:	2b01      	cmp	r3, #1
 800ff30:	d102      	bne.n	800ff38 <create_chain+0x122>
 800ff32:	f04f 33ff 	mov.w	r3, #4294967295
 800ff36:	e000      	b.n	800ff3a <create_chain+0x124>
 800ff38:	2301      	movs	r3, #1
 800ff3a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ff3c:	69fb      	ldr	r3, [r7, #28]
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3720      	adds	r7, #32
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}

0800ff46 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ff46:	b480      	push	{r7}
 800ff48:	b087      	sub	sp, #28
 800ff4a:	af00      	add	r7, sp, #0
 800ff4c:	6078      	str	r0, [r7, #4]
 800ff4e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff5a:	3304      	adds	r3, #4
 800ff5c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	0a5b      	lsrs	r3, r3, #9
 800ff62:	68fa      	ldr	r2, [r7, #12]
 800ff64:	8952      	ldrh	r2, [r2, #10]
 800ff66:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff6a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	1d1a      	adds	r2, r3, #4
 800ff70:	613a      	str	r2, [r7, #16]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d101      	bne.n	800ff80 <clmt_clust+0x3a>
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	e010      	b.n	800ffa2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ff80:	697a      	ldr	r2, [r7, #20]
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	429a      	cmp	r2, r3
 800ff86:	d307      	bcc.n	800ff98 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ff88:	697a      	ldr	r2, [r7, #20]
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	1ad3      	subs	r3, r2, r3
 800ff8e:	617b      	str	r3, [r7, #20]
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	3304      	adds	r3, #4
 800ff94:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ff96:	e7e9      	b.n	800ff6c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ff98:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	681a      	ldr	r2, [r3, #0]
 800ff9e:	697b      	ldr	r3, [r7, #20]
 800ffa0:	4413      	add	r3, r2
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	371c      	adds	r7, #28
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr

0800ffae <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ffae:	b580      	push	{r7, lr}
 800ffb0:	b086      	sub	sp, #24
 800ffb2:	af00      	add	r7, sp, #0
 800ffb4:	6078      	str	r0, [r7, #4]
 800ffb6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ffc4:	d204      	bcs.n	800ffd0 <dir_sdi+0x22>
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	f003 031f 	and.w	r3, r3, #31
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d001      	beq.n	800ffd4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ffd0:	2302      	movs	r3, #2
 800ffd2:	e063      	b.n	801009c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	683a      	ldr	r2, [r7, #0]
 800ffd8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	689b      	ldr	r3, [r3, #8]
 800ffde:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ffe0:	697b      	ldr	r3, [r7, #20]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d106      	bne.n	800fff4 <dir_sdi+0x46>
 800ffe6:	693b      	ldr	r3, [r7, #16]
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	2b02      	cmp	r3, #2
 800ffec:	d902      	bls.n	800fff4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fff2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d10c      	bne.n	8010014 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	095b      	lsrs	r3, r3, #5
 800fffe:	693a      	ldr	r2, [r7, #16]
 8010000:	8912      	ldrh	r2, [r2, #8]
 8010002:	4293      	cmp	r3, r2
 8010004:	d301      	bcc.n	801000a <dir_sdi+0x5c>
 8010006:	2302      	movs	r3, #2
 8010008:	e048      	b.n	801009c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801000a:	693b      	ldr	r3, [r7, #16]
 801000c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	61da      	str	r2, [r3, #28]
 8010012:	e029      	b.n	8010068 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	895b      	ldrh	r3, [r3, #10]
 8010018:	025b      	lsls	r3, r3, #9
 801001a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801001c:	e019      	b.n	8010052 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	6979      	ldr	r1, [r7, #20]
 8010022:	4618      	mov	r0, r3
 8010024:	f7ff fd01 	bl	800fa2a <get_fat>
 8010028:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010030:	d101      	bne.n	8010036 <dir_sdi+0x88>
 8010032:	2301      	movs	r3, #1
 8010034:	e032      	b.n	801009c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	2b01      	cmp	r3, #1
 801003a:	d904      	bls.n	8010046 <dir_sdi+0x98>
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	699b      	ldr	r3, [r3, #24]
 8010040:	697a      	ldr	r2, [r7, #20]
 8010042:	429a      	cmp	r2, r3
 8010044:	d301      	bcc.n	801004a <dir_sdi+0x9c>
 8010046:	2302      	movs	r3, #2
 8010048:	e028      	b.n	801009c <dir_sdi+0xee>
			ofs -= csz;
 801004a:	683a      	ldr	r2, [r7, #0]
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	1ad3      	subs	r3, r2, r3
 8010050:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010052:	683a      	ldr	r2, [r7, #0]
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	429a      	cmp	r2, r3
 8010058:	d2e1      	bcs.n	801001e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801005a:	6979      	ldr	r1, [r7, #20]
 801005c:	6938      	ldr	r0, [r7, #16]
 801005e:	f7ff fcc5 	bl	800f9ec <clust2sect>
 8010062:	4602      	mov	r2, r0
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	697a      	ldr	r2, [r7, #20]
 801006c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	69db      	ldr	r3, [r3, #28]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d101      	bne.n	801007a <dir_sdi+0xcc>
 8010076:	2302      	movs	r3, #2
 8010078:	e010      	b.n	801009c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	69da      	ldr	r2, [r3, #28]
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	0a5b      	lsrs	r3, r3, #9
 8010082:	441a      	add	r2, r3
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010088:	693b      	ldr	r3, [r7, #16]
 801008a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010094:	441a      	add	r2, r3
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801009a:	2300      	movs	r3, #0
}
 801009c:	4618      	mov	r0, r3
 801009e:	3718      	adds	r7, #24
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}

080100a4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b086      	sub	sp, #24
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	695b      	ldr	r3, [r3, #20]
 80100b8:	3320      	adds	r3, #32
 80100ba:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	69db      	ldr	r3, [r3, #28]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d003      	beq.n	80100cc <dir_next+0x28>
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80100ca:	d301      	bcc.n	80100d0 <dir_next+0x2c>
 80100cc:	2304      	movs	r3, #4
 80100ce:	e0aa      	b.n	8010226 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	f040 8098 	bne.w	801020c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	69db      	ldr	r3, [r3, #28]
 80100e0:	1c5a      	adds	r2, r3, #1
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	699b      	ldr	r3, [r3, #24]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d10b      	bne.n	8010106 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	095b      	lsrs	r3, r3, #5
 80100f2:	68fa      	ldr	r2, [r7, #12]
 80100f4:	8912      	ldrh	r2, [r2, #8]
 80100f6:	4293      	cmp	r3, r2
 80100f8:	f0c0 8088 	bcc.w	801020c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2200      	movs	r2, #0
 8010100:	61da      	str	r2, [r3, #28]
 8010102:	2304      	movs	r3, #4
 8010104:	e08f      	b.n	8010226 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	0a5b      	lsrs	r3, r3, #9
 801010a:	68fa      	ldr	r2, [r7, #12]
 801010c:	8952      	ldrh	r2, [r2, #10]
 801010e:	3a01      	subs	r2, #1
 8010110:	4013      	ands	r3, r2
 8010112:	2b00      	cmp	r3, #0
 8010114:	d17a      	bne.n	801020c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010116:	687a      	ldr	r2, [r7, #4]
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	699b      	ldr	r3, [r3, #24]
 801011c:	4619      	mov	r1, r3
 801011e:	4610      	mov	r0, r2
 8010120:	f7ff fc83 	bl	800fa2a <get_fat>
 8010124:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	2b01      	cmp	r3, #1
 801012a:	d801      	bhi.n	8010130 <dir_next+0x8c>
 801012c:	2302      	movs	r3, #2
 801012e:	e07a      	b.n	8010226 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010136:	d101      	bne.n	801013c <dir_next+0x98>
 8010138:	2301      	movs	r3, #1
 801013a:	e074      	b.n	8010226 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	699b      	ldr	r3, [r3, #24]
 8010140:	697a      	ldr	r2, [r7, #20]
 8010142:	429a      	cmp	r2, r3
 8010144:	d358      	bcc.n	80101f8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d104      	bne.n	8010156 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2200      	movs	r2, #0
 8010150:	61da      	str	r2, [r3, #28]
 8010152:	2304      	movs	r3, #4
 8010154:	e067      	b.n	8010226 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010156:	687a      	ldr	r2, [r7, #4]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	699b      	ldr	r3, [r3, #24]
 801015c:	4619      	mov	r1, r3
 801015e:	4610      	mov	r0, r2
 8010160:	f7ff fe59 	bl	800fe16 <create_chain>
 8010164:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d101      	bne.n	8010170 <dir_next+0xcc>
 801016c:	2307      	movs	r3, #7
 801016e:	e05a      	b.n	8010226 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	2b01      	cmp	r3, #1
 8010174:	d101      	bne.n	801017a <dir_next+0xd6>
 8010176:	2302      	movs	r3, #2
 8010178:	e055      	b.n	8010226 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010180:	d101      	bne.n	8010186 <dir_next+0xe2>
 8010182:	2301      	movs	r3, #1
 8010184:	e04f      	b.n	8010226 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010186:	68f8      	ldr	r0, [r7, #12]
 8010188:	f7ff fb50 	bl	800f82c <sync_window>
 801018c:	4603      	mov	r3, r0
 801018e:	2b00      	cmp	r3, #0
 8010190:	d001      	beq.n	8010196 <dir_next+0xf2>
 8010192:	2301      	movs	r3, #1
 8010194:	e047      	b.n	8010226 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	3334      	adds	r3, #52	@ 0x34
 801019a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801019e:	2100      	movs	r1, #0
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7ff f97a 	bl	800f49a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80101a6:	2300      	movs	r3, #0
 80101a8:	613b      	str	r3, [r7, #16]
 80101aa:	6979      	ldr	r1, [r7, #20]
 80101ac:	68f8      	ldr	r0, [r7, #12]
 80101ae:	f7ff fc1d 	bl	800f9ec <clust2sect>
 80101b2:	4602      	mov	r2, r0
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80101b8:	e012      	b.n	80101e0 <dir_next+0x13c>
						fs->wflag = 1;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	2201      	movs	r2, #1
 80101be:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80101c0:	68f8      	ldr	r0, [r7, #12]
 80101c2:	f7ff fb33 	bl	800f82c <sync_window>
 80101c6:	4603      	mov	r3, r0
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d001      	beq.n	80101d0 <dir_next+0x12c>
 80101cc:	2301      	movs	r3, #1
 80101ce:	e02a      	b.n	8010226 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	3301      	adds	r3, #1
 80101d4:	613b      	str	r3, [r7, #16]
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101da:	1c5a      	adds	r2, r3, #1
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	631a      	str	r2, [r3, #48]	@ 0x30
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	895b      	ldrh	r3, [r3, #10]
 80101e4:	461a      	mov	r2, r3
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	4293      	cmp	r3, r2
 80101ea:	d3e6      	bcc.n	80101ba <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	1ad2      	subs	r2, r2, r3
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	697a      	ldr	r2, [r7, #20]
 80101fc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80101fe:	6979      	ldr	r1, [r7, #20]
 8010200:	68f8      	ldr	r0, [r7, #12]
 8010202:	f7ff fbf3 	bl	800f9ec <clust2sect>
 8010206:	4602      	mov	r2, r0
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	68ba      	ldr	r2, [r7, #8]
 8010210:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801021e:	441a      	add	r2, r3
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010224:	2300      	movs	r3, #0
}
 8010226:	4618      	mov	r0, r3
 8010228:	3718      	adds	r7, #24
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}

0801022e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801022e:	b580      	push	{r7, lr}
 8010230:	b086      	sub	sp, #24
 8010232:	af00      	add	r7, sp, #0
 8010234:	6078      	str	r0, [r7, #4]
 8010236:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801023e:	2100      	movs	r1, #0
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f7ff feb4 	bl	800ffae <dir_sdi>
 8010246:	4603      	mov	r3, r0
 8010248:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801024a:	7dfb      	ldrb	r3, [r7, #23]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d12b      	bne.n	80102a8 <dir_alloc+0x7a>
		n = 0;
 8010250:	2300      	movs	r3, #0
 8010252:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	69db      	ldr	r3, [r3, #28]
 8010258:	4619      	mov	r1, r3
 801025a:	68f8      	ldr	r0, [r7, #12]
 801025c:	f7ff fb2a 	bl	800f8b4 <move_window>
 8010260:	4603      	mov	r3, r0
 8010262:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010264:	7dfb      	ldrb	r3, [r7, #23]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d11d      	bne.n	80102a6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6a1b      	ldr	r3, [r3, #32]
 801026e:	781b      	ldrb	r3, [r3, #0]
 8010270:	2be5      	cmp	r3, #229	@ 0xe5
 8010272:	d004      	beq.n	801027e <dir_alloc+0x50>
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6a1b      	ldr	r3, [r3, #32]
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d107      	bne.n	801028e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	3301      	adds	r3, #1
 8010282:	613b      	str	r3, [r7, #16]
 8010284:	693a      	ldr	r2, [r7, #16]
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	429a      	cmp	r2, r3
 801028a:	d102      	bne.n	8010292 <dir_alloc+0x64>
 801028c:	e00c      	b.n	80102a8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801028e:	2300      	movs	r3, #0
 8010290:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010292:	2101      	movs	r1, #1
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f7ff ff05 	bl	80100a4 <dir_next>
 801029a:	4603      	mov	r3, r0
 801029c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801029e:	7dfb      	ldrb	r3, [r7, #23]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d0d7      	beq.n	8010254 <dir_alloc+0x26>
 80102a4:	e000      	b.n	80102a8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80102a6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80102a8:	7dfb      	ldrb	r3, [r7, #23]
 80102aa:	2b04      	cmp	r3, #4
 80102ac:	d101      	bne.n	80102b2 <dir_alloc+0x84>
 80102ae:	2307      	movs	r3, #7
 80102b0:	75fb      	strb	r3, [r7, #23]
	return res;
 80102b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80102b4:	4618      	mov	r0, r3
 80102b6:	3718      	adds	r7, #24
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}

080102bc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b084      	sub	sp, #16
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	331a      	adds	r3, #26
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7ff f842 	bl	800f354 <ld_word>
 80102d0:	4603      	mov	r3, r0
 80102d2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	781b      	ldrb	r3, [r3, #0]
 80102d8:	2b03      	cmp	r3, #3
 80102da:	d109      	bne.n	80102f0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	3314      	adds	r3, #20
 80102e0:	4618      	mov	r0, r3
 80102e2:	f7ff f837 	bl	800f354 <ld_word>
 80102e6:	4603      	mov	r3, r0
 80102e8:	041b      	lsls	r3, r3, #16
 80102ea:	68fa      	ldr	r2, [r7, #12]
 80102ec:	4313      	orrs	r3, r2
 80102ee:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80102f0:	68fb      	ldr	r3, [r7, #12]
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	3710      	adds	r7, #16
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}

080102fa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80102fa:	b580      	push	{r7, lr}
 80102fc:	b084      	sub	sp, #16
 80102fe:	af00      	add	r7, sp, #0
 8010300:	60f8      	str	r0, [r7, #12]
 8010302:	60b9      	str	r1, [r7, #8]
 8010304:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010306:	68bb      	ldr	r3, [r7, #8]
 8010308:	331a      	adds	r3, #26
 801030a:	687a      	ldr	r2, [r7, #4]
 801030c:	b292      	uxth	r2, r2
 801030e:	4611      	mov	r1, r2
 8010310:	4618      	mov	r0, r3
 8010312:	f7ff f85a 	bl	800f3ca <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	2b03      	cmp	r3, #3
 801031c:	d109      	bne.n	8010332 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	f103 0214 	add.w	r2, r3, #20
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	0c1b      	lsrs	r3, r3, #16
 8010328:	b29b      	uxth	r3, r3
 801032a:	4619      	mov	r1, r3
 801032c:	4610      	mov	r0, r2
 801032e:	f7ff f84c 	bl	800f3ca <st_word>
	}
}
 8010332:	bf00      	nop
 8010334:	3710      	adds	r7, #16
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
	...

0801033c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801033c:	b590      	push	{r4, r7, lr}
 801033e:	b087      	sub	sp, #28
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	331a      	adds	r3, #26
 801034a:	4618      	mov	r0, r3
 801034c:	f7ff f802 	bl	800f354 <ld_word>
 8010350:	4603      	mov	r3, r0
 8010352:	2b00      	cmp	r3, #0
 8010354:	d001      	beq.n	801035a <cmp_lfn+0x1e>
 8010356:	2300      	movs	r3, #0
 8010358:	e059      	b.n	801040e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	781b      	ldrb	r3, [r3, #0]
 801035e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010362:	1e5a      	subs	r2, r3, #1
 8010364:	4613      	mov	r3, r2
 8010366:	005b      	lsls	r3, r3, #1
 8010368:	4413      	add	r3, r2
 801036a:	009b      	lsls	r3, r3, #2
 801036c:	4413      	add	r3, r2
 801036e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010370:	2301      	movs	r3, #1
 8010372:	81fb      	strh	r3, [r7, #14]
 8010374:	2300      	movs	r3, #0
 8010376:	613b      	str	r3, [r7, #16]
 8010378:	e033      	b.n	80103e2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801037a:	4a27      	ldr	r2, [pc, #156]	@ (8010418 <cmp_lfn+0xdc>)
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	4413      	add	r3, r2
 8010380:	781b      	ldrb	r3, [r3, #0]
 8010382:	461a      	mov	r2, r3
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	4413      	add	r3, r2
 8010388:	4618      	mov	r0, r3
 801038a:	f7fe ffe3 	bl	800f354 <ld_word>
 801038e:	4603      	mov	r3, r0
 8010390:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8010392:	89fb      	ldrh	r3, [r7, #14]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d01a      	beq.n	80103ce <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	2bfe      	cmp	r3, #254	@ 0xfe
 801039c:	d812      	bhi.n	80103c4 <cmp_lfn+0x88>
 801039e:	89bb      	ldrh	r3, [r7, #12]
 80103a0:	4618      	mov	r0, r3
 80103a2:	f002 f99b 	bl	80126dc <ff_wtoupper>
 80103a6:	4603      	mov	r3, r0
 80103a8:	461c      	mov	r4, r3
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	1c5a      	adds	r2, r3, #1
 80103ae:	617a      	str	r2, [r7, #20]
 80103b0:	005b      	lsls	r3, r3, #1
 80103b2:	687a      	ldr	r2, [r7, #4]
 80103b4:	4413      	add	r3, r2
 80103b6:	881b      	ldrh	r3, [r3, #0]
 80103b8:	4618      	mov	r0, r3
 80103ba:	f002 f98f 	bl	80126dc <ff_wtoupper>
 80103be:	4603      	mov	r3, r0
 80103c0:	429c      	cmp	r4, r3
 80103c2:	d001      	beq.n	80103c8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80103c4:	2300      	movs	r3, #0
 80103c6:	e022      	b.n	801040e <cmp_lfn+0xd2>
			}
			wc = uc;
 80103c8:	89bb      	ldrh	r3, [r7, #12]
 80103ca:	81fb      	strh	r3, [r7, #14]
 80103cc:	e006      	b.n	80103dc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80103ce:	89bb      	ldrh	r3, [r7, #12]
 80103d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80103d4:	4293      	cmp	r3, r2
 80103d6:	d001      	beq.n	80103dc <cmp_lfn+0xa0>
 80103d8:	2300      	movs	r3, #0
 80103da:	e018      	b.n	801040e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	3301      	adds	r3, #1
 80103e0:	613b      	str	r3, [r7, #16]
 80103e2:	693b      	ldr	r3, [r7, #16]
 80103e4:	2b0c      	cmp	r3, #12
 80103e6:	d9c8      	bls.n	801037a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	781b      	ldrb	r3, [r3, #0]
 80103ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d00b      	beq.n	801040c <cmp_lfn+0xd0>
 80103f4:	89fb      	ldrh	r3, [r7, #14]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d008      	beq.n	801040c <cmp_lfn+0xd0>
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	005b      	lsls	r3, r3, #1
 80103fe:	687a      	ldr	r2, [r7, #4]
 8010400:	4413      	add	r3, r2
 8010402:	881b      	ldrh	r3, [r3, #0]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d001      	beq.n	801040c <cmp_lfn+0xd0>
 8010408:	2300      	movs	r3, #0
 801040a:	e000      	b.n	801040e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801040c:	2301      	movs	r3, #1
}
 801040e:	4618      	mov	r0, r3
 8010410:	371c      	adds	r7, #28
 8010412:	46bd      	mov	sp, r7
 8010414:	bd90      	pop	{r4, r7, pc}
 8010416:	bf00      	nop
 8010418:	08018b38 	.word	0x08018b38

0801041c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b086      	sub	sp, #24
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	331a      	adds	r3, #26
 801042a:	4618      	mov	r0, r3
 801042c:	f7fe ff92 	bl	800f354 <ld_word>
 8010430:	4603      	mov	r3, r0
 8010432:	2b00      	cmp	r3, #0
 8010434:	d001      	beq.n	801043a <pick_lfn+0x1e>
 8010436:	2300      	movs	r3, #0
 8010438:	e04d      	b.n	80104d6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	781b      	ldrb	r3, [r3, #0]
 801043e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010442:	1e5a      	subs	r2, r3, #1
 8010444:	4613      	mov	r3, r2
 8010446:	005b      	lsls	r3, r3, #1
 8010448:	4413      	add	r3, r2
 801044a:	009b      	lsls	r3, r3, #2
 801044c:	4413      	add	r3, r2
 801044e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010450:	2301      	movs	r3, #1
 8010452:	81fb      	strh	r3, [r7, #14]
 8010454:	2300      	movs	r3, #0
 8010456:	613b      	str	r3, [r7, #16]
 8010458:	e028      	b.n	80104ac <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801045a:	4a21      	ldr	r2, [pc, #132]	@ (80104e0 <pick_lfn+0xc4>)
 801045c:	693b      	ldr	r3, [r7, #16]
 801045e:	4413      	add	r3, r2
 8010460:	781b      	ldrb	r3, [r3, #0]
 8010462:	461a      	mov	r2, r3
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	4413      	add	r3, r2
 8010468:	4618      	mov	r0, r3
 801046a:	f7fe ff73 	bl	800f354 <ld_word>
 801046e:	4603      	mov	r3, r0
 8010470:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8010472:	89fb      	ldrh	r3, [r7, #14]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d00f      	beq.n	8010498 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	2bfe      	cmp	r3, #254	@ 0xfe
 801047c:	d901      	bls.n	8010482 <pick_lfn+0x66>
 801047e:	2300      	movs	r3, #0
 8010480:	e029      	b.n	80104d6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8010482:	89bb      	ldrh	r3, [r7, #12]
 8010484:	81fb      	strh	r3, [r7, #14]
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	1c5a      	adds	r2, r3, #1
 801048a:	617a      	str	r2, [r7, #20]
 801048c:	005b      	lsls	r3, r3, #1
 801048e:	687a      	ldr	r2, [r7, #4]
 8010490:	4413      	add	r3, r2
 8010492:	89fa      	ldrh	r2, [r7, #14]
 8010494:	801a      	strh	r2, [r3, #0]
 8010496:	e006      	b.n	80104a6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010498:	89bb      	ldrh	r3, [r7, #12]
 801049a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801049e:	4293      	cmp	r3, r2
 80104a0:	d001      	beq.n	80104a6 <pick_lfn+0x8a>
 80104a2:	2300      	movs	r3, #0
 80104a4:	e017      	b.n	80104d6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	3301      	adds	r3, #1
 80104aa:	613b      	str	r3, [r7, #16]
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	2b0c      	cmp	r3, #12
 80104b0:	d9d3      	bls.n	801045a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d00a      	beq.n	80104d4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	2bfe      	cmp	r3, #254	@ 0xfe
 80104c2:	d901      	bls.n	80104c8 <pick_lfn+0xac>
 80104c4:	2300      	movs	r3, #0
 80104c6:	e006      	b.n	80104d6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	005b      	lsls	r3, r3, #1
 80104cc:	687a      	ldr	r2, [r7, #4]
 80104ce:	4413      	add	r3, r2
 80104d0:	2200      	movs	r2, #0
 80104d2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80104d4:	2301      	movs	r3, #1
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	3718      	adds	r7, #24
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}
 80104de:	bf00      	nop
 80104e0:	08018b38 	.word	0x08018b38

080104e4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b088      	sub	sp, #32
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	60f8      	str	r0, [r7, #12]
 80104ec:	60b9      	str	r1, [r7, #8]
 80104ee:	4611      	mov	r1, r2
 80104f0:	461a      	mov	r2, r3
 80104f2:	460b      	mov	r3, r1
 80104f4:	71fb      	strb	r3, [r7, #7]
 80104f6:	4613      	mov	r3, r2
 80104f8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	330d      	adds	r3, #13
 80104fe:	79ba      	ldrb	r2, [r7, #6]
 8010500:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	330b      	adds	r3, #11
 8010506:	220f      	movs	r2, #15
 8010508:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	330c      	adds	r3, #12
 801050e:	2200      	movs	r2, #0
 8010510:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	331a      	adds	r3, #26
 8010516:	2100      	movs	r1, #0
 8010518:	4618      	mov	r0, r3
 801051a:	f7fe ff56 	bl	800f3ca <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801051e:	79fb      	ldrb	r3, [r7, #7]
 8010520:	1e5a      	subs	r2, r3, #1
 8010522:	4613      	mov	r3, r2
 8010524:	005b      	lsls	r3, r3, #1
 8010526:	4413      	add	r3, r2
 8010528:	009b      	lsls	r3, r3, #2
 801052a:	4413      	add	r3, r2
 801052c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801052e:	2300      	movs	r3, #0
 8010530:	82fb      	strh	r3, [r7, #22]
 8010532:	2300      	movs	r3, #0
 8010534:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8010536:	8afb      	ldrh	r3, [r7, #22]
 8010538:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801053c:	4293      	cmp	r3, r2
 801053e:	d007      	beq.n	8010550 <put_lfn+0x6c>
 8010540:	69fb      	ldr	r3, [r7, #28]
 8010542:	1c5a      	adds	r2, r3, #1
 8010544:	61fa      	str	r2, [r7, #28]
 8010546:	005b      	lsls	r3, r3, #1
 8010548:	68fa      	ldr	r2, [r7, #12]
 801054a:	4413      	add	r3, r2
 801054c:	881b      	ldrh	r3, [r3, #0]
 801054e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8010550:	4a17      	ldr	r2, [pc, #92]	@ (80105b0 <put_lfn+0xcc>)
 8010552:	69bb      	ldr	r3, [r7, #24]
 8010554:	4413      	add	r3, r2
 8010556:	781b      	ldrb	r3, [r3, #0]
 8010558:	461a      	mov	r2, r3
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	4413      	add	r3, r2
 801055e:	8afa      	ldrh	r2, [r7, #22]
 8010560:	4611      	mov	r1, r2
 8010562:	4618      	mov	r0, r3
 8010564:	f7fe ff31 	bl	800f3ca <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8010568:	8afb      	ldrh	r3, [r7, #22]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d102      	bne.n	8010574 <put_lfn+0x90>
 801056e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010572:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	3301      	adds	r3, #1
 8010578:	61bb      	str	r3, [r7, #24]
 801057a:	69bb      	ldr	r3, [r7, #24]
 801057c:	2b0c      	cmp	r3, #12
 801057e:	d9da      	bls.n	8010536 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8010580:	8afb      	ldrh	r3, [r7, #22]
 8010582:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010586:	4293      	cmp	r3, r2
 8010588:	d006      	beq.n	8010598 <put_lfn+0xb4>
 801058a:	69fb      	ldr	r3, [r7, #28]
 801058c:	005b      	lsls	r3, r3, #1
 801058e:	68fa      	ldr	r2, [r7, #12]
 8010590:	4413      	add	r3, r2
 8010592:	881b      	ldrh	r3, [r3, #0]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d103      	bne.n	80105a0 <put_lfn+0xbc>
 8010598:	79fb      	ldrb	r3, [r7, #7]
 801059a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801059e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	79fa      	ldrb	r2, [r7, #7]
 80105a4:	701a      	strb	r2, [r3, #0]
}
 80105a6:	bf00      	nop
 80105a8:	3720      	adds	r7, #32
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}
 80105ae:	bf00      	nop
 80105b0:	08018b38 	.word	0x08018b38

080105b4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b08c      	sub	sp, #48	@ 0x30
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	60f8      	str	r0, [r7, #12]
 80105bc:	60b9      	str	r1, [r7, #8]
 80105be:	607a      	str	r2, [r7, #4]
 80105c0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80105c2:	220b      	movs	r2, #11
 80105c4:	68b9      	ldr	r1, [r7, #8]
 80105c6:	68f8      	ldr	r0, [r7, #12]
 80105c8:	f7fe ff46 	bl	800f458 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	2b05      	cmp	r3, #5
 80105d0:	d92b      	bls.n	801062a <gen_numname+0x76>
		sr = seq;
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80105d6:	e022      	b.n	801061e <gen_numname+0x6a>
			wc = *lfn++;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	1c9a      	adds	r2, r3, #2
 80105dc:	607a      	str	r2, [r7, #4]
 80105de:	881b      	ldrh	r3, [r3, #0]
 80105e0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80105e2:	2300      	movs	r3, #0
 80105e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80105e6:	e017      	b.n	8010618 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80105e8:	69fb      	ldr	r3, [r7, #28]
 80105ea:	005a      	lsls	r2, r3, #1
 80105ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80105ee:	f003 0301 	and.w	r3, r3, #1
 80105f2:	4413      	add	r3, r2
 80105f4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80105f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80105f8:	085b      	lsrs	r3, r3, #1
 80105fa:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80105fc:	69fb      	ldr	r3, [r7, #28]
 80105fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010602:	2b00      	cmp	r3, #0
 8010604:	d005      	beq.n	8010612 <gen_numname+0x5e>
 8010606:	69fb      	ldr	r3, [r7, #28]
 8010608:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 801060c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8010610:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8010612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010614:	3301      	adds	r3, #1
 8010616:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801061a:	2b0f      	cmp	r3, #15
 801061c:	d9e4      	bls.n	80105e8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	881b      	ldrh	r3, [r3, #0]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d1d8      	bne.n	80105d8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8010626:	69fb      	ldr	r3, [r7, #28]
 8010628:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801062a:	2307      	movs	r3, #7
 801062c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	b2db      	uxtb	r3, r3
 8010632:	f003 030f 	and.w	r3, r3, #15
 8010636:	b2db      	uxtb	r3, r3
 8010638:	3330      	adds	r3, #48	@ 0x30
 801063a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801063e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010642:	2b39      	cmp	r3, #57	@ 0x39
 8010644:	d904      	bls.n	8010650 <gen_numname+0x9c>
 8010646:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801064a:	3307      	adds	r3, #7
 801064c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8010650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010652:	1e5a      	subs	r2, r3, #1
 8010654:	62ba      	str	r2, [r7, #40]	@ 0x28
 8010656:	3330      	adds	r3, #48	@ 0x30
 8010658:	443b      	add	r3, r7
 801065a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801065e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	091b      	lsrs	r3, r3, #4
 8010666:	603b      	str	r3, [r7, #0]
	} while (seq);
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d1df      	bne.n	801062e <gen_numname+0x7a>
	ns[i] = '~';
 801066e:	f107 0214 	add.w	r2, r7, #20
 8010672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010674:	4413      	add	r3, r2
 8010676:	227e      	movs	r2, #126	@ 0x7e
 8010678:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801067a:	2300      	movs	r3, #0
 801067c:	627b      	str	r3, [r7, #36]	@ 0x24
 801067e:	e002      	b.n	8010686 <gen_numname+0xd2>
 8010680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010682:	3301      	adds	r3, #1
 8010684:	627b      	str	r3, [r7, #36]	@ 0x24
 8010686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801068a:	429a      	cmp	r2, r3
 801068c:	d205      	bcs.n	801069a <gen_numname+0xe6>
 801068e:	68fa      	ldr	r2, [r7, #12]
 8010690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010692:	4413      	add	r3, r2
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	2b20      	cmp	r3, #32
 8010698:	d1f2      	bne.n	8010680 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801069a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801069c:	2b07      	cmp	r3, #7
 801069e:	d807      	bhi.n	80106b0 <gen_numname+0xfc>
 80106a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106a2:	1c5a      	adds	r2, r3, #1
 80106a4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80106a6:	3330      	adds	r3, #48	@ 0x30
 80106a8:	443b      	add	r3, r7
 80106aa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80106ae:	e000      	b.n	80106b2 <gen_numname+0xfe>
 80106b0:	2120      	movs	r1, #32
 80106b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106b4:	1c5a      	adds	r2, r3, #1
 80106b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80106b8:	68fa      	ldr	r2, [r7, #12]
 80106ba:	4413      	add	r3, r2
 80106bc:	460a      	mov	r2, r1
 80106be:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80106c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106c2:	2b07      	cmp	r3, #7
 80106c4:	d9e9      	bls.n	801069a <gen_numname+0xe6>
}
 80106c6:	bf00      	nop
 80106c8:	bf00      	nop
 80106ca:	3730      	adds	r7, #48	@ 0x30
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}

080106d0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80106d0:	b480      	push	{r7}
 80106d2:	b085      	sub	sp, #20
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80106d8:	2300      	movs	r3, #0
 80106da:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80106dc:	230b      	movs	r3, #11
 80106de:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80106e0:	7bfb      	ldrb	r3, [r7, #15]
 80106e2:	b2da      	uxtb	r2, r3
 80106e4:	0852      	lsrs	r2, r2, #1
 80106e6:	01db      	lsls	r3, r3, #7
 80106e8:	4313      	orrs	r3, r2
 80106ea:	b2da      	uxtb	r2, r3
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	1c59      	adds	r1, r3, #1
 80106f0:	6079      	str	r1, [r7, #4]
 80106f2:	781b      	ldrb	r3, [r3, #0]
 80106f4:	4413      	add	r3, r2
 80106f6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	3b01      	subs	r3, #1
 80106fc:	60bb      	str	r3, [r7, #8]
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d1ed      	bne.n	80106e0 <sum_sfn+0x10>
	return sum;
 8010704:	7bfb      	ldrb	r3, [r7, #15]
}
 8010706:	4618      	mov	r0, r3
 8010708:	3714      	adds	r7, #20
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr

08010712 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8010712:	b580      	push	{r7, lr}
 8010714:	b086      	sub	sp, #24
 8010716:	af00      	add	r7, sp, #0
 8010718:	6078      	str	r0, [r7, #4]
 801071a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801071c:	2304      	movs	r3, #4
 801071e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8010726:	23ff      	movs	r3, #255	@ 0xff
 8010728:	757b      	strb	r3, [r7, #21]
 801072a:	23ff      	movs	r3, #255	@ 0xff
 801072c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801072e:	e081      	b.n	8010834 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	69db      	ldr	r3, [r3, #28]
 8010734:	4619      	mov	r1, r3
 8010736:	6938      	ldr	r0, [r7, #16]
 8010738:	f7ff f8bc 	bl	800f8b4 <move_window>
 801073c:	4603      	mov	r3, r0
 801073e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010740:	7dfb      	ldrb	r3, [r7, #23]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d17c      	bne.n	8010840 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	6a1b      	ldr	r3, [r3, #32]
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801074e:	7dbb      	ldrb	r3, [r7, #22]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d102      	bne.n	801075a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8010754:	2304      	movs	r3, #4
 8010756:	75fb      	strb	r3, [r7, #23]
 8010758:	e077      	b.n	801084a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6a1b      	ldr	r3, [r3, #32]
 801075e:	330b      	adds	r3, #11
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010766:	73fb      	strb	r3, [r7, #15]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	7bfa      	ldrb	r2, [r7, #15]
 801076c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801076e:	7dbb      	ldrb	r3, [r7, #22]
 8010770:	2be5      	cmp	r3, #229	@ 0xe5
 8010772:	d00e      	beq.n	8010792 <dir_read+0x80>
 8010774:	7dbb      	ldrb	r3, [r7, #22]
 8010776:	2b2e      	cmp	r3, #46	@ 0x2e
 8010778:	d00b      	beq.n	8010792 <dir_read+0x80>
 801077a:	7bfb      	ldrb	r3, [r7, #15]
 801077c:	f023 0320 	bic.w	r3, r3, #32
 8010780:	2b08      	cmp	r3, #8
 8010782:	bf0c      	ite	eq
 8010784:	2301      	moveq	r3, #1
 8010786:	2300      	movne	r3, #0
 8010788:	b2db      	uxtb	r3, r3
 801078a:	461a      	mov	r2, r3
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	4293      	cmp	r3, r2
 8010790:	d002      	beq.n	8010798 <dir_read+0x86>
				ord = 0xFF;
 8010792:	23ff      	movs	r3, #255	@ 0xff
 8010794:	757b      	strb	r3, [r7, #21]
 8010796:	e044      	b.n	8010822 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8010798:	7bfb      	ldrb	r3, [r7, #15]
 801079a:	2b0f      	cmp	r3, #15
 801079c:	d12f      	bne.n	80107fe <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801079e:	7dbb      	ldrb	r3, [r7, #22]
 80107a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d00d      	beq.n	80107c4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6a1b      	ldr	r3, [r3, #32]
 80107ac:	7b5b      	ldrb	r3, [r3, #13]
 80107ae:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80107b0:	7dbb      	ldrb	r3, [r7, #22]
 80107b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80107b6:	75bb      	strb	r3, [r7, #22]
 80107b8:	7dbb      	ldrb	r3, [r7, #22]
 80107ba:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	695a      	ldr	r2, [r3, #20]
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80107c4:	7dba      	ldrb	r2, [r7, #22]
 80107c6:	7d7b      	ldrb	r3, [r7, #21]
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d115      	bne.n	80107f8 <dir_read+0xe6>
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6a1b      	ldr	r3, [r3, #32]
 80107d0:	330d      	adds	r3, #13
 80107d2:	781b      	ldrb	r3, [r3, #0]
 80107d4:	7d3a      	ldrb	r2, [r7, #20]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d10e      	bne.n	80107f8 <dir_read+0xe6>
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	68da      	ldr	r2, [r3, #12]
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	6a1b      	ldr	r3, [r3, #32]
 80107e2:	4619      	mov	r1, r3
 80107e4:	4610      	mov	r0, r2
 80107e6:	f7ff fe19 	bl	801041c <pick_lfn>
 80107ea:	4603      	mov	r3, r0
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d003      	beq.n	80107f8 <dir_read+0xe6>
 80107f0:	7d7b      	ldrb	r3, [r7, #21]
 80107f2:	3b01      	subs	r3, #1
 80107f4:	b2db      	uxtb	r3, r3
 80107f6:	e000      	b.n	80107fa <dir_read+0xe8>
 80107f8:	23ff      	movs	r3, #255	@ 0xff
 80107fa:	757b      	strb	r3, [r7, #21]
 80107fc:	e011      	b.n	8010822 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80107fe:	7d7b      	ldrb	r3, [r7, #21]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d109      	bne.n	8010818 <dir_read+0x106>
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6a1b      	ldr	r3, [r3, #32]
 8010808:	4618      	mov	r0, r3
 801080a:	f7ff ff61 	bl	80106d0 <sum_sfn>
 801080e:	4603      	mov	r3, r0
 8010810:	461a      	mov	r2, r3
 8010812:	7d3b      	ldrb	r3, [r7, #20]
 8010814:	4293      	cmp	r3, r2
 8010816:	d015      	beq.n	8010844 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f04f 32ff 	mov.w	r2, #4294967295
 801081e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8010820:	e010      	b.n	8010844 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8010822:	2100      	movs	r1, #0
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f7ff fc3d 	bl	80100a4 <dir_next>
 801082a:	4603      	mov	r3, r0
 801082c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801082e:	7dfb      	ldrb	r3, [r7, #23]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d109      	bne.n	8010848 <dir_read+0x136>
	while (dp->sect) {
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	69db      	ldr	r3, [r3, #28]
 8010838:	2b00      	cmp	r3, #0
 801083a:	f47f af79 	bne.w	8010730 <dir_read+0x1e>
 801083e:	e004      	b.n	801084a <dir_read+0x138>
		if (res != FR_OK) break;
 8010840:	bf00      	nop
 8010842:	e002      	b.n	801084a <dir_read+0x138>
					break;
 8010844:	bf00      	nop
 8010846:	e000      	b.n	801084a <dir_read+0x138>
		if (res != FR_OK) break;
 8010848:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801084a:	7dfb      	ldrb	r3, [r7, #23]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d002      	beq.n	8010856 <dir_read+0x144>
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2200      	movs	r2, #0
 8010854:	61da      	str	r2, [r3, #28]
	return res;
 8010856:	7dfb      	ldrb	r3, [r7, #23]
}
 8010858:	4618      	mov	r0, r3
 801085a:	3718      	adds	r7, #24
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b086      	sub	sp, #24
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801086e:	2100      	movs	r1, #0
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f7ff fb9c 	bl	800ffae <dir_sdi>
 8010876:	4603      	mov	r3, r0
 8010878:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801087a:	7dfb      	ldrb	r3, [r7, #23]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d001      	beq.n	8010884 <dir_find+0x24>
 8010880:	7dfb      	ldrb	r3, [r7, #23]
 8010882:	e0a9      	b.n	80109d8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010884:	23ff      	movs	r3, #255	@ 0xff
 8010886:	753b      	strb	r3, [r7, #20]
 8010888:	7d3b      	ldrb	r3, [r7, #20]
 801088a:	757b      	strb	r3, [r7, #21]
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f04f 32ff 	mov.w	r2, #4294967295
 8010892:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	69db      	ldr	r3, [r3, #28]
 8010898:	4619      	mov	r1, r3
 801089a:	6938      	ldr	r0, [r7, #16]
 801089c:	f7ff f80a 	bl	800f8b4 <move_window>
 80108a0:	4603      	mov	r3, r0
 80108a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80108a4:	7dfb      	ldrb	r3, [r7, #23]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	f040 8090 	bne.w	80109cc <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6a1b      	ldr	r3, [r3, #32]
 80108b0:	781b      	ldrb	r3, [r3, #0]
 80108b2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80108b4:	7dbb      	ldrb	r3, [r7, #22]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d102      	bne.n	80108c0 <dir_find+0x60>
 80108ba:	2304      	movs	r3, #4
 80108bc:	75fb      	strb	r3, [r7, #23]
 80108be:	e08a      	b.n	80109d6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	6a1b      	ldr	r3, [r3, #32]
 80108c4:	330b      	adds	r3, #11
 80108c6:	781b      	ldrb	r3, [r3, #0]
 80108c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80108cc:	73fb      	strb	r3, [r7, #15]
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	7bfa      	ldrb	r2, [r7, #15]
 80108d2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80108d4:	7dbb      	ldrb	r3, [r7, #22]
 80108d6:	2be5      	cmp	r3, #229	@ 0xe5
 80108d8:	d007      	beq.n	80108ea <dir_find+0x8a>
 80108da:	7bfb      	ldrb	r3, [r7, #15]
 80108dc:	f003 0308 	and.w	r3, r3, #8
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d009      	beq.n	80108f8 <dir_find+0x98>
 80108e4:	7bfb      	ldrb	r3, [r7, #15]
 80108e6:	2b0f      	cmp	r3, #15
 80108e8:	d006      	beq.n	80108f8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80108ea:	23ff      	movs	r3, #255	@ 0xff
 80108ec:	757b      	strb	r3, [r7, #21]
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f04f 32ff 	mov.w	r2, #4294967295
 80108f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80108f6:	e05e      	b.n	80109b6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80108f8:	7bfb      	ldrb	r3, [r7, #15]
 80108fa:	2b0f      	cmp	r3, #15
 80108fc:	d136      	bne.n	801096c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010908:	2b00      	cmp	r3, #0
 801090a:	d154      	bne.n	80109b6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801090c:	7dbb      	ldrb	r3, [r7, #22]
 801090e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010912:	2b00      	cmp	r3, #0
 8010914:	d00d      	beq.n	8010932 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6a1b      	ldr	r3, [r3, #32]
 801091a:	7b5b      	ldrb	r3, [r3, #13]
 801091c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801091e:	7dbb      	ldrb	r3, [r7, #22]
 8010920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010924:	75bb      	strb	r3, [r7, #22]
 8010926:	7dbb      	ldrb	r3, [r7, #22]
 8010928:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	695a      	ldr	r2, [r3, #20]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010932:	7dba      	ldrb	r2, [r7, #22]
 8010934:	7d7b      	ldrb	r3, [r7, #21]
 8010936:	429a      	cmp	r2, r3
 8010938:	d115      	bne.n	8010966 <dir_find+0x106>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6a1b      	ldr	r3, [r3, #32]
 801093e:	330d      	adds	r3, #13
 8010940:	781b      	ldrb	r3, [r3, #0]
 8010942:	7d3a      	ldrb	r2, [r7, #20]
 8010944:	429a      	cmp	r2, r3
 8010946:	d10e      	bne.n	8010966 <dir_find+0x106>
 8010948:	693b      	ldr	r3, [r7, #16]
 801094a:	68da      	ldr	r2, [r3, #12]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6a1b      	ldr	r3, [r3, #32]
 8010950:	4619      	mov	r1, r3
 8010952:	4610      	mov	r0, r2
 8010954:	f7ff fcf2 	bl	801033c <cmp_lfn>
 8010958:	4603      	mov	r3, r0
 801095a:	2b00      	cmp	r3, #0
 801095c:	d003      	beq.n	8010966 <dir_find+0x106>
 801095e:	7d7b      	ldrb	r3, [r7, #21]
 8010960:	3b01      	subs	r3, #1
 8010962:	b2db      	uxtb	r3, r3
 8010964:	e000      	b.n	8010968 <dir_find+0x108>
 8010966:	23ff      	movs	r3, #255	@ 0xff
 8010968:	757b      	strb	r3, [r7, #21]
 801096a:	e024      	b.n	80109b6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801096c:	7d7b      	ldrb	r3, [r7, #21]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d109      	bne.n	8010986 <dir_find+0x126>
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6a1b      	ldr	r3, [r3, #32]
 8010976:	4618      	mov	r0, r3
 8010978:	f7ff feaa 	bl	80106d0 <sum_sfn>
 801097c:	4603      	mov	r3, r0
 801097e:	461a      	mov	r2, r3
 8010980:	7d3b      	ldrb	r3, [r7, #20]
 8010982:	4293      	cmp	r3, r2
 8010984:	d024      	beq.n	80109d0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801098c:	f003 0301 	and.w	r3, r3, #1
 8010990:	2b00      	cmp	r3, #0
 8010992:	d10a      	bne.n	80109aa <dir_find+0x14a>
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6a18      	ldr	r0, [r3, #32]
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	3324      	adds	r3, #36	@ 0x24
 801099c:	220b      	movs	r2, #11
 801099e:	4619      	mov	r1, r3
 80109a0:	f7fe fd96 	bl	800f4d0 <mem_cmp>
 80109a4:	4603      	mov	r3, r0
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d014      	beq.n	80109d4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80109aa:	23ff      	movs	r3, #255	@ 0xff
 80109ac:	757b      	strb	r3, [r7, #21]
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	f04f 32ff 	mov.w	r2, #4294967295
 80109b4:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80109b6:	2100      	movs	r1, #0
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f7ff fb73 	bl	80100a4 <dir_next>
 80109be:	4603      	mov	r3, r0
 80109c0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80109c2:	7dfb      	ldrb	r3, [r7, #23]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	f43f af65 	beq.w	8010894 <dir_find+0x34>
 80109ca:	e004      	b.n	80109d6 <dir_find+0x176>
		if (res != FR_OK) break;
 80109cc:	bf00      	nop
 80109ce:	e002      	b.n	80109d6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80109d0:	bf00      	nop
 80109d2:	e000      	b.n	80109d6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80109d4:	bf00      	nop

	return res;
 80109d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3718      	adds	r7, #24
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}

080109e0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b08c      	sub	sp, #48	@ 0x30
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80109f4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d001      	beq.n	8010a00 <dir_register+0x20>
 80109fc:	2306      	movs	r3, #6
 80109fe:	e0e0      	b.n	8010bc2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8010a00:	2300      	movs	r3, #0
 8010a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a04:	e002      	b.n	8010a0c <dir_register+0x2c>
 8010a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a08:	3301      	adds	r3, #1
 8010a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a0c:	69fb      	ldr	r3, [r7, #28]
 8010a0e:	68da      	ldr	r2, [r3, #12]
 8010a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a12:	005b      	lsls	r3, r3, #1
 8010a14:	4413      	add	r3, r2
 8010a16:	881b      	ldrh	r3, [r3, #0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d1f4      	bne.n	8010a06 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8010a22:	f107 030c 	add.w	r3, r7, #12
 8010a26:	220c      	movs	r2, #12
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f7fe fd15 	bl	800f458 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8010a2e:	7dfb      	ldrb	r3, [r7, #23]
 8010a30:	f003 0301 	and.w	r3, r3, #1
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d032      	beq.n	8010a9e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2240      	movs	r2, #64	@ 0x40
 8010a3c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8010a40:	2301      	movs	r3, #1
 8010a42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010a44:	e016      	b.n	8010a74 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8010a4c:	69fb      	ldr	r3, [r7, #28]
 8010a4e:	68da      	ldr	r2, [r3, #12]
 8010a50:	f107 010c 	add.w	r1, r7, #12
 8010a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a56:	f7ff fdad 	bl	80105b4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f7ff ff00 	bl	8010860 <dir_find>
 8010a60:	4603      	mov	r3, r0
 8010a62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8010a66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d106      	bne.n	8010a7c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8010a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a70:	3301      	adds	r3, #1
 8010a72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a76:	2b63      	cmp	r3, #99	@ 0x63
 8010a78:	d9e5      	bls.n	8010a46 <dir_register+0x66>
 8010a7a:	e000      	b.n	8010a7e <dir_register+0x9e>
			if (res != FR_OK) break;
 8010a7c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8010a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a80:	2b64      	cmp	r3, #100	@ 0x64
 8010a82:	d101      	bne.n	8010a88 <dir_register+0xa8>
 8010a84:	2307      	movs	r3, #7
 8010a86:	e09c      	b.n	8010bc2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8010a88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010a8c:	2b04      	cmp	r3, #4
 8010a8e:	d002      	beq.n	8010a96 <dir_register+0xb6>
 8010a90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010a94:	e095      	b.n	8010bc2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8010a96:	7dfa      	ldrb	r2, [r7, #23]
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8010a9e:	7dfb      	ldrb	r3, [r7, #23]
 8010aa0:	f003 0302 	and.w	r3, r3, #2
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d007      	beq.n	8010ab8 <dir_register+0xd8>
 8010aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aaa:	330c      	adds	r3, #12
 8010aac:	4a47      	ldr	r2, [pc, #284]	@ (8010bcc <dir_register+0x1ec>)
 8010aae:	fba2 2303 	umull	r2, r3, r2, r3
 8010ab2:	089b      	lsrs	r3, r3, #2
 8010ab4:	3301      	adds	r3, #1
 8010ab6:	e000      	b.n	8010aba <dir_register+0xda>
 8010ab8:	2301      	movs	r3, #1
 8010aba:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8010abc:	6a39      	ldr	r1, [r7, #32]
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f7ff fbb5 	bl	801022e <dir_alloc>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8010aca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d148      	bne.n	8010b64 <dir_register+0x184>
 8010ad2:	6a3b      	ldr	r3, [r7, #32]
 8010ad4:	3b01      	subs	r3, #1
 8010ad6:	623b      	str	r3, [r7, #32]
 8010ad8:	6a3b      	ldr	r3, [r7, #32]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d042      	beq.n	8010b64 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	695a      	ldr	r2, [r3, #20]
 8010ae2:	6a3b      	ldr	r3, [r7, #32]
 8010ae4:	015b      	lsls	r3, r3, #5
 8010ae6:	1ad3      	subs	r3, r2, r3
 8010ae8:	4619      	mov	r1, r3
 8010aea:	6878      	ldr	r0, [r7, #4]
 8010aec:	f7ff fa5f 	bl	800ffae <dir_sdi>
 8010af0:	4603      	mov	r3, r0
 8010af2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010af6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d132      	bne.n	8010b64 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	3324      	adds	r3, #36	@ 0x24
 8010b02:	4618      	mov	r0, r3
 8010b04:	f7ff fde4 	bl	80106d0 <sum_sfn>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	69db      	ldr	r3, [r3, #28]
 8010b10:	4619      	mov	r1, r3
 8010b12:	69f8      	ldr	r0, [r7, #28]
 8010b14:	f7fe fece 	bl	800f8b4 <move_window>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8010b1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d11d      	bne.n	8010b62 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8010b26:	69fb      	ldr	r3, [r7, #28]
 8010b28:	68d8      	ldr	r0, [r3, #12]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6a19      	ldr	r1, [r3, #32]
 8010b2e:	6a3b      	ldr	r3, [r7, #32]
 8010b30:	b2da      	uxtb	r2, r3
 8010b32:	7efb      	ldrb	r3, [r7, #27]
 8010b34:	f7ff fcd6 	bl	80104e4 <put_lfn>
				fs->wflag = 1;
 8010b38:	69fb      	ldr	r3, [r7, #28]
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8010b3e:	2100      	movs	r1, #0
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f7ff faaf 	bl	80100a4 <dir_next>
 8010b46:	4603      	mov	r3, r0
 8010b48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8010b4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d107      	bne.n	8010b64 <dir_register+0x184>
 8010b54:	6a3b      	ldr	r3, [r7, #32]
 8010b56:	3b01      	subs	r3, #1
 8010b58:	623b      	str	r3, [r7, #32]
 8010b5a:	6a3b      	ldr	r3, [r7, #32]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d1d5      	bne.n	8010b0c <dir_register+0x12c>
 8010b60:	e000      	b.n	8010b64 <dir_register+0x184>
				if (res != FR_OK) break;
 8010b62:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010b64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d128      	bne.n	8010bbe <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	69db      	ldr	r3, [r3, #28]
 8010b70:	4619      	mov	r1, r3
 8010b72:	69f8      	ldr	r0, [r7, #28]
 8010b74:	f7fe fe9e 	bl	800f8b4 <move_window>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d11b      	bne.n	8010bbe <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	6a1b      	ldr	r3, [r3, #32]
 8010b8a:	2220      	movs	r2, #32
 8010b8c:	2100      	movs	r1, #0
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7fe fc83 	bl	800f49a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	6a18      	ldr	r0, [r3, #32]
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	3324      	adds	r3, #36	@ 0x24
 8010b9c:	220b      	movs	r2, #11
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	f7fe fc5a 	bl	800f458 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	6a1b      	ldr	r3, [r3, #32]
 8010bae:	330c      	adds	r3, #12
 8010bb0:	f002 0218 	and.w	r2, r2, #24
 8010bb4:	b2d2      	uxtb	r2, r2
 8010bb6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8010bb8:	69fb      	ldr	r3, [r7, #28]
 8010bba:	2201      	movs	r2, #1
 8010bbc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010bbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	3730      	adds	r7, #48	@ 0x30
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}
 8010bca:	bf00      	nop
 8010bcc:	4ec4ec4f 	.word	0x4ec4ec4f

08010bd0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b088      	sub	sp, #32
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
 8010bd8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	2200      	movs	r2, #0
 8010be4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	69db      	ldr	r3, [r3, #28]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	f000 80ca 	beq.w	8010d84 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bf8:	d032      	beq.n	8010c60 <get_fileinfo+0x90>
			i = j = 0;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	61bb      	str	r3, [r7, #24]
 8010bfe:	69bb      	ldr	r3, [r7, #24]
 8010c00:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8010c02:	e01b      	b.n	8010c3c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8010c04:	89fb      	ldrh	r3, [r7, #14]
 8010c06:	2100      	movs	r1, #0
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f001 fd2b 	bl	8012664 <ff_convert>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8010c12:	89fb      	ldrh	r3, [r7, #14]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d102      	bne.n	8010c1e <get_fileinfo+0x4e>
 8010c18:	2300      	movs	r3, #0
 8010c1a:	61fb      	str	r3, [r7, #28]
 8010c1c:	e01a      	b.n	8010c54 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8010c1e:	69fb      	ldr	r3, [r7, #28]
 8010c20:	2bfe      	cmp	r3, #254	@ 0xfe
 8010c22:	d902      	bls.n	8010c2a <get_fileinfo+0x5a>
 8010c24:	2300      	movs	r3, #0
 8010c26:	61fb      	str	r3, [r7, #28]
 8010c28:	e014      	b.n	8010c54 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8010c2a:	69fb      	ldr	r3, [r7, #28]
 8010c2c:	1c5a      	adds	r2, r3, #1
 8010c2e:	61fa      	str	r2, [r7, #28]
 8010c30:	89fa      	ldrh	r2, [r7, #14]
 8010c32:	b2d1      	uxtb	r1, r2
 8010c34:	683a      	ldr	r2, [r7, #0]
 8010c36:	4413      	add	r3, r2
 8010c38:	460a      	mov	r2, r1
 8010c3a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8010c3c:	693b      	ldr	r3, [r7, #16]
 8010c3e:	68da      	ldr	r2, [r3, #12]
 8010c40:	69bb      	ldr	r3, [r7, #24]
 8010c42:	1c59      	adds	r1, r3, #1
 8010c44:	61b9      	str	r1, [r7, #24]
 8010c46:	005b      	lsls	r3, r3, #1
 8010c48:	4413      	add	r3, r2
 8010c4a:	881b      	ldrh	r3, [r3, #0]
 8010c4c:	81fb      	strh	r3, [r7, #14]
 8010c4e:	89fb      	ldrh	r3, [r7, #14]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d1d7      	bne.n	8010c04 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8010c54:	683a      	ldr	r2, [r7, #0]
 8010c56:	69fb      	ldr	r3, [r7, #28]
 8010c58:	4413      	add	r3, r2
 8010c5a:	3316      	adds	r3, #22
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8010c60:	2300      	movs	r3, #0
 8010c62:	61bb      	str	r3, [r7, #24]
 8010c64:	69bb      	ldr	r3, [r7, #24]
 8010c66:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8010c68:	683a      	ldr	r2, [r7, #0]
 8010c6a:	69fb      	ldr	r3, [r7, #28]
 8010c6c:	4413      	add	r3, r2
 8010c6e:	3316      	adds	r3, #22
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8010c74:	e04d      	b.n	8010d12 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6a1a      	ldr	r2, [r3, #32]
 8010c7a:	69fb      	ldr	r3, [r7, #28]
 8010c7c:	1c59      	adds	r1, r3, #1
 8010c7e:	61f9      	str	r1, [r7, #28]
 8010c80:	4413      	add	r3, r2
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8010c86:	7dfb      	ldrb	r3, [r7, #23]
 8010c88:	2b20      	cmp	r3, #32
 8010c8a:	d041      	beq.n	8010d10 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8010c8c:	7dfb      	ldrb	r3, [r7, #23]
 8010c8e:	2b05      	cmp	r3, #5
 8010c90:	d101      	bne.n	8010c96 <get_fileinfo+0xc6>
 8010c92:	23e5      	movs	r3, #229	@ 0xe5
 8010c94:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8010c96:	69fb      	ldr	r3, [r7, #28]
 8010c98:	2b09      	cmp	r3, #9
 8010c9a:	d10f      	bne.n	8010cbc <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8010c9c:	89bb      	ldrh	r3, [r7, #12]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d105      	bne.n	8010cae <get_fileinfo+0xde>
 8010ca2:	683a      	ldr	r2, [r7, #0]
 8010ca4:	69bb      	ldr	r3, [r7, #24]
 8010ca6:	4413      	add	r3, r2
 8010ca8:	3316      	adds	r3, #22
 8010caa:	222e      	movs	r2, #46	@ 0x2e
 8010cac:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8010cae:	69bb      	ldr	r3, [r7, #24]
 8010cb0:	1c5a      	adds	r2, r3, #1
 8010cb2:	61ba      	str	r2, [r7, #24]
 8010cb4:	683a      	ldr	r2, [r7, #0]
 8010cb6:	4413      	add	r3, r2
 8010cb8:	222e      	movs	r2, #46	@ 0x2e
 8010cba:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8010cbc:	683a      	ldr	r2, [r7, #0]
 8010cbe:	69bb      	ldr	r3, [r7, #24]
 8010cc0:	4413      	add	r3, r2
 8010cc2:	3309      	adds	r3, #9
 8010cc4:	7dfa      	ldrb	r2, [r7, #23]
 8010cc6:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8010cc8:	89bb      	ldrh	r3, [r7, #12]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d11c      	bne.n	8010d08 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8010cce:	7dfb      	ldrb	r3, [r7, #23]
 8010cd0:	2b40      	cmp	r3, #64	@ 0x40
 8010cd2:	d913      	bls.n	8010cfc <get_fileinfo+0x12c>
 8010cd4:	7dfb      	ldrb	r3, [r7, #23]
 8010cd6:	2b5a      	cmp	r3, #90	@ 0x5a
 8010cd8:	d810      	bhi.n	8010cfc <get_fileinfo+0x12c>
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6a1b      	ldr	r3, [r3, #32]
 8010cde:	330c      	adds	r3, #12
 8010ce0:	781b      	ldrb	r3, [r3, #0]
 8010ce2:	461a      	mov	r2, r3
 8010ce4:	69fb      	ldr	r3, [r7, #28]
 8010ce6:	2b08      	cmp	r3, #8
 8010ce8:	d901      	bls.n	8010cee <get_fileinfo+0x11e>
 8010cea:	2310      	movs	r3, #16
 8010cec:	e000      	b.n	8010cf0 <get_fileinfo+0x120>
 8010cee:	2308      	movs	r3, #8
 8010cf0:	4013      	ands	r3, r2
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d002      	beq.n	8010cfc <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 8010cf6:	7dfb      	ldrb	r3, [r7, #23]
 8010cf8:	3320      	adds	r3, #32
 8010cfa:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8010cfc:	683a      	ldr	r2, [r7, #0]
 8010cfe:	69bb      	ldr	r3, [r7, #24]
 8010d00:	4413      	add	r3, r2
 8010d02:	3316      	adds	r3, #22
 8010d04:	7dfa      	ldrb	r2, [r7, #23]
 8010d06:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8010d08:	69bb      	ldr	r3, [r7, #24]
 8010d0a:	3301      	adds	r3, #1
 8010d0c:	61bb      	str	r3, [r7, #24]
 8010d0e:	e000      	b.n	8010d12 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8010d10:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8010d12:	69fb      	ldr	r3, [r7, #28]
 8010d14:	2b0a      	cmp	r3, #10
 8010d16:	d9ae      	bls.n	8010c76 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8010d18:	89bb      	ldrh	r3, [r7, #12]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d10d      	bne.n	8010d3a <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 8010d1e:	683a      	ldr	r2, [r7, #0]
 8010d20:	69bb      	ldr	r3, [r7, #24]
 8010d22:	4413      	add	r3, r2
 8010d24:	3316      	adds	r3, #22
 8010d26:	2200      	movs	r2, #0
 8010d28:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6a1b      	ldr	r3, [r3, #32]
 8010d2e:	330c      	adds	r3, #12
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d101      	bne.n	8010d3a <get_fileinfo+0x16a>
 8010d36:	2300      	movs	r3, #0
 8010d38:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8010d3a:	683a      	ldr	r2, [r7, #0]
 8010d3c:	69bb      	ldr	r3, [r7, #24]
 8010d3e:	4413      	add	r3, r2
 8010d40:	3309      	adds	r3, #9
 8010d42:	2200      	movs	r2, #0
 8010d44:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6a1b      	ldr	r3, [r3, #32]
 8010d4a:	7ada      	ldrb	r2, [r3, #11]
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6a1b      	ldr	r3, [r3, #32]
 8010d54:	331c      	adds	r3, #28
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7fe fb14 	bl	800f384 <ld_dword>
 8010d5c:	4602      	mov	r2, r0
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6a1b      	ldr	r3, [r3, #32]
 8010d66:	3316      	adds	r3, #22
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f7fe fb0b 	bl	800f384 <ld_dword>
 8010d6e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	b29a      	uxth	r2, r3
 8010d74:	683b      	ldr	r3, [r7, #0]
 8010d76:	80da      	strh	r2, [r3, #6]
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	0c1b      	lsrs	r3, r3, #16
 8010d7c:	b29a      	uxth	r2, r3
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	809a      	strh	r2, [r3, #4]
 8010d82:	e000      	b.n	8010d86 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010d84:	bf00      	nop
}
 8010d86:	3720      	adds	r7, #32
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}

08010d8c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b08a      	sub	sp, #40	@ 0x28
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
 8010d94:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	613b      	str	r3, [r7, #16]
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	68db      	ldr	r3, [r3, #12]
 8010da2:	60fb      	str	r3, [r7, #12]
 8010da4:	2300      	movs	r3, #0
 8010da6:	617b      	str	r3, [r7, #20]
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8010dac:	69bb      	ldr	r3, [r7, #24]
 8010dae:	1c5a      	adds	r2, r3, #1
 8010db0:	61ba      	str	r2, [r7, #24]
 8010db2:	693a      	ldr	r2, [r7, #16]
 8010db4:	4413      	add	r3, r2
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8010dba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010dbc:	2b1f      	cmp	r3, #31
 8010dbe:	d940      	bls.n	8010e42 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8010dc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010dc2:	2b2f      	cmp	r3, #47	@ 0x2f
 8010dc4:	d006      	beq.n	8010dd4 <create_name+0x48>
 8010dc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010dc8:	2b5c      	cmp	r3, #92	@ 0x5c
 8010dca:	d110      	bne.n	8010dee <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010dcc:	e002      	b.n	8010dd4 <create_name+0x48>
 8010dce:	69bb      	ldr	r3, [r7, #24]
 8010dd0:	3301      	adds	r3, #1
 8010dd2:	61bb      	str	r3, [r7, #24]
 8010dd4:	693a      	ldr	r2, [r7, #16]
 8010dd6:	69bb      	ldr	r3, [r7, #24]
 8010dd8:	4413      	add	r3, r2
 8010dda:	781b      	ldrb	r3, [r3, #0]
 8010ddc:	2b2f      	cmp	r3, #47	@ 0x2f
 8010dde:	d0f6      	beq.n	8010dce <create_name+0x42>
 8010de0:	693a      	ldr	r2, [r7, #16]
 8010de2:	69bb      	ldr	r3, [r7, #24]
 8010de4:	4413      	add	r3, r2
 8010de6:	781b      	ldrb	r3, [r3, #0]
 8010de8:	2b5c      	cmp	r3, #92	@ 0x5c
 8010dea:	d0f0      	beq.n	8010dce <create_name+0x42>
			break;
 8010dec:	e02a      	b.n	8010e44 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	2bfe      	cmp	r3, #254	@ 0xfe
 8010df2:	d901      	bls.n	8010df8 <create_name+0x6c>
 8010df4:	2306      	movs	r3, #6
 8010df6:	e17d      	b.n	80110f4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8010df8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010dfa:	b2db      	uxtb	r3, r3
 8010dfc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8010dfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e00:	2101      	movs	r1, #1
 8010e02:	4618      	mov	r0, r3
 8010e04:	f001 fc2e 	bl	8012664 <ff_convert>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8010e0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d101      	bne.n	8010e16 <create_name+0x8a>
 8010e12:	2306      	movs	r3, #6
 8010e14:	e16e      	b.n	80110f4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010e16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e18:	2b7f      	cmp	r3, #127	@ 0x7f
 8010e1a:	d809      	bhi.n	8010e30 <create_name+0xa4>
 8010e1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e1e:	4619      	mov	r1, r3
 8010e20:	488d      	ldr	r0, [pc, #564]	@ (8011058 <create_name+0x2cc>)
 8010e22:	f7fe fb7c 	bl	800f51e <chk_chr>
 8010e26:	4603      	mov	r3, r0
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d001      	beq.n	8010e30 <create_name+0xa4>
 8010e2c:	2306      	movs	r3, #6
 8010e2e:	e161      	b.n	80110f4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	1c5a      	adds	r2, r3, #1
 8010e34:	617a      	str	r2, [r7, #20]
 8010e36:	005b      	lsls	r3, r3, #1
 8010e38:	68fa      	ldr	r2, [r7, #12]
 8010e3a:	4413      	add	r3, r2
 8010e3c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010e3e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8010e40:	e7b4      	b.n	8010dac <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8010e42:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010e44:	693a      	ldr	r2, [r7, #16]
 8010e46:	69bb      	ldr	r3, [r7, #24]
 8010e48:	441a      	add	r2, r3
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010e4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e50:	2b1f      	cmp	r3, #31
 8010e52:	d801      	bhi.n	8010e58 <create_name+0xcc>
 8010e54:	2304      	movs	r3, #4
 8010e56:	e000      	b.n	8010e5a <create_name+0xce>
 8010e58:	2300      	movs	r3, #0
 8010e5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010e5e:	e011      	b.n	8010e84 <create_name+0xf8>
		w = lfn[di - 1];
 8010e60:	697b      	ldr	r3, [r7, #20]
 8010e62:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010e66:	3b01      	subs	r3, #1
 8010e68:	005b      	lsls	r3, r3, #1
 8010e6a:	68fa      	ldr	r2, [r7, #12]
 8010e6c:	4413      	add	r3, r2
 8010e6e:	881b      	ldrh	r3, [r3, #0]
 8010e70:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8010e72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e74:	2b20      	cmp	r3, #32
 8010e76:	d002      	beq.n	8010e7e <create_name+0xf2>
 8010e78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e7c:	d106      	bne.n	8010e8c <create_name+0x100>
		di--;
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	3b01      	subs	r3, #1
 8010e82:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d1ea      	bne.n	8010e60 <create_name+0xd4>
 8010e8a:	e000      	b.n	8010e8e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8010e8c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	005b      	lsls	r3, r3, #1
 8010e92:	68fa      	ldr	r2, [r7, #12]
 8010e94:	4413      	add	r3, r2
 8010e96:	2200      	movs	r2, #0
 8010e98:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d101      	bne.n	8010ea4 <create_name+0x118>
 8010ea0:	2306      	movs	r3, #6
 8010ea2:	e127      	b.n	80110f4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	3324      	adds	r3, #36	@ 0x24
 8010ea8:	220b      	movs	r2, #11
 8010eaa:	2120      	movs	r1, #32
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7fe faf4 	bl	800f49a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	61bb      	str	r3, [r7, #24]
 8010eb6:	e002      	b.n	8010ebe <create_name+0x132>
 8010eb8:	69bb      	ldr	r3, [r7, #24]
 8010eba:	3301      	adds	r3, #1
 8010ebc:	61bb      	str	r3, [r7, #24]
 8010ebe:	69bb      	ldr	r3, [r7, #24]
 8010ec0:	005b      	lsls	r3, r3, #1
 8010ec2:	68fa      	ldr	r2, [r7, #12]
 8010ec4:	4413      	add	r3, r2
 8010ec6:	881b      	ldrh	r3, [r3, #0]
 8010ec8:	2b20      	cmp	r3, #32
 8010eca:	d0f5      	beq.n	8010eb8 <create_name+0x12c>
 8010ecc:	69bb      	ldr	r3, [r7, #24]
 8010ece:	005b      	lsls	r3, r3, #1
 8010ed0:	68fa      	ldr	r2, [r7, #12]
 8010ed2:	4413      	add	r3, r2
 8010ed4:	881b      	ldrh	r3, [r3, #0]
 8010ed6:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ed8:	d0ee      	beq.n	8010eb8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8010eda:	69bb      	ldr	r3, [r7, #24]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d009      	beq.n	8010ef4 <create_name+0x168>
 8010ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ee4:	f043 0303 	orr.w	r3, r3, #3
 8010ee8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8010eec:	e002      	b.n	8010ef4 <create_name+0x168>
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	3b01      	subs	r3, #1
 8010ef2:	617b      	str	r3, [r7, #20]
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d009      	beq.n	8010f0e <create_name+0x182>
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010f00:	3b01      	subs	r3, #1
 8010f02:	005b      	lsls	r3, r3, #1
 8010f04:	68fa      	ldr	r2, [r7, #12]
 8010f06:	4413      	add	r3, r2
 8010f08:	881b      	ldrh	r3, [r3, #0]
 8010f0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8010f0c:	d1ef      	bne.n	8010eee <create_name+0x162>

	i = b = 0; ni = 8;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010f14:	2300      	movs	r3, #0
 8010f16:	623b      	str	r3, [r7, #32]
 8010f18:	2308      	movs	r3, #8
 8010f1a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8010f1c:	69bb      	ldr	r3, [r7, #24]
 8010f1e:	1c5a      	adds	r2, r3, #1
 8010f20:	61ba      	str	r2, [r7, #24]
 8010f22:	005b      	lsls	r3, r3, #1
 8010f24:	68fa      	ldr	r2, [r7, #12]
 8010f26:	4413      	add	r3, r2
 8010f28:	881b      	ldrh	r3, [r3, #0]
 8010f2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8010f2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	f000 8090 	beq.w	8011054 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8010f34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f36:	2b20      	cmp	r3, #32
 8010f38:	d006      	beq.n	8010f48 <create_name+0x1bc>
 8010f3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8010f3e:	d10a      	bne.n	8010f56 <create_name+0x1ca>
 8010f40:	69ba      	ldr	r2, [r7, #24]
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	429a      	cmp	r2, r3
 8010f46:	d006      	beq.n	8010f56 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8010f48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f4c:	f043 0303 	orr.w	r3, r3, #3
 8010f50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010f54:	e07d      	b.n	8011052 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8010f56:	6a3a      	ldr	r2, [r7, #32]
 8010f58:	69fb      	ldr	r3, [r7, #28]
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	d203      	bcs.n	8010f66 <create_name+0x1da>
 8010f5e:	69ba      	ldr	r2, [r7, #24]
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d123      	bne.n	8010fae <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8010f66:	69fb      	ldr	r3, [r7, #28]
 8010f68:	2b0b      	cmp	r3, #11
 8010f6a:	d106      	bne.n	8010f7a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8010f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f70:	f043 0303 	orr.w	r3, r3, #3
 8010f74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010f78:	e075      	b.n	8011066 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8010f7a:	69ba      	ldr	r2, [r7, #24]
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	429a      	cmp	r2, r3
 8010f80:	d005      	beq.n	8010f8e <create_name+0x202>
 8010f82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f86:	f043 0303 	orr.w	r3, r3, #3
 8010f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8010f8e:	69ba      	ldr	r2, [r7, #24]
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	429a      	cmp	r2, r3
 8010f94:	d866      	bhi.n	8011064 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	61bb      	str	r3, [r7, #24]
 8010f9a:	2308      	movs	r3, #8
 8010f9c:	623b      	str	r3, [r7, #32]
 8010f9e:	230b      	movs	r3, #11
 8010fa0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8010fa2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010fa6:	009b      	lsls	r3, r3, #2
 8010fa8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010fac:	e051      	b.n	8011052 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8010fae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8010fb2:	d914      	bls.n	8010fde <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8010fb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fb6:	2100      	movs	r1, #0
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f001 fb53 	bl	8012664 <ff_convert>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010fc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d004      	beq.n	8010fd2 <create_name+0x246>
 8010fc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fca:	3b80      	subs	r3, #128	@ 0x80
 8010fcc:	4a23      	ldr	r2, [pc, #140]	@ (801105c <create_name+0x2d0>)
 8010fce:	5cd3      	ldrb	r3, [r2, r3]
 8010fd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8010fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010fd6:	f043 0302 	orr.w	r3, r3, #2
 8010fda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8010fde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d007      	beq.n	8010ff4 <create_name+0x268>
 8010fe4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fe6:	4619      	mov	r1, r3
 8010fe8:	481d      	ldr	r0, [pc, #116]	@ (8011060 <create_name+0x2d4>)
 8010fea:	f7fe fa98 	bl	800f51e <chk_chr>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d008      	beq.n	8011006 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010ff4:	235f      	movs	r3, #95	@ 0x5f
 8010ff6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8010ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ffc:	f043 0303 	orr.w	r3, r3, #3
 8011000:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011004:	e01b      	b.n	801103e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8011006:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011008:	2b40      	cmp	r3, #64	@ 0x40
 801100a:	d909      	bls.n	8011020 <create_name+0x294>
 801100c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801100e:	2b5a      	cmp	r3, #90	@ 0x5a
 8011010:	d806      	bhi.n	8011020 <create_name+0x294>
					b |= 2;
 8011012:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011016:	f043 0302 	orr.w	r3, r3, #2
 801101a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801101e:	e00e      	b.n	801103e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8011020:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011022:	2b60      	cmp	r3, #96	@ 0x60
 8011024:	d90b      	bls.n	801103e <create_name+0x2b2>
 8011026:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011028:	2b7a      	cmp	r3, #122	@ 0x7a
 801102a:	d808      	bhi.n	801103e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801102c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011030:	f043 0301 	orr.w	r3, r3, #1
 8011034:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011038:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801103a:	3b20      	subs	r3, #32
 801103c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801103e:	6a3b      	ldr	r3, [r7, #32]
 8011040:	1c5a      	adds	r2, r3, #1
 8011042:	623a      	str	r2, [r7, #32]
 8011044:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011046:	b2d1      	uxtb	r1, r2
 8011048:	687a      	ldr	r2, [r7, #4]
 801104a:	4413      	add	r3, r2
 801104c:	460a      	mov	r2, r1
 801104e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8011052:	e763      	b.n	8010f1c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8011054:	bf00      	nop
 8011056:	e006      	b.n	8011066 <create_name+0x2da>
 8011058:	08013880 	.word	0x08013880
 801105c:	08018ab8 	.word	0x08018ab8
 8011060:	0801388c 	.word	0x0801388c
			if (si > di) break;			/* No extension */
 8011064:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801106c:	2be5      	cmp	r3, #229	@ 0xe5
 801106e:	d103      	bne.n	8011078 <create_name+0x2ec>
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2205      	movs	r2, #5
 8011074:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8011078:	69fb      	ldr	r3, [r7, #28]
 801107a:	2b08      	cmp	r3, #8
 801107c:	d104      	bne.n	8011088 <create_name+0x2fc>
 801107e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011082:	009b      	lsls	r3, r3, #2
 8011084:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8011088:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801108c:	f003 030c 	and.w	r3, r3, #12
 8011090:	2b0c      	cmp	r3, #12
 8011092:	d005      	beq.n	80110a0 <create_name+0x314>
 8011094:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011098:	f003 0303 	and.w	r3, r3, #3
 801109c:	2b03      	cmp	r3, #3
 801109e:	d105      	bne.n	80110ac <create_name+0x320>
 80110a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80110a4:	f043 0302 	orr.w	r3, r3, #2
 80110a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80110ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80110b0:	f003 0302 	and.w	r3, r3, #2
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d117      	bne.n	80110e8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80110b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80110bc:	f003 0303 	and.w	r3, r3, #3
 80110c0:	2b01      	cmp	r3, #1
 80110c2:	d105      	bne.n	80110d0 <create_name+0x344>
 80110c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80110c8:	f043 0310 	orr.w	r3, r3, #16
 80110cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80110d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80110d4:	f003 030c 	and.w	r3, r3, #12
 80110d8:	2b04      	cmp	r3, #4
 80110da:	d105      	bne.n	80110e8 <create_name+0x35c>
 80110dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80110e0:	f043 0308 	orr.w	r3, r3, #8
 80110e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80110ee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80110f2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	3728      	adds	r7, #40	@ 0x28
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}

080110fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b086      	sub	sp, #24
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801110a:	693b      	ldr	r3, [r7, #16]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011110:	e002      	b.n	8011118 <follow_path+0x1c>
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	3301      	adds	r3, #1
 8011116:	603b      	str	r3, [r7, #0]
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	2b2f      	cmp	r3, #47	@ 0x2f
 801111e:	d0f8      	beq.n	8011112 <follow_path+0x16>
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	781b      	ldrb	r3, [r3, #0]
 8011124:	2b5c      	cmp	r3, #92	@ 0x5c
 8011126:	d0f4      	beq.n	8011112 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011128:	693b      	ldr	r3, [r7, #16]
 801112a:	2200      	movs	r2, #0
 801112c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	2b1f      	cmp	r3, #31
 8011134:	d80a      	bhi.n	801114c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2280      	movs	r2, #128	@ 0x80
 801113a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801113e:	2100      	movs	r1, #0
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	f7fe ff34 	bl	800ffae <dir_sdi>
 8011146:	4603      	mov	r3, r0
 8011148:	75fb      	strb	r3, [r7, #23]
 801114a:	e043      	b.n	80111d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801114c:	463b      	mov	r3, r7
 801114e:	4619      	mov	r1, r3
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f7ff fe1b 	bl	8010d8c <create_name>
 8011156:	4603      	mov	r3, r0
 8011158:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801115a:	7dfb      	ldrb	r3, [r7, #23]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d134      	bne.n	80111ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f7ff fb7d 	bl	8010860 <dir_find>
 8011166:	4603      	mov	r3, r0
 8011168:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011170:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011172:	7dfb      	ldrb	r3, [r7, #23]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d00a      	beq.n	801118e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011178:	7dfb      	ldrb	r3, [r7, #23]
 801117a:	2b04      	cmp	r3, #4
 801117c:	d127      	bne.n	80111ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801117e:	7afb      	ldrb	r3, [r7, #11]
 8011180:	f003 0304 	and.w	r3, r3, #4
 8011184:	2b00      	cmp	r3, #0
 8011186:	d122      	bne.n	80111ce <follow_path+0xd2>
 8011188:	2305      	movs	r3, #5
 801118a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801118c:	e01f      	b.n	80111ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801118e:	7afb      	ldrb	r3, [r7, #11]
 8011190:	f003 0304 	and.w	r3, r3, #4
 8011194:	2b00      	cmp	r3, #0
 8011196:	d11c      	bne.n	80111d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011198:	693b      	ldr	r3, [r7, #16]
 801119a:	799b      	ldrb	r3, [r3, #6]
 801119c:	f003 0310 	and.w	r3, r3, #16
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d102      	bne.n	80111aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80111a4:	2305      	movs	r3, #5
 80111a6:	75fb      	strb	r3, [r7, #23]
 80111a8:	e014      	b.n	80111d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	695b      	ldr	r3, [r3, #20]
 80111b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111b8:	4413      	add	r3, r2
 80111ba:	4619      	mov	r1, r3
 80111bc:	68f8      	ldr	r0, [r7, #12]
 80111be:	f7ff f87d 	bl	80102bc <ld_clust>
 80111c2:	4602      	mov	r2, r0
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80111c8:	e7c0      	b.n	801114c <follow_path+0x50>
			if (res != FR_OK) break;
 80111ca:	bf00      	nop
 80111cc:	e002      	b.n	80111d4 <follow_path+0xd8>
				break;
 80111ce:	bf00      	nop
 80111d0:	e000      	b.n	80111d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80111d2:	bf00      	nop
			}
		}
	}

	return res;
 80111d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3718      	adds	r7, #24
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}

080111de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80111de:	b480      	push	{r7}
 80111e0:	b087      	sub	sp, #28
 80111e2:	af00      	add	r7, sp, #0
 80111e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80111e6:	f04f 33ff 	mov.w	r3, #4294967295
 80111ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d031      	beq.n	8011258 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	617b      	str	r3, [r7, #20]
 80111fa:	e002      	b.n	8011202 <get_ldnumber+0x24>
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	3301      	adds	r3, #1
 8011200:	617b      	str	r3, [r7, #20]
 8011202:	697b      	ldr	r3, [r7, #20]
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	2b1f      	cmp	r3, #31
 8011208:	d903      	bls.n	8011212 <get_ldnumber+0x34>
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	781b      	ldrb	r3, [r3, #0]
 801120e:	2b3a      	cmp	r3, #58	@ 0x3a
 8011210:	d1f4      	bne.n	80111fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	781b      	ldrb	r3, [r3, #0]
 8011216:	2b3a      	cmp	r3, #58	@ 0x3a
 8011218:	d11c      	bne.n	8011254 <get_ldnumber+0x76>
			tp = *path;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	1c5a      	adds	r2, r3, #1
 8011224:	60fa      	str	r2, [r7, #12]
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	3b30      	subs	r3, #48	@ 0x30
 801122a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	2b09      	cmp	r3, #9
 8011230:	d80e      	bhi.n	8011250 <get_ldnumber+0x72>
 8011232:	68fa      	ldr	r2, [r7, #12]
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	429a      	cmp	r2, r3
 8011238:	d10a      	bne.n	8011250 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d107      	bne.n	8011250 <get_ldnumber+0x72>
					vol = (int)i;
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011244:	697b      	ldr	r3, [r7, #20]
 8011246:	3301      	adds	r3, #1
 8011248:	617b      	str	r3, [r7, #20]
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	697a      	ldr	r2, [r7, #20]
 801124e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011250:	693b      	ldr	r3, [r7, #16]
 8011252:	e002      	b.n	801125a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011254:	2300      	movs	r3, #0
 8011256:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011258:	693b      	ldr	r3, [r7, #16]
}
 801125a:	4618      	mov	r0, r3
 801125c:	371c      	adds	r7, #28
 801125e:	46bd      	mov	sp, r7
 8011260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011264:	4770      	bx	lr
	...

08011268 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b082      	sub	sp, #8
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	2200      	movs	r2, #0
 8011276:	70da      	strb	r2, [r3, #3]
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f04f 32ff 	mov.w	r2, #4294967295
 801127e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011280:	6839      	ldr	r1, [r7, #0]
 8011282:	6878      	ldr	r0, [r7, #4]
 8011284:	f7fe fb16 	bl	800f8b4 <move_window>
 8011288:	4603      	mov	r3, r0
 801128a:	2b00      	cmp	r3, #0
 801128c:	d001      	beq.n	8011292 <check_fs+0x2a>
 801128e:	2304      	movs	r3, #4
 8011290:	e038      	b.n	8011304 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	3334      	adds	r3, #52	@ 0x34
 8011296:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801129a:	4618      	mov	r0, r3
 801129c:	f7fe f85a 	bl	800f354 <ld_word>
 80112a0:	4603      	mov	r3, r0
 80112a2:	461a      	mov	r2, r3
 80112a4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80112a8:	429a      	cmp	r2, r3
 80112aa:	d001      	beq.n	80112b0 <check_fs+0x48>
 80112ac:	2303      	movs	r3, #3
 80112ae:	e029      	b.n	8011304 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80112b6:	2be9      	cmp	r3, #233	@ 0xe9
 80112b8:	d009      	beq.n	80112ce <check_fs+0x66>
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80112c0:	2beb      	cmp	r3, #235	@ 0xeb
 80112c2:	d11e      	bne.n	8011302 <check_fs+0x9a>
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80112ca:	2b90      	cmp	r3, #144	@ 0x90
 80112cc:	d119      	bne.n	8011302 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	3334      	adds	r3, #52	@ 0x34
 80112d2:	3336      	adds	r3, #54	@ 0x36
 80112d4:	4618      	mov	r0, r3
 80112d6:	f7fe f855 	bl	800f384 <ld_dword>
 80112da:	4603      	mov	r3, r0
 80112dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80112e0:	4a0a      	ldr	r2, [pc, #40]	@ (801130c <check_fs+0xa4>)
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d101      	bne.n	80112ea <check_fs+0x82>
 80112e6:	2300      	movs	r3, #0
 80112e8:	e00c      	b.n	8011304 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	3334      	adds	r3, #52	@ 0x34
 80112ee:	3352      	adds	r3, #82	@ 0x52
 80112f0:	4618      	mov	r0, r3
 80112f2:	f7fe f847 	bl	800f384 <ld_dword>
 80112f6:	4603      	mov	r3, r0
 80112f8:	4a05      	ldr	r2, [pc, #20]	@ (8011310 <check_fs+0xa8>)
 80112fa:	4293      	cmp	r3, r2
 80112fc:	d101      	bne.n	8011302 <check_fs+0x9a>
 80112fe:	2300      	movs	r3, #0
 8011300:	e000      	b.n	8011304 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011302:	2302      	movs	r3, #2
}
 8011304:	4618      	mov	r0, r3
 8011306:	3708      	adds	r7, #8
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}
 801130c:	00544146 	.word	0x00544146
 8011310:	33544146 	.word	0x33544146

08011314 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b096      	sub	sp, #88	@ 0x58
 8011318:	af00      	add	r7, sp, #0
 801131a:	60f8      	str	r0, [r7, #12]
 801131c:	60b9      	str	r1, [r7, #8]
 801131e:	4613      	mov	r3, r2
 8011320:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011322:	68bb      	ldr	r3, [r7, #8]
 8011324:	2200      	movs	r2, #0
 8011326:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011328:	68f8      	ldr	r0, [r7, #12]
 801132a:	f7ff ff58 	bl	80111de <get_ldnumber>
 801132e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011332:	2b00      	cmp	r3, #0
 8011334:	da01      	bge.n	801133a <find_volume+0x26>
 8011336:	230b      	movs	r3, #11
 8011338:	e230      	b.n	801179c <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801133a:	4aa1      	ldr	r2, [pc, #644]	@ (80115c0 <find_volume+0x2ac>)
 801133c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011342:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011346:	2b00      	cmp	r3, #0
 8011348:	d101      	bne.n	801134e <find_volume+0x3a>
 801134a:	230c      	movs	r3, #12
 801134c:	e226      	b.n	801179c <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011352:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011354:	79fb      	ldrb	r3, [r7, #7]
 8011356:	f023 0301 	bic.w	r3, r3, #1
 801135a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801135c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801135e:	781b      	ldrb	r3, [r3, #0]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d01a      	beq.n	801139a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011366:	785b      	ldrb	r3, [r3, #1]
 8011368:	4618      	mov	r0, r3
 801136a:	f7fd ff53 	bl	800f214 <disk_status>
 801136e:	4603      	mov	r3, r0
 8011370:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011374:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011378:	f003 0301 	and.w	r3, r3, #1
 801137c:	2b00      	cmp	r3, #0
 801137e:	d10c      	bne.n	801139a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011380:	79fb      	ldrb	r3, [r7, #7]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d007      	beq.n	8011396 <find_volume+0x82>
 8011386:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801138a:	f003 0304 	and.w	r3, r3, #4
 801138e:	2b00      	cmp	r3, #0
 8011390:	d001      	beq.n	8011396 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011392:	230a      	movs	r3, #10
 8011394:	e202      	b.n	801179c <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 8011396:	2300      	movs	r3, #0
 8011398:	e200      	b.n	801179c <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801139a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801139c:	2200      	movs	r2, #0
 801139e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80113a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113a2:	b2da      	uxtb	r2, r3
 80113a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80113a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113aa:	785b      	ldrb	r3, [r3, #1]
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7fd ff4b 	bl	800f248 <disk_initialize>
 80113b2:	4603      	mov	r3, r0
 80113b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80113b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80113bc:	f003 0301 	and.w	r3, r3, #1
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d001      	beq.n	80113c8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80113c4:	2303      	movs	r3, #3
 80113c6:	e1e9      	b.n	801179c <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80113c8:	79fb      	ldrb	r3, [r7, #7]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d007      	beq.n	80113de <find_volume+0xca>
 80113ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80113d2:	f003 0304 	and.w	r3, r3, #4
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d001      	beq.n	80113de <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80113da:	230a      	movs	r3, #10
 80113dc:	e1de      	b.n	801179c <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80113de:	2300      	movs	r3, #0
 80113e0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80113e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80113e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80113e6:	f7ff ff3f 	bl	8011268 <check_fs>
 80113ea:	4603      	mov	r3, r0
 80113ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80113f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80113f4:	2b02      	cmp	r3, #2
 80113f6:	d149      	bne.n	801148c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80113f8:	2300      	movs	r3, #0
 80113fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80113fc:	e01e      	b.n	801143c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80113fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011400:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011406:	011b      	lsls	r3, r3, #4
 8011408:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801140c:	4413      	add	r3, r2
 801140e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011412:	3304      	adds	r3, #4
 8011414:	781b      	ldrb	r3, [r3, #0]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d006      	beq.n	8011428 <find_volume+0x114>
 801141a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801141c:	3308      	adds	r3, #8
 801141e:	4618      	mov	r0, r3
 8011420:	f7fd ffb0 	bl	800f384 <ld_dword>
 8011424:	4602      	mov	r2, r0
 8011426:	e000      	b.n	801142a <find_volume+0x116>
 8011428:	2200      	movs	r2, #0
 801142a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801142c:	009b      	lsls	r3, r3, #2
 801142e:	3358      	adds	r3, #88	@ 0x58
 8011430:	443b      	add	r3, r7
 8011432:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011438:	3301      	adds	r3, #1
 801143a:	643b      	str	r3, [r7, #64]	@ 0x40
 801143c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801143e:	2b03      	cmp	r3, #3
 8011440:	d9dd      	bls.n	80113fe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011442:	2300      	movs	r3, #0
 8011444:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8011446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011448:	2b00      	cmp	r3, #0
 801144a:	d002      	beq.n	8011452 <find_volume+0x13e>
 801144c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801144e:	3b01      	subs	r3, #1
 8011450:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011454:	009b      	lsls	r3, r3, #2
 8011456:	3358      	adds	r3, #88	@ 0x58
 8011458:	443b      	add	r3, r7
 801145a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801145e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011460:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011462:	2b00      	cmp	r3, #0
 8011464:	d005      	beq.n	8011472 <find_volume+0x15e>
 8011466:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011468:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801146a:	f7ff fefd 	bl	8011268 <check_fs>
 801146e:	4603      	mov	r3, r0
 8011470:	e000      	b.n	8011474 <find_volume+0x160>
 8011472:	2303      	movs	r3, #3
 8011474:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011478:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801147c:	2b01      	cmp	r3, #1
 801147e:	d905      	bls.n	801148c <find_volume+0x178>
 8011480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011482:	3301      	adds	r3, #1
 8011484:	643b      	str	r3, [r7, #64]	@ 0x40
 8011486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011488:	2b03      	cmp	r3, #3
 801148a:	d9e2      	bls.n	8011452 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801148c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011490:	2b04      	cmp	r3, #4
 8011492:	d101      	bne.n	8011498 <find_volume+0x184>
 8011494:	2301      	movs	r3, #1
 8011496:	e181      	b.n	801179c <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011498:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801149c:	2b01      	cmp	r3, #1
 801149e:	d901      	bls.n	80114a4 <find_volume+0x190>
 80114a0:	230d      	movs	r3, #13
 80114a2:	e17b      	b.n	801179c <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80114a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114a6:	3334      	adds	r3, #52	@ 0x34
 80114a8:	330b      	adds	r3, #11
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7fd ff52 	bl	800f354 <ld_word>
 80114b0:	4603      	mov	r3, r0
 80114b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80114b6:	d001      	beq.n	80114bc <find_volume+0x1a8>
 80114b8:	230d      	movs	r3, #13
 80114ba:	e16f      	b.n	801179c <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80114bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114be:	3334      	adds	r3, #52	@ 0x34
 80114c0:	3316      	adds	r3, #22
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7fd ff46 	bl	800f354 <ld_word>
 80114c8:	4603      	mov	r3, r0
 80114ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80114cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d106      	bne.n	80114e0 <find_volume+0x1cc>
 80114d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114d4:	3334      	adds	r3, #52	@ 0x34
 80114d6:	3324      	adds	r3, #36	@ 0x24
 80114d8:	4618      	mov	r0, r3
 80114da:	f7fd ff53 	bl	800f384 <ld_dword>
 80114de:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80114e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80114e4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80114e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114e8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80114ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80114f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114f2:	789b      	ldrb	r3, [r3, #2]
 80114f4:	2b01      	cmp	r3, #1
 80114f6:	d005      	beq.n	8011504 <find_volume+0x1f0>
 80114f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114fa:	789b      	ldrb	r3, [r3, #2]
 80114fc:	2b02      	cmp	r3, #2
 80114fe:	d001      	beq.n	8011504 <find_volume+0x1f0>
 8011500:	230d      	movs	r3, #13
 8011502:	e14b      	b.n	801179c <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011506:	789b      	ldrb	r3, [r3, #2]
 8011508:	461a      	mov	r2, r3
 801150a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801150c:	fb02 f303 	mul.w	r3, r2, r3
 8011510:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011518:	461a      	mov	r2, r3
 801151a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801151c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801151e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011520:	895b      	ldrh	r3, [r3, #10]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d008      	beq.n	8011538 <find_volume+0x224>
 8011526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011528:	895b      	ldrh	r3, [r3, #10]
 801152a:	461a      	mov	r2, r3
 801152c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801152e:	895b      	ldrh	r3, [r3, #10]
 8011530:	3b01      	subs	r3, #1
 8011532:	4013      	ands	r3, r2
 8011534:	2b00      	cmp	r3, #0
 8011536:	d001      	beq.n	801153c <find_volume+0x228>
 8011538:	230d      	movs	r3, #13
 801153a:	e12f      	b.n	801179c <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801153c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801153e:	3334      	adds	r3, #52	@ 0x34
 8011540:	3311      	adds	r3, #17
 8011542:	4618      	mov	r0, r3
 8011544:	f7fd ff06 	bl	800f354 <ld_word>
 8011548:	4603      	mov	r3, r0
 801154a:	461a      	mov	r2, r3
 801154c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801154e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011552:	891b      	ldrh	r3, [r3, #8]
 8011554:	f003 030f 	and.w	r3, r3, #15
 8011558:	b29b      	uxth	r3, r3
 801155a:	2b00      	cmp	r3, #0
 801155c:	d001      	beq.n	8011562 <find_volume+0x24e>
 801155e:	230d      	movs	r3, #13
 8011560:	e11c      	b.n	801179c <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011564:	3334      	adds	r3, #52	@ 0x34
 8011566:	3313      	adds	r3, #19
 8011568:	4618      	mov	r0, r3
 801156a:	f7fd fef3 	bl	800f354 <ld_word>
 801156e:	4603      	mov	r3, r0
 8011570:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011574:	2b00      	cmp	r3, #0
 8011576:	d106      	bne.n	8011586 <find_volume+0x272>
 8011578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801157a:	3334      	adds	r3, #52	@ 0x34
 801157c:	3320      	adds	r3, #32
 801157e:	4618      	mov	r0, r3
 8011580:	f7fd ff00 	bl	800f384 <ld_dword>
 8011584:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011588:	3334      	adds	r3, #52	@ 0x34
 801158a:	330e      	adds	r3, #14
 801158c:	4618      	mov	r0, r3
 801158e:	f7fd fee1 	bl	800f354 <ld_word>
 8011592:	4603      	mov	r3, r0
 8011594:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011596:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011598:	2b00      	cmp	r3, #0
 801159a:	d101      	bne.n	80115a0 <find_volume+0x28c>
 801159c:	230d      	movs	r3, #13
 801159e:	e0fd      	b.n	801179c <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80115a0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80115a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115a4:	4413      	add	r3, r2
 80115a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80115a8:	8912      	ldrh	r2, [r2, #8]
 80115aa:	0912      	lsrs	r2, r2, #4
 80115ac:	b292      	uxth	r2, r2
 80115ae:	4413      	add	r3, r2
 80115b0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80115b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80115b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d204      	bcs.n	80115c4 <find_volume+0x2b0>
 80115ba:	230d      	movs	r3, #13
 80115bc:	e0ee      	b.n	801179c <find_volume+0x488>
 80115be:	bf00      	nop
 80115c0:	20002094 	.word	0x20002094
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80115c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80115c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115c8:	1ad3      	subs	r3, r2, r3
 80115ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80115cc:	8952      	ldrh	r2, [r2, #10]
 80115ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80115d2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80115d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d101      	bne.n	80115de <find_volume+0x2ca>
 80115da:	230d      	movs	r3, #13
 80115dc:	e0de      	b.n	801179c <find_volume+0x488>
		fmt = FS_FAT32;
 80115de:	2303      	movs	r3, #3
 80115e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80115e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115e6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80115ea:	4293      	cmp	r3, r2
 80115ec:	d802      	bhi.n	80115f4 <find_volume+0x2e0>
 80115ee:	2302      	movs	r3, #2
 80115f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80115f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115f6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80115fa:	4293      	cmp	r3, r2
 80115fc:	d802      	bhi.n	8011604 <find_volume+0x2f0>
 80115fe:	2301      	movs	r3, #1
 8011600:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011606:	1c9a      	adds	r2, r3, #2
 8011608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801160a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801160c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801160e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011610:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011612:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011616:	441a      	add	r2, r3
 8011618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801161a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801161c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801161e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011620:	441a      	add	r2, r3
 8011622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011624:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8011626:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801162a:	2b03      	cmp	r3, #3
 801162c:	d11e      	bne.n	801166c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801162e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011630:	3334      	adds	r3, #52	@ 0x34
 8011632:	332a      	adds	r3, #42	@ 0x2a
 8011634:	4618      	mov	r0, r3
 8011636:	f7fd fe8d 	bl	800f354 <ld_word>
 801163a:	4603      	mov	r3, r0
 801163c:	2b00      	cmp	r3, #0
 801163e:	d001      	beq.n	8011644 <find_volume+0x330>
 8011640:	230d      	movs	r3, #13
 8011642:	e0ab      	b.n	801179c <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011646:	891b      	ldrh	r3, [r3, #8]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d001      	beq.n	8011650 <find_volume+0x33c>
 801164c:	230d      	movs	r3, #13
 801164e:	e0a5      	b.n	801179c <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011652:	3334      	adds	r3, #52	@ 0x34
 8011654:	332c      	adds	r3, #44	@ 0x2c
 8011656:	4618      	mov	r0, r3
 8011658:	f7fd fe94 	bl	800f384 <ld_dword>
 801165c:	4602      	mov	r2, r0
 801165e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011660:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011664:	699b      	ldr	r3, [r3, #24]
 8011666:	009b      	lsls	r3, r3, #2
 8011668:	647b      	str	r3, [r7, #68]	@ 0x44
 801166a:	e01f      	b.n	80116ac <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801166c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801166e:	891b      	ldrh	r3, [r3, #8]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d101      	bne.n	8011678 <find_volume+0x364>
 8011674:	230d      	movs	r3, #13
 8011676:	e091      	b.n	801179c <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801167a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801167c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801167e:	441a      	add	r2, r3
 8011680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011682:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011684:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011688:	2b02      	cmp	r3, #2
 801168a:	d103      	bne.n	8011694 <find_volume+0x380>
 801168c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801168e:	699b      	ldr	r3, [r3, #24]
 8011690:	005b      	lsls	r3, r3, #1
 8011692:	e00a      	b.n	80116aa <find_volume+0x396>
 8011694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011696:	699a      	ldr	r2, [r3, #24]
 8011698:	4613      	mov	r3, r2
 801169a:	005b      	lsls	r3, r3, #1
 801169c:	4413      	add	r3, r2
 801169e:	085a      	lsrs	r2, r3, #1
 80116a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116a2:	699b      	ldr	r3, [r3, #24]
 80116a4:	f003 0301 	and.w	r3, r3, #1
 80116a8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80116aa:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80116ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116ae:	69da      	ldr	r2, [r3, #28]
 80116b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116b2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80116b6:	0a5b      	lsrs	r3, r3, #9
 80116b8:	429a      	cmp	r2, r3
 80116ba:	d201      	bcs.n	80116c0 <find_volume+0x3ac>
 80116bc:	230d      	movs	r3, #13
 80116be:	e06d      	b.n	801179c <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80116c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116c2:	f04f 32ff 	mov.w	r2, #4294967295
 80116c6:	615a      	str	r2, [r3, #20]
 80116c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116ca:	695a      	ldr	r2, [r3, #20]
 80116cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116ce:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80116d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116d2:	2280      	movs	r2, #128	@ 0x80
 80116d4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80116d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80116da:	2b03      	cmp	r3, #3
 80116dc:	d149      	bne.n	8011772 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80116de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116e0:	3334      	adds	r3, #52	@ 0x34
 80116e2:	3330      	adds	r3, #48	@ 0x30
 80116e4:	4618      	mov	r0, r3
 80116e6:	f7fd fe35 	bl	800f354 <ld_word>
 80116ea:	4603      	mov	r3, r0
 80116ec:	2b01      	cmp	r3, #1
 80116ee:	d140      	bne.n	8011772 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80116f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80116f2:	3301      	adds	r3, #1
 80116f4:	4619      	mov	r1, r3
 80116f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80116f8:	f7fe f8dc 	bl	800f8b4 <move_window>
 80116fc:	4603      	mov	r3, r0
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d137      	bne.n	8011772 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8011702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011704:	2200      	movs	r2, #0
 8011706:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801170a:	3334      	adds	r3, #52	@ 0x34
 801170c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011710:	4618      	mov	r0, r3
 8011712:	f7fd fe1f 	bl	800f354 <ld_word>
 8011716:	4603      	mov	r3, r0
 8011718:	461a      	mov	r2, r3
 801171a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801171e:	429a      	cmp	r2, r3
 8011720:	d127      	bne.n	8011772 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011724:	3334      	adds	r3, #52	@ 0x34
 8011726:	4618      	mov	r0, r3
 8011728:	f7fd fe2c 	bl	800f384 <ld_dword>
 801172c:	4603      	mov	r3, r0
 801172e:	4a1d      	ldr	r2, [pc, #116]	@ (80117a4 <find_volume+0x490>)
 8011730:	4293      	cmp	r3, r2
 8011732:	d11e      	bne.n	8011772 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011736:	3334      	adds	r3, #52	@ 0x34
 8011738:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801173c:	4618      	mov	r0, r3
 801173e:	f7fd fe21 	bl	800f384 <ld_dword>
 8011742:	4603      	mov	r3, r0
 8011744:	4a18      	ldr	r2, [pc, #96]	@ (80117a8 <find_volume+0x494>)
 8011746:	4293      	cmp	r3, r2
 8011748:	d113      	bne.n	8011772 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801174a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801174c:	3334      	adds	r3, #52	@ 0x34
 801174e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8011752:	4618      	mov	r0, r3
 8011754:	f7fd fe16 	bl	800f384 <ld_dword>
 8011758:	4602      	mov	r2, r0
 801175a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801175c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801175e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011760:	3334      	adds	r3, #52	@ 0x34
 8011762:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8011766:	4618      	mov	r0, r3
 8011768:	f7fd fe0c 	bl	800f384 <ld_dword>
 801176c:	4602      	mov	r2, r0
 801176e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011770:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011774:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8011778:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801177a:	4b0c      	ldr	r3, [pc, #48]	@ (80117ac <find_volume+0x498>)
 801177c:	881b      	ldrh	r3, [r3, #0]
 801177e:	3301      	adds	r3, #1
 8011780:	b29a      	uxth	r2, r3
 8011782:	4b0a      	ldr	r3, [pc, #40]	@ (80117ac <find_volume+0x498>)
 8011784:	801a      	strh	r2, [r3, #0]
 8011786:	4b09      	ldr	r3, [pc, #36]	@ (80117ac <find_volume+0x498>)
 8011788:	881a      	ldrh	r2, [r3, #0]
 801178a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801178c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801178e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011790:	4a07      	ldr	r2, [pc, #28]	@ (80117b0 <find_volume+0x49c>)
 8011792:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011794:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011796:	f7fe f825 	bl	800f7e4 <clear_lock>
#endif
	return FR_OK;
 801179a:	2300      	movs	r3, #0
}
 801179c:	4618      	mov	r0, r3
 801179e:	3758      	adds	r7, #88	@ 0x58
 80117a0:	46bd      	mov	sp, r7
 80117a2:	bd80      	pop	{r7, pc}
 80117a4:	41615252 	.word	0x41615252
 80117a8:	61417272 	.word	0x61417272
 80117ac:	20002098 	.word	0x20002098
 80117b0:	200020bc 	.word	0x200020bc

080117b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b084      	sub	sp, #16
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
 80117bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80117be:	2309      	movs	r3, #9
 80117c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d01c      	beq.n	8011802 <validate+0x4e>
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d018      	beq.n	8011802 <validate+0x4e>
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	781b      	ldrb	r3, [r3, #0]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d013      	beq.n	8011802 <validate+0x4e>
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	889a      	ldrh	r2, [r3, #4]
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	88db      	ldrh	r3, [r3, #6]
 80117e4:	429a      	cmp	r2, r3
 80117e6:	d10c      	bne.n	8011802 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	785b      	ldrb	r3, [r3, #1]
 80117ee:	4618      	mov	r0, r3
 80117f0:	f7fd fd10 	bl	800f214 <disk_status>
 80117f4:	4603      	mov	r3, r0
 80117f6:	f003 0301 	and.w	r3, r3, #1
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d101      	bne.n	8011802 <validate+0x4e>
			res = FR_OK;
 80117fe:	2300      	movs	r3, #0
 8011800:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011802:	7bfb      	ldrb	r3, [r7, #15]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d102      	bne.n	801180e <validate+0x5a>
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	e000      	b.n	8011810 <validate+0x5c>
 801180e:	2300      	movs	r3, #0
 8011810:	683a      	ldr	r2, [r7, #0]
 8011812:	6013      	str	r3, [r2, #0]
	return res;
 8011814:	7bfb      	ldrb	r3, [r7, #15]
}
 8011816:	4618      	mov	r0, r3
 8011818:	3710      	adds	r7, #16
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
	...

08011820 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b088      	sub	sp, #32
 8011824:	af00      	add	r7, sp, #0
 8011826:	60f8      	str	r0, [r7, #12]
 8011828:	60b9      	str	r1, [r7, #8]
 801182a:	4613      	mov	r3, r2
 801182c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801182e:	68bb      	ldr	r3, [r7, #8]
 8011830:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011832:	f107 0310 	add.w	r3, r7, #16
 8011836:	4618      	mov	r0, r3
 8011838:	f7ff fcd1 	bl	80111de <get_ldnumber>
 801183c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801183e:	69fb      	ldr	r3, [r7, #28]
 8011840:	2b00      	cmp	r3, #0
 8011842:	da01      	bge.n	8011848 <f_mount+0x28>
 8011844:	230b      	movs	r3, #11
 8011846:	e02b      	b.n	80118a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011848:	4a17      	ldr	r2, [pc, #92]	@ (80118a8 <f_mount+0x88>)
 801184a:	69fb      	ldr	r3, [r7, #28]
 801184c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011850:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011852:	69bb      	ldr	r3, [r7, #24]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d005      	beq.n	8011864 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011858:	69b8      	ldr	r0, [r7, #24]
 801185a:	f7fd ffc3 	bl	800f7e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801185e:	69bb      	ldr	r3, [r7, #24]
 8011860:	2200      	movs	r2, #0
 8011862:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d002      	beq.n	8011870 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	2200      	movs	r2, #0
 801186e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011870:	68fa      	ldr	r2, [r7, #12]
 8011872:	490d      	ldr	r1, [pc, #52]	@ (80118a8 <f_mount+0x88>)
 8011874:	69fb      	ldr	r3, [r7, #28]
 8011876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d002      	beq.n	8011886 <f_mount+0x66>
 8011880:	79fb      	ldrb	r3, [r7, #7]
 8011882:	2b01      	cmp	r3, #1
 8011884:	d001      	beq.n	801188a <f_mount+0x6a>
 8011886:	2300      	movs	r3, #0
 8011888:	e00a      	b.n	80118a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801188a:	f107 010c 	add.w	r1, r7, #12
 801188e:	f107 0308 	add.w	r3, r7, #8
 8011892:	2200      	movs	r2, #0
 8011894:	4618      	mov	r0, r3
 8011896:	f7ff fd3d 	bl	8011314 <find_volume>
 801189a:	4603      	mov	r3, r0
 801189c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801189e:	7dfb      	ldrb	r3, [r7, #23]
}
 80118a0:	4618      	mov	r0, r3
 80118a2:	3720      	adds	r7, #32
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}
 80118a8:	20002094 	.word	0x20002094

080118ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b09a      	sub	sp, #104	@ 0x68
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	60b9      	str	r1, [r7, #8]
 80118b6:	4613      	mov	r3, r2
 80118b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d101      	bne.n	80118c4 <f_open+0x18>
 80118c0:	2309      	movs	r3, #9
 80118c2:	e1a9      	b.n	8011c18 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80118c4:	79fb      	ldrb	r3, [r7, #7]
 80118c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80118ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80118cc:	79fa      	ldrb	r2, [r7, #7]
 80118ce:	f107 0114 	add.w	r1, r7, #20
 80118d2:	f107 0308 	add.w	r3, r7, #8
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7ff fd1c 	bl	8011314 <find_volume>
 80118dc:	4603      	mov	r3, r0
 80118de:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80118e2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	f040 818d 	bne.w	8011c06 <f_open+0x35a>
		dj.obj.fs = fs;
 80118ec:	697b      	ldr	r3, [r7, #20]
 80118ee:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80118f0:	68ba      	ldr	r2, [r7, #8]
 80118f2:	f107 0318 	add.w	r3, r7, #24
 80118f6:	4611      	mov	r1, r2
 80118f8:	4618      	mov	r0, r3
 80118fa:	f7ff fbff 	bl	80110fc <follow_path>
 80118fe:	4603      	mov	r3, r0
 8011900:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011904:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011908:	2b00      	cmp	r3, #0
 801190a:	d118      	bne.n	801193e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801190c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011910:	b25b      	sxtb	r3, r3
 8011912:	2b00      	cmp	r3, #0
 8011914:	da03      	bge.n	801191e <f_open+0x72>
				res = FR_INVALID_NAME;
 8011916:	2306      	movs	r3, #6
 8011918:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801191c:	e00f      	b.n	801193e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801191e:	79fb      	ldrb	r3, [r7, #7]
 8011920:	2b01      	cmp	r3, #1
 8011922:	bf8c      	ite	hi
 8011924:	2301      	movhi	r3, #1
 8011926:	2300      	movls	r3, #0
 8011928:	b2db      	uxtb	r3, r3
 801192a:	461a      	mov	r2, r3
 801192c:	f107 0318 	add.w	r3, r7, #24
 8011930:	4611      	mov	r1, r2
 8011932:	4618      	mov	r0, r3
 8011934:	f7fd fe0e 	bl	800f554 <chk_lock>
 8011938:	4603      	mov	r3, r0
 801193a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801193e:	79fb      	ldrb	r3, [r7, #7]
 8011940:	f003 031c 	and.w	r3, r3, #28
 8011944:	2b00      	cmp	r3, #0
 8011946:	d07f      	beq.n	8011a48 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8011948:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801194c:	2b00      	cmp	r3, #0
 801194e:	d017      	beq.n	8011980 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011950:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011954:	2b04      	cmp	r3, #4
 8011956:	d10e      	bne.n	8011976 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011958:	f7fd fe58 	bl	800f60c <enq_lock>
 801195c:	4603      	mov	r3, r0
 801195e:	2b00      	cmp	r3, #0
 8011960:	d006      	beq.n	8011970 <f_open+0xc4>
 8011962:	f107 0318 	add.w	r3, r7, #24
 8011966:	4618      	mov	r0, r3
 8011968:	f7ff f83a 	bl	80109e0 <dir_register>
 801196c:	4603      	mov	r3, r0
 801196e:	e000      	b.n	8011972 <f_open+0xc6>
 8011970:	2312      	movs	r3, #18
 8011972:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011976:	79fb      	ldrb	r3, [r7, #7]
 8011978:	f043 0308 	orr.w	r3, r3, #8
 801197c:	71fb      	strb	r3, [r7, #7]
 801197e:	e010      	b.n	80119a2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011980:	7fbb      	ldrb	r3, [r7, #30]
 8011982:	f003 0311 	and.w	r3, r3, #17
 8011986:	2b00      	cmp	r3, #0
 8011988:	d003      	beq.n	8011992 <f_open+0xe6>
					res = FR_DENIED;
 801198a:	2307      	movs	r3, #7
 801198c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011990:	e007      	b.n	80119a2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011992:	79fb      	ldrb	r3, [r7, #7]
 8011994:	f003 0304 	and.w	r3, r3, #4
 8011998:	2b00      	cmp	r3, #0
 801199a:	d002      	beq.n	80119a2 <f_open+0xf6>
 801199c:	2308      	movs	r3, #8
 801199e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80119a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d168      	bne.n	8011a7c <f_open+0x1d0>
 80119aa:	79fb      	ldrb	r3, [r7, #7]
 80119ac:	f003 0308 	and.w	r3, r3, #8
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d063      	beq.n	8011a7c <f_open+0x1d0>
				dw = GET_FATTIME();
 80119b4:	f7fa fa42 	bl	800be3c <get_fattime>
 80119b8:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80119ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119bc:	330e      	adds	r3, #14
 80119be:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7fd fd1d 	bl	800f400 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80119c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119c8:	3316      	adds	r3, #22
 80119ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7fd fd17 	bl	800f400 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80119d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119d4:	330b      	adds	r3, #11
 80119d6:	2220      	movs	r2, #32
 80119d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80119de:	4611      	mov	r1, r2
 80119e0:	4618      	mov	r0, r3
 80119e2:	f7fe fc6b 	bl	80102bc <ld_clust>
 80119e6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80119ec:	2200      	movs	r2, #0
 80119ee:	4618      	mov	r0, r3
 80119f0:	f7fe fc83 	bl	80102fa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80119f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119f6:	331c      	adds	r3, #28
 80119f8:	2100      	movs	r1, #0
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7fd fd00 	bl	800f400 <st_dword>
					fs->wflag = 1;
 8011a00:	697b      	ldr	r3, [r7, #20]
 8011a02:	2201      	movs	r2, #1
 8011a04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d037      	beq.n	8011a7c <f_open+0x1d0>
						dw = fs->winsect;
 8011a0c:	697b      	ldr	r3, [r7, #20]
 8011a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a10:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8011a12:	f107 0318 	add.w	r3, r7, #24
 8011a16:	2200      	movs	r2, #0
 8011a18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f7fe f996 	bl	800fd4c <remove_chain>
 8011a20:	4603      	mov	r3, r0
 8011a22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8011a26:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d126      	bne.n	8011a7c <f_open+0x1d0>
							res = move_window(fs, dw);
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011a32:	4618      	mov	r0, r3
 8011a34:	f7fd ff3e 	bl	800f8b4 <move_window>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011a42:	3a01      	subs	r2, #1
 8011a44:	611a      	str	r2, [r3, #16]
 8011a46:	e019      	b.n	8011a7c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011a48:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d115      	bne.n	8011a7c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011a50:	7fbb      	ldrb	r3, [r7, #30]
 8011a52:	f003 0310 	and.w	r3, r3, #16
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d003      	beq.n	8011a62 <f_open+0x1b6>
					res = FR_NO_FILE;
 8011a5a:	2304      	movs	r3, #4
 8011a5c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011a60:	e00c      	b.n	8011a7c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011a62:	79fb      	ldrb	r3, [r7, #7]
 8011a64:	f003 0302 	and.w	r3, r3, #2
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d007      	beq.n	8011a7c <f_open+0x1d0>
 8011a6c:	7fbb      	ldrb	r3, [r7, #30]
 8011a6e:	f003 0301 	and.w	r3, r3, #1
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d002      	beq.n	8011a7c <f_open+0x1d0>
						res = FR_DENIED;
 8011a76:	2307      	movs	r3, #7
 8011a78:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8011a7c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d126      	bne.n	8011ad2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011a84:	79fb      	ldrb	r3, [r7, #7]
 8011a86:	f003 0308 	and.w	r3, r3, #8
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d003      	beq.n	8011a96 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8011a8e:	79fb      	ldrb	r3, [r7, #7]
 8011a90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8011a9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011aa4:	79fb      	ldrb	r3, [r7, #7]
 8011aa6:	2b01      	cmp	r3, #1
 8011aa8:	bf8c      	ite	hi
 8011aaa:	2301      	movhi	r3, #1
 8011aac:	2300      	movls	r3, #0
 8011aae:	b2db      	uxtb	r3, r3
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	f107 0318 	add.w	r3, r7, #24
 8011ab6:	4611      	mov	r1, r2
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7fd fdc9 	bl	800f650 <inc_lock>
 8011abe:	4602      	mov	r2, r0
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	691b      	ldr	r3, [r3, #16]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d102      	bne.n	8011ad2 <f_open+0x226>
 8011acc:	2302      	movs	r3, #2
 8011ace:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011ad2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	f040 8095 	bne.w	8011c06 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011ae0:	4611      	mov	r1, r2
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7fe fbea 	bl	80102bc <ld_clust>
 8011ae8:	4602      	mov	r2, r0
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011af0:	331c      	adds	r3, #28
 8011af2:	4618      	mov	r0, r3
 8011af4:	f7fd fc46 	bl	800f384 <ld_dword>
 8011af8:	4602      	mov	r2, r0
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	2200      	movs	r2, #0
 8011b02:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011b04:	697a      	ldr	r2, [r7, #20]
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011b0a:	697b      	ldr	r3, [r7, #20]
 8011b0c:	88da      	ldrh	r2, [r3, #6]
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	79fa      	ldrb	r2, [r7, #7]
 8011b16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	2200      	movs	r2, #0
 8011b22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	2200      	movs	r2, #0
 8011b28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	3330      	adds	r3, #48	@ 0x30
 8011b2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011b32:	2100      	movs	r1, #0
 8011b34:	4618      	mov	r0, r3
 8011b36:	f7fd fcb0 	bl	800f49a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011b3a:	79fb      	ldrb	r3, [r7, #7]
 8011b3c:	f003 0320 	and.w	r3, r3, #32
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d060      	beq.n	8011c06 <f_open+0x35a>
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	68db      	ldr	r3, [r3, #12]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d05c      	beq.n	8011c06 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	68da      	ldr	r2, [r3, #12]
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011b54:	697b      	ldr	r3, [r7, #20]
 8011b56:	895b      	ldrh	r3, [r3, #10]
 8011b58:	025b      	lsls	r3, r3, #9
 8011b5a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	689b      	ldr	r3, [r3, #8]
 8011b60:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	68db      	ldr	r3, [r3, #12]
 8011b66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011b68:	e016      	b.n	8011b98 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f7fd ff5b 	bl	800fa2a <get_fat>
 8011b74:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8011b76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011b78:	2b01      	cmp	r3, #1
 8011b7a:	d802      	bhi.n	8011b82 <f_open+0x2d6>
 8011b7c:	2302      	movs	r3, #2
 8011b7e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011b82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b88:	d102      	bne.n	8011b90 <f_open+0x2e4>
 8011b8a:	2301      	movs	r3, #1
 8011b8c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011b90:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b94:	1ad3      	subs	r3, r2, r3
 8011b96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011b98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d103      	bne.n	8011ba8 <f_open+0x2fc>
 8011ba0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011ba2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	d8e0      	bhi.n	8011b6a <f_open+0x2be>
				}
				fp->clust = clst;
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011bac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011bae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d127      	bne.n	8011c06 <f_open+0x35a>
 8011bb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d022      	beq.n	8011c06 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011bc0:	697b      	ldr	r3, [r7, #20]
 8011bc2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7fd ff11 	bl	800f9ec <clust2sect>
 8011bca:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011bcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d103      	bne.n	8011bda <f_open+0x32e>
						res = FR_INT_ERR;
 8011bd2:	2302      	movs	r3, #2
 8011bd4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011bd8:	e015      	b.n	8011c06 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011bda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011bdc:	0a5a      	lsrs	r2, r3, #9
 8011bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011be0:	441a      	add	r2, r3
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	7858      	ldrb	r0, [r3, #1]
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	6a1a      	ldr	r2, [r3, #32]
 8011bf4:	2301      	movs	r3, #1
 8011bf6:	f7fd fb4f 	bl	800f298 <disk_read>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d002      	beq.n	8011c06 <f_open+0x35a>
 8011c00:	2301      	movs	r3, #1
 8011c02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011c06:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d002      	beq.n	8011c14 <f_open+0x368>
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	2200      	movs	r2, #0
 8011c12:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011c14:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8011c18:	4618      	mov	r0, r3
 8011c1a:	3768      	adds	r7, #104	@ 0x68
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}

08011c20 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b08e      	sub	sp, #56	@ 0x38
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	60f8      	str	r0, [r7, #12]
 8011c28:	60b9      	str	r1, [r7, #8]
 8011c2a:	607a      	str	r2, [r7, #4]
 8011c2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	2200      	movs	r2, #0
 8011c36:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	f107 0214 	add.w	r2, r7, #20
 8011c3e:	4611      	mov	r1, r2
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7ff fdb7 	bl	80117b4 <validate>
 8011c46:	4603      	mov	r3, r0
 8011c48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011c4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d107      	bne.n	8011c64 <f_read+0x44>
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	7d5b      	ldrb	r3, [r3, #21]
 8011c58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011c5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d002      	beq.n	8011c6a <f_read+0x4a>
 8011c64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011c68:	e115      	b.n	8011e96 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	7d1b      	ldrb	r3, [r3, #20]
 8011c6e:	f003 0301 	and.w	r3, r3, #1
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d101      	bne.n	8011c7a <f_read+0x5a>
 8011c76:	2307      	movs	r3, #7
 8011c78:	e10d      	b.n	8011e96 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	68da      	ldr	r2, [r3, #12]
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	699b      	ldr	r3, [r3, #24]
 8011c82:	1ad3      	subs	r3, r2, r3
 8011c84:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8011c86:	687a      	ldr	r2, [r7, #4]
 8011c88:	6a3b      	ldr	r3, [r7, #32]
 8011c8a:	429a      	cmp	r2, r3
 8011c8c:	f240 80fe 	bls.w	8011e8c <f_read+0x26c>
 8011c90:	6a3b      	ldr	r3, [r7, #32]
 8011c92:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011c94:	e0fa      	b.n	8011e8c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	699b      	ldr	r3, [r3, #24]
 8011c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	f040 80c6 	bne.w	8011e30 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	699b      	ldr	r3, [r3, #24]
 8011ca8:	0a5b      	lsrs	r3, r3, #9
 8011caa:	697a      	ldr	r2, [r7, #20]
 8011cac:	8952      	ldrh	r2, [r2, #10]
 8011cae:	3a01      	subs	r2, #1
 8011cb0:	4013      	ands	r3, r2
 8011cb2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011cb4:	69fb      	ldr	r3, [r7, #28]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d12f      	bne.n	8011d1a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	699b      	ldr	r3, [r3, #24]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d103      	bne.n	8011cca <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	689b      	ldr	r3, [r3, #8]
 8011cc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8011cc8:	e013      	b.n	8011cf2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d007      	beq.n	8011ce2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	699b      	ldr	r3, [r3, #24]
 8011cd6:	4619      	mov	r1, r3
 8011cd8:	68f8      	ldr	r0, [r7, #12]
 8011cda:	f7fe f934 	bl	800ff46 <clmt_clust>
 8011cde:	6338      	str	r0, [r7, #48]	@ 0x30
 8011ce0:	e007      	b.n	8011cf2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011ce2:	68fa      	ldr	r2, [r7, #12]
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	69db      	ldr	r3, [r3, #28]
 8011ce8:	4619      	mov	r1, r3
 8011cea:	4610      	mov	r0, r2
 8011cec:	f7fd fe9d 	bl	800fa2a <get_fat>
 8011cf0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cf4:	2b01      	cmp	r3, #1
 8011cf6:	d804      	bhi.n	8011d02 <f_read+0xe2>
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	2202      	movs	r2, #2
 8011cfc:	755a      	strb	r2, [r3, #21]
 8011cfe:	2302      	movs	r3, #2
 8011d00:	e0c9      	b.n	8011e96 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d08:	d104      	bne.n	8011d14 <f_read+0xf4>
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	2201      	movs	r2, #1
 8011d0e:	755a      	strb	r2, [r3, #21]
 8011d10:	2301      	movs	r3, #1
 8011d12:	e0c0      	b.n	8011e96 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d18:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011d1a:	697a      	ldr	r2, [r7, #20]
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	69db      	ldr	r3, [r3, #28]
 8011d20:	4619      	mov	r1, r3
 8011d22:	4610      	mov	r0, r2
 8011d24:	f7fd fe62 	bl	800f9ec <clust2sect>
 8011d28:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011d2a:	69bb      	ldr	r3, [r7, #24]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d104      	bne.n	8011d3a <f_read+0x11a>
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	2202      	movs	r2, #2
 8011d34:	755a      	strb	r2, [r3, #21]
 8011d36:	2302      	movs	r3, #2
 8011d38:	e0ad      	b.n	8011e96 <f_read+0x276>
			sect += csect;
 8011d3a:	69ba      	ldr	r2, [r7, #24]
 8011d3c:	69fb      	ldr	r3, [r7, #28]
 8011d3e:	4413      	add	r3, r2
 8011d40:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	0a5b      	lsrs	r3, r3, #9
 8011d46:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d039      	beq.n	8011dc2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011d4e:	69fa      	ldr	r2, [r7, #28]
 8011d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d52:	4413      	add	r3, r2
 8011d54:	697a      	ldr	r2, [r7, #20]
 8011d56:	8952      	ldrh	r2, [r2, #10]
 8011d58:	4293      	cmp	r3, r2
 8011d5a:	d905      	bls.n	8011d68 <f_read+0x148>
					cc = fs->csize - csect;
 8011d5c:	697b      	ldr	r3, [r7, #20]
 8011d5e:	895b      	ldrh	r3, [r3, #10]
 8011d60:	461a      	mov	r2, r3
 8011d62:	69fb      	ldr	r3, [r7, #28]
 8011d64:	1ad3      	subs	r3, r2, r3
 8011d66:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011d68:	697b      	ldr	r3, [r7, #20]
 8011d6a:	7858      	ldrb	r0, [r3, #1]
 8011d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d6e:	69ba      	ldr	r2, [r7, #24]
 8011d70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011d72:	f7fd fa91 	bl	800f298 <disk_read>
 8011d76:	4603      	mov	r3, r0
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d004      	beq.n	8011d86 <f_read+0x166>
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	2201      	movs	r2, #1
 8011d80:	755a      	strb	r2, [r3, #21]
 8011d82:	2301      	movs	r3, #1
 8011d84:	e087      	b.n	8011e96 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	7d1b      	ldrb	r3, [r3, #20]
 8011d8a:	b25b      	sxtb	r3, r3
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	da14      	bge.n	8011dba <f_read+0x19a>
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	6a1a      	ldr	r2, [r3, #32]
 8011d94:	69bb      	ldr	r3, [r7, #24]
 8011d96:	1ad3      	subs	r3, r2, r3
 8011d98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011d9a:	429a      	cmp	r2, r3
 8011d9c:	d90d      	bls.n	8011dba <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	6a1a      	ldr	r2, [r3, #32]
 8011da2:	69bb      	ldr	r3, [r7, #24]
 8011da4:	1ad3      	subs	r3, r2, r3
 8011da6:	025b      	lsls	r3, r3, #9
 8011da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011daa:	18d0      	adds	r0, r2, r3
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	3330      	adds	r3, #48	@ 0x30
 8011db0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011db4:	4619      	mov	r1, r3
 8011db6:	f7fd fb4f 	bl	800f458 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dbc:	025b      	lsls	r3, r3, #9
 8011dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8011dc0:	e050      	b.n	8011e64 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	6a1b      	ldr	r3, [r3, #32]
 8011dc6:	69ba      	ldr	r2, [r7, #24]
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d02e      	beq.n	8011e2a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	7d1b      	ldrb	r3, [r3, #20]
 8011dd0:	b25b      	sxtb	r3, r3
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	da18      	bge.n	8011e08 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	7858      	ldrb	r0, [r3, #1]
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	6a1a      	ldr	r2, [r3, #32]
 8011de4:	2301      	movs	r3, #1
 8011de6:	f7fd fa77 	bl	800f2d8 <disk_write>
 8011dea:	4603      	mov	r3, r0
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d004      	beq.n	8011dfa <f_read+0x1da>
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	2201      	movs	r2, #1
 8011df4:	755a      	strb	r2, [r3, #21]
 8011df6:	2301      	movs	r3, #1
 8011df8:	e04d      	b.n	8011e96 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	7d1b      	ldrb	r3, [r3, #20]
 8011dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011e02:	b2da      	uxtb	r2, r3
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	7858      	ldrb	r0, [r3, #1]
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011e12:	2301      	movs	r3, #1
 8011e14:	69ba      	ldr	r2, [r7, #24]
 8011e16:	f7fd fa3f 	bl	800f298 <disk_read>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d004      	beq.n	8011e2a <f_read+0x20a>
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	2201      	movs	r2, #1
 8011e24:	755a      	strb	r2, [r3, #21]
 8011e26:	2301      	movs	r3, #1
 8011e28:	e035      	b.n	8011e96 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	69ba      	ldr	r2, [r7, #24]
 8011e2e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	699b      	ldr	r3, [r3, #24]
 8011e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e38:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8011e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8011e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	429a      	cmp	r2, r3
 8011e44:	d901      	bls.n	8011e4a <f_read+0x22a>
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	699b      	ldr	r3, [r3, #24]
 8011e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e58:	4413      	add	r3, r2
 8011e5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011e5c:	4619      	mov	r1, r3
 8011e5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011e60:	f7fd fafa 	bl	800f458 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e68:	4413      	add	r3, r2
 8011e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	699a      	ldr	r2, [r3, #24]
 8011e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e72:	441a      	add	r2, r3
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	619a      	str	r2, [r3, #24]
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	681a      	ldr	r2, [r3, #0]
 8011e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e7e:	441a      	add	r2, r3
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	601a      	str	r2, [r3, #0]
 8011e84:	687a      	ldr	r2, [r7, #4]
 8011e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e88:	1ad3      	subs	r3, r2, r3
 8011e8a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	f47f af01 	bne.w	8011c96 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011e94:	2300      	movs	r3, #0
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3738      	adds	r7, #56	@ 0x38
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}

08011e9e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011e9e:	b580      	push	{r7, lr}
 8011ea0:	b086      	sub	sp, #24
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f107 0208 	add.w	r2, r7, #8
 8011eac:	4611      	mov	r1, r2
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7ff fc80 	bl	80117b4 <validate>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011eb8:	7dfb      	ldrb	r3, [r7, #23]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d168      	bne.n	8011f90 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	7d1b      	ldrb	r3, [r3, #20]
 8011ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d062      	beq.n	8011f90 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	7d1b      	ldrb	r3, [r3, #20]
 8011ece:	b25b      	sxtb	r3, r3
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	da15      	bge.n	8011f00 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	7858      	ldrb	r0, [r3, #1]
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6a1a      	ldr	r2, [r3, #32]
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	f7fd f9f8 	bl	800f2d8 <disk_write>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d001      	beq.n	8011ef2 <f_sync+0x54>
 8011eee:	2301      	movs	r3, #1
 8011ef0:	e04f      	b.n	8011f92 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	7d1b      	ldrb	r3, [r3, #20]
 8011ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011efa:	b2da      	uxtb	r2, r3
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011f00:	f7f9 ff9c 	bl	800be3c <get_fattime>
 8011f04:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011f06:	68ba      	ldr	r2, [r7, #8]
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f0c:	4619      	mov	r1, r3
 8011f0e:	4610      	mov	r0, r2
 8011f10:	f7fd fcd0 	bl	800f8b4 <move_window>
 8011f14:	4603      	mov	r3, r0
 8011f16:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011f18:	7dfb      	ldrb	r3, [r7, #23]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d138      	bne.n	8011f90 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f22:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	330b      	adds	r3, #11
 8011f28:	781a      	ldrb	r2, [r3, #0]
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	330b      	adds	r3, #11
 8011f2e:	f042 0220 	orr.w	r2, r2, #32
 8011f32:	b2d2      	uxtb	r2, r2
 8011f34:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	6818      	ldr	r0, [r3, #0]
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	689b      	ldr	r3, [r3, #8]
 8011f3e:	461a      	mov	r2, r3
 8011f40:	68f9      	ldr	r1, [r7, #12]
 8011f42:	f7fe f9da 	bl	80102fa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	f103 021c 	add.w	r2, r3, #28
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	68db      	ldr	r3, [r3, #12]
 8011f50:	4619      	mov	r1, r3
 8011f52:	4610      	mov	r0, r2
 8011f54:	f7fd fa54 	bl	800f400 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	3316      	adds	r3, #22
 8011f5c:	6939      	ldr	r1, [r7, #16]
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7fd fa4e 	bl	800f400 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	3312      	adds	r3, #18
 8011f68:	2100      	movs	r1, #0
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f7fd fa2d 	bl	800f3ca <st_word>
					fs->wflag = 1;
 8011f70:	68bb      	ldr	r3, [r7, #8]
 8011f72:	2201      	movs	r2, #1
 8011f74:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011f76:	68bb      	ldr	r3, [r7, #8]
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f7fd fcc9 	bl	800f910 <sync_fs>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	7d1b      	ldrb	r3, [r3, #20]
 8011f86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011f8a:	b2da      	uxtb	r2, r3
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f92:	4618      	mov	r0, r3
 8011f94:	3718      	adds	r7, #24
 8011f96:	46bd      	mov	sp, r7
 8011f98:	bd80      	pop	{r7, pc}

08011f9a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011f9a:	b580      	push	{r7, lr}
 8011f9c:	b084      	sub	sp, #16
 8011f9e:	af00      	add	r7, sp, #0
 8011fa0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	f7ff ff7b 	bl	8011e9e <f_sync>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011fac:	7bfb      	ldrb	r3, [r7, #15]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d118      	bne.n	8011fe4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	f107 0208 	add.w	r2, r7, #8
 8011fb8:	4611      	mov	r1, r2
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7ff fbfa 	bl	80117b4 <validate>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011fc4:	7bfb      	ldrb	r3, [r7, #15]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d10c      	bne.n	8011fe4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	691b      	ldr	r3, [r3, #16]
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f7fd fbcc 	bl	800f76c <dec_lock>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011fd8:	7bfb      	ldrb	r3, [r7, #15]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d102      	bne.n	8011fe4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3710      	adds	r7, #16
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}

08011fee <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011fee:	b580      	push	{r7, lr}
 8011ff0:	b090      	sub	sp, #64	@ 0x40
 8011ff2:	af00      	add	r7, sp, #0
 8011ff4:	6078      	str	r0, [r7, #4]
 8011ff6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f107 0208 	add.w	r2, r7, #8
 8011ffe:	4611      	mov	r1, r2
 8012000:	4618      	mov	r0, r3
 8012002:	f7ff fbd7 	bl	80117b4 <validate>
 8012006:	4603      	mov	r3, r0
 8012008:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801200c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012010:	2b00      	cmp	r3, #0
 8012012:	d103      	bne.n	801201c <f_lseek+0x2e>
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	7d5b      	ldrb	r3, [r3, #21]
 8012018:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801201c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012020:	2b00      	cmp	r3, #0
 8012022:	d002      	beq.n	801202a <f_lseek+0x3c>
 8012024:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012028:	e1e6      	b.n	80123f8 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801202e:	2b00      	cmp	r3, #0
 8012030:	f000 80d1 	beq.w	80121d6 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	f1b3 3fff 	cmp.w	r3, #4294967295
 801203a:	d15a      	bne.n	80120f2 <f_lseek+0x104>
			tbl = fp->cltbl;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012040:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012044:	1d1a      	adds	r2, r3, #4
 8012046:	627a      	str	r2, [r7, #36]	@ 0x24
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	617b      	str	r3, [r7, #20]
 801204c:	2302      	movs	r3, #2
 801204e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	689b      	ldr	r3, [r3, #8]
 8012054:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8012056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012058:	2b00      	cmp	r3, #0
 801205a:	d03a      	beq.n	80120d2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801205c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801205e:	613b      	str	r3, [r7, #16]
 8012060:	2300      	movs	r3, #0
 8012062:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012066:	3302      	adds	r3, #2
 8012068:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 801206a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801206c:	60fb      	str	r3, [r7, #12]
 801206e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012070:	3301      	adds	r3, #1
 8012072:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012078:	4618      	mov	r0, r3
 801207a:	f7fd fcd6 	bl	800fa2a <get_fat>
 801207e:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012082:	2b01      	cmp	r3, #1
 8012084:	d804      	bhi.n	8012090 <f_lseek+0xa2>
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2202      	movs	r2, #2
 801208a:	755a      	strb	r2, [r3, #21]
 801208c:	2302      	movs	r3, #2
 801208e:	e1b3      	b.n	80123f8 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012096:	d104      	bne.n	80120a2 <f_lseek+0xb4>
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2201      	movs	r2, #1
 801209c:	755a      	strb	r2, [r3, #21]
 801209e:	2301      	movs	r3, #1
 80120a0:	e1aa      	b.n	80123f8 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	3301      	adds	r3, #1
 80120a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d0de      	beq.n	801206a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80120ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	429a      	cmp	r2, r3
 80120b2:	d809      	bhi.n	80120c8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80120b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120b6:	1d1a      	adds	r2, r3, #4
 80120b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80120ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80120bc:	601a      	str	r2, [r3, #0]
 80120be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120c0:	1d1a      	adds	r2, r3, #4
 80120c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80120c4:	693a      	ldr	r2, [r7, #16]
 80120c6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80120c8:	68bb      	ldr	r3, [r7, #8]
 80120ca:	699b      	ldr	r3, [r3, #24]
 80120cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80120ce:	429a      	cmp	r2, r3
 80120d0:	d3c4      	bcc.n	801205c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80120d8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80120da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80120dc:	697b      	ldr	r3, [r7, #20]
 80120de:	429a      	cmp	r2, r3
 80120e0:	d803      	bhi.n	80120ea <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80120e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120e4:	2200      	movs	r2, #0
 80120e6:	601a      	str	r2, [r3, #0]
 80120e8:	e184      	b.n	80123f4 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80120ea:	2311      	movs	r3, #17
 80120ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80120f0:	e180      	b.n	80123f4 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	68db      	ldr	r3, [r3, #12]
 80120f6:	683a      	ldr	r2, [r7, #0]
 80120f8:	429a      	cmp	r2, r3
 80120fa:	d902      	bls.n	8012102 <f_lseek+0x114>
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	68db      	ldr	r3, [r3, #12]
 8012100:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	683a      	ldr	r2, [r7, #0]
 8012106:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	2b00      	cmp	r3, #0
 801210c:	f000 8172 	beq.w	80123f4 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	3b01      	subs	r3, #1
 8012114:	4619      	mov	r1, r3
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	f7fd ff15 	bl	800ff46 <clmt_clust>
 801211c:	4602      	mov	r2, r0
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8012122:	68ba      	ldr	r2, [r7, #8]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	69db      	ldr	r3, [r3, #28]
 8012128:	4619      	mov	r1, r3
 801212a:	4610      	mov	r0, r2
 801212c:	f7fd fc5e 	bl	800f9ec <clust2sect>
 8012130:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8012132:	69bb      	ldr	r3, [r7, #24]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d104      	bne.n	8012142 <f_lseek+0x154>
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2202      	movs	r2, #2
 801213c:	755a      	strb	r2, [r3, #21]
 801213e:	2302      	movs	r3, #2
 8012140:	e15a      	b.n	80123f8 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012142:	683b      	ldr	r3, [r7, #0]
 8012144:	3b01      	subs	r3, #1
 8012146:	0a5b      	lsrs	r3, r3, #9
 8012148:	68ba      	ldr	r2, [r7, #8]
 801214a:	8952      	ldrh	r2, [r2, #10]
 801214c:	3a01      	subs	r2, #1
 801214e:	4013      	ands	r3, r2
 8012150:	69ba      	ldr	r2, [r7, #24]
 8012152:	4413      	add	r3, r2
 8012154:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	699b      	ldr	r3, [r3, #24]
 801215a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801215e:	2b00      	cmp	r3, #0
 8012160:	f000 8148 	beq.w	80123f4 <f_lseek+0x406>
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6a1b      	ldr	r3, [r3, #32]
 8012168:	69ba      	ldr	r2, [r7, #24]
 801216a:	429a      	cmp	r2, r3
 801216c:	f000 8142 	beq.w	80123f4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	7d1b      	ldrb	r3, [r3, #20]
 8012174:	b25b      	sxtb	r3, r3
 8012176:	2b00      	cmp	r3, #0
 8012178:	da18      	bge.n	80121ac <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801217a:	68bb      	ldr	r3, [r7, #8]
 801217c:	7858      	ldrb	r0, [r3, #1]
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	6a1a      	ldr	r2, [r3, #32]
 8012188:	2301      	movs	r3, #1
 801218a:	f7fd f8a5 	bl	800f2d8 <disk_write>
 801218e:	4603      	mov	r3, r0
 8012190:	2b00      	cmp	r3, #0
 8012192:	d004      	beq.n	801219e <f_lseek+0x1b0>
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	2201      	movs	r2, #1
 8012198:	755a      	strb	r2, [r3, #21]
 801219a:	2301      	movs	r3, #1
 801219c:	e12c      	b.n	80123f8 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	7d1b      	ldrb	r3, [r3, #20]
 80121a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80121a6:	b2da      	uxtb	r2, r3
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	7858      	ldrb	r0, [r3, #1]
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80121b6:	2301      	movs	r3, #1
 80121b8:	69ba      	ldr	r2, [r7, #24]
 80121ba:	f7fd f86d 	bl	800f298 <disk_read>
 80121be:	4603      	mov	r3, r0
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d004      	beq.n	80121ce <f_lseek+0x1e0>
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2201      	movs	r2, #1
 80121c8:	755a      	strb	r2, [r3, #21]
 80121ca:	2301      	movs	r3, #1
 80121cc:	e114      	b.n	80123f8 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	69ba      	ldr	r2, [r7, #24]
 80121d2:	621a      	str	r2, [r3, #32]
 80121d4:	e10e      	b.n	80123f4 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	68db      	ldr	r3, [r3, #12]
 80121da:	683a      	ldr	r2, [r7, #0]
 80121dc:	429a      	cmp	r2, r3
 80121de:	d908      	bls.n	80121f2 <f_lseek+0x204>
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	7d1b      	ldrb	r3, [r3, #20]
 80121e4:	f003 0302 	and.w	r3, r3, #2
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d102      	bne.n	80121f2 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	68db      	ldr	r3, [r3, #12]
 80121f0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	699b      	ldr	r3, [r3, #24]
 80121f6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80121f8:	2300      	movs	r3, #0
 80121fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012200:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	2b00      	cmp	r3, #0
 8012206:	f000 80a7 	beq.w	8012358 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801220a:	68bb      	ldr	r3, [r7, #8]
 801220c:	895b      	ldrh	r3, [r3, #10]
 801220e:	025b      	lsls	r3, r3, #9
 8012210:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8012212:	6a3b      	ldr	r3, [r7, #32]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d01b      	beq.n	8012250 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	1e5a      	subs	r2, r3, #1
 801221c:	69fb      	ldr	r3, [r7, #28]
 801221e:	fbb2 f2f3 	udiv	r2, r2, r3
 8012222:	6a3b      	ldr	r3, [r7, #32]
 8012224:	1e59      	subs	r1, r3, #1
 8012226:	69fb      	ldr	r3, [r7, #28]
 8012228:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801222c:	429a      	cmp	r2, r3
 801222e:	d30f      	bcc.n	8012250 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8012230:	6a3b      	ldr	r3, [r7, #32]
 8012232:	1e5a      	subs	r2, r3, #1
 8012234:	69fb      	ldr	r3, [r7, #28]
 8012236:	425b      	negs	r3, r3
 8012238:	401a      	ands	r2, r3
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	699b      	ldr	r3, [r3, #24]
 8012242:	683a      	ldr	r2, [r7, #0]
 8012244:	1ad3      	subs	r3, r2, r3
 8012246:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	69db      	ldr	r3, [r3, #28]
 801224c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801224e:	e022      	b.n	8012296 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	689b      	ldr	r3, [r3, #8]
 8012254:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8012256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012258:	2b00      	cmp	r3, #0
 801225a:	d119      	bne.n	8012290 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	2100      	movs	r1, #0
 8012260:	4618      	mov	r0, r3
 8012262:	f7fd fdd8 	bl	800fe16 <create_chain>
 8012266:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801226a:	2b01      	cmp	r3, #1
 801226c:	d104      	bne.n	8012278 <f_lseek+0x28a>
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	2202      	movs	r2, #2
 8012272:	755a      	strb	r2, [r3, #21]
 8012274:	2302      	movs	r3, #2
 8012276:	e0bf      	b.n	80123f8 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801227a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801227e:	d104      	bne.n	801228a <f_lseek+0x29c>
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2201      	movs	r2, #1
 8012284:	755a      	strb	r2, [r3, #21]
 8012286:	2301      	movs	r3, #1
 8012288:	e0b6      	b.n	80123f8 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801228e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012294:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8012296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012298:	2b00      	cmp	r3, #0
 801229a:	d05d      	beq.n	8012358 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 801229c:	e03a      	b.n	8012314 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801229e:	683a      	ldr	r2, [r7, #0]
 80122a0:	69fb      	ldr	r3, [r7, #28]
 80122a2:	1ad3      	subs	r3, r2, r3
 80122a4:	603b      	str	r3, [r7, #0]
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	699a      	ldr	r2, [r3, #24]
 80122aa:	69fb      	ldr	r3, [r7, #28]
 80122ac:	441a      	add	r2, r3
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	7d1b      	ldrb	r3, [r3, #20]
 80122b6:	f003 0302 	and.w	r3, r3, #2
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d00b      	beq.n	80122d6 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7fd fda7 	bl	800fe16 <create_chain>
 80122c8:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80122ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d108      	bne.n	80122e2 <f_lseek+0x2f4>
							ofs = 0; break;
 80122d0:	2300      	movs	r3, #0
 80122d2:	603b      	str	r3, [r7, #0]
 80122d4:	e022      	b.n	801231c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80122da:	4618      	mov	r0, r3
 80122dc:	f7fd fba5 	bl	800fa2a <get_fat>
 80122e0:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80122e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122e8:	d104      	bne.n	80122f4 <f_lseek+0x306>
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	2201      	movs	r2, #1
 80122ee:	755a      	strb	r2, [r3, #21]
 80122f0:	2301      	movs	r3, #1
 80122f2:	e081      	b.n	80123f8 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80122f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122f6:	2b01      	cmp	r3, #1
 80122f8:	d904      	bls.n	8012304 <f_lseek+0x316>
 80122fa:	68bb      	ldr	r3, [r7, #8]
 80122fc:	699b      	ldr	r3, [r3, #24]
 80122fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012300:	429a      	cmp	r2, r3
 8012302:	d304      	bcc.n	801230e <f_lseek+0x320>
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2202      	movs	r2, #2
 8012308:	755a      	strb	r2, [r3, #21]
 801230a:	2302      	movs	r3, #2
 801230c:	e074      	b.n	80123f8 <f_lseek+0x40a>
					fp->clust = clst;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012312:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8012314:	683a      	ldr	r2, [r7, #0]
 8012316:	69fb      	ldr	r3, [r7, #28]
 8012318:	429a      	cmp	r2, r3
 801231a:	d8c0      	bhi.n	801229e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	699a      	ldr	r2, [r3, #24]
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	441a      	add	r2, r3
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8012328:	683b      	ldr	r3, [r7, #0]
 801232a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801232e:	2b00      	cmp	r3, #0
 8012330:	d012      	beq.n	8012358 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012332:	68bb      	ldr	r3, [r7, #8]
 8012334:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012336:	4618      	mov	r0, r3
 8012338:	f7fd fb58 	bl	800f9ec <clust2sect>
 801233c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801233e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012340:	2b00      	cmp	r3, #0
 8012342:	d104      	bne.n	801234e <f_lseek+0x360>
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2202      	movs	r2, #2
 8012348:	755a      	strb	r2, [r3, #21]
 801234a:	2302      	movs	r3, #2
 801234c:	e054      	b.n	80123f8 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	0a5b      	lsrs	r3, r3, #9
 8012352:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012354:	4413      	add	r3, r2
 8012356:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	699a      	ldr	r2, [r3, #24]
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	68db      	ldr	r3, [r3, #12]
 8012360:	429a      	cmp	r2, r3
 8012362:	d90a      	bls.n	801237a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	699a      	ldr	r2, [r3, #24]
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	7d1b      	ldrb	r3, [r3, #20]
 8012370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012374:	b2da      	uxtb	r2, r3
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	699b      	ldr	r3, [r3, #24]
 801237e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012382:	2b00      	cmp	r3, #0
 8012384:	d036      	beq.n	80123f4 <f_lseek+0x406>
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6a1b      	ldr	r3, [r3, #32]
 801238a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801238c:	429a      	cmp	r2, r3
 801238e:	d031      	beq.n	80123f4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	7d1b      	ldrb	r3, [r3, #20]
 8012394:	b25b      	sxtb	r3, r3
 8012396:	2b00      	cmp	r3, #0
 8012398:	da18      	bge.n	80123cc <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801239a:	68bb      	ldr	r3, [r7, #8]
 801239c:	7858      	ldrb	r0, [r3, #1]
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	6a1a      	ldr	r2, [r3, #32]
 80123a8:	2301      	movs	r3, #1
 80123aa:	f7fc ff95 	bl	800f2d8 <disk_write>
 80123ae:	4603      	mov	r3, r0
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d004      	beq.n	80123be <f_lseek+0x3d0>
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2201      	movs	r2, #1
 80123b8:	755a      	strb	r2, [r3, #21]
 80123ba:	2301      	movs	r3, #1
 80123bc:	e01c      	b.n	80123f8 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	7d1b      	ldrb	r3, [r3, #20]
 80123c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80123c6:	b2da      	uxtb	r2, r3
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	7858      	ldrb	r0, [r3, #1]
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80123d6:	2301      	movs	r3, #1
 80123d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80123da:	f7fc ff5d 	bl	800f298 <disk_read>
 80123de:	4603      	mov	r3, r0
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d004      	beq.n	80123ee <f_lseek+0x400>
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2201      	movs	r2, #1
 80123e8:	755a      	strb	r2, [r3, #21]
 80123ea:	2301      	movs	r3, #1
 80123ec:	e004      	b.n	80123f8 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80123f2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80123f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3740      	adds	r7, #64	@ 0x40
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}

08012400 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b086      	sub	sp, #24
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d101      	bne.n	8012414 <f_opendir+0x14>
 8012410:	2309      	movs	r3, #9
 8012412:	e064      	b.n	80124de <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8012418:	f107 010c 	add.w	r1, r7, #12
 801241c:	463b      	mov	r3, r7
 801241e:	2200      	movs	r2, #0
 8012420:	4618      	mov	r0, r3
 8012422:	f7fe ff77 	bl	8011314 <find_volume>
 8012426:	4603      	mov	r3, r0
 8012428:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801242a:	7dfb      	ldrb	r3, [r7, #23]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d14f      	bne.n	80124d0 <f_opendir+0xd0>
		obj->fs = fs;
 8012430:	68fa      	ldr	r2, [r7, #12]
 8012432:	693b      	ldr	r3, [r7, #16]
 8012434:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8012436:	683b      	ldr	r3, [r7, #0]
 8012438:	4619      	mov	r1, r3
 801243a:	6878      	ldr	r0, [r7, #4]
 801243c:	f7fe fe5e 	bl	80110fc <follow_path>
 8012440:	4603      	mov	r3, r0
 8012442:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8012444:	7dfb      	ldrb	r3, [r7, #23]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d13d      	bne.n	80124c6 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012450:	b25b      	sxtb	r3, r3
 8012452:	2b00      	cmp	r3, #0
 8012454:	db12      	blt.n	801247c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	799b      	ldrb	r3, [r3, #6]
 801245a:	f003 0310 	and.w	r3, r3, #16
 801245e:	2b00      	cmp	r3, #0
 8012460:	d00a      	beq.n	8012478 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8012462:	68fa      	ldr	r2, [r7, #12]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6a1b      	ldr	r3, [r3, #32]
 8012468:	4619      	mov	r1, r3
 801246a:	4610      	mov	r0, r2
 801246c:	f7fd ff26 	bl	80102bc <ld_clust>
 8012470:	4602      	mov	r2, r0
 8012472:	693b      	ldr	r3, [r7, #16]
 8012474:	609a      	str	r2, [r3, #8]
 8012476:	e001      	b.n	801247c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8012478:	2305      	movs	r3, #5
 801247a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801247c:	7dfb      	ldrb	r3, [r7, #23]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d121      	bne.n	80124c6 <f_opendir+0xc6>
				obj->id = fs->id;
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	88da      	ldrh	r2, [r3, #6]
 8012486:	693b      	ldr	r3, [r7, #16]
 8012488:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801248a:	2100      	movs	r1, #0
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f7fd fd8e 	bl	800ffae <dir_sdi>
 8012492:	4603      	mov	r3, r0
 8012494:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8012496:	7dfb      	ldrb	r3, [r7, #23]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d114      	bne.n	80124c6 <f_opendir+0xc6>
					if (obj->sclust) {
 801249c:	693b      	ldr	r3, [r7, #16]
 801249e:	689b      	ldr	r3, [r3, #8]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d00d      	beq.n	80124c0 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80124a4:	2100      	movs	r1, #0
 80124a6:	6878      	ldr	r0, [r7, #4]
 80124a8:	f7fd f8d2 	bl	800f650 <inc_lock>
 80124ac:	4602      	mov	r2, r0
 80124ae:	693b      	ldr	r3, [r7, #16]
 80124b0:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	691b      	ldr	r3, [r3, #16]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d105      	bne.n	80124c6 <f_opendir+0xc6>
 80124ba:	2312      	movs	r3, #18
 80124bc:	75fb      	strb	r3, [r7, #23]
 80124be:	e002      	b.n	80124c6 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80124c0:	693b      	ldr	r3, [r7, #16]
 80124c2:	2200      	movs	r2, #0
 80124c4:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80124c6:	7dfb      	ldrb	r3, [r7, #23]
 80124c8:	2b04      	cmp	r3, #4
 80124ca:	d101      	bne.n	80124d0 <f_opendir+0xd0>
 80124cc:	2305      	movs	r3, #5
 80124ce:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80124d0:	7dfb      	ldrb	r3, [r7, #23]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d002      	beq.n	80124dc <f_opendir+0xdc>
 80124d6:	693b      	ldr	r3, [r7, #16]
 80124d8:	2200      	movs	r2, #0
 80124da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80124dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80124de:	4618      	mov	r0, r3
 80124e0:	3718      	adds	r7, #24
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}

080124e6 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80124e6:	b580      	push	{r7, lr}
 80124e8:	b084      	sub	sp, #16
 80124ea:	af00      	add	r7, sp, #0
 80124ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	f107 0208 	add.w	r2, r7, #8
 80124f4:	4611      	mov	r1, r2
 80124f6:	4618      	mov	r0, r3
 80124f8:	f7ff f95c 	bl	80117b4 <validate>
 80124fc:	4603      	mov	r3, r0
 80124fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012500:	7bfb      	ldrb	r3, [r7, #15]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d110      	bne.n	8012528 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	691b      	ldr	r3, [r3, #16]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d006      	beq.n	801251c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	691b      	ldr	r3, [r3, #16]
 8012512:	4618      	mov	r0, r3
 8012514:	f7fd f92a 	bl	800f76c <dec_lock>
 8012518:	4603      	mov	r3, r0
 801251a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801251c:	7bfb      	ldrb	r3, [r7, #15]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d102      	bne.n	8012528 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	2200      	movs	r2, #0
 8012526:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8012528:	7bfb      	ldrb	r3, [r7, #15]
}
 801252a:	4618      	mov	r0, r3
 801252c:	3710      	adds	r7, #16
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}

08012532 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012532:	b580      	push	{r7, lr}
 8012534:	b084      	sub	sp, #16
 8012536:	af00      	add	r7, sp, #0
 8012538:	6078      	str	r0, [r7, #4]
 801253a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	f107 0208 	add.w	r2, r7, #8
 8012542:	4611      	mov	r1, r2
 8012544:	4618      	mov	r0, r3
 8012546:	f7ff f935 	bl	80117b4 <validate>
 801254a:	4603      	mov	r3, r0
 801254c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801254e:	7bfb      	ldrb	r3, [r7, #15]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d126      	bne.n	80125a2 <f_readdir+0x70>
		if (!fno) {
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d106      	bne.n	8012568 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801255a:	2100      	movs	r1, #0
 801255c:	6878      	ldr	r0, [r7, #4]
 801255e:	f7fd fd26 	bl	800ffae <dir_sdi>
 8012562:	4603      	mov	r3, r0
 8012564:	73fb      	strb	r3, [r7, #15]
 8012566:	e01c      	b.n	80125a2 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8012568:	2100      	movs	r1, #0
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	f7fe f8d1 	bl	8010712 <dir_read>
 8012570:	4603      	mov	r3, r0
 8012572:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8012574:	7bfb      	ldrb	r3, [r7, #15]
 8012576:	2b04      	cmp	r3, #4
 8012578:	d101      	bne.n	801257e <f_readdir+0x4c>
 801257a:	2300      	movs	r3, #0
 801257c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801257e:	7bfb      	ldrb	r3, [r7, #15]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d10e      	bne.n	80125a2 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8012584:	6839      	ldr	r1, [r7, #0]
 8012586:	6878      	ldr	r0, [r7, #4]
 8012588:	f7fe fb22 	bl	8010bd0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801258c:	2100      	movs	r1, #0
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f7fd fd88 	bl	80100a4 <dir_next>
 8012594:	4603      	mov	r3, r0
 8012596:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8012598:	7bfb      	ldrb	r3, [r7, #15]
 801259a:	2b04      	cmp	r3, #4
 801259c:	d101      	bne.n	80125a2 <f_readdir+0x70>
 801259e:	2300      	movs	r3, #0
 80125a0:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80125a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	3710      	adds	r7, #16
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}

080125ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80125ac:	b480      	push	{r7}
 80125ae:	b087      	sub	sp, #28
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	60f8      	str	r0, [r7, #12]
 80125b4:	60b9      	str	r1, [r7, #8]
 80125b6:	4613      	mov	r3, r2
 80125b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80125ba:	2301      	movs	r3, #1
 80125bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80125be:	2300      	movs	r3, #0
 80125c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80125c2:	4b1f      	ldr	r3, [pc, #124]	@ (8012640 <FATFS_LinkDriverEx+0x94>)
 80125c4:	7a5b      	ldrb	r3, [r3, #9]
 80125c6:	b2db      	uxtb	r3, r3
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d131      	bne.n	8012630 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80125cc:	4b1c      	ldr	r3, [pc, #112]	@ (8012640 <FATFS_LinkDriverEx+0x94>)
 80125ce:	7a5b      	ldrb	r3, [r3, #9]
 80125d0:	b2db      	uxtb	r3, r3
 80125d2:	461a      	mov	r2, r3
 80125d4:	4b1a      	ldr	r3, [pc, #104]	@ (8012640 <FATFS_LinkDriverEx+0x94>)
 80125d6:	2100      	movs	r1, #0
 80125d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80125da:	4b19      	ldr	r3, [pc, #100]	@ (8012640 <FATFS_LinkDriverEx+0x94>)
 80125dc:	7a5b      	ldrb	r3, [r3, #9]
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	4a17      	ldr	r2, [pc, #92]	@ (8012640 <FATFS_LinkDriverEx+0x94>)
 80125e2:	009b      	lsls	r3, r3, #2
 80125e4:	4413      	add	r3, r2
 80125e6:	68fa      	ldr	r2, [r7, #12]
 80125e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80125ea:	4b15      	ldr	r3, [pc, #84]	@ (8012640 <FATFS_LinkDriverEx+0x94>)
 80125ec:	7a5b      	ldrb	r3, [r3, #9]
 80125ee:	b2db      	uxtb	r3, r3
 80125f0:	461a      	mov	r2, r3
 80125f2:	4b13      	ldr	r3, [pc, #76]	@ (8012640 <FATFS_LinkDriverEx+0x94>)
 80125f4:	4413      	add	r3, r2
 80125f6:	79fa      	ldrb	r2, [r7, #7]
 80125f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80125fa:	4b11      	ldr	r3, [pc, #68]	@ (8012640 <FATFS_LinkDriverEx+0x94>)
 80125fc:	7a5b      	ldrb	r3, [r3, #9]
 80125fe:	b2db      	uxtb	r3, r3
 8012600:	1c5a      	adds	r2, r3, #1
 8012602:	b2d1      	uxtb	r1, r2
 8012604:	4a0e      	ldr	r2, [pc, #56]	@ (8012640 <FATFS_LinkDriverEx+0x94>)
 8012606:	7251      	strb	r1, [r2, #9]
 8012608:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801260a:	7dbb      	ldrb	r3, [r7, #22]
 801260c:	3330      	adds	r3, #48	@ 0x30
 801260e:	b2da      	uxtb	r2, r3
 8012610:	68bb      	ldr	r3, [r7, #8]
 8012612:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012614:	68bb      	ldr	r3, [r7, #8]
 8012616:	3301      	adds	r3, #1
 8012618:	223a      	movs	r2, #58	@ 0x3a
 801261a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801261c:	68bb      	ldr	r3, [r7, #8]
 801261e:	3302      	adds	r3, #2
 8012620:	222f      	movs	r2, #47	@ 0x2f
 8012622:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	3303      	adds	r3, #3
 8012628:	2200      	movs	r2, #0
 801262a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801262c:	2300      	movs	r3, #0
 801262e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012630:	7dfb      	ldrb	r3, [r7, #23]
}
 8012632:	4618      	mov	r0, r3
 8012634:	371c      	adds	r7, #28
 8012636:	46bd      	mov	sp, r7
 8012638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263c:	4770      	bx	lr
 801263e:	bf00      	nop
 8012640:	200022bc 	.word	0x200022bc

08012644 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b082      	sub	sp, #8
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801264e:	2200      	movs	r2, #0
 8012650:	6839      	ldr	r1, [r7, #0]
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f7ff ffaa 	bl	80125ac <FATFS_LinkDriverEx>
 8012658:	4603      	mov	r3, r0
}
 801265a:	4618      	mov	r0, r3
 801265c:	3708      	adds	r7, #8
 801265e:	46bd      	mov	sp, r7
 8012660:	bd80      	pop	{r7, pc}
	...

08012664 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8012664:	b480      	push	{r7}
 8012666:	b085      	sub	sp, #20
 8012668:	af00      	add	r7, sp, #0
 801266a:	4603      	mov	r3, r0
 801266c:	6039      	str	r1, [r7, #0]
 801266e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012670:	88fb      	ldrh	r3, [r7, #6]
 8012672:	2b7f      	cmp	r3, #127	@ 0x7f
 8012674:	d802      	bhi.n	801267c <ff_convert+0x18>
		c = chr;
 8012676:	88fb      	ldrh	r3, [r7, #6]
 8012678:	81fb      	strh	r3, [r7, #14]
 801267a:	e025      	b.n	80126c8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801267c:	683b      	ldr	r3, [r7, #0]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d00b      	beq.n	801269a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012682:	88fb      	ldrh	r3, [r7, #6]
 8012684:	2bff      	cmp	r3, #255	@ 0xff
 8012686:	d805      	bhi.n	8012694 <ff_convert+0x30>
 8012688:	88fb      	ldrh	r3, [r7, #6]
 801268a:	3b80      	subs	r3, #128	@ 0x80
 801268c:	4a12      	ldr	r2, [pc, #72]	@ (80126d8 <ff_convert+0x74>)
 801268e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012692:	e000      	b.n	8012696 <ff_convert+0x32>
 8012694:	2300      	movs	r3, #0
 8012696:	81fb      	strh	r3, [r7, #14]
 8012698:	e016      	b.n	80126c8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801269a:	2300      	movs	r3, #0
 801269c:	81fb      	strh	r3, [r7, #14]
 801269e:	e009      	b.n	80126b4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80126a0:	89fb      	ldrh	r3, [r7, #14]
 80126a2:	4a0d      	ldr	r2, [pc, #52]	@ (80126d8 <ff_convert+0x74>)
 80126a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80126a8:	88fa      	ldrh	r2, [r7, #6]
 80126aa:	429a      	cmp	r2, r3
 80126ac:	d006      	beq.n	80126bc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80126ae:	89fb      	ldrh	r3, [r7, #14]
 80126b0:	3301      	adds	r3, #1
 80126b2:	81fb      	strh	r3, [r7, #14]
 80126b4:	89fb      	ldrh	r3, [r7, #14]
 80126b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80126b8:	d9f2      	bls.n	80126a0 <ff_convert+0x3c>
 80126ba:	e000      	b.n	80126be <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80126bc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80126be:	89fb      	ldrh	r3, [r7, #14]
 80126c0:	3380      	adds	r3, #128	@ 0x80
 80126c2:	b29b      	uxth	r3, r3
 80126c4:	b2db      	uxtb	r3, r3
 80126c6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80126c8:	89fb      	ldrh	r3, [r7, #14]
}
 80126ca:	4618      	mov	r0, r3
 80126cc:	3714      	adds	r7, #20
 80126ce:	46bd      	mov	sp, r7
 80126d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d4:	4770      	bx	lr
 80126d6:	bf00      	nop
 80126d8:	08018b48 	.word	0x08018b48

080126dc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80126dc:	b480      	push	{r7}
 80126de:	b087      	sub	sp, #28
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	4603      	mov	r3, r0
 80126e4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80126e6:	88fb      	ldrh	r3, [r7, #6]
 80126e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80126ec:	d201      	bcs.n	80126f2 <ff_wtoupper+0x16>
 80126ee:	4b3e      	ldr	r3, [pc, #248]	@ (80127e8 <ff_wtoupper+0x10c>)
 80126f0:	e000      	b.n	80126f4 <ff_wtoupper+0x18>
 80126f2:	4b3e      	ldr	r3, [pc, #248]	@ (80127ec <ff_wtoupper+0x110>)
 80126f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80126f6:	697b      	ldr	r3, [r7, #20]
 80126f8:	1c9a      	adds	r2, r3, #2
 80126fa:	617a      	str	r2, [r7, #20]
 80126fc:	881b      	ldrh	r3, [r3, #0]
 80126fe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8012700:	8a7b      	ldrh	r3, [r7, #18]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d068      	beq.n	80127d8 <ff_wtoupper+0xfc>
 8012706:	88fa      	ldrh	r2, [r7, #6]
 8012708:	8a7b      	ldrh	r3, [r7, #18]
 801270a:	429a      	cmp	r2, r3
 801270c:	d364      	bcc.n	80127d8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	1c9a      	adds	r2, r3, #2
 8012712:	617a      	str	r2, [r7, #20]
 8012714:	881b      	ldrh	r3, [r3, #0]
 8012716:	823b      	strh	r3, [r7, #16]
 8012718:	8a3b      	ldrh	r3, [r7, #16]
 801271a:	0a1b      	lsrs	r3, r3, #8
 801271c:	81fb      	strh	r3, [r7, #14]
 801271e:	8a3b      	ldrh	r3, [r7, #16]
 8012720:	b2db      	uxtb	r3, r3
 8012722:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8012724:	88fa      	ldrh	r2, [r7, #6]
 8012726:	8a79      	ldrh	r1, [r7, #18]
 8012728:	8a3b      	ldrh	r3, [r7, #16]
 801272a:	440b      	add	r3, r1
 801272c:	429a      	cmp	r2, r3
 801272e:	da49      	bge.n	80127c4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8012730:	89fb      	ldrh	r3, [r7, #14]
 8012732:	2b08      	cmp	r3, #8
 8012734:	d84f      	bhi.n	80127d6 <ff_wtoupper+0xfa>
 8012736:	a201      	add	r2, pc, #4	@ (adr r2, 801273c <ff_wtoupper+0x60>)
 8012738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801273c:	08012761 	.word	0x08012761
 8012740:	08012773 	.word	0x08012773
 8012744:	08012789 	.word	0x08012789
 8012748:	08012791 	.word	0x08012791
 801274c:	08012799 	.word	0x08012799
 8012750:	080127a1 	.word	0x080127a1
 8012754:	080127a9 	.word	0x080127a9
 8012758:	080127b1 	.word	0x080127b1
 801275c:	080127b9 	.word	0x080127b9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8012760:	88fa      	ldrh	r2, [r7, #6]
 8012762:	8a7b      	ldrh	r3, [r7, #18]
 8012764:	1ad3      	subs	r3, r2, r3
 8012766:	005b      	lsls	r3, r3, #1
 8012768:	697a      	ldr	r2, [r7, #20]
 801276a:	4413      	add	r3, r2
 801276c:	881b      	ldrh	r3, [r3, #0]
 801276e:	80fb      	strh	r3, [r7, #6]
 8012770:	e027      	b.n	80127c2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012772:	88fa      	ldrh	r2, [r7, #6]
 8012774:	8a7b      	ldrh	r3, [r7, #18]
 8012776:	1ad3      	subs	r3, r2, r3
 8012778:	b29b      	uxth	r3, r3
 801277a:	f003 0301 	and.w	r3, r3, #1
 801277e:	b29b      	uxth	r3, r3
 8012780:	88fa      	ldrh	r2, [r7, #6]
 8012782:	1ad3      	subs	r3, r2, r3
 8012784:	80fb      	strh	r3, [r7, #6]
 8012786:	e01c      	b.n	80127c2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8012788:	88fb      	ldrh	r3, [r7, #6]
 801278a:	3b10      	subs	r3, #16
 801278c:	80fb      	strh	r3, [r7, #6]
 801278e:	e018      	b.n	80127c2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012790:	88fb      	ldrh	r3, [r7, #6]
 8012792:	3b20      	subs	r3, #32
 8012794:	80fb      	strh	r3, [r7, #6]
 8012796:	e014      	b.n	80127c2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012798:	88fb      	ldrh	r3, [r7, #6]
 801279a:	3b30      	subs	r3, #48	@ 0x30
 801279c:	80fb      	strh	r3, [r7, #6]
 801279e:	e010      	b.n	80127c2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80127a0:	88fb      	ldrh	r3, [r7, #6]
 80127a2:	3b1a      	subs	r3, #26
 80127a4:	80fb      	strh	r3, [r7, #6]
 80127a6:	e00c      	b.n	80127c2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80127a8:	88fb      	ldrh	r3, [r7, #6]
 80127aa:	3308      	adds	r3, #8
 80127ac:	80fb      	strh	r3, [r7, #6]
 80127ae:	e008      	b.n	80127c2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80127b0:	88fb      	ldrh	r3, [r7, #6]
 80127b2:	3b50      	subs	r3, #80	@ 0x50
 80127b4:	80fb      	strh	r3, [r7, #6]
 80127b6:	e004      	b.n	80127c2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80127b8:	88fb      	ldrh	r3, [r7, #6]
 80127ba:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80127be:	80fb      	strh	r3, [r7, #6]
 80127c0:	bf00      	nop
			}
			break;
 80127c2:	e008      	b.n	80127d6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80127c4:	89fb      	ldrh	r3, [r7, #14]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d195      	bne.n	80126f6 <ff_wtoupper+0x1a>
 80127ca:	8a3b      	ldrh	r3, [r7, #16]
 80127cc:	005b      	lsls	r3, r3, #1
 80127ce:	697a      	ldr	r2, [r7, #20]
 80127d0:	4413      	add	r3, r2
 80127d2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80127d4:	e78f      	b.n	80126f6 <ff_wtoupper+0x1a>
			break;
 80127d6:	bf00      	nop
	}

	return chr;
 80127d8:	88fb      	ldrh	r3, [r7, #6]
}
 80127da:	4618      	mov	r0, r3
 80127dc:	371c      	adds	r7, #28
 80127de:	46bd      	mov	sp, r7
 80127e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e4:	4770      	bx	lr
 80127e6:	bf00      	nop
 80127e8:	08018c48 	.word	0x08018c48
 80127ec:	08018e3c 	.word	0x08018e3c

080127f0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80127f4:	2201      	movs	r2, #1
 80127f6:	490e      	ldr	r1, [pc, #56]	@ (8012830 <MX_USB_HOST_Init+0x40>)
 80127f8:	480e      	ldr	r0, [pc, #56]	@ (8012834 <MX_USB_HOST_Init+0x44>)
 80127fa:	f7fb f828 	bl	800d84e <USBH_Init>
 80127fe:	4603      	mov	r3, r0
 8012800:	2b00      	cmp	r3, #0
 8012802:	d001      	beq.n	8012808 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8012804:	f7ef ffb0 	bl	8002768 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8012808:	490b      	ldr	r1, [pc, #44]	@ (8012838 <MX_USB_HOST_Init+0x48>)
 801280a:	480a      	ldr	r0, [pc, #40]	@ (8012834 <MX_USB_HOST_Init+0x44>)
 801280c:	f7fb f8cc 	bl	800d9a8 <USBH_RegisterClass>
 8012810:	4603      	mov	r3, r0
 8012812:	2b00      	cmp	r3, #0
 8012814:	d001      	beq.n	801281a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8012816:	f7ef ffa7 	bl	8002768 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801281a:	4806      	ldr	r0, [pc, #24]	@ (8012834 <MX_USB_HOST_Init+0x44>)
 801281c:	f7fb f950 	bl	800dac0 <USBH_Start>
 8012820:	4603      	mov	r3, r0
 8012822:	2b00      	cmp	r3, #0
 8012824:	d001      	beq.n	801282a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8012826:	f7ef ff9f 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801282a:	bf00      	nop
 801282c:	bd80      	pop	{r7, pc}
 801282e:	bf00      	nop
 8012830:	08012851 	.word	0x08012851
 8012834:	200022c8 	.word	0x200022c8
 8012838:	20000054 	.word	0x20000054

0801283c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 801283c:	b580      	push	{r7, lr}
 801283e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8012840:	4802      	ldr	r0, [pc, #8]	@ (801284c <MX_USB_HOST_Process+0x10>)
 8012842:	f7fb f94d 	bl	800dae0 <USBH_Process>
}
 8012846:	bf00      	nop
 8012848:	bd80      	pop	{r7, pc}
 801284a:	bf00      	nop
 801284c:	200022c8 	.word	0x200022c8

08012850 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8012850:	b480      	push	{r7}
 8012852:	b083      	sub	sp, #12
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
 8012858:	460b      	mov	r3, r1
 801285a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801285c:	78fb      	ldrb	r3, [r7, #3]
 801285e:	3b01      	subs	r3, #1
 8012860:	2b04      	cmp	r3, #4
 8012862:	d819      	bhi.n	8012898 <USBH_UserProcess+0x48>
 8012864:	a201      	add	r2, pc, #4	@ (adr r2, 801286c <USBH_UserProcess+0x1c>)
 8012866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801286a:	bf00      	nop
 801286c:	08012899 	.word	0x08012899
 8012870:	08012889 	.word	0x08012889
 8012874:	08012899 	.word	0x08012899
 8012878:	08012891 	.word	0x08012891
 801287c:	08012881 	.word	0x08012881
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8012880:	4b09      	ldr	r3, [pc, #36]	@ (80128a8 <USBH_UserProcess+0x58>)
 8012882:	2203      	movs	r2, #3
 8012884:	701a      	strb	r2, [r3, #0]
  break;
 8012886:	e008      	b.n	801289a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8012888:	4b07      	ldr	r3, [pc, #28]	@ (80128a8 <USBH_UserProcess+0x58>)
 801288a:	2202      	movs	r2, #2
 801288c:	701a      	strb	r2, [r3, #0]
  break;
 801288e:	e004      	b.n	801289a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012890:	4b05      	ldr	r3, [pc, #20]	@ (80128a8 <USBH_UserProcess+0x58>)
 8012892:	2201      	movs	r2, #1
 8012894:	701a      	strb	r2, [r3, #0]
  break;
 8012896:	e000      	b.n	801289a <USBH_UserProcess+0x4a>

  default:
  break;
 8012898:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801289a:	bf00      	nop
 801289c:	370c      	adds	r7, #12
 801289e:	46bd      	mov	sp, r7
 80128a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a4:	4770      	bx	lr
 80128a6:	bf00      	nop
 80128a8:	200026a0 	.word	0x200026a0

080128ac <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b08a      	sub	sp, #40	@ 0x28
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80128b4:	f107 0314 	add.w	r3, r7, #20
 80128b8:	2200      	movs	r2, #0
 80128ba:	601a      	str	r2, [r3, #0]
 80128bc:	605a      	str	r2, [r3, #4]
 80128be:	609a      	str	r2, [r3, #8]
 80128c0:	60da      	str	r2, [r3, #12]
 80128c2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80128cc:	d147      	bne.n	801295e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80128ce:	2300      	movs	r3, #0
 80128d0:	613b      	str	r3, [r7, #16]
 80128d2:	4b25      	ldr	r3, [pc, #148]	@ (8012968 <HAL_HCD_MspInit+0xbc>)
 80128d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128d6:	4a24      	ldr	r2, [pc, #144]	@ (8012968 <HAL_HCD_MspInit+0xbc>)
 80128d8:	f043 0301 	orr.w	r3, r3, #1
 80128dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80128de:	4b22      	ldr	r3, [pc, #136]	@ (8012968 <HAL_HCD_MspInit+0xbc>)
 80128e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128e2:	f003 0301 	and.w	r3, r3, #1
 80128e6:	613b      	str	r3, [r7, #16]
 80128e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80128ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80128ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80128f0:	2300      	movs	r3, #0
 80128f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80128f4:	2300      	movs	r3, #0
 80128f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80128f8:	f107 0314 	add.w	r3, r7, #20
 80128fc:	4619      	mov	r1, r3
 80128fe:	481b      	ldr	r0, [pc, #108]	@ (801296c <HAL_HCD_MspInit+0xc0>)
 8012900:	f7f2 f9be 	bl	8004c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012904:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8012908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801290a:	2302      	movs	r3, #2
 801290c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801290e:	2300      	movs	r3, #0
 8012910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012912:	2303      	movs	r3, #3
 8012914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012916:	230a      	movs	r3, #10
 8012918:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801291a:	f107 0314 	add.w	r3, r7, #20
 801291e:	4619      	mov	r1, r3
 8012920:	4812      	ldr	r0, [pc, #72]	@ (801296c <HAL_HCD_MspInit+0xc0>)
 8012922:	f7f2 f9ad 	bl	8004c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012926:	4b10      	ldr	r3, [pc, #64]	@ (8012968 <HAL_HCD_MspInit+0xbc>)
 8012928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801292a:	4a0f      	ldr	r2, [pc, #60]	@ (8012968 <HAL_HCD_MspInit+0xbc>)
 801292c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012930:	6353      	str	r3, [r2, #52]	@ 0x34
 8012932:	2300      	movs	r3, #0
 8012934:	60fb      	str	r3, [r7, #12]
 8012936:	4b0c      	ldr	r3, [pc, #48]	@ (8012968 <HAL_HCD_MspInit+0xbc>)
 8012938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801293a:	4a0b      	ldr	r2, [pc, #44]	@ (8012968 <HAL_HCD_MspInit+0xbc>)
 801293c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8012940:	6453      	str	r3, [r2, #68]	@ 0x44
 8012942:	4b09      	ldr	r3, [pc, #36]	@ (8012968 <HAL_HCD_MspInit+0xbc>)
 8012944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801294a:	60fb      	str	r3, [r7, #12]
 801294c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801294e:	2200      	movs	r2, #0
 8012950:	2100      	movs	r1, #0
 8012952:	2043      	movs	r0, #67	@ 0x43
 8012954:	f7f1 fd1f 	bl	8004396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012958:	2043      	movs	r0, #67	@ 0x43
 801295a:	f7f1 fd38 	bl	80043ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801295e:	bf00      	nop
 8012960:	3728      	adds	r7, #40	@ 0x28
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}
 8012966:	bf00      	nop
 8012968:	40023800 	.word	0x40023800
 801296c:	40020000 	.word	0x40020000

08012970 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b082      	sub	sp, #8
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801297e:	4618      	mov	r0, r3
 8012980:	f7fb fc85 	bl	800e28e <USBH_LL_IncTimer>
}
 8012984:	bf00      	nop
 8012986:	3708      	adds	r7, #8
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}

0801298c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b082      	sub	sp, #8
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801299a:	4618      	mov	r0, r3
 801299c:	f7fb fcbd 	bl	800e31a <USBH_LL_Connect>
}
 80129a0:	bf00      	nop
 80129a2:	3708      	adds	r7, #8
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bd80      	pop	{r7, pc}

080129a8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b082      	sub	sp, #8
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80129b6:	4618      	mov	r0, r3
 80129b8:	f7fb fcc6 	bl	800e348 <USBH_LL_Disconnect>
}
 80129bc:	bf00      	nop
 80129be:	3708      	adds	r7, #8
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}

080129c4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80129c4:	b480      	push	{r7}
 80129c6:	b083      	sub	sp, #12
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
 80129cc:	460b      	mov	r3, r1
 80129ce:	70fb      	strb	r3, [r7, #3]
 80129d0:	4613      	mov	r3, r2
 80129d2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80129d4:	bf00      	nop
 80129d6:	370c      	adds	r7, #12
 80129d8:	46bd      	mov	sp, r7
 80129da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129de:	4770      	bx	lr

080129e0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b082      	sub	sp, #8
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80129ee:	4618      	mov	r0, r3
 80129f0:	f7fb fc77 	bl	800e2e2 <USBH_LL_PortEnabled>
}
 80129f4:	bf00      	nop
 80129f6:	3708      	adds	r7, #8
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}

080129fc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b082      	sub	sp, #8
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f7fb fc77 	bl	800e2fe <USBH_LL_PortDisabled>
}
 8012a10:	bf00      	nop
 8012a12:	3708      	adds	r7, #8
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}

08012a18 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b082      	sub	sp, #8
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8012a26:	2b01      	cmp	r3, #1
 8012a28:	d12a      	bne.n	8012a80 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8012a2a:	4a18      	ldr	r2, [pc, #96]	@ (8012a8c <USBH_LL_Init+0x74>)
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	4a15      	ldr	r2, [pc, #84]	@ (8012a8c <USBH_LL_Init+0x74>)
 8012a36:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012a3a:	4b14      	ldr	r3, [pc, #80]	@ (8012a8c <USBH_LL_Init+0x74>)
 8012a3c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8012a40:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8012a42:	4b12      	ldr	r3, [pc, #72]	@ (8012a8c <USBH_LL_Init+0x74>)
 8012a44:	2208      	movs	r2, #8
 8012a46:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8012a48:	4b10      	ldr	r3, [pc, #64]	@ (8012a8c <USBH_LL_Init+0x74>)
 8012a4a:	2201      	movs	r2, #1
 8012a4c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8012a8c <USBH_LL_Init+0x74>)
 8012a50:	2200      	movs	r2, #0
 8012a52:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8012a54:	4b0d      	ldr	r3, [pc, #52]	@ (8012a8c <USBH_LL_Init+0x74>)
 8012a56:	2202      	movs	r2, #2
 8012a58:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8012a8c <USBH_LL_Init+0x74>)
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8012a60:	480a      	ldr	r0, [pc, #40]	@ (8012a8c <USBH_LL_Init+0x74>)
 8012a62:	f7f2 fba7 	bl	80051b4 <HAL_HCD_Init>
 8012a66:	4603      	mov	r3, r0
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d001      	beq.n	8012a70 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8012a6c:	f7ef fe7c 	bl	8002768 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8012a70:	4806      	ldr	r0, [pc, #24]	@ (8012a8c <USBH_LL_Init+0x74>)
 8012a72:	f7f3 f807 	bl	8005a84 <HAL_HCD_GetCurrentFrame>
 8012a76:	4603      	mov	r3, r0
 8012a78:	4619      	mov	r1, r3
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f7fb fbf8 	bl	800e270 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012a80:	2300      	movs	r3, #0
}
 8012a82:	4618      	mov	r0, r3
 8012a84:	3708      	adds	r7, #8
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd80      	pop	{r7, pc}
 8012a8a:	bf00      	nop
 8012a8c:	200026a4 	.word	0x200026a4

08012a90 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b084      	sub	sp, #16
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a98:	2300      	movs	r3, #0
 8012a9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f7f2 ff74 	bl	8005994 <HAL_HCD_Start>
 8012aac:	4603      	mov	r3, r0
 8012aae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012ab0:	7bfb      	ldrb	r3, [r7, #15]
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f000 f992 	bl	8012ddc <USBH_Get_USB_Status>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3710      	adds	r7, #16
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}

08012ac6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8012ac6:	b580      	push	{r7, lr}
 8012ac8:	b084      	sub	sp, #16
 8012aca:	af00      	add	r7, sp, #0
 8012acc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012adc:	4618      	mov	r0, r3
 8012ade:	f7f2 ff7c 	bl	80059da <HAL_HCD_Stop>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012ae6:	7bfb      	ldrb	r3, [r7, #15]
 8012ae8:	4618      	mov	r0, r3
 8012aea:	f000 f977 	bl	8012ddc <USBH_Get_USB_Status>
 8012aee:	4603      	mov	r3, r0
 8012af0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012af2:	7bbb      	ldrb	r3, [r7, #14]
}
 8012af4:	4618      	mov	r0, r3
 8012af6:	3710      	adds	r7, #16
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}

08012afc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b084      	sub	sp, #16
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8012b04:	2301      	movs	r3, #1
 8012b06:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f7f2 ffc6 	bl	8005aa0 <HAL_HCD_GetCurrentSpeed>
 8012b14:	4603      	mov	r3, r0
 8012b16:	2b02      	cmp	r3, #2
 8012b18:	d00c      	beq.n	8012b34 <USBH_LL_GetSpeed+0x38>
 8012b1a:	2b02      	cmp	r3, #2
 8012b1c:	d80d      	bhi.n	8012b3a <USBH_LL_GetSpeed+0x3e>
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d002      	beq.n	8012b28 <USBH_LL_GetSpeed+0x2c>
 8012b22:	2b01      	cmp	r3, #1
 8012b24:	d003      	beq.n	8012b2e <USBH_LL_GetSpeed+0x32>
 8012b26:	e008      	b.n	8012b3a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8012b28:	2300      	movs	r3, #0
 8012b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8012b2c:	e008      	b.n	8012b40 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8012b2e:	2301      	movs	r3, #1
 8012b30:	73fb      	strb	r3, [r7, #15]
    break;
 8012b32:	e005      	b.n	8012b40 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8012b34:	2302      	movs	r3, #2
 8012b36:	73fb      	strb	r3, [r7, #15]
    break;
 8012b38:	e002      	b.n	8012b40 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8012b3a:	2301      	movs	r3, #1
 8012b3c:	73fb      	strb	r3, [r7, #15]
    break;
 8012b3e:	bf00      	nop
  }
  return  speed;
 8012b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b42:	4618      	mov	r0, r3
 8012b44:	3710      	adds	r7, #16
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}

08012b4a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8012b4a:	b580      	push	{r7, lr}
 8012b4c:	b084      	sub	sp, #16
 8012b4e:	af00      	add	r7, sp, #0
 8012b50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b52:	2300      	movs	r3, #0
 8012b54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012b56:	2300      	movs	r3, #0
 8012b58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012b60:	4618      	mov	r0, r3
 8012b62:	f7f2 ff57 	bl	8005a14 <HAL_HCD_ResetPort>
 8012b66:	4603      	mov	r3, r0
 8012b68:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012b6a:	7bfb      	ldrb	r3, [r7, #15]
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f000 f935 	bl	8012ddc <USBH_Get_USB_Status>
 8012b72:	4603      	mov	r3, r0
 8012b74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b76:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b78:	4618      	mov	r0, r3
 8012b7a:	3710      	adds	r7, #16
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}

08012b80 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b082      	sub	sp, #8
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
 8012b88:	460b      	mov	r3, r1
 8012b8a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012b92:	78fa      	ldrb	r2, [r7, #3]
 8012b94:	4611      	mov	r1, r2
 8012b96:	4618      	mov	r0, r3
 8012b98:	f7f2 ff5f 	bl	8005a5a <HAL_HCD_HC_GetXferCount>
 8012b9c:	4603      	mov	r3, r0
}
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	3708      	adds	r7, #8
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}

08012ba6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012ba6:	b590      	push	{r4, r7, lr}
 8012ba8:	b089      	sub	sp, #36	@ 0x24
 8012baa:	af04      	add	r7, sp, #16
 8012bac:	6078      	str	r0, [r7, #4]
 8012bae:	4608      	mov	r0, r1
 8012bb0:	4611      	mov	r1, r2
 8012bb2:	461a      	mov	r2, r3
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	70fb      	strb	r3, [r7, #3]
 8012bb8:	460b      	mov	r3, r1
 8012bba:	70bb      	strb	r3, [r7, #2]
 8012bbc:	4613      	mov	r3, r2
 8012bbe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8012bce:	787c      	ldrb	r4, [r7, #1]
 8012bd0:	78ba      	ldrb	r2, [r7, #2]
 8012bd2:	78f9      	ldrb	r1, [r7, #3]
 8012bd4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012bd6:	9302      	str	r3, [sp, #8]
 8012bd8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012bdc:	9301      	str	r3, [sp, #4]
 8012bde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012be2:	9300      	str	r3, [sp, #0]
 8012be4:	4623      	mov	r3, r4
 8012be6:	f7f2 fb4c 	bl	8005282 <HAL_HCD_HC_Init>
 8012bea:	4603      	mov	r3, r0
 8012bec:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8012bee:	7bfb      	ldrb	r3, [r7, #15]
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f000 f8f3 	bl	8012ddc <USBH_Get_USB_Status>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012bfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	3714      	adds	r7, #20
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd90      	pop	{r4, r7, pc}

08012c04 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b084      	sub	sp, #16
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
 8012c0c:	460b      	mov	r3, r1
 8012c0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c10:	2300      	movs	r3, #0
 8012c12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012c14:	2300      	movs	r3, #0
 8012c16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012c1e:	78fa      	ldrb	r2, [r7, #3]
 8012c20:	4611      	mov	r1, r2
 8012c22:	4618      	mov	r0, r3
 8012c24:	f7f2 fbe5 	bl	80053f2 <HAL_HCD_HC_Halt>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012c2c:	7bfb      	ldrb	r3, [r7, #15]
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f000 f8d4 	bl	8012ddc <USBH_Get_USB_Status>
 8012c34:	4603      	mov	r3, r0
 8012c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	3710      	adds	r7, #16
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bd80      	pop	{r7, pc}

08012c42 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8012c42:	b590      	push	{r4, r7, lr}
 8012c44:	b089      	sub	sp, #36	@ 0x24
 8012c46:	af04      	add	r7, sp, #16
 8012c48:	6078      	str	r0, [r7, #4]
 8012c4a:	4608      	mov	r0, r1
 8012c4c:	4611      	mov	r1, r2
 8012c4e:	461a      	mov	r2, r3
 8012c50:	4603      	mov	r3, r0
 8012c52:	70fb      	strb	r3, [r7, #3]
 8012c54:	460b      	mov	r3, r1
 8012c56:	70bb      	strb	r3, [r7, #2]
 8012c58:	4613      	mov	r3, r2
 8012c5a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012c60:	2300      	movs	r3, #0
 8012c62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8012c6a:	787c      	ldrb	r4, [r7, #1]
 8012c6c:	78ba      	ldrb	r2, [r7, #2]
 8012c6e:	78f9      	ldrb	r1, [r7, #3]
 8012c70:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8012c74:	9303      	str	r3, [sp, #12]
 8012c76:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012c78:	9302      	str	r3, [sp, #8]
 8012c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c7c:	9301      	str	r3, [sp, #4]
 8012c7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012c82:	9300      	str	r3, [sp, #0]
 8012c84:	4623      	mov	r3, r4
 8012c86:	f7f2 fbd7 	bl	8005438 <HAL_HCD_HC_SubmitRequest>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8012c8e:	7bfb      	ldrb	r3, [r7, #15]
 8012c90:	4618      	mov	r0, r3
 8012c92:	f000 f8a3 	bl	8012ddc <USBH_Get_USB_Status>
 8012c96:	4603      	mov	r3, r0
 8012c98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012c9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	3714      	adds	r7, #20
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd90      	pop	{r4, r7, pc}

08012ca4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
 8012cac:	460b      	mov	r3, r1
 8012cae:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012cb6:	78fa      	ldrb	r2, [r7, #3]
 8012cb8:	4611      	mov	r1, r2
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f7f2 feb8 	bl	8005a30 <HAL_HCD_HC_GetURBState>
 8012cc0:	4603      	mov	r3, r0
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3708      	adds	r7, #8
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}

08012cca <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8012cca:	b580      	push	{r7, lr}
 8012ccc:	b082      	sub	sp, #8
 8012cce:	af00      	add	r7, sp, #0
 8012cd0:	6078      	str	r0, [r7, #4]
 8012cd2:	460b      	mov	r3, r1
 8012cd4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8012cdc:	2b01      	cmp	r3, #1
 8012cde:	d103      	bne.n	8012ce8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8012ce0:	78fb      	ldrb	r3, [r7, #3]
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f000 f8a6 	bl	8012e34 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8012ce8:	20c8      	movs	r0, #200	@ 0xc8
 8012cea:	f7f0 fde9 	bl	80038c0 <HAL_Delay>
  return USBH_OK;
 8012cee:	2300      	movs	r3, #0
}
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	3708      	adds	r7, #8
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	bd80      	pop	{r7, pc}

08012cf8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	b085      	sub	sp, #20
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
 8012d00:	460b      	mov	r3, r1
 8012d02:	70fb      	strb	r3, [r7, #3]
 8012d04:	4613      	mov	r3, r2
 8012d06:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012d0e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8012d10:	78fa      	ldrb	r2, [r7, #3]
 8012d12:	68f9      	ldr	r1, [r7, #12]
 8012d14:	4613      	mov	r3, r2
 8012d16:	011b      	lsls	r3, r3, #4
 8012d18:	1a9b      	subs	r3, r3, r2
 8012d1a:	009b      	lsls	r3, r3, #2
 8012d1c:	440b      	add	r3, r1
 8012d1e:	3317      	adds	r3, #23
 8012d20:	781b      	ldrb	r3, [r3, #0]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d00a      	beq.n	8012d3c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8012d26:	78fa      	ldrb	r2, [r7, #3]
 8012d28:	68f9      	ldr	r1, [r7, #12]
 8012d2a:	4613      	mov	r3, r2
 8012d2c:	011b      	lsls	r3, r3, #4
 8012d2e:	1a9b      	subs	r3, r3, r2
 8012d30:	009b      	lsls	r3, r3, #2
 8012d32:	440b      	add	r3, r1
 8012d34:	333c      	adds	r3, #60	@ 0x3c
 8012d36:	78ba      	ldrb	r2, [r7, #2]
 8012d38:	701a      	strb	r2, [r3, #0]
 8012d3a:	e009      	b.n	8012d50 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8012d3c:	78fa      	ldrb	r2, [r7, #3]
 8012d3e:	68f9      	ldr	r1, [r7, #12]
 8012d40:	4613      	mov	r3, r2
 8012d42:	011b      	lsls	r3, r3, #4
 8012d44:	1a9b      	subs	r3, r3, r2
 8012d46:	009b      	lsls	r3, r3, #2
 8012d48:	440b      	add	r3, r1
 8012d4a:	333d      	adds	r3, #61	@ 0x3d
 8012d4c:	78ba      	ldrb	r2, [r7, #2]
 8012d4e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8012d50:	2300      	movs	r3, #0
}
 8012d52:	4618      	mov	r0, r3
 8012d54:	3714      	adds	r7, #20
 8012d56:	46bd      	mov	sp, r7
 8012d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5c:	4770      	bx	lr

08012d5e <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012d5e:	b480      	push	{r7}
 8012d60:	b085      	sub	sp, #20
 8012d62:	af00      	add	r7, sp, #0
 8012d64:	6078      	str	r0, [r7, #4]
 8012d66:	460b      	mov	r3, r1
 8012d68:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012d74:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8012d76:	78fa      	ldrb	r2, [r7, #3]
 8012d78:	68b9      	ldr	r1, [r7, #8]
 8012d7a:	4613      	mov	r3, r2
 8012d7c:	011b      	lsls	r3, r3, #4
 8012d7e:	1a9b      	subs	r3, r3, r2
 8012d80:	009b      	lsls	r3, r3, #2
 8012d82:	440b      	add	r3, r1
 8012d84:	3317      	adds	r3, #23
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d00a      	beq.n	8012da2 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8012d8c:	78fa      	ldrb	r2, [r7, #3]
 8012d8e:	68b9      	ldr	r1, [r7, #8]
 8012d90:	4613      	mov	r3, r2
 8012d92:	011b      	lsls	r3, r3, #4
 8012d94:	1a9b      	subs	r3, r3, r2
 8012d96:	009b      	lsls	r3, r3, #2
 8012d98:	440b      	add	r3, r1
 8012d9a:	333c      	adds	r3, #60	@ 0x3c
 8012d9c:	781b      	ldrb	r3, [r3, #0]
 8012d9e:	73fb      	strb	r3, [r7, #15]
 8012da0:	e009      	b.n	8012db6 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8012da2:	78fa      	ldrb	r2, [r7, #3]
 8012da4:	68b9      	ldr	r1, [r7, #8]
 8012da6:	4613      	mov	r3, r2
 8012da8:	011b      	lsls	r3, r3, #4
 8012daa:	1a9b      	subs	r3, r3, r2
 8012dac:	009b      	lsls	r3, r3, #2
 8012dae:	440b      	add	r3, r1
 8012db0:	333d      	adds	r3, #61	@ 0x3d
 8012db2:	781b      	ldrb	r3, [r3, #0]
 8012db4:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8012db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012db8:	4618      	mov	r0, r3
 8012dba:	3714      	adds	r7, #20
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc2:	4770      	bx	lr

08012dc4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8012dcc:	6878      	ldr	r0, [r7, #4]
 8012dce:	f7f0 fd77 	bl	80038c0 <HAL_Delay>
}
 8012dd2:	bf00      	nop
 8012dd4:	3708      	adds	r7, #8
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}
	...

08012ddc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012ddc:	b480      	push	{r7}
 8012dde:	b085      	sub	sp, #20
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	4603      	mov	r3, r0
 8012de4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012de6:	2300      	movs	r3, #0
 8012de8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012dea:	79fb      	ldrb	r3, [r7, #7]
 8012dec:	2b03      	cmp	r3, #3
 8012dee:	d817      	bhi.n	8012e20 <USBH_Get_USB_Status+0x44>
 8012df0:	a201      	add	r2, pc, #4	@ (adr r2, 8012df8 <USBH_Get_USB_Status+0x1c>)
 8012df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012df6:	bf00      	nop
 8012df8:	08012e09 	.word	0x08012e09
 8012dfc:	08012e0f 	.word	0x08012e0f
 8012e00:	08012e15 	.word	0x08012e15
 8012e04:	08012e1b 	.word	0x08012e1b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8012e08:	2300      	movs	r3, #0
 8012e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8012e0c:	e00b      	b.n	8012e26 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8012e0e:	2302      	movs	r3, #2
 8012e10:	73fb      	strb	r3, [r7, #15]
    break;
 8012e12:	e008      	b.n	8012e26 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8012e14:	2301      	movs	r3, #1
 8012e16:	73fb      	strb	r3, [r7, #15]
    break;
 8012e18:	e005      	b.n	8012e26 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8012e1a:	2302      	movs	r3, #2
 8012e1c:	73fb      	strb	r3, [r7, #15]
    break;
 8012e1e:	e002      	b.n	8012e26 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8012e20:	2302      	movs	r3, #2
 8012e22:	73fb      	strb	r3, [r7, #15]
    break;
 8012e24:	bf00      	nop
  }
  return usb_status;
 8012e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e28:	4618      	mov	r0, r3
 8012e2a:	3714      	adds	r7, #20
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e32:	4770      	bx	lr

08012e34 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b084      	sub	sp, #16
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8012e3e:	79fb      	ldrb	r3, [r7, #7]
 8012e40:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8012e42:	79fb      	ldrb	r3, [r7, #7]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d102      	bne.n	8012e4e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8012e48:	2301      	movs	r3, #1
 8012e4a:	73fb      	strb	r3, [r7, #15]
 8012e4c:	e001      	b.n	8012e52 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8012e52:	7bfb      	ldrb	r3, [r7, #15]
 8012e54:	461a      	mov	r2, r3
 8012e56:	2101      	movs	r1, #1
 8012e58:	4803      	ldr	r0, [pc, #12]	@ (8012e68 <MX_DriverVbusFS+0x34>)
 8012e5a:	f7f2 f979 	bl	8005150 <HAL_GPIO_WritePin>
}
 8012e5e:	bf00      	nop
 8012e60:	3710      	adds	r7, #16
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bd80      	pop	{r7, pc}
 8012e66:	bf00      	nop
 8012e68:	40020800 	.word	0x40020800

08012e6c <malloc>:
 8012e6c:	4b02      	ldr	r3, [pc, #8]	@ (8012e78 <malloc+0xc>)
 8012e6e:	4601      	mov	r1, r0
 8012e70:	6818      	ldr	r0, [r3, #0]
 8012e72:	f000 b82d 	b.w	8012ed0 <_malloc_r>
 8012e76:	bf00      	nop
 8012e78:	20000074 	.word	0x20000074

08012e7c <free>:
 8012e7c:	4b02      	ldr	r3, [pc, #8]	@ (8012e88 <free+0xc>)
 8012e7e:	4601      	mov	r1, r0
 8012e80:	6818      	ldr	r0, [r3, #0]
 8012e82:	f000 b955 	b.w	8013130 <_free_r>
 8012e86:	bf00      	nop
 8012e88:	20000074 	.word	0x20000074

08012e8c <sbrk_aligned>:
 8012e8c:	b570      	push	{r4, r5, r6, lr}
 8012e8e:	4e0f      	ldr	r6, [pc, #60]	@ (8012ecc <sbrk_aligned+0x40>)
 8012e90:	460c      	mov	r4, r1
 8012e92:	6831      	ldr	r1, [r6, #0]
 8012e94:	4605      	mov	r5, r0
 8012e96:	b911      	cbnz	r1, 8012e9e <sbrk_aligned+0x12>
 8012e98:	f000 f8f8 	bl	801308c <_sbrk_r>
 8012e9c:	6030      	str	r0, [r6, #0]
 8012e9e:	4621      	mov	r1, r4
 8012ea0:	4628      	mov	r0, r5
 8012ea2:	f000 f8f3 	bl	801308c <_sbrk_r>
 8012ea6:	1c43      	adds	r3, r0, #1
 8012ea8:	d103      	bne.n	8012eb2 <sbrk_aligned+0x26>
 8012eaa:	f04f 34ff 	mov.w	r4, #4294967295
 8012eae:	4620      	mov	r0, r4
 8012eb0:	bd70      	pop	{r4, r5, r6, pc}
 8012eb2:	1cc4      	adds	r4, r0, #3
 8012eb4:	f024 0403 	bic.w	r4, r4, #3
 8012eb8:	42a0      	cmp	r0, r4
 8012eba:	d0f8      	beq.n	8012eae <sbrk_aligned+0x22>
 8012ebc:	1a21      	subs	r1, r4, r0
 8012ebe:	4628      	mov	r0, r5
 8012ec0:	f000 f8e4 	bl	801308c <_sbrk_r>
 8012ec4:	3001      	adds	r0, #1
 8012ec6:	d1f2      	bne.n	8012eae <sbrk_aligned+0x22>
 8012ec8:	e7ef      	b.n	8012eaa <sbrk_aligned+0x1e>
 8012eca:	bf00      	nop
 8012ecc:	20002a84 	.word	0x20002a84

08012ed0 <_malloc_r>:
 8012ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ed4:	1ccd      	adds	r5, r1, #3
 8012ed6:	f025 0503 	bic.w	r5, r5, #3
 8012eda:	3508      	adds	r5, #8
 8012edc:	2d0c      	cmp	r5, #12
 8012ede:	bf38      	it	cc
 8012ee0:	250c      	movcc	r5, #12
 8012ee2:	2d00      	cmp	r5, #0
 8012ee4:	4606      	mov	r6, r0
 8012ee6:	db01      	blt.n	8012eec <_malloc_r+0x1c>
 8012ee8:	42a9      	cmp	r1, r5
 8012eea:	d904      	bls.n	8012ef6 <_malloc_r+0x26>
 8012eec:	230c      	movs	r3, #12
 8012eee:	6033      	str	r3, [r6, #0]
 8012ef0:	2000      	movs	r0, #0
 8012ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ef6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012fcc <_malloc_r+0xfc>
 8012efa:	f000 f869 	bl	8012fd0 <__malloc_lock>
 8012efe:	f8d8 3000 	ldr.w	r3, [r8]
 8012f02:	461c      	mov	r4, r3
 8012f04:	bb44      	cbnz	r4, 8012f58 <_malloc_r+0x88>
 8012f06:	4629      	mov	r1, r5
 8012f08:	4630      	mov	r0, r6
 8012f0a:	f7ff ffbf 	bl	8012e8c <sbrk_aligned>
 8012f0e:	1c43      	adds	r3, r0, #1
 8012f10:	4604      	mov	r4, r0
 8012f12:	d158      	bne.n	8012fc6 <_malloc_r+0xf6>
 8012f14:	f8d8 4000 	ldr.w	r4, [r8]
 8012f18:	4627      	mov	r7, r4
 8012f1a:	2f00      	cmp	r7, #0
 8012f1c:	d143      	bne.n	8012fa6 <_malloc_r+0xd6>
 8012f1e:	2c00      	cmp	r4, #0
 8012f20:	d04b      	beq.n	8012fba <_malloc_r+0xea>
 8012f22:	6823      	ldr	r3, [r4, #0]
 8012f24:	4639      	mov	r1, r7
 8012f26:	4630      	mov	r0, r6
 8012f28:	eb04 0903 	add.w	r9, r4, r3
 8012f2c:	f000 f8ae 	bl	801308c <_sbrk_r>
 8012f30:	4581      	cmp	r9, r0
 8012f32:	d142      	bne.n	8012fba <_malloc_r+0xea>
 8012f34:	6821      	ldr	r1, [r4, #0]
 8012f36:	1a6d      	subs	r5, r5, r1
 8012f38:	4629      	mov	r1, r5
 8012f3a:	4630      	mov	r0, r6
 8012f3c:	f7ff ffa6 	bl	8012e8c <sbrk_aligned>
 8012f40:	3001      	adds	r0, #1
 8012f42:	d03a      	beq.n	8012fba <_malloc_r+0xea>
 8012f44:	6823      	ldr	r3, [r4, #0]
 8012f46:	442b      	add	r3, r5
 8012f48:	6023      	str	r3, [r4, #0]
 8012f4a:	f8d8 3000 	ldr.w	r3, [r8]
 8012f4e:	685a      	ldr	r2, [r3, #4]
 8012f50:	bb62      	cbnz	r2, 8012fac <_malloc_r+0xdc>
 8012f52:	f8c8 7000 	str.w	r7, [r8]
 8012f56:	e00f      	b.n	8012f78 <_malloc_r+0xa8>
 8012f58:	6822      	ldr	r2, [r4, #0]
 8012f5a:	1b52      	subs	r2, r2, r5
 8012f5c:	d420      	bmi.n	8012fa0 <_malloc_r+0xd0>
 8012f5e:	2a0b      	cmp	r2, #11
 8012f60:	d917      	bls.n	8012f92 <_malloc_r+0xc2>
 8012f62:	1961      	adds	r1, r4, r5
 8012f64:	42a3      	cmp	r3, r4
 8012f66:	6025      	str	r5, [r4, #0]
 8012f68:	bf18      	it	ne
 8012f6a:	6059      	strne	r1, [r3, #4]
 8012f6c:	6863      	ldr	r3, [r4, #4]
 8012f6e:	bf08      	it	eq
 8012f70:	f8c8 1000 	streq.w	r1, [r8]
 8012f74:	5162      	str	r2, [r4, r5]
 8012f76:	604b      	str	r3, [r1, #4]
 8012f78:	4630      	mov	r0, r6
 8012f7a:	f000 f82f 	bl	8012fdc <__malloc_unlock>
 8012f7e:	f104 000b 	add.w	r0, r4, #11
 8012f82:	1d23      	adds	r3, r4, #4
 8012f84:	f020 0007 	bic.w	r0, r0, #7
 8012f88:	1ac2      	subs	r2, r0, r3
 8012f8a:	bf1c      	itt	ne
 8012f8c:	1a1b      	subne	r3, r3, r0
 8012f8e:	50a3      	strne	r3, [r4, r2]
 8012f90:	e7af      	b.n	8012ef2 <_malloc_r+0x22>
 8012f92:	6862      	ldr	r2, [r4, #4]
 8012f94:	42a3      	cmp	r3, r4
 8012f96:	bf0c      	ite	eq
 8012f98:	f8c8 2000 	streq.w	r2, [r8]
 8012f9c:	605a      	strne	r2, [r3, #4]
 8012f9e:	e7eb      	b.n	8012f78 <_malloc_r+0xa8>
 8012fa0:	4623      	mov	r3, r4
 8012fa2:	6864      	ldr	r4, [r4, #4]
 8012fa4:	e7ae      	b.n	8012f04 <_malloc_r+0x34>
 8012fa6:	463c      	mov	r4, r7
 8012fa8:	687f      	ldr	r7, [r7, #4]
 8012faa:	e7b6      	b.n	8012f1a <_malloc_r+0x4a>
 8012fac:	461a      	mov	r2, r3
 8012fae:	685b      	ldr	r3, [r3, #4]
 8012fb0:	42a3      	cmp	r3, r4
 8012fb2:	d1fb      	bne.n	8012fac <_malloc_r+0xdc>
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	6053      	str	r3, [r2, #4]
 8012fb8:	e7de      	b.n	8012f78 <_malloc_r+0xa8>
 8012fba:	230c      	movs	r3, #12
 8012fbc:	6033      	str	r3, [r6, #0]
 8012fbe:	4630      	mov	r0, r6
 8012fc0:	f000 f80c 	bl	8012fdc <__malloc_unlock>
 8012fc4:	e794      	b.n	8012ef0 <_malloc_r+0x20>
 8012fc6:	6005      	str	r5, [r0, #0]
 8012fc8:	e7d6      	b.n	8012f78 <_malloc_r+0xa8>
 8012fca:	bf00      	nop
 8012fcc:	20002a88 	.word	0x20002a88

08012fd0 <__malloc_lock>:
 8012fd0:	4801      	ldr	r0, [pc, #4]	@ (8012fd8 <__malloc_lock+0x8>)
 8012fd2:	f000 b895 	b.w	8013100 <__retarget_lock_acquire_recursive>
 8012fd6:	bf00      	nop
 8012fd8:	20002bc8 	.word	0x20002bc8

08012fdc <__malloc_unlock>:
 8012fdc:	4801      	ldr	r0, [pc, #4]	@ (8012fe4 <__malloc_unlock+0x8>)
 8012fde:	f000 b890 	b.w	8013102 <__retarget_lock_release_recursive>
 8012fe2:	bf00      	nop
 8012fe4:	20002bc8 	.word	0x20002bc8

08012fe8 <siprintf>:
 8012fe8:	b40e      	push	{r1, r2, r3}
 8012fea:	b500      	push	{lr}
 8012fec:	b09c      	sub	sp, #112	@ 0x70
 8012fee:	ab1d      	add	r3, sp, #116	@ 0x74
 8012ff0:	9002      	str	r0, [sp, #8]
 8012ff2:	9006      	str	r0, [sp, #24]
 8012ff4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012ff8:	4809      	ldr	r0, [pc, #36]	@ (8013020 <siprintf+0x38>)
 8012ffa:	9107      	str	r1, [sp, #28]
 8012ffc:	9104      	str	r1, [sp, #16]
 8012ffe:	4909      	ldr	r1, [pc, #36]	@ (8013024 <siprintf+0x3c>)
 8013000:	f853 2b04 	ldr.w	r2, [r3], #4
 8013004:	9105      	str	r1, [sp, #20]
 8013006:	6800      	ldr	r0, [r0, #0]
 8013008:	9301      	str	r3, [sp, #4]
 801300a:	a902      	add	r1, sp, #8
 801300c:	f000 f936 	bl	801327c <_svfiprintf_r>
 8013010:	9b02      	ldr	r3, [sp, #8]
 8013012:	2200      	movs	r2, #0
 8013014:	701a      	strb	r2, [r3, #0]
 8013016:	b01c      	add	sp, #112	@ 0x70
 8013018:	f85d eb04 	ldr.w	lr, [sp], #4
 801301c:	b003      	add	sp, #12
 801301e:	4770      	bx	lr
 8013020:	20000074 	.word	0x20000074
 8013024:	ffff0208 	.word	0xffff0208

08013028 <memset>:
 8013028:	4402      	add	r2, r0
 801302a:	4603      	mov	r3, r0
 801302c:	4293      	cmp	r3, r2
 801302e:	d100      	bne.n	8013032 <memset+0xa>
 8013030:	4770      	bx	lr
 8013032:	f803 1b01 	strb.w	r1, [r3], #1
 8013036:	e7f9      	b.n	801302c <memset+0x4>

08013038 <strncpy>:
 8013038:	b510      	push	{r4, lr}
 801303a:	3901      	subs	r1, #1
 801303c:	4603      	mov	r3, r0
 801303e:	b132      	cbz	r2, 801304e <strncpy+0x16>
 8013040:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013044:	f803 4b01 	strb.w	r4, [r3], #1
 8013048:	3a01      	subs	r2, #1
 801304a:	2c00      	cmp	r4, #0
 801304c:	d1f7      	bne.n	801303e <strncpy+0x6>
 801304e:	441a      	add	r2, r3
 8013050:	2100      	movs	r1, #0
 8013052:	4293      	cmp	r3, r2
 8013054:	d100      	bne.n	8013058 <strncpy+0x20>
 8013056:	bd10      	pop	{r4, pc}
 8013058:	f803 1b01 	strb.w	r1, [r3], #1
 801305c:	e7f9      	b.n	8013052 <strncpy+0x1a>

0801305e <strstr>:
 801305e:	780a      	ldrb	r2, [r1, #0]
 8013060:	b570      	push	{r4, r5, r6, lr}
 8013062:	b96a      	cbnz	r2, 8013080 <strstr+0x22>
 8013064:	bd70      	pop	{r4, r5, r6, pc}
 8013066:	429a      	cmp	r2, r3
 8013068:	d109      	bne.n	801307e <strstr+0x20>
 801306a:	460c      	mov	r4, r1
 801306c:	4605      	mov	r5, r0
 801306e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013072:	2b00      	cmp	r3, #0
 8013074:	d0f6      	beq.n	8013064 <strstr+0x6>
 8013076:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801307a:	429e      	cmp	r6, r3
 801307c:	d0f7      	beq.n	801306e <strstr+0x10>
 801307e:	3001      	adds	r0, #1
 8013080:	7803      	ldrb	r3, [r0, #0]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d1ef      	bne.n	8013066 <strstr+0x8>
 8013086:	4618      	mov	r0, r3
 8013088:	e7ec      	b.n	8013064 <strstr+0x6>
	...

0801308c <_sbrk_r>:
 801308c:	b538      	push	{r3, r4, r5, lr}
 801308e:	4d06      	ldr	r5, [pc, #24]	@ (80130a8 <_sbrk_r+0x1c>)
 8013090:	2300      	movs	r3, #0
 8013092:	4604      	mov	r4, r0
 8013094:	4608      	mov	r0, r1
 8013096:	602b      	str	r3, [r5, #0]
 8013098:	f7f0 f92c 	bl	80032f4 <_sbrk>
 801309c:	1c43      	adds	r3, r0, #1
 801309e:	d102      	bne.n	80130a6 <_sbrk_r+0x1a>
 80130a0:	682b      	ldr	r3, [r5, #0]
 80130a2:	b103      	cbz	r3, 80130a6 <_sbrk_r+0x1a>
 80130a4:	6023      	str	r3, [r4, #0]
 80130a6:	bd38      	pop	{r3, r4, r5, pc}
 80130a8:	20002bc4 	.word	0x20002bc4

080130ac <__errno>:
 80130ac:	4b01      	ldr	r3, [pc, #4]	@ (80130b4 <__errno+0x8>)
 80130ae:	6818      	ldr	r0, [r3, #0]
 80130b0:	4770      	bx	lr
 80130b2:	bf00      	nop
 80130b4:	20000074 	.word	0x20000074

080130b8 <__libc_init_array>:
 80130b8:	b570      	push	{r4, r5, r6, lr}
 80130ba:	4d0d      	ldr	r5, [pc, #52]	@ (80130f0 <__libc_init_array+0x38>)
 80130bc:	4c0d      	ldr	r4, [pc, #52]	@ (80130f4 <__libc_init_array+0x3c>)
 80130be:	1b64      	subs	r4, r4, r5
 80130c0:	10a4      	asrs	r4, r4, #2
 80130c2:	2600      	movs	r6, #0
 80130c4:	42a6      	cmp	r6, r4
 80130c6:	d109      	bne.n	80130dc <__libc_init_array+0x24>
 80130c8:	4d0b      	ldr	r5, [pc, #44]	@ (80130f8 <__libc_init_array+0x40>)
 80130ca:	4c0c      	ldr	r4, [pc, #48]	@ (80130fc <__libc_init_array+0x44>)
 80130cc:	f000 fbb0 	bl	8013830 <_init>
 80130d0:	1b64      	subs	r4, r4, r5
 80130d2:	10a4      	asrs	r4, r4, #2
 80130d4:	2600      	movs	r6, #0
 80130d6:	42a6      	cmp	r6, r4
 80130d8:	d105      	bne.n	80130e6 <__libc_init_array+0x2e>
 80130da:	bd70      	pop	{r4, r5, r6, pc}
 80130dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80130e0:	4798      	blx	r3
 80130e2:	3601      	adds	r6, #1
 80130e4:	e7ee      	b.n	80130c4 <__libc_init_array+0xc>
 80130e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80130ea:	4798      	blx	r3
 80130ec:	3601      	adds	r6, #1
 80130ee:	e7f2      	b.n	80130d6 <__libc_init_array+0x1e>
 80130f0:	08018f34 	.word	0x08018f34
 80130f4:	08018f34 	.word	0x08018f34
 80130f8:	08018f34 	.word	0x08018f34
 80130fc:	08018f38 	.word	0x08018f38

08013100 <__retarget_lock_acquire_recursive>:
 8013100:	4770      	bx	lr

08013102 <__retarget_lock_release_recursive>:
 8013102:	4770      	bx	lr

08013104 <strcpy>:
 8013104:	4603      	mov	r3, r0
 8013106:	f811 2b01 	ldrb.w	r2, [r1], #1
 801310a:	f803 2b01 	strb.w	r2, [r3], #1
 801310e:	2a00      	cmp	r2, #0
 8013110:	d1f9      	bne.n	8013106 <strcpy+0x2>
 8013112:	4770      	bx	lr

08013114 <memcpy>:
 8013114:	440a      	add	r2, r1
 8013116:	4291      	cmp	r1, r2
 8013118:	f100 33ff 	add.w	r3, r0, #4294967295
 801311c:	d100      	bne.n	8013120 <memcpy+0xc>
 801311e:	4770      	bx	lr
 8013120:	b510      	push	{r4, lr}
 8013122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013126:	f803 4f01 	strb.w	r4, [r3, #1]!
 801312a:	4291      	cmp	r1, r2
 801312c:	d1f9      	bne.n	8013122 <memcpy+0xe>
 801312e:	bd10      	pop	{r4, pc}

08013130 <_free_r>:
 8013130:	b538      	push	{r3, r4, r5, lr}
 8013132:	4605      	mov	r5, r0
 8013134:	2900      	cmp	r1, #0
 8013136:	d041      	beq.n	80131bc <_free_r+0x8c>
 8013138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801313c:	1f0c      	subs	r4, r1, #4
 801313e:	2b00      	cmp	r3, #0
 8013140:	bfb8      	it	lt
 8013142:	18e4      	addlt	r4, r4, r3
 8013144:	f7ff ff44 	bl	8012fd0 <__malloc_lock>
 8013148:	4a1d      	ldr	r2, [pc, #116]	@ (80131c0 <_free_r+0x90>)
 801314a:	6813      	ldr	r3, [r2, #0]
 801314c:	b933      	cbnz	r3, 801315c <_free_r+0x2c>
 801314e:	6063      	str	r3, [r4, #4]
 8013150:	6014      	str	r4, [r2, #0]
 8013152:	4628      	mov	r0, r5
 8013154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013158:	f7ff bf40 	b.w	8012fdc <__malloc_unlock>
 801315c:	42a3      	cmp	r3, r4
 801315e:	d908      	bls.n	8013172 <_free_r+0x42>
 8013160:	6820      	ldr	r0, [r4, #0]
 8013162:	1821      	adds	r1, r4, r0
 8013164:	428b      	cmp	r3, r1
 8013166:	bf01      	itttt	eq
 8013168:	6819      	ldreq	r1, [r3, #0]
 801316a:	685b      	ldreq	r3, [r3, #4]
 801316c:	1809      	addeq	r1, r1, r0
 801316e:	6021      	streq	r1, [r4, #0]
 8013170:	e7ed      	b.n	801314e <_free_r+0x1e>
 8013172:	461a      	mov	r2, r3
 8013174:	685b      	ldr	r3, [r3, #4]
 8013176:	b10b      	cbz	r3, 801317c <_free_r+0x4c>
 8013178:	42a3      	cmp	r3, r4
 801317a:	d9fa      	bls.n	8013172 <_free_r+0x42>
 801317c:	6811      	ldr	r1, [r2, #0]
 801317e:	1850      	adds	r0, r2, r1
 8013180:	42a0      	cmp	r0, r4
 8013182:	d10b      	bne.n	801319c <_free_r+0x6c>
 8013184:	6820      	ldr	r0, [r4, #0]
 8013186:	4401      	add	r1, r0
 8013188:	1850      	adds	r0, r2, r1
 801318a:	4283      	cmp	r3, r0
 801318c:	6011      	str	r1, [r2, #0]
 801318e:	d1e0      	bne.n	8013152 <_free_r+0x22>
 8013190:	6818      	ldr	r0, [r3, #0]
 8013192:	685b      	ldr	r3, [r3, #4]
 8013194:	6053      	str	r3, [r2, #4]
 8013196:	4408      	add	r0, r1
 8013198:	6010      	str	r0, [r2, #0]
 801319a:	e7da      	b.n	8013152 <_free_r+0x22>
 801319c:	d902      	bls.n	80131a4 <_free_r+0x74>
 801319e:	230c      	movs	r3, #12
 80131a0:	602b      	str	r3, [r5, #0]
 80131a2:	e7d6      	b.n	8013152 <_free_r+0x22>
 80131a4:	6820      	ldr	r0, [r4, #0]
 80131a6:	1821      	adds	r1, r4, r0
 80131a8:	428b      	cmp	r3, r1
 80131aa:	bf04      	itt	eq
 80131ac:	6819      	ldreq	r1, [r3, #0]
 80131ae:	685b      	ldreq	r3, [r3, #4]
 80131b0:	6063      	str	r3, [r4, #4]
 80131b2:	bf04      	itt	eq
 80131b4:	1809      	addeq	r1, r1, r0
 80131b6:	6021      	streq	r1, [r4, #0]
 80131b8:	6054      	str	r4, [r2, #4]
 80131ba:	e7ca      	b.n	8013152 <_free_r+0x22>
 80131bc:	bd38      	pop	{r3, r4, r5, pc}
 80131be:	bf00      	nop
 80131c0:	20002a88 	.word	0x20002a88

080131c4 <__ssputs_r>:
 80131c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131c8:	688e      	ldr	r6, [r1, #8]
 80131ca:	461f      	mov	r7, r3
 80131cc:	42be      	cmp	r6, r7
 80131ce:	680b      	ldr	r3, [r1, #0]
 80131d0:	4682      	mov	sl, r0
 80131d2:	460c      	mov	r4, r1
 80131d4:	4690      	mov	r8, r2
 80131d6:	d82d      	bhi.n	8013234 <__ssputs_r+0x70>
 80131d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80131dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80131e0:	d026      	beq.n	8013230 <__ssputs_r+0x6c>
 80131e2:	6965      	ldr	r5, [r4, #20]
 80131e4:	6909      	ldr	r1, [r1, #16]
 80131e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80131ea:	eba3 0901 	sub.w	r9, r3, r1
 80131ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80131f2:	1c7b      	adds	r3, r7, #1
 80131f4:	444b      	add	r3, r9
 80131f6:	106d      	asrs	r5, r5, #1
 80131f8:	429d      	cmp	r5, r3
 80131fa:	bf38      	it	cc
 80131fc:	461d      	movcc	r5, r3
 80131fe:	0553      	lsls	r3, r2, #21
 8013200:	d527      	bpl.n	8013252 <__ssputs_r+0x8e>
 8013202:	4629      	mov	r1, r5
 8013204:	f7ff fe64 	bl	8012ed0 <_malloc_r>
 8013208:	4606      	mov	r6, r0
 801320a:	b360      	cbz	r0, 8013266 <__ssputs_r+0xa2>
 801320c:	6921      	ldr	r1, [r4, #16]
 801320e:	464a      	mov	r2, r9
 8013210:	f7ff ff80 	bl	8013114 <memcpy>
 8013214:	89a3      	ldrh	r3, [r4, #12]
 8013216:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801321a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801321e:	81a3      	strh	r3, [r4, #12]
 8013220:	6126      	str	r6, [r4, #16]
 8013222:	6165      	str	r5, [r4, #20]
 8013224:	444e      	add	r6, r9
 8013226:	eba5 0509 	sub.w	r5, r5, r9
 801322a:	6026      	str	r6, [r4, #0]
 801322c:	60a5      	str	r5, [r4, #8]
 801322e:	463e      	mov	r6, r7
 8013230:	42be      	cmp	r6, r7
 8013232:	d900      	bls.n	8013236 <__ssputs_r+0x72>
 8013234:	463e      	mov	r6, r7
 8013236:	6820      	ldr	r0, [r4, #0]
 8013238:	4632      	mov	r2, r6
 801323a:	4641      	mov	r1, r8
 801323c:	f000 faa8 	bl	8013790 <memmove>
 8013240:	68a3      	ldr	r3, [r4, #8]
 8013242:	1b9b      	subs	r3, r3, r6
 8013244:	60a3      	str	r3, [r4, #8]
 8013246:	6823      	ldr	r3, [r4, #0]
 8013248:	4433      	add	r3, r6
 801324a:	6023      	str	r3, [r4, #0]
 801324c:	2000      	movs	r0, #0
 801324e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013252:	462a      	mov	r2, r5
 8013254:	f000 fab6 	bl	80137c4 <_realloc_r>
 8013258:	4606      	mov	r6, r0
 801325a:	2800      	cmp	r0, #0
 801325c:	d1e0      	bne.n	8013220 <__ssputs_r+0x5c>
 801325e:	6921      	ldr	r1, [r4, #16]
 8013260:	4650      	mov	r0, sl
 8013262:	f7ff ff65 	bl	8013130 <_free_r>
 8013266:	230c      	movs	r3, #12
 8013268:	f8ca 3000 	str.w	r3, [sl]
 801326c:	89a3      	ldrh	r3, [r4, #12]
 801326e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013272:	81a3      	strh	r3, [r4, #12]
 8013274:	f04f 30ff 	mov.w	r0, #4294967295
 8013278:	e7e9      	b.n	801324e <__ssputs_r+0x8a>
	...

0801327c <_svfiprintf_r>:
 801327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013280:	4698      	mov	r8, r3
 8013282:	898b      	ldrh	r3, [r1, #12]
 8013284:	061b      	lsls	r3, r3, #24
 8013286:	b09d      	sub	sp, #116	@ 0x74
 8013288:	4607      	mov	r7, r0
 801328a:	460d      	mov	r5, r1
 801328c:	4614      	mov	r4, r2
 801328e:	d510      	bpl.n	80132b2 <_svfiprintf_r+0x36>
 8013290:	690b      	ldr	r3, [r1, #16]
 8013292:	b973      	cbnz	r3, 80132b2 <_svfiprintf_r+0x36>
 8013294:	2140      	movs	r1, #64	@ 0x40
 8013296:	f7ff fe1b 	bl	8012ed0 <_malloc_r>
 801329a:	6028      	str	r0, [r5, #0]
 801329c:	6128      	str	r0, [r5, #16]
 801329e:	b930      	cbnz	r0, 80132ae <_svfiprintf_r+0x32>
 80132a0:	230c      	movs	r3, #12
 80132a2:	603b      	str	r3, [r7, #0]
 80132a4:	f04f 30ff 	mov.w	r0, #4294967295
 80132a8:	b01d      	add	sp, #116	@ 0x74
 80132aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132ae:	2340      	movs	r3, #64	@ 0x40
 80132b0:	616b      	str	r3, [r5, #20]
 80132b2:	2300      	movs	r3, #0
 80132b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80132b6:	2320      	movs	r3, #32
 80132b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80132bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80132c0:	2330      	movs	r3, #48	@ 0x30
 80132c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013460 <_svfiprintf_r+0x1e4>
 80132c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80132ca:	f04f 0901 	mov.w	r9, #1
 80132ce:	4623      	mov	r3, r4
 80132d0:	469a      	mov	sl, r3
 80132d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132d6:	b10a      	cbz	r2, 80132dc <_svfiprintf_r+0x60>
 80132d8:	2a25      	cmp	r2, #37	@ 0x25
 80132da:	d1f9      	bne.n	80132d0 <_svfiprintf_r+0x54>
 80132dc:	ebba 0b04 	subs.w	fp, sl, r4
 80132e0:	d00b      	beq.n	80132fa <_svfiprintf_r+0x7e>
 80132e2:	465b      	mov	r3, fp
 80132e4:	4622      	mov	r2, r4
 80132e6:	4629      	mov	r1, r5
 80132e8:	4638      	mov	r0, r7
 80132ea:	f7ff ff6b 	bl	80131c4 <__ssputs_r>
 80132ee:	3001      	adds	r0, #1
 80132f0:	f000 80a7 	beq.w	8013442 <_svfiprintf_r+0x1c6>
 80132f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80132f6:	445a      	add	r2, fp
 80132f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80132fa:	f89a 3000 	ldrb.w	r3, [sl]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	f000 809f 	beq.w	8013442 <_svfiprintf_r+0x1c6>
 8013304:	2300      	movs	r3, #0
 8013306:	f04f 32ff 	mov.w	r2, #4294967295
 801330a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801330e:	f10a 0a01 	add.w	sl, sl, #1
 8013312:	9304      	str	r3, [sp, #16]
 8013314:	9307      	str	r3, [sp, #28]
 8013316:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801331a:	931a      	str	r3, [sp, #104]	@ 0x68
 801331c:	4654      	mov	r4, sl
 801331e:	2205      	movs	r2, #5
 8013320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013324:	484e      	ldr	r0, [pc, #312]	@ (8013460 <_svfiprintf_r+0x1e4>)
 8013326:	f7ec ff63 	bl	80001f0 <memchr>
 801332a:	9a04      	ldr	r2, [sp, #16]
 801332c:	b9d8      	cbnz	r0, 8013366 <_svfiprintf_r+0xea>
 801332e:	06d0      	lsls	r0, r2, #27
 8013330:	bf44      	itt	mi
 8013332:	2320      	movmi	r3, #32
 8013334:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013338:	0711      	lsls	r1, r2, #28
 801333a:	bf44      	itt	mi
 801333c:	232b      	movmi	r3, #43	@ 0x2b
 801333e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013342:	f89a 3000 	ldrb.w	r3, [sl]
 8013346:	2b2a      	cmp	r3, #42	@ 0x2a
 8013348:	d015      	beq.n	8013376 <_svfiprintf_r+0xfa>
 801334a:	9a07      	ldr	r2, [sp, #28]
 801334c:	4654      	mov	r4, sl
 801334e:	2000      	movs	r0, #0
 8013350:	f04f 0c0a 	mov.w	ip, #10
 8013354:	4621      	mov	r1, r4
 8013356:	f811 3b01 	ldrb.w	r3, [r1], #1
 801335a:	3b30      	subs	r3, #48	@ 0x30
 801335c:	2b09      	cmp	r3, #9
 801335e:	d94b      	bls.n	80133f8 <_svfiprintf_r+0x17c>
 8013360:	b1b0      	cbz	r0, 8013390 <_svfiprintf_r+0x114>
 8013362:	9207      	str	r2, [sp, #28]
 8013364:	e014      	b.n	8013390 <_svfiprintf_r+0x114>
 8013366:	eba0 0308 	sub.w	r3, r0, r8
 801336a:	fa09 f303 	lsl.w	r3, r9, r3
 801336e:	4313      	orrs	r3, r2
 8013370:	9304      	str	r3, [sp, #16]
 8013372:	46a2      	mov	sl, r4
 8013374:	e7d2      	b.n	801331c <_svfiprintf_r+0xa0>
 8013376:	9b03      	ldr	r3, [sp, #12]
 8013378:	1d19      	adds	r1, r3, #4
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	9103      	str	r1, [sp, #12]
 801337e:	2b00      	cmp	r3, #0
 8013380:	bfbb      	ittet	lt
 8013382:	425b      	neglt	r3, r3
 8013384:	f042 0202 	orrlt.w	r2, r2, #2
 8013388:	9307      	strge	r3, [sp, #28]
 801338a:	9307      	strlt	r3, [sp, #28]
 801338c:	bfb8      	it	lt
 801338e:	9204      	strlt	r2, [sp, #16]
 8013390:	7823      	ldrb	r3, [r4, #0]
 8013392:	2b2e      	cmp	r3, #46	@ 0x2e
 8013394:	d10a      	bne.n	80133ac <_svfiprintf_r+0x130>
 8013396:	7863      	ldrb	r3, [r4, #1]
 8013398:	2b2a      	cmp	r3, #42	@ 0x2a
 801339a:	d132      	bne.n	8013402 <_svfiprintf_r+0x186>
 801339c:	9b03      	ldr	r3, [sp, #12]
 801339e:	1d1a      	adds	r2, r3, #4
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	9203      	str	r2, [sp, #12]
 80133a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80133a8:	3402      	adds	r4, #2
 80133aa:	9305      	str	r3, [sp, #20]
 80133ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013470 <_svfiprintf_r+0x1f4>
 80133b0:	7821      	ldrb	r1, [r4, #0]
 80133b2:	2203      	movs	r2, #3
 80133b4:	4650      	mov	r0, sl
 80133b6:	f7ec ff1b 	bl	80001f0 <memchr>
 80133ba:	b138      	cbz	r0, 80133cc <_svfiprintf_r+0x150>
 80133bc:	9b04      	ldr	r3, [sp, #16]
 80133be:	eba0 000a 	sub.w	r0, r0, sl
 80133c2:	2240      	movs	r2, #64	@ 0x40
 80133c4:	4082      	lsls	r2, r0
 80133c6:	4313      	orrs	r3, r2
 80133c8:	3401      	adds	r4, #1
 80133ca:	9304      	str	r3, [sp, #16]
 80133cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133d0:	4824      	ldr	r0, [pc, #144]	@ (8013464 <_svfiprintf_r+0x1e8>)
 80133d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80133d6:	2206      	movs	r2, #6
 80133d8:	f7ec ff0a 	bl	80001f0 <memchr>
 80133dc:	2800      	cmp	r0, #0
 80133de:	d036      	beq.n	801344e <_svfiprintf_r+0x1d2>
 80133e0:	4b21      	ldr	r3, [pc, #132]	@ (8013468 <_svfiprintf_r+0x1ec>)
 80133e2:	bb1b      	cbnz	r3, 801342c <_svfiprintf_r+0x1b0>
 80133e4:	9b03      	ldr	r3, [sp, #12]
 80133e6:	3307      	adds	r3, #7
 80133e8:	f023 0307 	bic.w	r3, r3, #7
 80133ec:	3308      	adds	r3, #8
 80133ee:	9303      	str	r3, [sp, #12]
 80133f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133f2:	4433      	add	r3, r6
 80133f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80133f6:	e76a      	b.n	80132ce <_svfiprintf_r+0x52>
 80133f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80133fc:	460c      	mov	r4, r1
 80133fe:	2001      	movs	r0, #1
 8013400:	e7a8      	b.n	8013354 <_svfiprintf_r+0xd8>
 8013402:	2300      	movs	r3, #0
 8013404:	3401      	adds	r4, #1
 8013406:	9305      	str	r3, [sp, #20]
 8013408:	4619      	mov	r1, r3
 801340a:	f04f 0c0a 	mov.w	ip, #10
 801340e:	4620      	mov	r0, r4
 8013410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013414:	3a30      	subs	r2, #48	@ 0x30
 8013416:	2a09      	cmp	r2, #9
 8013418:	d903      	bls.n	8013422 <_svfiprintf_r+0x1a6>
 801341a:	2b00      	cmp	r3, #0
 801341c:	d0c6      	beq.n	80133ac <_svfiprintf_r+0x130>
 801341e:	9105      	str	r1, [sp, #20]
 8013420:	e7c4      	b.n	80133ac <_svfiprintf_r+0x130>
 8013422:	fb0c 2101 	mla	r1, ip, r1, r2
 8013426:	4604      	mov	r4, r0
 8013428:	2301      	movs	r3, #1
 801342a:	e7f0      	b.n	801340e <_svfiprintf_r+0x192>
 801342c:	ab03      	add	r3, sp, #12
 801342e:	9300      	str	r3, [sp, #0]
 8013430:	462a      	mov	r2, r5
 8013432:	4b0e      	ldr	r3, [pc, #56]	@ (801346c <_svfiprintf_r+0x1f0>)
 8013434:	a904      	add	r1, sp, #16
 8013436:	4638      	mov	r0, r7
 8013438:	f3af 8000 	nop.w
 801343c:	1c42      	adds	r2, r0, #1
 801343e:	4606      	mov	r6, r0
 8013440:	d1d6      	bne.n	80133f0 <_svfiprintf_r+0x174>
 8013442:	89ab      	ldrh	r3, [r5, #12]
 8013444:	065b      	lsls	r3, r3, #25
 8013446:	f53f af2d 	bmi.w	80132a4 <_svfiprintf_r+0x28>
 801344a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801344c:	e72c      	b.n	80132a8 <_svfiprintf_r+0x2c>
 801344e:	ab03      	add	r3, sp, #12
 8013450:	9300      	str	r3, [sp, #0]
 8013452:	462a      	mov	r2, r5
 8013454:	4b05      	ldr	r3, [pc, #20]	@ (801346c <_svfiprintf_r+0x1f0>)
 8013456:	a904      	add	r1, sp, #16
 8013458:	4638      	mov	r0, r7
 801345a:	f000 f879 	bl	8013550 <_printf_i>
 801345e:	e7ed      	b.n	801343c <_svfiprintf_r+0x1c0>
 8013460:	08018ef8 	.word	0x08018ef8
 8013464:	08018f02 	.word	0x08018f02
 8013468:	00000000 	.word	0x00000000
 801346c:	080131c5 	.word	0x080131c5
 8013470:	08018efe 	.word	0x08018efe

08013474 <_printf_common>:
 8013474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013478:	4616      	mov	r6, r2
 801347a:	4698      	mov	r8, r3
 801347c:	688a      	ldr	r2, [r1, #8]
 801347e:	690b      	ldr	r3, [r1, #16]
 8013480:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013484:	4293      	cmp	r3, r2
 8013486:	bfb8      	it	lt
 8013488:	4613      	movlt	r3, r2
 801348a:	6033      	str	r3, [r6, #0]
 801348c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013490:	4607      	mov	r7, r0
 8013492:	460c      	mov	r4, r1
 8013494:	b10a      	cbz	r2, 801349a <_printf_common+0x26>
 8013496:	3301      	adds	r3, #1
 8013498:	6033      	str	r3, [r6, #0]
 801349a:	6823      	ldr	r3, [r4, #0]
 801349c:	0699      	lsls	r1, r3, #26
 801349e:	bf42      	ittt	mi
 80134a0:	6833      	ldrmi	r3, [r6, #0]
 80134a2:	3302      	addmi	r3, #2
 80134a4:	6033      	strmi	r3, [r6, #0]
 80134a6:	6825      	ldr	r5, [r4, #0]
 80134a8:	f015 0506 	ands.w	r5, r5, #6
 80134ac:	d106      	bne.n	80134bc <_printf_common+0x48>
 80134ae:	f104 0a19 	add.w	sl, r4, #25
 80134b2:	68e3      	ldr	r3, [r4, #12]
 80134b4:	6832      	ldr	r2, [r6, #0]
 80134b6:	1a9b      	subs	r3, r3, r2
 80134b8:	42ab      	cmp	r3, r5
 80134ba:	dc26      	bgt.n	801350a <_printf_common+0x96>
 80134bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80134c0:	6822      	ldr	r2, [r4, #0]
 80134c2:	3b00      	subs	r3, #0
 80134c4:	bf18      	it	ne
 80134c6:	2301      	movne	r3, #1
 80134c8:	0692      	lsls	r2, r2, #26
 80134ca:	d42b      	bmi.n	8013524 <_printf_common+0xb0>
 80134cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80134d0:	4641      	mov	r1, r8
 80134d2:	4638      	mov	r0, r7
 80134d4:	47c8      	blx	r9
 80134d6:	3001      	adds	r0, #1
 80134d8:	d01e      	beq.n	8013518 <_printf_common+0xa4>
 80134da:	6823      	ldr	r3, [r4, #0]
 80134dc:	6922      	ldr	r2, [r4, #16]
 80134de:	f003 0306 	and.w	r3, r3, #6
 80134e2:	2b04      	cmp	r3, #4
 80134e4:	bf02      	ittt	eq
 80134e6:	68e5      	ldreq	r5, [r4, #12]
 80134e8:	6833      	ldreq	r3, [r6, #0]
 80134ea:	1aed      	subeq	r5, r5, r3
 80134ec:	68a3      	ldr	r3, [r4, #8]
 80134ee:	bf0c      	ite	eq
 80134f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80134f4:	2500      	movne	r5, #0
 80134f6:	4293      	cmp	r3, r2
 80134f8:	bfc4      	itt	gt
 80134fa:	1a9b      	subgt	r3, r3, r2
 80134fc:	18ed      	addgt	r5, r5, r3
 80134fe:	2600      	movs	r6, #0
 8013500:	341a      	adds	r4, #26
 8013502:	42b5      	cmp	r5, r6
 8013504:	d11a      	bne.n	801353c <_printf_common+0xc8>
 8013506:	2000      	movs	r0, #0
 8013508:	e008      	b.n	801351c <_printf_common+0xa8>
 801350a:	2301      	movs	r3, #1
 801350c:	4652      	mov	r2, sl
 801350e:	4641      	mov	r1, r8
 8013510:	4638      	mov	r0, r7
 8013512:	47c8      	blx	r9
 8013514:	3001      	adds	r0, #1
 8013516:	d103      	bne.n	8013520 <_printf_common+0xac>
 8013518:	f04f 30ff 	mov.w	r0, #4294967295
 801351c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013520:	3501      	adds	r5, #1
 8013522:	e7c6      	b.n	80134b2 <_printf_common+0x3e>
 8013524:	18e1      	adds	r1, r4, r3
 8013526:	1c5a      	adds	r2, r3, #1
 8013528:	2030      	movs	r0, #48	@ 0x30
 801352a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801352e:	4422      	add	r2, r4
 8013530:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013534:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013538:	3302      	adds	r3, #2
 801353a:	e7c7      	b.n	80134cc <_printf_common+0x58>
 801353c:	2301      	movs	r3, #1
 801353e:	4622      	mov	r2, r4
 8013540:	4641      	mov	r1, r8
 8013542:	4638      	mov	r0, r7
 8013544:	47c8      	blx	r9
 8013546:	3001      	adds	r0, #1
 8013548:	d0e6      	beq.n	8013518 <_printf_common+0xa4>
 801354a:	3601      	adds	r6, #1
 801354c:	e7d9      	b.n	8013502 <_printf_common+0x8e>
	...

08013550 <_printf_i>:
 8013550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013554:	7e0f      	ldrb	r7, [r1, #24]
 8013556:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013558:	2f78      	cmp	r7, #120	@ 0x78
 801355a:	4691      	mov	r9, r2
 801355c:	4680      	mov	r8, r0
 801355e:	460c      	mov	r4, r1
 8013560:	469a      	mov	sl, r3
 8013562:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013566:	d807      	bhi.n	8013578 <_printf_i+0x28>
 8013568:	2f62      	cmp	r7, #98	@ 0x62
 801356a:	d80a      	bhi.n	8013582 <_printf_i+0x32>
 801356c:	2f00      	cmp	r7, #0
 801356e:	f000 80d2 	beq.w	8013716 <_printf_i+0x1c6>
 8013572:	2f58      	cmp	r7, #88	@ 0x58
 8013574:	f000 80b9 	beq.w	80136ea <_printf_i+0x19a>
 8013578:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801357c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013580:	e03a      	b.n	80135f8 <_printf_i+0xa8>
 8013582:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013586:	2b15      	cmp	r3, #21
 8013588:	d8f6      	bhi.n	8013578 <_printf_i+0x28>
 801358a:	a101      	add	r1, pc, #4	@ (adr r1, 8013590 <_printf_i+0x40>)
 801358c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013590:	080135e9 	.word	0x080135e9
 8013594:	080135fd 	.word	0x080135fd
 8013598:	08013579 	.word	0x08013579
 801359c:	08013579 	.word	0x08013579
 80135a0:	08013579 	.word	0x08013579
 80135a4:	08013579 	.word	0x08013579
 80135a8:	080135fd 	.word	0x080135fd
 80135ac:	08013579 	.word	0x08013579
 80135b0:	08013579 	.word	0x08013579
 80135b4:	08013579 	.word	0x08013579
 80135b8:	08013579 	.word	0x08013579
 80135bc:	080136fd 	.word	0x080136fd
 80135c0:	08013627 	.word	0x08013627
 80135c4:	080136b7 	.word	0x080136b7
 80135c8:	08013579 	.word	0x08013579
 80135cc:	08013579 	.word	0x08013579
 80135d0:	0801371f 	.word	0x0801371f
 80135d4:	08013579 	.word	0x08013579
 80135d8:	08013627 	.word	0x08013627
 80135dc:	08013579 	.word	0x08013579
 80135e0:	08013579 	.word	0x08013579
 80135e4:	080136bf 	.word	0x080136bf
 80135e8:	6833      	ldr	r3, [r6, #0]
 80135ea:	1d1a      	adds	r2, r3, #4
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	6032      	str	r2, [r6, #0]
 80135f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80135f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80135f8:	2301      	movs	r3, #1
 80135fa:	e09d      	b.n	8013738 <_printf_i+0x1e8>
 80135fc:	6833      	ldr	r3, [r6, #0]
 80135fe:	6820      	ldr	r0, [r4, #0]
 8013600:	1d19      	adds	r1, r3, #4
 8013602:	6031      	str	r1, [r6, #0]
 8013604:	0606      	lsls	r6, r0, #24
 8013606:	d501      	bpl.n	801360c <_printf_i+0xbc>
 8013608:	681d      	ldr	r5, [r3, #0]
 801360a:	e003      	b.n	8013614 <_printf_i+0xc4>
 801360c:	0645      	lsls	r5, r0, #25
 801360e:	d5fb      	bpl.n	8013608 <_printf_i+0xb8>
 8013610:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013614:	2d00      	cmp	r5, #0
 8013616:	da03      	bge.n	8013620 <_printf_i+0xd0>
 8013618:	232d      	movs	r3, #45	@ 0x2d
 801361a:	426d      	negs	r5, r5
 801361c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013620:	4859      	ldr	r0, [pc, #356]	@ (8013788 <_printf_i+0x238>)
 8013622:	230a      	movs	r3, #10
 8013624:	e011      	b.n	801364a <_printf_i+0xfa>
 8013626:	6821      	ldr	r1, [r4, #0]
 8013628:	6833      	ldr	r3, [r6, #0]
 801362a:	0608      	lsls	r0, r1, #24
 801362c:	f853 5b04 	ldr.w	r5, [r3], #4
 8013630:	d402      	bmi.n	8013638 <_printf_i+0xe8>
 8013632:	0649      	lsls	r1, r1, #25
 8013634:	bf48      	it	mi
 8013636:	b2ad      	uxthmi	r5, r5
 8013638:	2f6f      	cmp	r7, #111	@ 0x6f
 801363a:	4853      	ldr	r0, [pc, #332]	@ (8013788 <_printf_i+0x238>)
 801363c:	6033      	str	r3, [r6, #0]
 801363e:	bf14      	ite	ne
 8013640:	230a      	movne	r3, #10
 8013642:	2308      	moveq	r3, #8
 8013644:	2100      	movs	r1, #0
 8013646:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801364a:	6866      	ldr	r6, [r4, #4]
 801364c:	60a6      	str	r6, [r4, #8]
 801364e:	2e00      	cmp	r6, #0
 8013650:	bfa2      	ittt	ge
 8013652:	6821      	ldrge	r1, [r4, #0]
 8013654:	f021 0104 	bicge.w	r1, r1, #4
 8013658:	6021      	strge	r1, [r4, #0]
 801365a:	b90d      	cbnz	r5, 8013660 <_printf_i+0x110>
 801365c:	2e00      	cmp	r6, #0
 801365e:	d04b      	beq.n	80136f8 <_printf_i+0x1a8>
 8013660:	4616      	mov	r6, r2
 8013662:	fbb5 f1f3 	udiv	r1, r5, r3
 8013666:	fb03 5711 	mls	r7, r3, r1, r5
 801366a:	5dc7      	ldrb	r7, [r0, r7]
 801366c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013670:	462f      	mov	r7, r5
 8013672:	42bb      	cmp	r3, r7
 8013674:	460d      	mov	r5, r1
 8013676:	d9f4      	bls.n	8013662 <_printf_i+0x112>
 8013678:	2b08      	cmp	r3, #8
 801367a:	d10b      	bne.n	8013694 <_printf_i+0x144>
 801367c:	6823      	ldr	r3, [r4, #0]
 801367e:	07df      	lsls	r7, r3, #31
 8013680:	d508      	bpl.n	8013694 <_printf_i+0x144>
 8013682:	6923      	ldr	r3, [r4, #16]
 8013684:	6861      	ldr	r1, [r4, #4]
 8013686:	4299      	cmp	r1, r3
 8013688:	bfde      	ittt	le
 801368a:	2330      	movle	r3, #48	@ 0x30
 801368c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013690:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013694:	1b92      	subs	r2, r2, r6
 8013696:	6122      	str	r2, [r4, #16]
 8013698:	f8cd a000 	str.w	sl, [sp]
 801369c:	464b      	mov	r3, r9
 801369e:	aa03      	add	r2, sp, #12
 80136a0:	4621      	mov	r1, r4
 80136a2:	4640      	mov	r0, r8
 80136a4:	f7ff fee6 	bl	8013474 <_printf_common>
 80136a8:	3001      	adds	r0, #1
 80136aa:	d14a      	bne.n	8013742 <_printf_i+0x1f2>
 80136ac:	f04f 30ff 	mov.w	r0, #4294967295
 80136b0:	b004      	add	sp, #16
 80136b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136b6:	6823      	ldr	r3, [r4, #0]
 80136b8:	f043 0320 	orr.w	r3, r3, #32
 80136bc:	6023      	str	r3, [r4, #0]
 80136be:	4833      	ldr	r0, [pc, #204]	@ (801378c <_printf_i+0x23c>)
 80136c0:	2778      	movs	r7, #120	@ 0x78
 80136c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80136c6:	6823      	ldr	r3, [r4, #0]
 80136c8:	6831      	ldr	r1, [r6, #0]
 80136ca:	061f      	lsls	r7, r3, #24
 80136cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80136d0:	d402      	bmi.n	80136d8 <_printf_i+0x188>
 80136d2:	065f      	lsls	r7, r3, #25
 80136d4:	bf48      	it	mi
 80136d6:	b2ad      	uxthmi	r5, r5
 80136d8:	6031      	str	r1, [r6, #0]
 80136da:	07d9      	lsls	r1, r3, #31
 80136dc:	bf44      	itt	mi
 80136de:	f043 0320 	orrmi.w	r3, r3, #32
 80136e2:	6023      	strmi	r3, [r4, #0]
 80136e4:	b11d      	cbz	r5, 80136ee <_printf_i+0x19e>
 80136e6:	2310      	movs	r3, #16
 80136e8:	e7ac      	b.n	8013644 <_printf_i+0xf4>
 80136ea:	4827      	ldr	r0, [pc, #156]	@ (8013788 <_printf_i+0x238>)
 80136ec:	e7e9      	b.n	80136c2 <_printf_i+0x172>
 80136ee:	6823      	ldr	r3, [r4, #0]
 80136f0:	f023 0320 	bic.w	r3, r3, #32
 80136f4:	6023      	str	r3, [r4, #0]
 80136f6:	e7f6      	b.n	80136e6 <_printf_i+0x196>
 80136f8:	4616      	mov	r6, r2
 80136fa:	e7bd      	b.n	8013678 <_printf_i+0x128>
 80136fc:	6833      	ldr	r3, [r6, #0]
 80136fe:	6825      	ldr	r5, [r4, #0]
 8013700:	6961      	ldr	r1, [r4, #20]
 8013702:	1d18      	adds	r0, r3, #4
 8013704:	6030      	str	r0, [r6, #0]
 8013706:	062e      	lsls	r6, r5, #24
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	d501      	bpl.n	8013710 <_printf_i+0x1c0>
 801370c:	6019      	str	r1, [r3, #0]
 801370e:	e002      	b.n	8013716 <_printf_i+0x1c6>
 8013710:	0668      	lsls	r0, r5, #25
 8013712:	d5fb      	bpl.n	801370c <_printf_i+0x1bc>
 8013714:	8019      	strh	r1, [r3, #0]
 8013716:	2300      	movs	r3, #0
 8013718:	6123      	str	r3, [r4, #16]
 801371a:	4616      	mov	r6, r2
 801371c:	e7bc      	b.n	8013698 <_printf_i+0x148>
 801371e:	6833      	ldr	r3, [r6, #0]
 8013720:	1d1a      	adds	r2, r3, #4
 8013722:	6032      	str	r2, [r6, #0]
 8013724:	681e      	ldr	r6, [r3, #0]
 8013726:	6862      	ldr	r2, [r4, #4]
 8013728:	2100      	movs	r1, #0
 801372a:	4630      	mov	r0, r6
 801372c:	f7ec fd60 	bl	80001f0 <memchr>
 8013730:	b108      	cbz	r0, 8013736 <_printf_i+0x1e6>
 8013732:	1b80      	subs	r0, r0, r6
 8013734:	6060      	str	r0, [r4, #4]
 8013736:	6863      	ldr	r3, [r4, #4]
 8013738:	6123      	str	r3, [r4, #16]
 801373a:	2300      	movs	r3, #0
 801373c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013740:	e7aa      	b.n	8013698 <_printf_i+0x148>
 8013742:	6923      	ldr	r3, [r4, #16]
 8013744:	4632      	mov	r2, r6
 8013746:	4649      	mov	r1, r9
 8013748:	4640      	mov	r0, r8
 801374a:	47d0      	blx	sl
 801374c:	3001      	adds	r0, #1
 801374e:	d0ad      	beq.n	80136ac <_printf_i+0x15c>
 8013750:	6823      	ldr	r3, [r4, #0]
 8013752:	079b      	lsls	r3, r3, #30
 8013754:	d413      	bmi.n	801377e <_printf_i+0x22e>
 8013756:	68e0      	ldr	r0, [r4, #12]
 8013758:	9b03      	ldr	r3, [sp, #12]
 801375a:	4298      	cmp	r0, r3
 801375c:	bfb8      	it	lt
 801375e:	4618      	movlt	r0, r3
 8013760:	e7a6      	b.n	80136b0 <_printf_i+0x160>
 8013762:	2301      	movs	r3, #1
 8013764:	4632      	mov	r2, r6
 8013766:	4649      	mov	r1, r9
 8013768:	4640      	mov	r0, r8
 801376a:	47d0      	blx	sl
 801376c:	3001      	adds	r0, #1
 801376e:	d09d      	beq.n	80136ac <_printf_i+0x15c>
 8013770:	3501      	adds	r5, #1
 8013772:	68e3      	ldr	r3, [r4, #12]
 8013774:	9903      	ldr	r1, [sp, #12]
 8013776:	1a5b      	subs	r3, r3, r1
 8013778:	42ab      	cmp	r3, r5
 801377a:	dcf2      	bgt.n	8013762 <_printf_i+0x212>
 801377c:	e7eb      	b.n	8013756 <_printf_i+0x206>
 801377e:	2500      	movs	r5, #0
 8013780:	f104 0619 	add.w	r6, r4, #25
 8013784:	e7f5      	b.n	8013772 <_printf_i+0x222>
 8013786:	bf00      	nop
 8013788:	08018f09 	.word	0x08018f09
 801378c:	08018f1a 	.word	0x08018f1a

08013790 <memmove>:
 8013790:	4288      	cmp	r0, r1
 8013792:	b510      	push	{r4, lr}
 8013794:	eb01 0402 	add.w	r4, r1, r2
 8013798:	d902      	bls.n	80137a0 <memmove+0x10>
 801379a:	4284      	cmp	r4, r0
 801379c:	4623      	mov	r3, r4
 801379e:	d807      	bhi.n	80137b0 <memmove+0x20>
 80137a0:	1e43      	subs	r3, r0, #1
 80137a2:	42a1      	cmp	r1, r4
 80137a4:	d008      	beq.n	80137b8 <memmove+0x28>
 80137a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80137aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80137ae:	e7f8      	b.n	80137a2 <memmove+0x12>
 80137b0:	4402      	add	r2, r0
 80137b2:	4601      	mov	r1, r0
 80137b4:	428a      	cmp	r2, r1
 80137b6:	d100      	bne.n	80137ba <memmove+0x2a>
 80137b8:	bd10      	pop	{r4, pc}
 80137ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80137be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80137c2:	e7f7      	b.n	80137b4 <memmove+0x24>

080137c4 <_realloc_r>:
 80137c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137c8:	4680      	mov	r8, r0
 80137ca:	4615      	mov	r5, r2
 80137cc:	460c      	mov	r4, r1
 80137ce:	b921      	cbnz	r1, 80137da <_realloc_r+0x16>
 80137d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137d4:	4611      	mov	r1, r2
 80137d6:	f7ff bb7b 	b.w	8012ed0 <_malloc_r>
 80137da:	b92a      	cbnz	r2, 80137e8 <_realloc_r+0x24>
 80137dc:	f7ff fca8 	bl	8013130 <_free_r>
 80137e0:	2400      	movs	r4, #0
 80137e2:	4620      	mov	r0, r4
 80137e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137e8:	f000 f81a 	bl	8013820 <_malloc_usable_size_r>
 80137ec:	4285      	cmp	r5, r0
 80137ee:	4606      	mov	r6, r0
 80137f0:	d802      	bhi.n	80137f8 <_realloc_r+0x34>
 80137f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80137f6:	d8f4      	bhi.n	80137e2 <_realloc_r+0x1e>
 80137f8:	4629      	mov	r1, r5
 80137fa:	4640      	mov	r0, r8
 80137fc:	f7ff fb68 	bl	8012ed0 <_malloc_r>
 8013800:	4607      	mov	r7, r0
 8013802:	2800      	cmp	r0, #0
 8013804:	d0ec      	beq.n	80137e0 <_realloc_r+0x1c>
 8013806:	42b5      	cmp	r5, r6
 8013808:	462a      	mov	r2, r5
 801380a:	4621      	mov	r1, r4
 801380c:	bf28      	it	cs
 801380e:	4632      	movcs	r2, r6
 8013810:	f7ff fc80 	bl	8013114 <memcpy>
 8013814:	4621      	mov	r1, r4
 8013816:	4640      	mov	r0, r8
 8013818:	f7ff fc8a 	bl	8013130 <_free_r>
 801381c:	463c      	mov	r4, r7
 801381e:	e7e0      	b.n	80137e2 <_realloc_r+0x1e>

08013820 <_malloc_usable_size_r>:
 8013820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013824:	1f18      	subs	r0, r3, #4
 8013826:	2b00      	cmp	r3, #0
 8013828:	bfbc      	itt	lt
 801382a:	580b      	ldrlt	r3, [r1, r0]
 801382c:	18c0      	addlt	r0, r0, r3
 801382e:	4770      	bx	lr

08013830 <_init>:
 8013830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013832:	bf00      	nop
 8013834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013836:	bc08      	pop	{r3}
 8013838:	469e      	mov	lr, r3
 801383a:	4770      	bx	lr

0801383c <_fini>:
 801383c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801383e:	bf00      	nop
 8013840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013842:	bc08      	pop	{r3}
 8013844:	469e      	mov	lr, r3
 8013846:	4770      	bx	lr
