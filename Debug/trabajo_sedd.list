
trabajo_sedd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012240  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000056ac  080123d8  080123d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017a84  08017a84  000190c4  2**0
                  CONTENTS
  4 .ARM          00000008  08017a84  08017a84  00018a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017a8c  08017a8c  000190c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017a8c  08017a8c  00018a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017a90  08017a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08017a94  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ab4  200000c4  08017b58  000190c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002b78  08017b58  00019b78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000190c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000245af  00000000  00000000  000190f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006036  00000000  00000000  0003d6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c98  00000000  00000000  000436e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015f1  00000000  00000000  00045378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de24  00000000  00000000  00046969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b9b7  00000000  00000000  0006478d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098f0e  00000000  00000000  00090144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129052  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000798c  00000000  00000000  00129098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00130a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000c4 	.word	0x200000c4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080123c0 	.word	0x080123c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000c8 	.word	0x200000c8
 80001d4:	080123c0 	.word	0x080123c0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	603a      	str	r2, [r7, #0]
 80004e2:	80fb      	strh	r3, [r7, #6]
 80004e4:	460b      	mov	r3, r1
 80004e6:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80004e8:	2300      	movs	r3, #0
 80004ea:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80004ec:	2200      	movs	r2, #0
 80004ee:	6839      	ldr	r1, [r7, #0]
 80004f0:	481c      	ldr	r0, [pc, #112]	@ (8000564 <AUDIO_OUT_Init+0x8c>)
 80004f2:	f000 f8f9 	bl	80006e8 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80004f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000564 <AUDIO_OUT_Init+0x8c>)
 80004f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000568 <AUDIO_OUT_Init+0x90>)
 80004fa:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80004fc:	4819      	ldr	r0, [pc, #100]	@ (8000564 <AUDIO_OUT_Init+0x8c>)
 80004fe:	f008 f879 	bl	80085f4 <HAL_I2S_GetState>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d103      	bne.n	8000510 <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8000508:	2100      	movs	r1, #0
 800050a:	4816      	ldr	r0, [pc, #88]	@ (8000564 <AUDIO_OUT_Init+0x8c>)
 800050c:	f000 f94a 	bl	80007a4 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 8000510:	6838      	ldr	r0, [r7, #0]
 8000512:	f000 fa0f 	bl	8000934 <I2S3_Init>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 800051c:	2301      	movs	r3, #1
 800051e:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d10e      	bne.n	8000544 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8000526:	4b11      	ldr	r3, [pc, #68]	@ (800056c <AUDIO_OUT_Init+0x94>)
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	2094      	movs	r0, #148	@ 0x94
 800052c:	4798      	blx	r3
 800052e:	4603      	mov	r3, r0
 8000530:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8000534:	2be0      	cmp	r3, #224	@ 0xe0
 8000536:	d103      	bne.n	8000540 <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 8000538:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <AUDIO_OUT_Init+0x98>)
 800053a:	4a0c      	ldr	r2, [pc, #48]	@ (800056c <AUDIO_OUT_Init+0x94>)
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	e001      	b.n	8000544 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 8000540:	2301      	movs	r3, #1
 8000542:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d107      	bne.n	800055a <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <AUDIO_OUT_Init+0x98>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	681c      	ldr	r4, [r3, #0]
 8000550:	797a      	ldrb	r2, [r7, #5]
 8000552:	88f9      	ldrh	r1, [r7, #6]
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	2094      	movs	r0, #148	@ 0x94
 8000558:	47a0      	blx	r4
  }
  
  return ret;
 800055a:	7bfb      	ldrb	r3, [r7, #15]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	bd90      	pop	{r4, r7, pc}
 8000564:	200000e4 	.word	0x200000e4
 8000568:	40003c00 	.word	0x40003c00
 800056c:	20000004 	.word	0x20000004
 8000570:	200000e0 	.word	0x200000e0

08000574 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800057e:	4b10      	ldr	r3, [pc, #64]	@ (80005c0 <AUDIO_OUT_Play+0x4c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	b292      	uxth	r2, r2
 8000588:	6879      	ldr	r1, [r7, #4]
 800058a:	2094      	movs	r0, #148	@ 0x94
 800058c:	4798      	blx	r3
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000594:	2301      	movs	r3, #1
 8000596:	e00f      	b.n	80005b8 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800059e:	d203      	bcs.n	80005a8 <AUDIO_OUT_Play+0x34>
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	085b      	lsrs	r3, r3, #1
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	e001      	b.n	80005ac <AUDIO_OUT_Play+0x38>
 80005a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005ac:	461a      	mov	r2, r3
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <AUDIO_OUT_Play+0x50>)
 80005b2:	f007 fca1 	bl	8007ef8 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005b6:	2300      	movs	r3, #0
  }
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200000e0 	.word	0x200000e0
 80005c4:	200000e4 	.word	0x200000e4

080005c8 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80005cc:	4b07      	ldr	r3, [pc, #28]	@ (80005ec <AUDIO_OUT_Pause+0x24>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	691b      	ldr	r3, [r3, #16]
 80005d2:	2094      	movs	r0, #148	@ 0x94
 80005d4:	4798      	blx	r3
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 80005dc:	2301      	movs	r3, #1
 80005de:	e003      	b.n	80005e8 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 80005e0:	4803      	ldr	r0, [pc, #12]	@ (80005f0 <AUDIO_OUT_Pause+0x28>)
 80005e2:	f007 fd2d 	bl	8008040 <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005e6:	2300      	movs	r3, #0
  }
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200000e0 	.word	0x200000e0
 80005f0:	200000e4 	.word	0x200000e4

080005f4 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <AUDIO_OUT_Resume+0x24>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	2094      	movs	r0, #148	@ 0x94
 8000600:	4798      	blx	r3
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 8000608:	2301      	movs	r3, #1
 800060a:	e003      	b.n	8000614 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 800060c:	4803      	ldr	r0, [pc, #12]	@ (800061c <AUDIO_OUT_Resume+0x28>)
 800060e:	f007 fd79 	bl	8008104 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000612:	2300      	movs	r3, #0
  }
}
 8000614:	4618      	mov	r0, r3
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200000e0 	.word	0x200000e0
 800061c:	200000e4 	.word	0x200000e4

08000620 <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8000628:	480e      	ldr	r0, [pc, #56]	@ (8000664 <AUDIO_OUT_Stop+0x44>)
 800062a:	f007 fdff 	bl	800822c <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800062e:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <AUDIO_OUT_Stop+0x48>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	2094      	movs	r0, #148	@ 0x94
 8000638:	4798      	blx	r3
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 8000640:	2301      	movs	r3, #1
 8000642:	e00b      	b.n	800065c <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d107      	bne.n	800065a <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 800064a:	2001      	movs	r0, #1
 800064c:	f002 fec2 	bl	80033d4 <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2110      	movs	r1, #16
 8000654:	4805      	ldr	r0, [pc, #20]	@ (800066c <AUDIO_OUT_Stop+0x4c>)
 8000656:	f003 fe99 	bl	800438c <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800065a:	2300      	movs	r3, #0
  }
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200000e4 	.word	0x200000e4
 8000668:	200000e0 	.word	0x200000e0
 800066c:	40020c00 	.word	0x40020c00

08000670 <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 800067a:	4b08      	ldr	r3, [pc, #32]	@ (800069c <AUDIO_OUT_SetVolume+0x2c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	6a1b      	ldr	r3, [r3, #32]
 8000680:	79fa      	ldrb	r2, [r7, #7]
 8000682:	4611      	mov	r1, r2
 8000684:	2094      	movs	r0, #148	@ 0x94
 8000686:	4798      	blx	r3
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	e000      	b.n	8000694 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000692:	2300      	movs	r3, #0
  }
}
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000e0 	.word	0x200000e0

080006a0 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a04      	ldr	r2, [pc, #16]	@ (80006c0 <HAL_I2S_TxCpltCallback+0x20>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d101      	bne.n	80006b6 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 80006b2:	f002 fdcb 	bl	800324c <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40003c00 	.word	0x40003c00

080006c4 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a04      	ldr	r2, [pc, #16]	@ (80006e4 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d101      	bne.n	80006da <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 80006d6:	f002 fdcd 	bl	8003274 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40003c00 	.word	0x40003c00

080006e8 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	@ 0x30
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80006fa:	23ff      	movs	r3, #255	@ 0xff
 80006fc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  
  for(index = 0; index < 8; index++)
 8000700:	2300      	movs	r3, #0
 8000702:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000706:	e010      	b.n	800072a <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 8000708:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800070c:	4a22      	ldr	r2, [pc, #136]	@ (8000798 <AUDIO_OUT_ClockConfig+0xb0>)
 800070e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	429a      	cmp	r2, r3
 8000716:	d103      	bne.n	8000720 <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8000718:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800071c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  for(index = 0; index < 8; index++)
 8000720:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000724:	3301      	adds	r3, #1
 8000726:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800072a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800072e:	2b07      	cmp	r3, #7
 8000730:	d9ea      	bls.n	8000708 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4618      	mov	r0, r3
 8000738:	f009 f8ae 	bl	8009898 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 800073c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000740:	f003 0307 	and.w	r3, r3, #7
 8000744:	2b00      	cmp	r3, #0
 8000746:	d115      	bne.n	8000774 <AUDIO_OUT_ClockConfig+0x8c>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000748:	2301      	movs	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 800074c:	2308      	movs	r3, #8
 800074e:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000750:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000754:	4a11      	ldr	r2, [pc, #68]	@ (800079c <AUDIO_OUT_ClockConfig+0xb4>)
 8000756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800075a:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 800075c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000760:	4a0f      	ldr	r2, [pc, #60]	@ (80007a0 <AUDIO_OUT_ClockConfig+0xb8>)
 8000762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000766:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4618      	mov	r0, r3
 800076e:	f008 ffa3 	bl	80096b8 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000772:	e00d      	b.n	8000790 <AUDIO_OUT_ClockConfig+0xa8>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000774:	2301      	movs	r3, #1
 8000776:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000778:	2308      	movs	r3, #8
 800077a:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 800077c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000780:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000782:	2303      	movs	r3, #3
 8000784:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4618      	mov	r0, r3
 800078c:	f008 ff94 	bl	80096b8 <HAL_RCCEx_PeriphCLKConfig>
}
 8000790:	bf00      	nop
 8000792:	3730      	adds	r7, #48	@ 0x30
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	08012454 	.word	0x08012454
 800079c:	08012474 	.word	0x08012474
 80007a0:	08012494 	.word	0x08012494

080007a4 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08c      	sub	sp, #48	@ 0x30
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	4b56      	ldr	r3, [pc, #344]	@ (800090c <AUDIO_OUT_MspInit+0x168>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b6:	4a55      	ldr	r2, [pc, #340]	@ (800090c <AUDIO_OUT_MspInit+0x168>)
 80007b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007be:	4b53      	ldr	r3, [pc, #332]	@ (800090c <AUDIO_OUT_MspInit+0x168>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007c6:	61bb      	str	r3, [r7, #24]
 80007c8:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	4b4f      	ldr	r3, [pc, #316]	@ (800090c <AUDIO_OUT_MspInit+0x168>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a4e      	ldr	r2, [pc, #312]	@ (800090c <AUDIO_OUT_MspInit+0x168>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b4c      	ldr	r3, [pc, #304]	@ (800090c <AUDIO_OUT_MspInit+0x168>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b48      	ldr	r3, [pc, #288]	@ (800090c <AUDIO_OUT_MspInit+0x168>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a47      	ldr	r2, [pc, #284]	@ (800090c <AUDIO_OUT_MspInit+0x168>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b45      	ldr	r3, [pc, #276]	@ (800090c <AUDIO_OUT_MspInit+0x168>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 8000802:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8000810:	2302      	movs	r3, #2
 8000812:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8000814:	2306      	movs	r3, #6
 8000816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	483c      	ldr	r0, [pc, #240]	@ (8000910 <AUDIO_OUT_MspInit+0x16c>)
 8000820:	f003 fb4c 	bl	8003ebc <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8000824:	2310      	movs	r3, #16
 8000826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	4839      	ldr	r0, [pc, #228]	@ (8000914 <AUDIO_OUT_MspInit+0x170>)
 8000830:	f003 fb44 	bl	8003ebc <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	4b34      	ldr	r3, [pc, #208]	@ (800090c <AUDIO_OUT_MspInit+0x168>)
 800083a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083c:	4a33      	ldr	r2, [pc, #204]	@ (800090c <AUDIO_OUT_MspInit+0x168>)
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	6313      	str	r3, [r2, #48]	@ 0x30
 8000844:	4b31      	ldr	r3, [pc, #196]	@ (800090c <AUDIO_OUT_MspInit+0x168>)
 8000846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8000850:	2380      	movs	r3, #128	@ 0x80
 8000852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	482d      	ldr	r0, [pc, #180]	@ (8000910 <AUDIO_OUT_MspInit+0x16c>)
 800085c:	f003 fb2e 	bl	8003ebc <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	4b29      	ldr	r3, [pc, #164]	@ (800090c <AUDIO_OUT_MspInit+0x168>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000868:	4a28      	ldr	r2, [pc, #160]	@ (800090c <AUDIO_OUT_MspInit+0x168>)
 800086a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800086e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000870:	4b26      	ldr	r3, [pc, #152]	@ (800090c <AUDIO_OUT_MspInit+0x168>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a25      	ldr	r2, [pc, #148]	@ (8000918 <AUDIO_OUT_MspInit+0x174>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d136      	bne.n	80008f4 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8000886:	4b25      	ldr	r3, [pc, #148]	@ (800091c <AUDIO_OUT_MspInit+0x178>)
 8000888:	2200      	movs	r2, #0
 800088a:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800088c:	4b23      	ldr	r3, [pc, #140]	@ (800091c <AUDIO_OUT_MspInit+0x178>)
 800088e:	2240      	movs	r2, #64	@ 0x40
 8000890:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000892:	4b22      	ldr	r3, [pc, #136]	@ (800091c <AUDIO_OUT_MspInit+0x178>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8000898:	4b20      	ldr	r3, [pc, #128]	@ (800091c <AUDIO_OUT_MspInit+0x178>)
 800089a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800089e:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 80008a0:	4b1e      	ldr	r3, [pc, #120]	@ (800091c <AUDIO_OUT_MspInit+0x178>)
 80008a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008a6:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 80008a8:	4b1c      	ldr	r3, [pc, #112]	@ (800091c <AUDIO_OUT_MspInit+0x178>)
 80008aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008ae:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <AUDIO_OUT_MspInit+0x178>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80008b6:	4b19      	ldr	r3, [pc, #100]	@ (800091c <AUDIO_OUT_MspInit+0x178>)
 80008b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008bc:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80008be:	4b17      	ldr	r3, [pc, #92]	@ (800091c <AUDIO_OUT_MspInit+0x178>)
 80008c0:	2204      	movs	r2, #4
 80008c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008c4:	4b15      	ldr	r3, [pc, #84]	@ (800091c <AUDIO_OUT_MspInit+0x178>)
 80008c6:	2203      	movs	r2, #3
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008ca:	4b14      	ldr	r3, [pc, #80]	@ (800091c <AUDIO_OUT_MspInit+0x178>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80008d0:	4b12      	ldr	r3, [pc, #72]	@ (800091c <AUDIO_OUT_MspInit+0x178>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80008d6:	4b11      	ldr	r3, [pc, #68]	@ (800091c <AUDIO_OUT_MspInit+0x178>)
 80008d8:	4a11      	ldr	r2, [pc, #68]	@ (8000920 <AUDIO_OUT_MspInit+0x17c>)
 80008da:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a0f      	ldr	r2, [pc, #60]	@ (800091c <AUDIO_OUT_MspInit+0x178>)
 80008e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80008e2:	4a0e      	ldr	r2, [pc, #56]	@ (800091c <AUDIO_OUT_MspInit+0x178>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80008e8:	480c      	ldr	r0, [pc, #48]	@ (800091c <AUDIO_OUT_MspInit+0x178>)
 80008ea:	f002 ff57 	bl	800379c <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80008ee:	480b      	ldr	r0, [pc, #44]	@ (800091c <AUDIO_OUT_MspInit+0x178>)
 80008f0:	f002 fea6 	bl	8003640 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	210e      	movs	r1, #14
 80008f8:	202f      	movs	r0, #47	@ 0x2f
 80008fa:	f002 fe6a 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80008fe:	202f      	movs	r0, #47	@ 0x2f
 8000900:	f002 fe83 	bl	800360a <HAL_NVIC_EnableIRQ>
}
 8000904:	bf00      	nop
 8000906:	3730      	adds	r7, #48	@ 0x30
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40020800 	.word	0x40020800
 8000914:	40020000 	.word	0x40020000
 8000918:	40003c00 	.word	0x40003c00
 800091c:	2000012c 	.word	0x2000012c
 8000920:	400260b8 	.word	0x400260b8

08000924 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
	...

08000934 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 800093c:	4b17      	ldr	r3, [pc, #92]	@ (800099c <I2S3_Init+0x68>)
 800093e:	4a18      	ldr	r2, [pc, #96]	@ (80009a0 <I2S3_Init+0x6c>)
 8000940:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8000942:	4b16      	ldr	r3, [pc, #88]	@ (800099c <I2S3_Init+0x68>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	69da      	ldr	r2, [r3, #28]
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <I2S3_Init+0x68>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000950:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8000952:	4a12      	ldr	r2, [pc, #72]	@ (800099c <I2S3_Init+0x68>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000958:	4b10      	ldr	r3, [pc, #64]	@ (800099c <I2S3_Init+0x68>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <I2S3_Init+0x68>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000964:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <I2S3_Init+0x68>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 800096a:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <I2S3_Init+0x68>)
 800096c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000970:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8000972:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <I2S3_Init+0x68>)
 8000974:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000978:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <I2S3_Init+0x68>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8000980:	4806      	ldr	r0, [pc, #24]	@ (800099c <I2S3_Init+0x68>)
 8000982:	f007 f979 	bl	8007c78 <HAL_I2S_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	e000      	b.n	8000992 <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8000990:	2300      	movs	r3, #0
  }
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000e4 	.word	0x200000e4
 80009a0:	40003c00 	.word	0x40003c00

080009a4 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a04      	ldr	r2, [pc, #16]	@ (80009c4 <HAL_I2S_ErrorCallback+0x20>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d101      	bne.n	80009ba <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 80009b6:	f7ff ffb5 	bl	8000924 <AUDIO_OUT_Error_CallBack>
  }
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40003c00 	.word	0x40003c00

080009c8 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80009cc:	4814      	ldr	r0, [pc, #80]	@ (8000a20 <I2Cx_Init+0x58>)
 80009ce:	f006 fd0f 	bl	80073f0 <HAL_I2C_GetState>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d121      	bne.n	8000a1c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 80009d8:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <I2Cx_Init+0x58>)
 80009da:	4a12      	ldr	r2, [pc, #72]	@ (8000a24 <I2Cx_Init+0x5c>)
 80009dc:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <I2Cx_Init+0x58>)
 80009e0:	2243      	movs	r2, #67	@ 0x43
 80009e2:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <I2Cx_Init+0x58>)
 80009e6:	4a10      	ldr	r2, [pc, #64]	@ (8000a28 <I2Cx_Init+0x60>)
 80009e8:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000a20 <I2Cx_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <I2Cx_Init+0x58>)
 80009f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009f6:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <I2Cx_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <I2Cx_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <I2Cx_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000a0a:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <I2Cx_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000a10:	4803      	ldr	r0, [pc, #12]	@ (8000a20 <I2Cx_Init+0x58>)
 8000a12:	f000 f86b 	bl	8000aec <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000a16:	4802      	ldr	r0, [pc, #8]	@ (8000a20 <I2Cx_Init+0x58>)
 8000a18:	f005 fe1e 	bl	8006658 <HAL_I2C_Init>
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000018c 	.word	0x2000018c
 8000a24:	40005400 	.word	0x40005400
 8000a28:	000186a0 	.word	0x000186a0

08000a2c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af04      	add	r7, sp, #16
 8000a32:	4603      	mov	r3, r0
 8000a34:	80fb      	strh	r3, [r7, #6]
 8000a36:	460b      	mov	r3, r1
 8000a38:	717b      	strb	r3, [r7, #5]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000a42:	797b      	ldrb	r3, [r7, #5]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <I2Cx_WriteData+0x48>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	88f9      	ldrh	r1, [r7, #6]
 8000a4c:	9302      	str	r3, [sp, #8]
 8000a4e:	2301      	movs	r3, #1
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2301      	movs	r3, #1
 8000a58:	4807      	ldr	r0, [pc, #28]	@ (8000a78 <I2Cx_WriteData+0x4c>)
 8000a5a:	f006 f86f 	bl	8006b3c <HAL_I2C_Mem_Write>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000a68:	f000 f834 	bl	8000ad4 <I2Cx_Error>
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000000 	.word	0x20000000
 8000a78:	2000018c 	.word	0x2000018c

08000a7c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af04      	add	r7, sp, #16
 8000a82:	4603      	mov	r3, r0
 8000a84:	460a      	mov	r2, r1
 8000a86:	80fb      	strh	r3, [r7, #6]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000a94:	797b      	ldrb	r3, [r7, #5]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <I2Cx_ReadData+0x50>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	88f9      	ldrh	r1, [r7, #6]
 8000a9e:	9302      	str	r3, [sp, #8]
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	9301      	str	r3, [sp, #4]
 8000aa4:	f107 030e 	add.w	r3, r7, #14
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	2301      	movs	r3, #1
 8000aac:	4808      	ldr	r0, [pc, #32]	@ (8000ad0 <I2Cx_ReadData+0x54>)
 8000aae:	f006 f93f 	bl	8006d30 <HAL_I2C_Mem_Read>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000abc:	f000 f80a 	bl	8000ad4 <I2Cx_Error>
  }
  return value;
 8000ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	2000018c 	.word	0x2000018c

08000ad4 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000ad8:	4803      	ldr	r0, [pc, #12]	@ (8000ae8 <I2Cx_Error+0x14>)
 8000ada:	f005 ff01 	bl	80068e0 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000ade:	f7ff ff73 	bl	80009c8 <I2Cx_Init>
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000018c 	.word	0x2000018c

08000aec <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	@ 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	4b25      	ldr	r3, [pc, #148]	@ (8000b90 <I2Cx_MspInit+0xa4>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afc:	4a24      	ldr	r2, [pc, #144]	@ (8000b90 <I2Cx_MspInit+0xa4>)
 8000afe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b04:	4b22      	ldr	r3, [pc, #136]	@ (8000b90 <I2Cx_MspInit+0xa4>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	4b1e      	ldr	r3, [pc, #120]	@ (8000b90 <I2Cx_MspInit+0xa4>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b18:	4a1d      	ldr	r2, [pc, #116]	@ (8000b90 <I2Cx_MspInit+0xa4>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b20:	4b1b      	ldr	r3, [pc, #108]	@ (8000b90 <I2Cx_MspInit+0xa4>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000b2c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000b32:	2312      	movs	r3, #18
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4812      	ldr	r0, [pc, #72]	@ (8000b94 <I2Cx_MspInit+0xa8>)
 8000b4a:	f003 f9b7 	bl	8003ebc <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <I2Cx_MspInit+0xa4>)
 8000b50:	6a1b      	ldr	r3, [r3, #32]
 8000b52:	4a0f      	ldr	r2, [pc, #60]	@ (8000b90 <I2Cx_MspInit+0xa4>)
 8000b54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b58:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <I2Cx_MspInit+0xa4>)
 8000b5c:	6a1b      	ldr	r3, [r3, #32]
 8000b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b90 <I2Cx_MspInit+0xa4>)
 8000b60:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000b64:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	210f      	movs	r1, #15
 8000b6a:	201f      	movs	r0, #31
 8000b6c:	f002 fd31 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000b70:	201f      	movs	r0, #31
 8000b72:	f002 fd4a 	bl	800360a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	210f      	movs	r1, #15
 8000b7a:	2020      	movs	r0, #32
 8000b7c:	f002 fd29 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000b80:	2020      	movs	r0, #32
 8000b82:	f002 fd42 	bl	800360a <HAL_NVIC_EnableIRQ>
}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	@ 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020400 	.word	0x40020400

08000b98 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b17      	ldr	r3, [pc, #92]	@ (8000c00 <AUDIO_IO_Init+0x68>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a16      	ldr	r2, [pc, #88]	@ (8000c00 <AUDIO_IO_Init+0x68>)
 8000ba8:	f043 0308 	orr.w	r3, r3, #8
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <AUDIO_IO_Init+0x68>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0308 	and.w	r3, r3, #8
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000bba:	2310      	movs	r3, #16
 8000bbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480d      	ldr	r0, [pc, #52]	@ (8000c04 <AUDIO_IO_Init+0x6c>)
 8000bd0:	f003 f974 	bl	8003ebc <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000bd4:	f7ff fef8 	bl	80009c8 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2110      	movs	r1, #16
 8000bdc:	4809      	ldr	r0, [pc, #36]	@ (8000c04 <AUDIO_IO_Init+0x6c>)
 8000bde:	f003 fbd5 	bl	800438c <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000be2:	2005      	movs	r0, #5
 8000be4:	f002 fbf6 	bl	80033d4 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000be8:	2201      	movs	r2, #1
 8000bea:	2110      	movs	r1, #16
 8000bec:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <AUDIO_IO_Init+0x6c>)
 8000bee:	f003 fbcd 	bl	800438c <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bf2:	2005      	movs	r0, #5
 8000bf4:	f002 fbee 	bl	80033d4 <HAL_Delay>
}
 8000bf8:	bf00      	nop
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020c00 	.word	0x40020c00

08000c08 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	460b      	mov	r3, r1
 8000c22:	71bb      	strb	r3, [r7, #6]
 8000c24:	4613      	mov	r3, r2
 8000c26:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	797a      	ldrb	r2, [r7, #5]
 8000c2e:	79b9      	ldrb	r1, [r7, #6]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fefb 	bl	8000a2c <I2Cx_WriteData>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	460a      	mov	r2, r1
 8000c48:	71fb      	strb	r3, [r7, #7]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	79ba      	ldrb	r2, [r7, #6]
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff10 	bl	8000a7c <I2Cx_ReadData>
 8000c5c:	4603      	mov	r3, r0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0d6      	sub	sp, #344	@ 0x158
 8000c6c:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4946      	ldr	r1, [pc, #280]	@ (8000d90 <AUDIO_StorageParse+0x128>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f010 fcdf 	bl	801163c <f_opendir>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
  FileList.ptr = 0;
 8000c84:	4b43      	ldr	r3, [pc, #268]	@ (8000d94 <AUDIO_StorageParse+0x12c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8

  if(res == FR_OK)
 8000c8c:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d16c      	bne.n	8000d6e <AUDIO_StorageParse+0x106>
  {
    while(Appli_state == APPLICATION_READY)
 8000c94:	e067      	b.n	8000d66 <AUDIO_StorageParse+0xfe>
    {
      res = f_readdir(&dir, &fno);
 8000c96:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f010 fd65 	bl	801176e <f_readdir>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000caa:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d15d      	bne.n	8000d6e <AUDIO_StorageParse+0x106>
 8000cb2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000cb6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000cba:	7d9b      	ldrb	r3, [r3, #22]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d056      	beq.n	8000d6e <AUDIO_StorageParse+0x106>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000cc0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000cc4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000cc8:	7d9b      	ldrb	r3, [r3, #22]
 8000cca:	2b2e      	cmp	r3, #46	@ 0x2e
 8000ccc:	d04a      	beq.n	8000d64 <AUDIO_StorageParse+0xfc>
      {
        continue;
      }

      fn = fno.fname;
 8000cce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cd2:	3316      	adds	r3, #22
 8000cd4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d94 <AUDIO_StorageParse+0x12c>)
 8000cda:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000cde:	2b17      	cmp	r3, #23
 8000ce0:	d841      	bhi.n	8000d66 <AUDIO_StorageParse+0xfe>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000ce2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000ce6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000cea:	7a1b      	ldrb	r3, [r3, #8]
 8000cec:	f003 0310 	and.w	r3, r3, #16
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d138      	bne.n	8000d66 <AUDIO_StorageParse+0xfe>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000cf4:	4928      	ldr	r1, [pc, #160]	@ (8000d98 <AUDIO_StorageParse+0x130>)
 8000cf6:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8000cfa:	f011 faae 	bl	801225a <strstr>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d107      	bne.n	8000d14 <AUDIO_StorageParse+0xac>
 8000d04:	4925      	ldr	r1, [pc, #148]	@ (8000d9c <AUDIO_StorageParse+0x134>)
 8000d06:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8000d0a:	f011 faa6 	bl	801225a <strstr>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d028      	beq.n	8000d66 <AUDIO_StorageParse+0xfe>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000d14:	4b1f      	ldr	r3, [pc, #124]	@ (8000d94 <AUDIO_StorageParse+0x12c>)
 8000d16:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	4413      	add	r3, r2
 8000d26:	4a1b      	ldr	r2, [pc, #108]	@ (8000d94 <AUDIO_StorageParse+0x12c>)
 8000d28:	4413      	add	r3, r2
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	2228      	movs	r2, #40	@ 0x28
 8000d2e:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8000d32:	4618      	mov	r0, r3
 8000d34:	f011 fa7e 	bl	8012234 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000d38:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <AUDIO_StorageParse+0x12c>)
 8000d3a:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4914      	ldr	r1, [pc, #80]	@ (8000d94 <AUDIO_StorageParse+0x12c>)
 8000d42:	4613      	mov	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	4413      	add	r3, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <AUDIO_StorageParse+0x12c>)
 8000d54:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d58:	3301      	adds	r3, #1
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <AUDIO_StorageParse+0x12c>)
 8000d5e:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8
 8000d62:	e000      	b.n	8000d66 <AUDIO_StorageParse+0xfe>
        continue;
 8000d64:	bf00      	nop
    while(Appli_state == APPLICATION_READY)
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <AUDIO_StorageParse+0x138>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d093      	beq.n	8000c96 <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000d6e:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <AUDIO_StorageParse+0x12c>)
 8000d70:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	@ 0x3d8
 8000d74:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <AUDIO_StorageParse+0x13c>)
 8000d76:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f010 fcd1 	bl	8011722 <f_closedir>
  return res;
 8000d80:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20001e08 	.word	0x20001e08
 8000d94:	200017c8 	.word	0x200017c8
 8000d98:	080123d8 	.word	0x080123d8
 8000d9c:	080123dc 	.word	0x080123dc
 8000da0:	2000264c 	.word	0x2000264c
 8000da4:	200001e2 	.word	0x200001e2

08000da8 <AUDIO_GetWavObjectNumber>:



uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000dac:	f7ff ff5c 	bl	8000c68 <AUDIO_StorageParse>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d102      	bne.n	8000dbc <AUDIO_GetWavObjectNumber+0x14>
 8000db6:	4b02      	ldr	r3, [pc, #8]	@ (8000dc0 <AUDIO_GetWavObjectNumber+0x18>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	e7ff      	b.n	8000dbc <AUDIO_GetWavObjectNumber+0x14>
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200001e2 	.word	0x200001e2

08000dc4 <Mount_USB>:

void Mount_USB (void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4905      	ldr	r1, [pc, #20]	@ (8000de0 <Mount_USB+0x1c>)
 8000dcc:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <Mount_USB+0x20>)
 8000dce:	f00f fe45 	bl	8010a5c <f_mount>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b04      	ldr	r3, [pc, #16]	@ (8000de8 <Mount_USB+0x24>)
 8000dd8:	701a      	strb	r2, [r3, #0]
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20001e08 	.word	0x20001e08
 8000de4:	20001e0c 	.word	0x20001e0c
 8000de8:	200001e0 	.word	0x200001e0

08000dec <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	4603      	mov	r3, r0
 8000df6:	81fb      	strh	r3, [r7, #14]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	81bb      	strh	r3, [r7, #12]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000e04:	f7ff fec8 	bl	8000b98 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000e08:	89fb      	ldrh	r3, [r7, #14]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2102      	movs	r1, #2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 fb01 	bl	8001418 <CODEC_IO_Write>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461a      	mov	r2, r3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000e20:	89bb      	ldrh	r3, [r7, #12]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d81b      	bhi.n	8000e60 <cs43l22_Init+0x74>
 8000e28:	a201      	add	r2, pc, #4	@ (adr r2, 8000e30 <cs43l22_Init+0x44>)
 8000e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2e:	bf00      	nop
 8000e30:	08000e41 	.word	0x08000e41
 8000e34:	08000e49 	.word	0x08000e49
 8000e38:	08000e51 	.word	0x08000e51
 8000e3c:	08000e59 	.word	0x08000e59
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000e40:	4b5b      	ldr	r3, [pc, #364]	@ (8000fb0 <cs43l22_Init+0x1c4>)
 8000e42:	22fa      	movs	r2, #250	@ 0xfa
 8000e44:	701a      	strb	r2, [r3, #0]
    break;
 8000e46:	e00f      	b.n	8000e68 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000e48:	4b59      	ldr	r3, [pc, #356]	@ (8000fb0 <cs43l22_Init+0x1c4>)
 8000e4a:	22af      	movs	r2, #175	@ 0xaf
 8000e4c:	701a      	strb	r2, [r3, #0]
    break;
 8000e4e:	e00b      	b.n	8000e68 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000e50:	4b57      	ldr	r3, [pc, #348]	@ (8000fb0 <cs43l22_Init+0x1c4>)
 8000e52:	22aa      	movs	r2, #170	@ 0xaa
 8000e54:	701a      	strb	r2, [r3, #0]
    break;
 8000e56:	e007      	b.n	8000e68 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000e58:	4b55      	ldr	r3, [pc, #340]	@ (8000fb0 <cs43l22_Init+0x1c4>)
 8000e5a:	2205      	movs	r2, #5
 8000e5c:	701a      	strb	r2, [r3, #0]
    break;    
 8000e5e:	e003      	b.n	8000e68 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000e60:	4b53      	ldr	r3, [pc, #332]	@ (8000fb0 <cs43l22_Init+0x1c4>)
 8000e62:	2205      	movs	r2, #5
 8000e64:	701a      	strb	r2, [r3, #0]
    break;    
 8000e66:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e68:	89fb      	ldrh	r3, [r7, #14]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4a50      	ldr	r2, [pc, #320]	@ (8000fb0 <cs43l22_Init+0x1c4>)
 8000e6e:	7812      	ldrb	r2, [r2, #0]
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	2104      	movs	r1, #4
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 facf 	bl	8001418 <CODEC_IO_Write>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	4413      	add	r3, r2
 8000e82:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000e84:	89fb      	ldrh	r3, [r7, #14]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2281      	movs	r2, #129	@ 0x81
 8000e8a:	2105      	movs	r1, #5
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fac3 	bl	8001418 <CODEC_IO_Write>
 8000e92:	4603      	mov	r3, r0
 8000e94:	461a      	mov	r2, r3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	4413      	add	r3, r2
 8000e9a:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000e9c:	89fb      	ldrh	r3, [r7, #14]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	2106      	movs	r1, #6
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fab7 	bl	8001418 <CODEC_IO_Write>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000eb4:	7afa      	ldrb	r2, [r7, #11]
 8000eb6:	89fb      	ldrh	r3, [r7, #14]
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f964 	bl	8001188 <cs43l22_SetVolume>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000ec8:	89bb      	ldrh	r3, [r7, #12]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d023      	beq.n	8000f16 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000ece:	89fb      	ldrh	r3, [r7, #14]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2206      	movs	r2, #6
 8000ed4:	210f      	movs	r1, #15
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 fa9e 	bl	8001418 <CODEC_IO_Write>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000ee6:	89fb      	ldrh	r3, [r7, #14]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2200      	movs	r2, #0
 8000eec:	2124      	movs	r1, #36	@ 0x24
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 fa92 	bl	8001418 <CODEC_IO_Write>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	4413      	add	r3, r2
 8000efc:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000efe:	89fb      	ldrh	r3, [r7, #14]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2200      	movs	r2, #0
 8000f04:	2125      	movs	r1, #37	@ 0x25
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fa86 	bl	8001418 <CODEC_IO_Write>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	4413      	add	r3, r2
 8000f14:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000f16:	89fb      	ldrh	r3, [r7, #14]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	210a      	movs	r1, #10
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fa7a 	bl	8001418 <CODEC_IO_Write>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000f2e:	89fb      	ldrh	r3, [r7, #14]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2204      	movs	r2, #4
 8000f34:	210e      	movs	r1, #14
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fa6e 	bl	8001418 <CODEC_IO_Write>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	4413      	add	r3, r2
 8000f44:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000f46:	89fb      	ldrh	r3, [r7, #14]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2127      	movs	r1, #39	@ 0x27
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fa62 	bl	8001418 <CODEC_IO_Write>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000f5e:	89fb      	ldrh	r3, [r7, #14]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	220f      	movs	r2, #15
 8000f64:	211f      	movs	r1, #31
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 fa56 	bl	8001418 <CODEC_IO_Write>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	4413      	add	r3, r2
 8000f74:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000f76:	89fb      	ldrh	r3, [r7, #14]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	220a      	movs	r2, #10
 8000f7c:	211a      	movs	r1, #26
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fa4a 	bl	8001418 <CODEC_IO_Write>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000f8e:	89fb      	ldrh	r3, [r7, #14]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	220a      	movs	r2, #10
 8000f94:	211b      	movs	r1, #27
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 fa3e 	bl	8001418 <CODEC_IO_Write>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000fa6:	697b      	ldr	r3, [r7, #20]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200001e4 	.word	0x200001e4

08000fb4 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000fb8:	f7ff fe26 	bl	8000c08 <AUDIO_IO_DeInit>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000fca:	f7ff fde5 	bl	8000b98 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fe32 	bl	8000c3e <AUDIO_IO_Read>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	f023 0307 	bic.w	r3, r3, #7
 8000fe4:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	80fb      	strh	r3, [r7, #6]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8001004:	4b16      	ldr	r3, [pc, #88]	@ (8001060 <cs43l22_Play+0x70>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d123      	bne.n	8001054 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2206      	movs	r2, #6
 8001012:	210e      	movs	r1, #14
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f9ff 	bl	8001418 <CODEC_IO_Write>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4413      	add	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f000 f919 	bl	8001260 <cs43l22_SetMute>
 800102e:	4602      	mov	r2, r0
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	229e      	movs	r2, #158	@ 0x9e
 800103c:	2102      	movs	r1, #2
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f9ea 	bl	8001418 <CODEC_IO_Write>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 800104e:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <cs43l22_Play+0x70>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8001054:	68fb      	ldr	r3, [r7, #12]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000034 	.word	0x20000034

08001064 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	2101      	movs	r1, #1
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f8f2 	bl	8001260 <cs43l22_SetMute>
 800107c:	4602      	mov	r2, r0
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4413      	add	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2201      	movs	r2, #1
 800108a:	2102      	movs	r1, #2
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f9c3 	bl	8001418 <CODEC_IO_Write>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
 
  return counter;
 800109c:	68fb      	ldr	r3, [r7, #12]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f8ce 	bl	8001260 <cs43l22_SetMute>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4413      	add	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	e002      	b.n	80010d8 <cs43l22_Resume+0x30>
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	2bfe      	cmp	r3, #254	@ 0xfe
 80010dc:	d9f9      	bls.n	80010d2 <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	4a0e      	ldr	r2, [pc, #56]	@ (800111c <cs43l22_Resume+0x74>)
 80010e4:	7812      	ldrb	r2, [r2, #0]
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	2104      	movs	r1, #4
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f994 	bl	8001418 <CODEC_IO_Write>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	229e      	movs	r2, #158	@ 0x9e
 8001100:	2102      	movs	r1, #2
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f988 	bl	8001418 <CODEC_IO_Write>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200001e4 	.word	0x200001e4

08001120 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	2101      	movs	r1, #1
 8001134:	4618      	mov	r0, r3
 8001136:	f000 f893 	bl	8001260 <cs43l22_SetMute>
 800113a:	4602      	mov	r2, r0
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2204      	movs	r2, #4
 8001148:	210e      	movs	r1, #14
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f964 	bl	8001418 <CODEC_IO_Write>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 800115a:	88fb      	ldrh	r3, [r7, #6]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	229f      	movs	r2, #159	@ 0x9f
 8001160:	2102      	movs	r1, #2
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f958 	bl	8001418 <CODEC_IO_Write>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8001172:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <cs43l22_Stop+0x64>)
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001178:	68fb      	ldr	r3, [r7, #12]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000034 	.word	0x20000034

08001188 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	460a      	mov	r2, r1
 8001192:	80fb      	strh	r3, [r7, #6]
 8001194:	4613      	mov	r3, r2
 8001196:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800119c:	797b      	ldrb	r3, [r7, #5]
 800119e:	2b64      	cmp	r3, #100	@ 0x64
 80011a0:	d80b      	bhi.n	80011ba <cs43l22_SetVolume+0x32>
 80011a2:	797a      	ldrb	r2, [r7, #5]
 80011a4:	4613      	mov	r3, r2
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	1a9b      	subs	r3, r3, r2
 80011aa:	4a25      	ldr	r2, [pc, #148]	@ (8001240 <cs43l22_SetVolume+0xb8>)
 80011ac:	fb82 1203 	smull	r1, r2, r2, r3
 80011b0:	1152      	asrs	r2, r2, #5
 80011b2:	17db      	asrs	r3, r3, #31
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	e000      	b.n	80011bc <cs43l22_SetVolume+0x34>
 80011ba:	23ff      	movs	r3, #255	@ 0xff
 80011bc:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80011be:	7afb      	ldrb	r3, [r7, #11]
 80011c0:	2be6      	cmp	r3, #230	@ 0xe6
 80011c2:	d91c      	bls.n	80011fe <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	b2d8      	uxtb	r0, r3
 80011c8:	7afb      	ldrb	r3, [r7, #11]
 80011ca:	3319      	adds	r3, #25
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	461a      	mov	r2, r3
 80011d0:	2120      	movs	r1, #32
 80011d2:	f000 f921 	bl	8001418 <CODEC_IO_Write>
 80011d6:	4603      	mov	r3, r0
 80011d8:	461a      	mov	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4413      	add	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	b2d8      	uxtb	r0, r3
 80011e4:	7afb      	ldrb	r3, [r7, #11]
 80011e6:	3319      	adds	r3, #25
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	461a      	mov	r2, r3
 80011ec:	2121      	movs	r1, #33	@ 0x21
 80011ee:	f000 f913 	bl	8001418 <CODEC_IO_Write>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4413      	add	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	e01b      	b.n	8001236 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	b2d8      	uxtb	r0, r3
 8001202:	7afb      	ldrb	r3, [r7, #11]
 8001204:	3319      	adds	r3, #25
 8001206:	b2db      	uxtb	r3, r3
 8001208:	461a      	mov	r2, r3
 800120a:	2120      	movs	r1, #32
 800120c:	f000 f904 	bl	8001418 <CODEC_IO_Write>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	b2d8      	uxtb	r0, r3
 800121e:	7afb      	ldrb	r3, [r7, #11]
 8001220:	3319      	adds	r3, #25
 8001222:	b2db      	uxtb	r3, r3
 8001224:	461a      	mov	r2, r3
 8001226:	2121      	movs	r1, #33	@ 0x21
 8001228:	f000 f8f6 	bl	8001418 <CODEC_IO_Write>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8001236:	68fb      	ldr	r3, [r7, #12]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	51eb851f 	.word	0x51eb851f

08001244 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d124      	bne.n	80012c0 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	22ff      	movs	r2, #255	@ 0xff
 800127c:	2104      	movs	r1, #4
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f8ca 	bl	8001418 <CODEC_IO_Write>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2201      	movs	r2, #1
 8001294:	2122      	movs	r1, #34	@ 0x22
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f8be 	bl	8001418 <CODEC_IO_Write>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4413      	add	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2201      	movs	r2, #1
 80012ac:	2123      	movs	r1, #35	@ 0x23
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f8b2 	bl	8001418 <CODEC_IO_Write>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	e025      	b.n	800130c <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2200      	movs	r2, #0
 80012c6:	2122      	movs	r1, #34	@ 0x22
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f8a5 	bl	8001418 <CODEC_IO_Write>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4413      	add	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2200      	movs	r2, #0
 80012de:	2123      	movs	r1, #35	@ 0x23
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f899 	bl	8001418 <CODEC_IO_Write>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4413      	add	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4a08      	ldr	r2, [pc, #32]	@ (8001318 <cs43l22_SetMute+0xb8>)
 80012f6:	7812      	ldrb	r2, [r2, #0]
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	2104      	movs	r1, #4
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f88b 	bl	8001418 <CODEC_IO_Write>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4413      	add	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800130c:	68fb      	ldr	r3, [r7, #12]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200001e4 	.word	0x200001e4

0800131c <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	460a      	mov	r2, r1
 8001326:	80fb      	strh	r3, [r7, #6]
 8001328:	4613      	mov	r3, r2
 800132a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001330:	797b      	ldrb	r3, [r7, #5]
 8001332:	3b01      	subs	r3, #1
 8001334:	2b03      	cmp	r3, #3
 8001336:	d84b      	bhi.n	80013d0 <cs43l22_SetOutputMode+0xb4>
 8001338:	a201      	add	r2, pc, #4	@ (adr r2, 8001340 <cs43l22_SetOutputMode+0x24>)
 800133a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133e:	bf00      	nop
 8001340:	08001351 	.word	0x08001351
 8001344:	08001371 	.word	0x08001371
 8001348:	08001391 	.word	0x08001391
 800134c:	080013b1 	.word	0x080013b1
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	22fa      	movs	r2, #250	@ 0xfa
 8001356:	2104      	movs	r1, #4
 8001358:	4618      	mov	r0, r3
 800135a:	f000 f85d 	bl	8001418 <CODEC_IO_Write>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4413      	add	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001368:	4b24      	ldr	r3, [pc, #144]	@ (80013fc <cs43l22_SetOutputMode+0xe0>)
 800136a:	22fa      	movs	r2, #250	@ 0xfa
 800136c:	701a      	strb	r2, [r3, #0]
      break;
 800136e:	e03f      	b.n	80013f0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	22af      	movs	r2, #175	@ 0xaf
 8001376:	2104      	movs	r1, #4
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f84d 	bl	8001418 <CODEC_IO_Write>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4413      	add	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001388:	4b1c      	ldr	r3, [pc, #112]	@ (80013fc <cs43l22_SetOutputMode+0xe0>)
 800138a:	22af      	movs	r2, #175	@ 0xaf
 800138c:	701a      	strb	r2, [r3, #0]
      break;
 800138e:	e02f      	b.n	80013f0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	22aa      	movs	r2, #170	@ 0xaa
 8001396:	2104      	movs	r1, #4
 8001398:	4618      	mov	r0, r3
 800139a:	f000 f83d 	bl	8001418 <CODEC_IO_Write>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4413      	add	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 80013a8:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <cs43l22_SetOutputMode+0xe0>)
 80013aa:	22aa      	movs	r2, #170	@ 0xaa
 80013ac:	701a      	strb	r2, [r3, #0]
      break;
 80013ae:	e01f      	b.n	80013f0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2205      	movs	r2, #5
 80013b6:	2104      	movs	r1, #4
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f82d 	bl	8001418 <CODEC_IO_Write>
 80013be:	4603      	mov	r3, r0
 80013c0:	461a      	mov	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4413      	add	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <cs43l22_SetOutputMode+0xe0>)
 80013ca:	2205      	movs	r2, #5
 80013cc:	701a      	strb	r2, [r3, #0]
      break;    
 80013ce:	e00f      	b.n	80013f0 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2205      	movs	r2, #5
 80013d6:	2104      	movs	r1, #4
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 f81d 	bl	8001418 <CODEC_IO_Write>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4413      	add	r3, r2
 80013e6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013e8:	4b04      	ldr	r3, [pc, #16]	@ (80013fc <cs43l22_SetOutputMode+0xe0>)
 80013ea:	2205      	movs	r2, #5
 80013ec:	701a      	strb	r2, [r3, #0]
      break;
 80013ee:	bf00      	nop
  }  
  return counter;
 80013f0:	68fb      	ldr	r3, [r7, #12]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200001e4 	.word	0x200001e4

08001400 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
  return 0;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
 8001422:	460b      	mov	r3, r1
 8001424:	71bb      	strb	r3, [r7, #6]
 8001426:	4613      	mov	r3, r2
 8001428:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 800142e:	797a      	ldrb	r2, [r7, #5]
 8001430:	79b9      	ldrb	r1, [r7, #6]
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fbee 	bl	8000c16 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	b2db      	uxtb	r3, r3
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <change_animation>:
int IsFinished = 0;               // Para terminar el bucle while principal cuando AudioState = AUDIO_STATE_STOP
int current_anim_state = 3;       // Animacion que se esta ejecutando en el momento (1, 2, 3 o 4)
volatile uint8_t frame_anim = 0;  // Variable para selecionar los frames en las animaciones

void change_animation() // Para seleccionar la siguiente animacion al cambiar de cancion
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
	// Se hace con esta estructura if-elsif porque con los rebotes "current_anim_state ++" daba errores
	if(current_anim_state == 1)
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <change_animation+0x4c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d103      	bne.n	800145c <change_animation+0x14>
		current_anim_state = 2;
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <change_animation+0x4c>)
 8001456:	2202      	movs	r2, #2
 8001458:	601a      	str	r2, [r3, #0]
		current_anim_state = 3;
	else if(current_anim_state == 3)
		current_anim_state = 4;
	else if(current_anim_state == 4)
		current_anim_state = 1;
}
 800145a:	e016      	b.n	800148a <change_animation+0x42>
	else if(current_anim_state == 2)
 800145c:	4b0d      	ldr	r3, [pc, #52]	@ (8001494 <change_animation+0x4c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d103      	bne.n	800146c <change_animation+0x24>
		current_anim_state = 3;
 8001464:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <change_animation+0x4c>)
 8001466:	2203      	movs	r2, #3
 8001468:	601a      	str	r2, [r3, #0]
}
 800146a:	e00e      	b.n	800148a <change_animation+0x42>
	else if(current_anim_state == 3)
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <change_animation+0x4c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d103      	bne.n	800147c <change_animation+0x34>
		current_anim_state = 4;
 8001474:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <change_animation+0x4c>)
 8001476:	2204      	movs	r2, #4
 8001478:	601a      	str	r2, [r3, #0]
}
 800147a:	e006      	b.n	800148a <change_animation+0x42>
	else if(current_anim_state == 4)
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <change_animation+0x4c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b04      	cmp	r3, #4
 8001482:	d102      	bne.n	800148a <change_animation+0x42>
		current_anim_state = 1;
 8001484:	4b03      	ldr	r3, [pc, #12]	@ (8001494 <change_animation+0x4c>)
 8001486:	2201      	movs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	20000040 	.word	0x20000040

08001498 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af02      	add	r7, sp, #8
 800149e:	4603      	mov	r3, r0
 80014a0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) // PA0 controla la pausa/reanudacion del mp3
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d11b      	bne.n	80014e0 <HAL_GPIO_EXTI_Callback+0x48>
	{
		if (AudioState == AUDIO_STATE_PLAY)
 80014a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001514 <HAL_GPIO_EXTI_Callback+0x7c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d110      	bne.n	80014d2 <HAL_GPIO_EXTI_Callback+0x3a>
		{
			AudioState = AUDIO_STATE_PAUSE;
 80014b0:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <HAL_GPIO_EXTI_Callback+0x7c>)
 80014b2:	220a      	movs	r2, #10
 80014b4:	701a      	strb	r2, [r3, #0]
			SSD1306_Clear();
 80014b6:	f001 f9d2 	bl	800285e <SSD1306_Clear>
			SSD1306_DrawBitmap(0, 0, PAUSA, 128, 64, 1); // Se dibuja la imagen de pausa cuando AudioState pasa a valer "AUDIO_STATE_PAUSE" debido a PA0
 80014ba:	2301      	movs	r3, #1
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	2340      	movs	r3, #64	@ 0x40
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2380      	movs	r3, #128	@ 0x80
 80014c4:	4a14      	ldr	r2, [pc, #80]	@ (8001518 <HAL_GPIO_EXTI_Callback+0x80>)
 80014c6:	2100      	movs	r1, #0
 80014c8:	2000      	movs	r0, #0
 80014ca:	f001 f960 	bl	800278e <SSD1306_DrawBitmap>
			SSD1306_UpdateScreen();
 80014ce:	f000 ffff 	bl	80024d0 <SSD1306_UpdateScreen>
		}

		if (AudioState == AUDIO_STATE_WAIT)
 80014d2:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <HAL_GPIO_EXTI_Callback+0x7c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d102      	bne.n	80014e0 <HAL_GPIO_EXTI_Callback+0x48>
		{
			AudioState = AUDIO_STATE_RESUME;
 80014da:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <HAL_GPIO_EXTI_Callback+0x7c>)
 80014dc:	220b      	movs	r2, #11
 80014de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == GPIO_PIN_1) // PA1 se utiliza para reproducir el siguiente archivo
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d107      	bne.n	80014f6 <HAL_GPIO_EXTI_Callback+0x5e>
	{
		AudioState = AUDIO_STATE_NEXT;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <HAL_GPIO_EXTI_Callback+0x7c>)
 80014e8:	2205      	movs	r2, #5
 80014ea:	701a      	strb	r2, [r3, #0]
		change_animation();     // Al cambiar la cancion, se cambia la animacion mostrada
 80014ec:	f7ff ffac 	bl	8001448 <change_animation>
		frame_anim = 1;         // Se reinicia el frame de la animacion al primer frame
 80014f0:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <HAL_GPIO_EXTI_Callback+0x84>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_2) // PA2 se utiliza para reproducir el archivo anterior
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d107      	bne.n	800150c <HAL_GPIO_EXTI_Callback+0x74>
	{
		AudioState = AUDIO_STATE_PREVIOUS;
 80014fc:	4b05      	ldr	r3, [pc, #20]	@ (8001514 <HAL_GPIO_EXTI_Callback+0x7c>)
 80014fe:	2206      	movs	r2, #6
 8001500:	701a      	strb	r2, [r3, #0]
		change_animation();     // Al cambiar la cancion, se cambia la animacion mostrada
 8001502:	f7ff ffa1 	bl	8001448 <change_animation>
		frame_anim = 1;         // Se reinicia el frame de la animacion al primer frame
 8001506:	4b05      	ldr	r3, [pc, #20]	@ (800151c <HAL_GPIO_EXTI_Callback+0x84>)
 8001508:	2201      	movs	r2, #1
 800150a:	701a      	strb	r2, [r3, #0]
	}
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	2000179c 	.word	0x2000179c
 8001518:	08016a10 	.word	0x08016a10
 800151c:	20000384 	.word	0x20000384

08001520 <HAL_TIM_PeriodElapsedCallback>:

// Se utiliza un temporizador basico para la actualizacion de los frames en las animaciones para el OLED
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  // Se genera una interrupcion en intervalos inferiores a medio segundo.
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

    if (htim->Instance == TIM10 && (AudioState == AUDIO_STATE_PLAY)) // Solo se ejecutan las animaciones cuando el estado del audio es AUDIO_STATE_PLAY
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a38      	ldr	r2, [pc, #224]	@ (8001610 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d16a      	bne.n	8001608 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8001532:	4b38      	ldr	r3, [pc, #224]	@ (8001614 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b03      	cmp	r3, #3
 8001538:	d166      	bne.n	8001608 <HAL_TIM_PeriodElapsedCallback+0xe8>
    {
    	if(current_anim_state == 1)
 800153a:	4b37      	ldr	r3, [pc, #220]	@ (8001618 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d115      	bne.n	800156e <HAL_TIM_PeriodElapsedCallback+0x4e>
    	{
			frame_anim++;
 8001542:	4b36      	ldr	r3, [pc, #216]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	3301      	adds	r3, #1
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b33      	ldr	r3, [pc, #204]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800154e:	701a      	strb	r2, [r3, #0]
			if (frame_anim == 11) frame_anim = 1;
 8001550:	4b32      	ldr	r3, [pc, #200]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b0b      	cmp	r3, #11
 8001558:	d102      	bne.n	8001560 <HAL_TIM_PeriodElapsedCallback+0x40>
 800155a:	4b30      	ldr	r3, [pc, #192]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
			animacion1(frame_anim);
 8001560:	4b2e      	ldr	r3, [pc, #184]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f85a 	bl	8001620 <animacion1>
			frame_anim++;
			if (frame_anim == 7) frame_anim = 1;
			animacion4(frame_anim);
    	}
    }
}
 800156c:	e04c      	b.n	8001608 <HAL_TIM_PeriodElapsedCallback+0xe8>
    	else if(current_anim_state == 2)
 800156e:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b02      	cmp	r3, #2
 8001574:	d115      	bne.n	80015a2 <HAL_TIM_PeriodElapsedCallback+0x82>
			frame_anim++;
 8001576:	4b29      	ldr	r3, [pc, #164]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	3301      	adds	r3, #1
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b26      	ldr	r3, [pc, #152]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001582:	701a      	strb	r2, [r3, #0]
			if (frame_anim == 7) frame_anim = 1;
 8001584:	4b25      	ldr	r3, [pc, #148]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b07      	cmp	r3, #7
 800158c:	d102      	bne.n	8001594 <HAL_TIM_PeriodElapsedCallback+0x74>
 800158e:	4b23      	ldr	r3, [pc, #140]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001590:	2201      	movs	r2, #1
 8001592:	701a      	strb	r2, [r3, #0]
			animacion2(frame_anim);
 8001594:	4b21      	ldr	r3, [pc, #132]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fa3e 	bl	8001a1c <animacion2>
}
 80015a0:	e032      	b.n	8001608 <HAL_TIM_PeriodElapsedCallback+0xe8>
    	else if(current_anim_state == 3)
 80015a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d115      	bne.n	80015d6 <HAL_TIM_PeriodElapsedCallback+0xb6>
			frame_anim++;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	3301      	adds	r3, #1
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	4b19      	ldr	r3, [pc, #100]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80015b6:	701a      	strb	r2, [r3, #0]
			if (frame_anim == 9) frame_anim = 1;
 80015b8:	4b18      	ldr	r3, [pc, #96]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b09      	cmp	r3, #9
 80015c0:	d102      	bne.n	80015c8 <HAL_TIM_PeriodElapsedCallback+0xa8>
 80015c2:	4b16      	ldr	r3, [pc, #88]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
			animacion3(frame_anim);
 80015c8:	4b14      	ldr	r3, [pc, #80]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 fae4 	bl	8001b9c <animacion3>
}
 80015d4:	e018      	b.n	8001608 <HAL_TIM_PeriodElapsedCallback+0xe8>
    	else if(current_anim_state == 4)
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d114      	bne.n	8001608 <HAL_TIM_PeriodElapsedCallback+0xe8>
			frame_anim++;
 80015de:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	3301      	adds	r3, #1
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80015ea:	701a      	strb	r2, [r3, #0]
			if (frame_anim == 7) frame_anim = 1;
 80015ec:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b07      	cmp	r3, #7
 80015f4:	d102      	bne.n	80015fc <HAL_TIM_PeriodElapsedCallback+0xdc>
 80015f6:	4b09      	ldr	r3, [pc, #36]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	701a      	strb	r2, [r3, #0]
			animacion4(frame_anim);
 80015fc:	4b07      	ldr	r3, [pc, #28]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f000 fbbc 	bl	8001d80 <animacion4>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40014400 	.word	0x40014400
 8001614:	2000179c 	.word	0x2000179c
 8001618:	20000040 	.word	0x20000040
 800161c:	20000384 	.word	0x20000384

08001620 <animacion1>:
//**********************************ANIMACIONES*******************************************
// En todas las animaciones se obtiene el nombre de la cancion reproducida y se procede a escribirlo en la pantalla en todos los frames
char* get_name();
char* quitar_extension(const char*);
void animacion1(uint8_t frame)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
	int x = 35; // Posicion del nombre de la cancion en el OLED
 800162a:	2323      	movs	r3, #35	@ 0x23
 800162c:	60fb      	str	r3, [r7, #12]
	char* song_name = quitar_extension(get_name()); // Usamos las dos funciones que hemos incluido a waveplayer.c para obtener el nombre del archivo en ejecucion
 800162e:	f001 fcc9 	bl	8002fc4 <get_name>
 8001632:	4603      	mov	r3, r0
 8001634:	4618      	mov	r0, r3
 8001636:	f001 fccf 	bl	8002fd8 <quitar_extension>
 800163a:	60b8      	str	r0, [r7, #8]

	  //// ANIMATION STARTS //////
	if (frame == 1)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d12a      	bne.n	8001698 <animacion1+0x78>
	{
	    SSD1306_Clear();
 8001642:	f001 f90c 	bl	800285e <SSD1306_Clear>
	    SSD1306_GotoXY (0,10); // goto 0, 10
 8001646:	210a      	movs	r1, #10
 8001648:	2000      	movs	r0, #0
 800164a:	f000 ffe7 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("\\O/", &Font_11x18, 1);
 800164e:	2201      	movs	r2, #1
 8001650:	49b2      	ldr	r1, [pc, #712]	@ (800191c <animacion1+0x2fc>)
 8001652:	48b3      	ldr	r0, [pc, #716]	@ (8001920 <animacion1+0x300>)
 8001654:	f001 f876 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 8001658:	211e      	movs	r1, #30
 800165a:	2000      	movs	r0, #0
 800165c:	f000 ffde 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (" |", &Font_11x18, 1);
 8001660:	2201      	movs	r2, #1
 8001662:	49ae      	ldr	r1, [pc, #696]	@ (800191c <animacion1+0x2fc>)
 8001664:	48af      	ldr	r0, [pc, #700]	@ (8001924 <animacion1+0x304>)
 8001666:	f001 f86d 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 800166a:	212d      	movs	r1, #45	@ 0x2d
 800166c:	2000      	movs	r0, #0
 800166e:	f000 ffd5 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("/ \\", &Font_11x18, 1);
 8001672:	2201      	movs	r2, #1
 8001674:	49a9      	ldr	r1, [pc, #676]	@ (800191c <animacion1+0x2fc>)
 8001676:	48ac      	ldr	r0, [pc, #688]	@ (8001928 <animacion1+0x308>)
 8001678:	f001 f864 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	b29b      	uxth	r3, r3
 8001680:	211e      	movs	r1, #30
 8001682:	4618      	mov	r0, r3
 8001684:	f000 ffca 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	49a4      	ldr	r1, [pc, #656]	@ (800191c <animacion1+0x2fc>)
 800168c:	68b8      	ldr	r0, [r7, #8]
 800168e:	f001 f859 	bl	8002744 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 8001692:	f000 ff1d 	bl	80024d0 <SSD1306_UpdateScreen>
	    SSD1306_Puts ("/ \\", &Font_11x18, 1);
	    SSD1306_GotoXY (x, 30);
	    SSD1306_Puts (song_name, &Font_11x18, 0);
	    SSD1306_UpdateScreen(); // update screen
	}
}
 8001696:	e1b0      	b.n	80019fa <animacion1+0x3da>
	else if (frame == 2)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d12a      	bne.n	80016f4 <animacion1+0xd4>
	    SSD1306_Clear();
 800169e:	f001 f8de 	bl	800285e <SSD1306_Clear>
	    SSD1306_GotoXY (0,10);
 80016a2:	210a      	movs	r1, #10
 80016a4:	2000      	movs	r0, #0
 80016a6:	f000 ffb9 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("\\O", &Font_11x18, 1);
 80016aa:	2201      	movs	r2, #1
 80016ac:	499b      	ldr	r1, [pc, #620]	@ (800191c <animacion1+0x2fc>)
 80016ae:	489f      	ldr	r0, [pc, #636]	@ (800192c <animacion1+0x30c>)
 80016b0:	f001 f848 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 80016b4:	211e      	movs	r1, #30
 80016b6:	2000      	movs	r0, #0
 80016b8:	f000 ffb0 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (" |\\", &Font_11x18, 1);
 80016bc:	2201      	movs	r2, #1
 80016be:	4997      	ldr	r1, [pc, #604]	@ (800191c <animacion1+0x2fc>)
 80016c0:	489b      	ldr	r0, [pc, #620]	@ (8001930 <animacion1+0x310>)
 80016c2:	f001 f83f 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 80016c6:	212d      	movs	r1, #45	@ 0x2d
 80016c8:	2000      	movs	r0, #0
 80016ca:	f000 ffa7 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("\\ \\", &Font_11x18, 1);
 80016ce:	2201      	movs	r2, #1
 80016d0:	4992      	ldr	r1, [pc, #584]	@ (800191c <animacion1+0x2fc>)
 80016d2:	4898      	ldr	r0, [pc, #608]	@ (8001934 <animacion1+0x314>)
 80016d4:	f001 f836 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	211e      	movs	r1, #30
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 ff9c 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	498d      	ldr	r1, [pc, #564]	@ (800191c <animacion1+0x2fc>)
 80016e8:	68b8      	ldr	r0, [r7, #8]
 80016ea:	f001 f82b 	bl	8002744 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 80016ee:	f000 feef 	bl	80024d0 <SSD1306_UpdateScreen>
}
 80016f2:	e182      	b.n	80019fa <animacion1+0x3da>
	else if (frame == 3)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d12a      	bne.n	8001750 <animacion1+0x130>
	    SSD1306_Clear();
 80016fa:	f001 f8b0 	bl	800285e <SSD1306_Clear>
	    SSD1306_GotoXY (0,10);
 80016fe:	210a      	movs	r1, #10
 8001700:	2000      	movs	r0, #0
 8001702:	f000 ff8b 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (" O/", &Font_11x18, 1);
 8001706:	2201      	movs	r2, #1
 8001708:	4984      	ldr	r1, [pc, #528]	@ (800191c <animacion1+0x2fc>)
 800170a:	488b      	ldr	r0, [pc, #556]	@ (8001938 <animacion1+0x318>)
 800170c:	f001 f81a 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 8001710:	211e      	movs	r1, #30
 8001712:	2000      	movs	r0, #0
 8001714:	f000 ff82 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("\\|", &Font_11x18, 1);
 8001718:	2201      	movs	r2, #1
 800171a:	4980      	ldr	r1, [pc, #512]	@ (800191c <animacion1+0x2fc>)
 800171c:	4887      	ldr	r0, [pc, #540]	@ (800193c <animacion1+0x31c>)
 800171e:	f001 f811 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 8001722:	212d      	movs	r1, #45	@ 0x2d
 8001724:	2000      	movs	r0, #0
 8001726:	f000 ff79 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("/ \\", &Font_11x18, 1);
 800172a:	2201      	movs	r2, #1
 800172c:	497b      	ldr	r1, [pc, #492]	@ (800191c <animacion1+0x2fc>)
 800172e:	487e      	ldr	r0, [pc, #504]	@ (8001928 <animacion1+0x308>)
 8001730:	f001 f808 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	b29b      	uxth	r3, r3
 8001738:	211e      	movs	r1, #30
 800173a:	4618      	mov	r0, r3
 800173c:	f000 ff6e 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	4976      	ldr	r1, [pc, #472]	@ (800191c <animacion1+0x2fc>)
 8001744:	68b8      	ldr	r0, [r7, #8]
 8001746:	f000 fffd 	bl	8002744 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 800174a:	f000 fec1 	bl	80024d0 <SSD1306_UpdateScreen>
}
 800174e:	e154      	b.n	80019fa <animacion1+0x3da>
	else if (frame == 4)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b04      	cmp	r3, #4
 8001754:	d12a      	bne.n	80017ac <animacion1+0x18c>
	    SSD1306_Clear();
 8001756:	f001 f882 	bl	800285e <SSD1306_Clear>
	    SSD1306_GotoXY (0,10);
 800175a:	210a      	movs	r1, #10
 800175c:	2000      	movs	r0, #0
 800175e:	f000 ff5d 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("\\O", &Font_11x18, 1);
 8001762:	2201      	movs	r2, #1
 8001764:	496d      	ldr	r1, [pc, #436]	@ (800191c <animacion1+0x2fc>)
 8001766:	4871      	ldr	r0, [pc, #452]	@ (800192c <animacion1+0x30c>)
 8001768:	f000 ffec 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 800176c:	211e      	movs	r1, #30
 800176e:	2000      	movs	r0, #0
 8001770:	f000 ff54 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (" |\\", &Font_11x18, 1);
 8001774:	2201      	movs	r2, #1
 8001776:	4969      	ldr	r1, [pc, #420]	@ (800191c <animacion1+0x2fc>)
 8001778:	486d      	ldr	r0, [pc, #436]	@ (8001930 <animacion1+0x310>)
 800177a:	f000 ffe3 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 800177e:	212d      	movs	r1, #45	@ 0x2d
 8001780:	2000      	movs	r0, #0
 8001782:	f000 ff4b 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("/ \\", &Font_11x18, 1);
 8001786:	2201      	movs	r2, #1
 8001788:	4964      	ldr	r1, [pc, #400]	@ (800191c <animacion1+0x2fc>)
 800178a:	4867      	ldr	r0, [pc, #412]	@ (8001928 <animacion1+0x308>)
 800178c:	f000 ffda 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	b29b      	uxth	r3, r3
 8001794:	211e      	movs	r1, #30
 8001796:	4618      	mov	r0, r3
 8001798:	f000 ff40 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 800179c:	2200      	movs	r2, #0
 800179e:	495f      	ldr	r1, [pc, #380]	@ (800191c <animacion1+0x2fc>)
 80017a0:	68b8      	ldr	r0, [r7, #8]
 80017a2:	f000 ffcf 	bl	8002744 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 80017a6:	f000 fe93 	bl	80024d0 <SSD1306_UpdateScreen>
}
 80017aa:	e126      	b.n	80019fa <animacion1+0x3da>
	else if (frame == 5)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	d12a      	bne.n	8001808 <animacion1+0x1e8>
	    SSD1306_Clear();
 80017b2:	f001 f854 	bl	800285e <SSD1306_Clear>
	    SSD1306_GotoXY (0,10);
 80017b6:	210a      	movs	r1, #10
 80017b8:	2000      	movs	r0, #0
 80017ba:	f000 ff2f 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (" O/", &Font_11x18, 1);
 80017be:	2201      	movs	r2, #1
 80017c0:	4956      	ldr	r1, [pc, #344]	@ (800191c <animacion1+0x2fc>)
 80017c2:	485d      	ldr	r0, [pc, #372]	@ (8001938 <animacion1+0x318>)
 80017c4:	f000 ffbe 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 80017c8:	211e      	movs	r1, #30
 80017ca:	2000      	movs	r0, #0
 80017cc:	f000 ff26 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("\\|", &Font_11x18, 1);
 80017d0:	2201      	movs	r2, #1
 80017d2:	4952      	ldr	r1, [pc, #328]	@ (800191c <animacion1+0x2fc>)
 80017d4:	4859      	ldr	r0, [pc, #356]	@ (800193c <animacion1+0x31c>)
 80017d6:	f000 ffb5 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 80017da:	212d      	movs	r1, #45	@ 0x2d
 80017dc:	2000      	movs	r0, #0
 80017de:	f000 ff1d 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("\\ \\", &Font_11x18, 1);
 80017e2:	2201      	movs	r2, #1
 80017e4:	494d      	ldr	r1, [pc, #308]	@ (800191c <animacion1+0x2fc>)
 80017e6:	4853      	ldr	r0, [pc, #332]	@ (8001934 <animacion1+0x314>)
 80017e8:	f000 ffac 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	211e      	movs	r1, #30
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 ff12 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	4948      	ldr	r1, [pc, #288]	@ (800191c <animacion1+0x2fc>)
 80017fc:	68b8      	ldr	r0, [r7, #8]
 80017fe:	f000 ffa1 	bl	8002744 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 8001802:	f000 fe65 	bl	80024d0 <SSD1306_UpdateScreen>
}
 8001806:	e0f8      	b.n	80019fa <animacion1+0x3da>
	else if (frame == 6)
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2b06      	cmp	r3, #6
 800180c:	d12a      	bne.n	8001864 <animacion1+0x244>
	    SSD1306_Clear();
 800180e:	f001 f826 	bl	800285e <SSD1306_Clear>
	    SSD1306_GotoXY (0,10);
 8001812:	210a      	movs	r1, #10
 8001814:	2000      	movs	r0, #0
 8001816:	f000 ff01 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("\\O", &Font_11x18, 1);
 800181a:	2201      	movs	r2, #1
 800181c:	493f      	ldr	r1, [pc, #252]	@ (800191c <animacion1+0x2fc>)
 800181e:	4843      	ldr	r0, [pc, #268]	@ (800192c <animacion1+0x30c>)
 8001820:	f000 ff90 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 8001824:	211e      	movs	r1, #30
 8001826:	2000      	movs	r0, #0
 8001828:	f000 fef8 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (" |\\", &Font_11x18, 1);
 800182c:	2201      	movs	r2, #1
 800182e:	493b      	ldr	r1, [pc, #236]	@ (800191c <animacion1+0x2fc>)
 8001830:	483f      	ldr	r0, [pc, #252]	@ (8001930 <animacion1+0x310>)
 8001832:	f000 ff87 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 8001836:	212d      	movs	r1, #45	@ 0x2d
 8001838:	2000      	movs	r0, #0
 800183a:	f000 feef 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("/ \\", &Font_11x18, 1);
 800183e:	2201      	movs	r2, #1
 8001840:	4936      	ldr	r1, [pc, #216]	@ (800191c <animacion1+0x2fc>)
 8001842:	4839      	ldr	r0, [pc, #228]	@ (8001928 <animacion1+0x308>)
 8001844:	f000 ff7e 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	b29b      	uxth	r3, r3
 800184c:	211e      	movs	r1, #30
 800184e:	4618      	mov	r0, r3
 8001850:	f000 fee4 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	4931      	ldr	r1, [pc, #196]	@ (800191c <animacion1+0x2fc>)
 8001858:	68b8      	ldr	r0, [r7, #8]
 800185a:	f000 ff73 	bl	8002744 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 800185e:	f000 fe37 	bl	80024d0 <SSD1306_UpdateScreen>
}
 8001862:	e0ca      	b.n	80019fa <animacion1+0x3da>
	else if (frame == 7)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	2b07      	cmp	r3, #7
 8001868:	d12a      	bne.n	80018c0 <animacion1+0x2a0>
	    SSD1306_Clear();
 800186a:	f000 fff8 	bl	800285e <SSD1306_Clear>
	    SSD1306_GotoXY (0,10);
 800186e:	210a      	movs	r1, #10
 8001870:	2000      	movs	r0, #0
 8001872:	f000 fed3 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (" O/", &Font_11x18, 1);
 8001876:	2201      	movs	r2, #1
 8001878:	4928      	ldr	r1, [pc, #160]	@ (800191c <animacion1+0x2fc>)
 800187a:	482f      	ldr	r0, [pc, #188]	@ (8001938 <animacion1+0x318>)
 800187c:	f000 ff62 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 8001880:	211e      	movs	r1, #30
 8001882:	2000      	movs	r0, #0
 8001884:	f000 feca 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("\\|", &Font_11x18, 1);
 8001888:	2201      	movs	r2, #1
 800188a:	4924      	ldr	r1, [pc, #144]	@ (800191c <animacion1+0x2fc>)
 800188c:	482b      	ldr	r0, [pc, #172]	@ (800193c <animacion1+0x31c>)
 800188e:	f000 ff59 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 8001892:	212d      	movs	r1, #45	@ 0x2d
 8001894:	2000      	movs	r0, #0
 8001896:	f000 fec1 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("/ \\", &Font_11x18, 1);
 800189a:	2201      	movs	r2, #1
 800189c:	491f      	ldr	r1, [pc, #124]	@ (800191c <animacion1+0x2fc>)
 800189e:	4822      	ldr	r0, [pc, #136]	@ (8001928 <animacion1+0x308>)
 80018a0:	f000 ff50 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	211e      	movs	r1, #30
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 feb6 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	491a      	ldr	r1, [pc, #104]	@ (800191c <animacion1+0x2fc>)
 80018b4:	68b8      	ldr	r0, [r7, #8]
 80018b6:	f000 ff45 	bl	8002744 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 80018ba:	f000 fe09 	bl	80024d0 <SSD1306_UpdateScreen>
}
 80018be:	e09c      	b.n	80019fa <animacion1+0x3da>
	else if (frame == 8)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d13e      	bne.n	8001944 <animacion1+0x324>
	    SSD1306_Clear();
 80018c6:	f000 ffca 	bl	800285e <SSD1306_Clear>
	    SSD1306_GotoXY (0,10);
 80018ca:	210a      	movs	r1, #10
 80018cc:	2000      	movs	r0, #0
 80018ce:	f000 fea5 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("\\O_", &Font_11x18, 1);
 80018d2:	2201      	movs	r2, #1
 80018d4:	4911      	ldr	r1, [pc, #68]	@ (800191c <animacion1+0x2fc>)
 80018d6:	481a      	ldr	r0, [pc, #104]	@ (8001940 <animacion1+0x320>)
 80018d8:	f000 ff34 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 80018dc:	211e      	movs	r1, #30
 80018de:	2000      	movs	r0, #0
 80018e0:	f000 fe9c 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (" |", &Font_11x18, 1);
 80018e4:	2201      	movs	r2, #1
 80018e6:	490d      	ldr	r1, [pc, #52]	@ (800191c <animacion1+0x2fc>)
 80018e8:	480e      	ldr	r0, [pc, #56]	@ (8001924 <animacion1+0x304>)
 80018ea:	f000 ff2b 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 80018ee:	212d      	movs	r1, #45	@ 0x2d
 80018f0:	2000      	movs	r0, #0
 80018f2:	f000 fe93 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("/ \\", &Font_11x18, 1);
 80018f6:	2201      	movs	r2, #1
 80018f8:	4908      	ldr	r1, [pc, #32]	@ (800191c <animacion1+0x2fc>)
 80018fa:	480b      	ldr	r0, [pc, #44]	@ (8001928 <animacion1+0x308>)
 80018fc:	f000 ff22 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	b29b      	uxth	r3, r3
 8001904:	211e      	movs	r1, #30
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fe88 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	4903      	ldr	r1, [pc, #12]	@ (800191c <animacion1+0x2fc>)
 8001910:	68b8      	ldr	r0, [r7, #8]
 8001912:	f000 ff17 	bl	8002744 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 8001916:	f000 fddb 	bl	80024d0 <SSD1306_UpdateScreen>
}
 800191a:	e06e      	b.n	80019fa <animacion1+0x3da>
 800191c:	20000038 	.word	0x20000038
 8001920:	080123e0 	.word	0x080123e0
 8001924:	080123e4 	.word	0x080123e4
 8001928:	080123e8 	.word	0x080123e8
 800192c:	080123ec 	.word	0x080123ec
 8001930:	080123f0 	.word	0x080123f0
 8001934:	080123f4 	.word	0x080123f4
 8001938:	080123f8 	.word	0x080123f8
 800193c:	080123fc 	.word	0x080123fc
 8001940:	08012400 	.word	0x08012400
	else if (frame == 9)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	2b09      	cmp	r3, #9
 8001948:	d12a      	bne.n	80019a0 <animacion1+0x380>
	    SSD1306_Clear();
 800194a:	f000 ff88 	bl	800285e <SSD1306_Clear>
	    SSD1306_GotoXY (0,10);
 800194e:	210a      	movs	r1, #10
 8001950:	2000      	movs	r0, #0
 8001952:	f000 fe63 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("\\O/", &Font_11x18, 1);
 8001956:	2201      	movs	r2, #1
 8001958:	492a      	ldr	r1, [pc, #168]	@ (8001a04 <animacion1+0x3e4>)
 800195a:	482b      	ldr	r0, [pc, #172]	@ (8001a08 <animacion1+0x3e8>)
 800195c:	f000 fef2 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 8001960:	211e      	movs	r1, #30
 8001962:	2000      	movs	r0, #0
 8001964:	f000 fe5a 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (" |", &Font_11x18, 1);
 8001968:	2201      	movs	r2, #1
 800196a:	4926      	ldr	r1, [pc, #152]	@ (8001a04 <animacion1+0x3e4>)
 800196c:	4827      	ldr	r0, [pc, #156]	@ (8001a0c <animacion1+0x3ec>)
 800196e:	f000 fee9 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 8001972:	212d      	movs	r1, #45	@ 0x2d
 8001974:	2000      	movs	r0, #0
 8001976:	f000 fe51 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("\\ \\", &Font_11x18, 1);
 800197a:	2201      	movs	r2, #1
 800197c:	4921      	ldr	r1, [pc, #132]	@ (8001a04 <animacion1+0x3e4>)
 800197e:	4824      	ldr	r0, [pc, #144]	@ (8001a10 <animacion1+0x3f0>)
 8001980:	f000 fee0 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	b29b      	uxth	r3, r3
 8001988:	211e      	movs	r1, #30
 800198a:	4618      	mov	r0, r3
 800198c:	f000 fe46 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	491c      	ldr	r1, [pc, #112]	@ (8001a04 <animacion1+0x3e4>)
 8001994:	68b8      	ldr	r0, [r7, #8]
 8001996:	f000 fed5 	bl	8002744 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 800199a:	f000 fd99 	bl	80024d0 <SSD1306_UpdateScreen>
}
 800199e:	e02c      	b.n	80019fa <animacion1+0x3da>
	else if(frame == 10)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	2b0a      	cmp	r3, #10
 80019a4:	d129      	bne.n	80019fa <animacion1+0x3da>
	    SSD1306_Clear();
 80019a6:	f000 ff5a 	bl	800285e <SSD1306_Clear>
	    SSD1306_GotoXY (0,10);
 80019aa:	210a      	movs	r1, #10
 80019ac:	2000      	movs	r0, #0
 80019ae:	f000 fe35 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("_O/", &Font_11x18, 1);
 80019b2:	2201      	movs	r2, #1
 80019b4:	4913      	ldr	r1, [pc, #76]	@ (8001a04 <animacion1+0x3e4>)
 80019b6:	4817      	ldr	r0, [pc, #92]	@ (8001a14 <animacion1+0x3f4>)
 80019b8:	f000 fec4 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 30);
 80019bc:	211e      	movs	r1, #30
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 fe2c 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (" |", &Font_11x18, 1);
 80019c4:	2201      	movs	r2, #1
 80019c6:	490f      	ldr	r1, [pc, #60]	@ (8001a04 <animacion1+0x3e4>)
 80019c8:	4810      	ldr	r0, [pc, #64]	@ (8001a0c <animacion1+0x3ec>)
 80019ca:	f000 febb 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (0, 45);
 80019ce:	212d      	movs	r1, #45	@ 0x2d
 80019d0:	2000      	movs	r0, #0
 80019d2:	f000 fe23 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts ("/ \\", &Font_11x18, 1);
 80019d6:	2201      	movs	r2, #1
 80019d8:	490a      	ldr	r1, [pc, #40]	@ (8001a04 <animacion1+0x3e4>)
 80019da:	480f      	ldr	r0, [pc, #60]	@ (8001a18 <animacion1+0x3f8>)
 80019dc:	f000 feb2 	bl	8002744 <SSD1306_Puts>
	    SSD1306_GotoXY (x, 30);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	211e      	movs	r1, #30
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 fe18 	bl	800261c <SSD1306_GotoXY>
	    SSD1306_Puts (song_name, &Font_11x18, 0);
 80019ec:	2200      	movs	r2, #0
 80019ee:	4905      	ldr	r1, [pc, #20]	@ (8001a04 <animacion1+0x3e4>)
 80019f0:	68b8      	ldr	r0, [r7, #8]
 80019f2:	f000 fea7 	bl	8002744 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 80019f6:	f000 fd6b 	bl	80024d0 <SSD1306_UpdateScreen>
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000038 	.word	0x20000038
 8001a08:	080123e0 	.word	0x080123e0
 8001a0c:	080123e4 	.word	0x080123e4
 8001a10:	080123f4 	.word	0x080123f4
 8001a14:	08012404 	.word	0x08012404
 8001a18:	080123e8 	.word	0x080123e8

08001a1c <animacion2>:

void animacion2(uint8_t frame)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
	char* song_name = quitar_extension(get_name()); // Usamos las dos funciones que hemos incluido a waveplayer.c para obtener el nombre del archivo en ejecucion
 8001a26:	f001 facd 	bl	8002fc4 <get_name>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f001 fad3 	bl	8002fd8 <quitar_extension>
 8001a32:	60f8      	str	r0, [r7, #12]

	  //// ANIMATION STARTS //////
	if (frame == 1)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d117      	bne.n	8001a6a <animacion2+0x4e>
	{
		SSD1306_Clear();
 8001a3a:	f000 ff10 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, skater1, 128, 64, 1);
 8001a3e:	2301      	movs	r3, #1
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	2340      	movs	r3, #64	@ 0x40
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2380      	movs	r3, #128	@ 0x80
 8001a48:	4a4d      	ldr	r2, [pc, #308]	@ (8001b80 <animacion2+0x164>)
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f000 fe9e 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001a52:	212d      	movs	r1, #45	@ 0x2d
 8001a54:	200a      	movs	r0, #10
 8001a56:	f000 fde1 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	4949      	ldr	r1, [pc, #292]	@ (8001b84 <animacion2+0x168>)
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 fe70 	bl	8002744 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001a64:	f000 fd34 	bl	80024d0 <SSD1306_UpdateScreen>
		SSD1306_DrawBitmap(0, 0, skater6, 128, 64, 1);
		SSD1306_GotoXY (10,45);
		SSD1306_Puts (song_name, &Font_11x18, 1);
		SSD1306_UpdateScreen(); // update screen
	}
}
 8001a68:	e085      	b.n	8001b76 <animacion2+0x15a>
	else if (frame == 2)
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d117      	bne.n	8001aa0 <animacion2+0x84>
		SSD1306_Clear();
 8001a70:	f000 fef5 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, skater2, 128, 64, 1);
 8001a74:	2301      	movs	r3, #1
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	2340      	movs	r3, #64	@ 0x40
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	4a42      	ldr	r2, [pc, #264]	@ (8001b88 <animacion2+0x16c>)
 8001a80:	2100      	movs	r1, #0
 8001a82:	2000      	movs	r0, #0
 8001a84:	f000 fe83 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001a88:	212d      	movs	r1, #45	@ 0x2d
 8001a8a:	200a      	movs	r0, #10
 8001a8c:	f000 fdc6 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001a90:	2201      	movs	r2, #1
 8001a92:	493c      	ldr	r1, [pc, #240]	@ (8001b84 <animacion2+0x168>)
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 fe55 	bl	8002744 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 8001a9a:	f000 fd19 	bl	80024d0 <SSD1306_UpdateScreen>
}
 8001a9e:	e06a      	b.n	8001b76 <animacion2+0x15a>
	else if (frame == 3)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d117      	bne.n	8001ad6 <animacion2+0xba>
		SSD1306_Clear();
 8001aa6:	f000 feda 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, skater3, 128, 64, 1);
 8001aaa:	2301      	movs	r3, #1
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	2340      	movs	r3, #64	@ 0x40
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	4a35      	ldr	r2, [pc, #212]	@ (8001b8c <animacion2+0x170>)
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f000 fe68 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001abe:	212d      	movs	r1, #45	@ 0x2d
 8001ac0:	200a      	movs	r0, #10
 8001ac2:	f000 fdab 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	492e      	ldr	r1, [pc, #184]	@ (8001b84 <animacion2+0x168>)
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 fe3a 	bl	8002744 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001ad0:	f000 fcfe 	bl	80024d0 <SSD1306_UpdateScreen>
}
 8001ad4:	e04f      	b.n	8001b76 <animacion2+0x15a>
	else if (frame == 4)
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d117      	bne.n	8001b0c <animacion2+0xf0>
		SSD1306_Clear();
 8001adc:	f000 febf 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, skater4, 128, 64, 1);
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	9301      	str	r3, [sp, #4]
 8001ae4:	2340      	movs	r3, #64	@ 0x40
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	4a29      	ldr	r2, [pc, #164]	@ (8001b90 <animacion2+0x174>)
 8001aec:	2100      	movs	r1, #0
 8001aee:	2000      	movs	r0, #0
 8001af0:	f000 fe4d 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001af4:	212d      	movs	r1, #45	@ 0x2d
 8001af6:	200a      	movs	r0, #10
 8001af8:	f000 fd90 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001afc:	2201      	movs	r2, #1
 8001afe:	4921      	ldr	r1, [pc, #132]	@ (8001b84 <animacion2+0x168>)
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 fe1f 	bl	8002744 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001b06:	f000 fce3 	bl	80024d0 <SSD1306_UpdateScreen>
}
 8001b0a:	e034      	b.n	8001b76 <animacion2+0x15a>
	else if (frame == 5)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2b05      	cmp	r3, #5
 8001b10:	d117      	bne.n	8001b42 <animacion2+0x126>
		SSD1306_Clear();
 8001b12:	f000 fea4 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, skater5, 128, 64, 1);
 8001b16:	2301      	movs	r3, #1
 8001b18:	9301      	str	r3, [sp, #4]
 8001b1a:	2340      	movs	r3, #64	@ 0x40
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2380      	movs	r3, #128	@ 0x80
 8001b20:	4a1c      	ldr	r2, [pc, #112]	@ (8001b94 <animacion2+0x178>)
 8001b22:	2100      	movs	r1, #0
 8001b24:	2000      	movs	r0, #0
 8001b26:	f000 fe32 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001b2a:	212d      	movs	r1, #45	@ 0x2d
 8001b2c:	200a      	movs	r0, #10
 8001b2e:	f000 fd75 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001b32:	2201      	movs	r2, #1
 8001b34:	4913      	ldr	r1, [pc, #76]	@ (8001b84 <animacion2+0x168>)
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fe04 	bl	8002744 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001b3c:	f000 fcc8 	bl	80024d0 <SSD1306_UpdateScreen>
}
 8001b40:	e019      	b.n	8001b76 <animacion2+0x15a>
	else if (frame == 6)
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	2b06      	cmp	r3, #6
 8001b46:	d116      	bne.n	8001b76 <animacion2+0x15a>
		SSD1306_Clear();
 8001b48:	f000 fe89 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, skater6, 128, 64, 1);
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	2340      	movs	r3, #64	@ 0x40
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2380      	movs	r3, #128	@ 0x80
 8001b56:	4a10      	ldr	r2, [pc, #64]	@ (8001b98 <animacion2+0x17c>)
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f000 fe17 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001b60:	212d      	movs	r1, #45	@ 0x2d
 8001b62:	200a      	movs	r0, #10
 8001b64:	f000 fd5a 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4906      	ldr	r1, [pc, #24]	@ (8001b84 <animacion2+0x168>)
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 fde9 	bl	8002744 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001b72:	f000 fcad 	bl	80024d0 <SSD1306_UpdateScreen>
}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	08013210 	.word	0x08013210
 8001b84:	20000038 	.word	0x20000038
 8001b88:	08013610 	.word	0x08013610
 8001b8c:	08013a10 	.word	0x08013a10
 8001b90:	08013e10 	.word	0x08013e10
 8001b94:	08014210 	.word	0x08014210
 8001b98:	08014610 	.word	0x08014610

08001b9c <animacion3>:

void animacion3(uint8_t frame)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af02      	add	r7, sp, #8
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
	char* song_name = quitar_extension(get_name()); // Usamos las dos funciones que hemos incluido a waveplayer.c para obtener el nombre del archivo en ejecucion
 8001ba6:	f001 fa0d 	bl	8002fc4 <get_name>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f001 fa13 	bl	8002fd8 <quitar_extension>
 8001bb2:	60f8      	str	r0, [r7, #12]

	  //// ANIMATION STARTS //////
	if (frame == 1)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d117      	bne.n	8001bea <animacion3+0x4e>
	{
		SSD1306_Clear();
 8001bba:	f000 fe50 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, fumador1, 128, 64, 1);
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	2340      	movs	r3, #64	@ 0x40
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	2380      	movs	r3, #128	@ 0x80
 8001bc8:	4a68      	ldr	r2, [pc, #416]	@ (8001d6c <animacion3+0x1d0>)
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f000 fdde 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001bd2:	212d      	movs	r1, #45	@ 0x2d
 8001bd4:	200a      	movs	r0, #10
 8001bd6:	f000 fd21 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4964      	ldr	r1, [pc, #400]	@ (8001d70 <animacion3+0x1d4>)
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 fdb0 	bl	8002744 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001be4:	f000 fc74 	bl	80024d0 <SSD1306_UpdateScreen>
		SSD1306_DrawBitmap(0, 0, fumador2, 128, 64, 1);
		SSD1306_GotoXY (10,45);
		SSD1306_Puts (song_name, &Font_11x18, 1);
		SSD1306_UpdateScreen(); // update screen
	}
}
 8001be8:	e0bb      	b.n	8001d62 <animacion3+0x1c6>
	else if (frame == 2)
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d117      	bne.n	8001c20 <animacion3+0x84>
		SSD1306_Clear();
 8001bf0:	f000 fe35 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, fumador2, 128, 64, 1);
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	2340      	movs	r3, #64	@ 0x40
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	2380      	movs	r3, #128	@ 0x80
 8001bfe:	4a5d      	ldr	r2, [pc, #372]	@ (8001d74 <animacion3+0x1d8>)
 8001c00:	2100      	movs	r1, #0
 8001c02:	2000      	movs	r0, #0
 8001c04:	f000 fdc3 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001c08:	212d      	movs	r1, #45	@ 0x2d
 8001c0a:	200a      	movs	r0, #10
 8001c0c:	f000 fd06 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001c10:	2201      	movs	r2, #1
 8001c12:	4957      	ldr	r1, [pc, #348]	@ (8001d70 <animacion3+0x1d4>)
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 fd95 	bl	8002744 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001c1a:	f000 fc59 	bl	80024d0 <SSD1306_UpdateScreen>
}
 8001c1e:	e0a0      	b.n	8001d62 <animacion3+0x1c6>
	else if (frame == 3)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d117      	bne.n	8001c56 <animacion3+0xba>
		SSD1306_Clear();
 8001c26:	f000 fe1a 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, fumador3, 128, 64, 1);
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	9301      	str	r3, [sp, #4]
 8001c2e:	2340      	movs	r3, #64	@ 0x40
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2380      	movs	r3, #128	@ 0x80
 8001c34:	4a50      	ldr	r2, [pc, #320]	@ (8001d78 <animacion3+0x1dc>)
 8001c36:	2100      	movs	r1, #0
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f000 fda8 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001c3e:	212d      	movs	r1, #45	@ 0x2d
 8001c40:	200a      	movs	r0, #10
 8001c42:	f000 fceb 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001c46:	2201      	movs	r2, #1
 8001c48:	4949      	ldr	r1, [pc, #292]	@ (8001d70 <animacion3+0x1d4>)
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 fd7a 	bl	8002744 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001c50:	f000 fc3e 	bl	80024d0 <SSD1306_UpdateScreen>
}
 8001c54:	e085      	b.n	8001d62 <animacion3+0x1c6>
	else if (frame == 4)
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d117      	bne.n	8001c8c <animacion3+0xf0>
		SSD1306_Clear();
 8001c5c:	f000 fdff 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, fumador4, 128, 64, 1);
 8001c60:	2301      	movs	r3, #1
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	2340      	movs	r3, #64	@ 0x40
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2380      	movs	r3, #128	@ 0x80
 8001c6a:	4a44      	ldr	r2, [pc, #272]	@ (8001d7c <animacion3+0x1e0>)
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f000 fd8d 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001c74:	212d      	movs	r1, #45	@ 0x2d
 8001c76:	200a      	movs	r0, #10
 8001c78:	f000 fcd0 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	493c      	ldr	r1, [pc, #240]	@ (8001d70 <animacion3+0x1d4>)
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 fd5f 	bl	8002744 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001c86:	f000 fc23 	bl	80024d0 <SSD1306_UpdateScreen>
}
 8001c8a:	e06a      	b.n	8001d62 <animacion3+0x1c6>
	else if (frame == 5)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d117      	bne.n	8001cc2 <animacion3+0x126>
		SSD1306_Clear();
 8001c92:	f000 fde4 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, fumador3, 128, 64, 1);
 8001c96:	2301      	movs	r3, #1
 8001c98:	9301      	str	r3, [sp, #4]
 8001c9a:	2340      	movs	r3, #64	@ 0x40
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	2380      	movs	r3, #128	@ 0x80
 8001ca0:	4a35      	ldr	r2, [pc, #212]	@ (8001d78 <animacion3+0x1dc>)
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f000 fd72 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001caa:	212d      	movs	r1, #45	@ 0x2d
 8001cac:	200a      	movs	r0, #10
 8001cae:	f000 fcb5 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	492e      	ldr	r1, [pc, #184]	@ (8001d70 <animacion3+0x1d4>)
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 fd44 	bl	8002744 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001cbc:	f000 fc08 	bl	80024d0 <SSD1306_UpdateScreen>
}
 8001cc0:	e04f      	b.n	8001d62 <animacion3+0x1c6>
	else if (frame == 6)
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	2b06      	cmp	r3, #6
 8001cc6:	d117      	bne.n	8001cf8 <animacion3+0x15c>
		SSD1306_Clear();
 8001cc8:	f000 fdc9 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, fumador2, 128, 64, 1);
 8001ccc:	2301      	movs	r3, #1
 8001cce:	9301      	str	r3, [sp, #4]
 8001cd0:	2340      	movs	r3, #64	@ 0x40
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2380      	movs	r3, #128	@ 0x80
 8001cd6:	4a27      	ldr	r2, [pc, #156]	@ (8001d74 <animacion3+0x1d8>)
 8001cd8:	2100      	movs	r1, #0
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f000 fd57 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001ce0:	212d      	movs	r1, #45	@ 0x2d
 8001ce2:	200a      	movs	r0, #10
 8001ce4:	f000 fc9a 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001ce8:	2201      	movs	r2, #1
 8001cea:	4921      	ldr	r1, [pc, #132]	@ (8001d70 <animacion3+0x1d4>)
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 fd29 	bl	8002744 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001cf2:	f000 fbed 	bl	80024d0 <SSD1306_UpdateScreen>
}
 8001cf6:	e034      	b.n	8001d62 <animacion3+0x1c6>
	else if (frame == 7)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	2b07      	cmp	r3, #7
 8001cfc:	d117      	bne.n	8001d2e <animacion3+0x192>
		SSD1306_Clear();
 8001cfe:	f000 fdae 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, fumador4, 128, 64, 1);
 8001d02:	2301      	movs	r3, #1
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	2340      	movs	r3, #64	@ 0x40
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2380      	movs	r3, #128	@ 0x80
 8001d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d7c <animacion3+0x1e0>)
 8001d0e:	2100      	movs	r1, #0
 8001d10:	2000      	movs	r0, #0
 8001d12:	f000 fd3c 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001d16:	212d      	movs	r1, #45	@ 0x2d
 8001d18:	200a      	movs	r0, #10
 8001d1a:	f000 fc7f 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4913      	ldr	r1, [pc, #76]	@ (8001d70 <animacion3+0x1d4>)
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 fd0e 	bl	8002744 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001d28:	f000 fbd2 	bl	80024d0 <SSD1306_UpdateScreen>
}
 8001d2c:	e019      	b.n	8001d62 <animacion3+0x1c6>
	else if (frame == 8)
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d116      	bne.n	8001d62 <animacion3+0x1c6>
		SSD1306_Clear();
 8001d34:	f000 fd93 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, fumador2, 128, 64, 1);
 8001d38:	2301      	movs	r3, #1
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	2340      	movs	r3, #64	@ 0x40
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2380      	movs	r3, #128	@ 0x80
 8001d42:	4a0c      	ldr	r2, [pc, #48]	@ (8001d74 <animacion3+0x1d8>)
 8001d44:	2100      	movs	r1, #0
 8001d46:	2000      	movs	r0, #0
 8001d48:	f000 fd21 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001d4c:	212d      	movs	r1, #45	@ 0x2d
 8001d4e:	200a      	movs	r0, #10
 8001d50:	f000 fc64 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001d54:	2201      	movs	r2, #1
 8001d56:	4906      	ldr	r1, [pc, #24]	@ (8001d70 <animacion3+0x1d4>)
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 fcf3 	bl	8002744 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001d5e:	f000 fbb7 	bl	80024d0 <SSD1306_UpdateScreen>
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	08014a10 	.word	0x08014a10
 8001d70:	20000038 	.word	0x20000038
 8001d74:	08014e10 	.word	0x08014e10
 8001d78:	08015210 	.word	0x08015210
 8001d7c:	08015610 	.word	0x08015610

08001d80 <animacion4>:

void animacion4(uint8_t frame)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
	char* song_name = quitar_extension(get_name()); // Usamos las dos funciones que hemos incluido a waveplayer.c para obtener el nombre del archivo en ejecucion
 8001d8a:	f001 f91b 	bl	8002fc4 <get_name>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f001 f921 	bl	8002fd8 <quitar_extension>
 8001d96:	60f8      	str	r0, [r7, #12]

	  //// ANIMATION STARTS //////
	if (frame == 1)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d117      	bne.n	8001dce <animacion4+0x4e>
	{
		SSD1306_Clear();
 8001d9e:	f000 fd5e 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, bailadora1, 128, 64, 1);
 8001da2:	2301      	movs	r3, #1
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	2340      	movs	r3, #64	@ 0x40
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	2380      	movs	r3, #128	@ 0x80
 8001dac:	4a4d      	ldr	r2, [pc, #308]	@ (8001ee4 <animacion4+0x164>)
 8001dae:	2100      	movs	r1, #0
 8001db0:	2000      	movs	r0, #0
 8001db2:	f000 fcec 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001db6:	212d      	movs	r1, #45	@ 0x2d
 8001db8:	200a      	movs	r0, #10
 8001dba:	f000 fc2f 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	4949      	ldr	r1, [pc, #292]	@ (8001ee8 <animacion4+0x168>)
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 fcbe 	bl	8002744 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001dc8:	f000 fb82 	bl	80024d0 <SSD1306_UpdateScreen>
		SSD1306_DrawBitmap(0, 0, bailadora2, 128, 64, 1);
		SSD1306_GotoXY (10,45);
		SSD1306_Puts (song_name, &Font_11x18, 1);
		SSD1306_UpdateScreen(); // update screen
	}
}
 8001dcc:	e085      	b.n	8001eda <animacion4+0x15a>
	else if (frame == 2)
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d117      	bne.n	8001e04 <animacion4+0x84>
		SSD1306_Clear();
 8001dd4:	f000 fd43 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, bailadora2, 128, 64, 1);
 8001dd8:	2301      	movs	r3, #1
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	2340      	movs	r3, #64	@ 0x40
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2380      	movs	r3, #128	@ 0x80
 8001de2:	4a42      	ldr	r2, [pc, #264]	@ (8001eec <animacion4+0x16c>)
 8001de4:	2100      	movs	r1, #0
 8001de6:	2000      	movs	r0, #0
 8001de8:	f000 fcd1 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001dec:	212d      	movs	r1, #45	@ 0x2d
 8001dee:	200a      	movs	r0, #10
 8001df0:	f000 fc14 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001df4:	2201      	movs	r2, #1
 8001df6:	493c      	ldr	r1, [pc, #240]	@ (8001ee8 <animacion4+0x168>)
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 fca3 	bl	8002744 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); // update screen
 8001dfe:	f000 fb67 	bl	80024d0 <SSD1306_UpdateScreen>
}
 8001e02:	e06a      	b.n	8001eda <animacion4+0x15a>
	else if (frame == 3)
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	d117      	bne.n	8001e3a <animacion4+0xba>
		SSD1306_Clear();
 8001e0a:	f000 fd28 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, bailadora3, 128, 64, 1);
 8001e0e:	2301      	movs	r3, #1
 8001e10:	9301      	str	r3, [sp, #4]
 8001e12:	2340      	movs	r3, #64	@ 0x40
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	2380      	movs	r3, #128	@ 0x80
 8001e18:	4a35      	ldr	r2, [pc, #212]	@ (8001ef0 <animacion4+0x170>)
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f000 fcb6 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001e22:	212d      	movs	r1, #45	@ 0x2d
 8001e24:	200a      	movs	r0, #10
 8001e26:	f000 fbf9 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	492e      	ldr	r1, [pc, #184]	@ (8001ee8 <animacion4+0x168>)
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 fc88 	bl	8002744 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001e34:	f000 fb4c 	bl	80024d0 <SSD1306_UpdateScreen>
}
 8001e38:	e04f      	b.n	8001eda <animacion4+0x15a>
	else if (frame == 4)
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d117      	bne.n	8001e70 <animacion4+0xf0>
		SSD1306_Clear();
 8001e40:	f000 fd0d 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, bailadora4, 128, 64, 1);
 8001e44:	2301      	movs	r3, #1
 8001e46:	9301      	str	r3, [sp, #4]
 8001e48:	2340      	movs	r3, #64	@ 0x40
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	2380      	movs	r3, #128	@ 0x80
 8001e4e:	4a29      	ldr	r2, [pc, #164]	@ (8001ef4 <animacion4+0x174>)
 8001e50:	2100      	movs	r1, #0
 8001e52:	2000      	movs	r0, #0
 8001e54:	f000 fc9b 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001e58:	212d      	movs	r1, #45	@ 0x2d
 8001e5a:	200a      	movs	r0, #10
 8001e5c:	f000 fbde 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001e60:	2201      	movs	r2, #1
 8001e62:	4921      	ldr	r1, [pc, #132]	@ (8001ee8 <animacion4+0x168>)
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 fc6d 	bl	8002744 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001e6a:	f000 fb31 	bl	80024d0 <SSD1306_UpdateScreen>
}
 8001e6e:	e034      	b.n	8001eda <animacion4+0x15a>
	else if (frame == 5)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	2b05      	cmp	r3, #5
 8001e74:	d117      	bne.n	8001ea6 <animacion4+0x126>
		SSD1306_Clear();
 8001e76:	f000 fcf2 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, bailadora3, 128, 64, 1);
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	2340      	movs	r3, #64	@ 0x40
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2380      	movs	r3, #128	@ 0x80
 8001e84:	4a1a      	ldr	r2, [pc, #104]	@ (8001ef0 <animacion4+0x170>)
 8001e86:	2100      	movs	r1, #0
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f000 fc80 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001e8e:	212d      	movs	r1, #45	@ 0x2d
 8001e90:	200a      	movs	r0, #10
 8001e92:	f000 fbc3 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001e96:	2201      	movs	r2, #1
 8001e98:	4913      	ldr	r1, [pc, #76]	@ (8001ee8 <animacion4+0x168>)
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 fc52 	bl	8002744 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001ea0:	f000 fb16 	bl	80024d0 <SSD1306_UpdateScreen>
}
 8001ea4:	e019      	b.n	8001eda <animacion4+0x15a>
	else if (frame == 6)
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2b06      	cmp	r3, #6
 8001eaa:	d116      	bne.n	8001eda <animacion4+0x15a>
		SSD1306_Clear();
 8001eac:	f000 fcd7 	bl	800285e <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, bailadora2, 128, 64, 1);
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	2340      	movs	r3, #64	@ 0x40
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	2380      	movs	r3, #128	@ 0x80
 8001eba:	4a0c      	ldr	r2, [pc, #48]	@ (8001eec <animacion4+0x16c>)
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f000 fc65 	bl	800278e <SSD1306_DrawBitmap>
		SSD1306_GotoXY (10,45);
 8001ec4:	212d      	movs	r1, #45	@ 0x2d
 8001ec6:	200a      	movs	r0, #10
 8001ec8:	f000 fba8 	bl	800261c <SSD1306_GotoXY>
		SSD1306_Puts (song_name, &Font_11x18, 1);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	4906      	ldr	r1, [pc, #24]	@ (8001ee8 <animacion4+0x168>)
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 fc37 	bl	8002744 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8001ed6:	f000 fafb 	bl	80024d0 <SSD1306_UpdateScreen>
}
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	08015a10 	.word	0x08015a10
 8001ee8:	20000038 	.word	0x20000038
 8001eec:	08015e10 	.word	0x08015e10
 8001ef0:	08016210 	.word	0x08016210
 8001ef4:	08016610 	.word	0x08016610

08001ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001efe:	f001 f9f7 	bl	80032f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f02:	f000 f85f 	bl	8001fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f06:	f000 f993 	bl	8002230 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f0a:	f000 f971 	bl	80021f0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001f0e:	f000 f8c1 	bl	8002094 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001f12:	f000 f91b 	bl	800214c <MX_I2S3_Init>
  MX_FATFS_Init();
 8001f16:	f009 f89d 	bl	800b054 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001f1a:	f00f fd87 	bl	8011a2c <MX_USB_HOST_Init>
  MX_I2C2_Init();
 8001f1e:	f000 f8e7 	bl	80020f0 <MX_I2C2_Init>
  MX_TIM10_Init();
 8001f22:	f000 f941 	bl	80021a8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();
 8001f26:	f000 fa0f 	bl	8002348 <SSD1306_Init>
  HAL_TIM_Base_Start_IT(&htim10);
 8001f2a:	4820      	ldr	r0, [pc, #128]	@ (8001fac <main+0xb4>)
 8001f2c:	f007 fda8 	bl	8009a80 <HAL_TIM_Base_Start_IT>


  // ANTES DE ENTRAR AL BUCLE WHILE, GENERAMOS UN PAR DE IMAGENES DE PRESENTACION

  // 1. Dibujamos en el OLED la primera PORTADA durante 5 segundos
  SSD1306_DrawBitmap(0, 0, PORTADA1, 128, 64, 1);
 8001f30:	2301      	movs	r3, #1
 8001f32:	9301      	str	r3, [sp, #4]
 8001f34:	2340      	movs	r3, #64	@ 0x40
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	2380      	movs	r3, #128	@ 0x80
 8001f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb0 <main+0xb8>)
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f000 fc25 	bl	800278e <SSD1306_DrawBitmap>
  SSD1306_UpdateScreen(); // update screen
 8001f44:	f000 fac4 	bl	80024d0 <SSD1306_UpdateScreen>
  HAL_Delay (5000);
 8001f48:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001f4c:	f001 fa42 	bl	80033d4 <HAL_Delay>

  SSD1306_Clear();
 8001f50:	f000 fc85 	bl	800285e <SSD1306_Clear>

  // 2. Dibujamos en el OLED la segunda PORTADA durante 5 segundos
  SSD1306_DrawBitmap(0, 0, PORTADA2, 128, 64, 1);
 8001f54:	2301      	movs	r3, #1
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	2340      	movs	r3, #64	@ 0x40
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	4a15      	ldr	r2, [pc, #84]	@ (8001fb4 <main+0xbc>)
 8001f60:	2100      	movs	r1, #0
 8001f62:	2000      	movs	r0, #0
 8001f64:	f000 fc13 	bl	800278e <SSD1306_DrawBitmap>
  SSD1306_UpdateScreen(); // update screen
 8001f68:	f000 fab2 	bl	80024d0 <SSD1306_UpdateScreen>
  HAL_Delay (5000);
 8001f6c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001f70:	f001 fa30 	bl	80033d4 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001f74:	f00f fd80 	bl	8011a78 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    if (Appli_state == APPLICATION_READY) // TRUE cuando este el pendrive conectado y todo configurado correctamente
 8001f78:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb8 <main+0xc0>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d1f9      	bne.n	8001f74 <main+0x7c>
    {
    	Mount_USB();
 8001f80:	f7fe ff20 	bl	8000dc4 <Mount_USB>
    	AUDIO_PLAYER_Start(0);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f000 ffad 	bl	8002ee4 <AUDIO_PLAYER_Start>
    	while (!IsFinished) // Mientras se ejecuta este bucle, el mp3 esta en funcionamiento, pudiendo pausarse o cambiar las canciones
 8001f8a:	e009      	b.n	8001fa0 <main+0xa8>
    	{
    		AUDIO_PLAYER_Process(TRUE);
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f001 f843 	bl	8003018 <AUDIO_PLAYER_Process>

    		if (AudioState == AUDIO_STATE_STOP)
 8001f92:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <main+0xc4>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b09      	cmp	r3, #9
 8001f98:	d102      	bne.n	8001fa0 <main+0xa8>
    		{
    			IsFinished = 1;
 8001f9a:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <main+0xc8>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
    	while (!IsFinished) // Mientras se ejecuta este bucle, el mp3 esta en funcionamiento, pudiendo pausarse o cambiar las canciones
 8001fa0:	4b07      	ldr	r3, [pc, #28]	@ (8001fc0 <main+0xc8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f1      	beq.n	8001f8c <main+0x94>
    MX_USB_HOST_Process();
 8001fa8:	e7e4      	b.n	8001f74 <main+0x7c>
 8001faa:	bf00      	nop
 8001fac:	20000338 	.word	0x20000338
 8001fb0:	08016e10 	.word	0x08016e10
 8001fb4:	08017210 	.word	0x08017210
 8001fb8:	2000264c 	.word	0x2000264c
 8001fbc:	2000179c 	.word	0x2000179c
 8001fc0:	20000380 	.word	0x20000380

08001fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b094      	sub	sp, #80	@ 0x50
 8001fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fca:	f107 0320 	add.w	r3, r7, #32
 8001fce:	2230      	movs	r2, #48	@ 0x30
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f010 f926 	bl	8012224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd8:	f107 030c 	add.w	r3, r7, #12
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	4b27      	ldr	r3, [pc, #156]	@ (800208c <SystemClock_Config+0xc8>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff0:	4a26      	ldr	r2, [pc, #152]	@ (800208c <SystemClock_Config+0xc8>)
 8001ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff8:	4b24      	ldr	r3, [pc, #144]	@ (800208c <SystemClock_Config+0xc8>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002004:	2300      	movs	r3, #0
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	4b21      	ldr	r3, [pc, #132]	@ (8002090 <SystemClock_Config+0xcc>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a20      	ldr	r2, [pc, #128]	@ (8002090 <SystemClock_Config+0xcc>)
 800200e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	4b1e      	ldr	r3, [pc, #120]	@ (8002090 <SystemClock_Config+0xcc>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002020:	2301      	movs	r3, #1
 8002022:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002024:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800202a:	2302      	movs	r3, #2
 800202c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800202e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002032:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002034:	2304      	movs	r3, #4
 8002036:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002038:	23c0      	movs	r3, #192	@ 0xc0
 800203a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800203c:	2304      	movs	r3, #4
 800203e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002040:	2308      	movs	r3, #8
 8002042:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002044:	f107 0320 	add.w	r3, r7, #32
 8002048:	4618      	mov	r0, r3
 800204a:	f006 feb1 	bl	8008db0 <HAL_RCC_OscConfig>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002054:	f000 f972 	bl	800233c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002058:	230f      	movs	r3, #15
 800205a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800205c:	2302      	movs	r3, #2
 800205e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002064:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002068:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800206e:	f107 030c 	add.w	r3, r7, #12
 8002072:	2103      	movs	r1, #3
 8002074:	4618      	mov	r0, r3
 8002076:	f007 f913 	bl	80092a0 <HAL_RCC_ClockConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002080:	f000 f95c 	bl	800233c <Error_Handler>
  }
}
 8002084:	bf00      	nop
 8002086:	3750      	adds	r7, #80	@ 0x50
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40023800 	.word	0x40023800
 8002090:	40007000 	.word	0x40007000

08002094 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002098:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <MX_I2C1_Init+0x50>)
 800209a:	4a13      	ldr	r2, [pc, #76]	@ (80020e8 <MX_I2C1_Init+0x54>)
 800209c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800209e:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <MX_I2C1_Init+0x50>)
 80020a0:	4a12      	ldr	r2, [pc, #72]	@ (80020ec <MX_I2C1_Init+0x58>)
 80020a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020a4:	4b0f      	ldr	r3, [pc, #60]	@ (80020e4 <MX_I2C1_Init+0x50>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020aa:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <MX_I2C1_Init+0x50>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <MX_I2C1_Init+0x50>)
 80020b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020b8:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <MX_I2C1_Init+0x50>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020be:	4b09      	ldr	r3, [pc, #36]	@ (80020e4 <MX_I2C1_Init+0x50>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020c4:	4b07      	ldr	r3, [pc, #28]	@ (80020e4 <MX_I2C1_Init+0x50>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <MX_I2C1_Init+0x50>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020d0:	4804      	ldr	r0, [pc, #16]	@ (80020e4 <MX_I2C1_Init+0x50>)
 80020d2:	f004 fac1 	bl	8006658 <HAL_I2C_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020dc:	f000 f92e 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	200001e8 	.word	0x200001e8
 80020e8:	40005400 	.word	0x40005400
 80020ec:	000186a0 	.word	0x000186a0

080020f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80020f4:	4b12      	ldr	r3, [pc, #72]	@ (8002140 <MX_I2C2_Init+0x50>)
 80020f6:	4a13      	ldr	r2, [pc, #76]	@ (8002144 <MX_I2C2_Init+0x54>)
 80020f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80020fa:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <MX_I2C2_Init+0x50>)
 80020fc:	4a12      	ldr	r2, [pc, #72]	@ (8002148 <MX_I2C2_Init+0x58>)
 80020fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002100:	4b0f      	ldr	r3, [pc, #60]	@ (8002140 <MX_I2C2_Init+0x50>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002106:	4b0e      	ldr	r3, [pc, #56]	@ (8002140 <MX_I2C2_Init+0x50>)
 8002108:	2200      	movs	r2, #0
 800210a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800210c:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <MX_I2C2_Init+0x50>)
 800210e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002112:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002114:	4b0a      	ldr	r3, [pc, #40]	@ (8002140 <MX_I2C2_Init+0x50>)
 8002116:	2200      	movs	r2, #0
 8002118:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800211a:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <MX_I2C2_Init+0x50>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002120:	4b07      	ldr	r3, [pc, #28]	@ (8002140 <MX_I2C2_Init+0x50>)
 8002122:	2200      	movs	r2, #0
 8002124:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002126:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <MX_I2C2_Init+0x50>)
 8002128:	2200      	movs	r2, #0
 800212a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800212c:	4804      	ldr	r0, [pc, #16]	@ (8002140 <MX_I2C2_Init+0x50>)
 800212e:	f004 fa93 	bl	8006658 <HAL_I2C_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002138:	f000 f900 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}
 8002140:	2000023c 	.word	0x2000023c
 8002144:	40005800 	.word	0x40005800
 8002148:	00061a80 	.word	0x00061a80

0800214c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002150:	4b13      	ldr	r3, [pc, #76]	@ (80021a0 <MX_I2S3_Init+0x54>)
 8002152:	4a14      	ldr	r2, [pc, #80]	@ (80021a4 <MX_I2S3_Init+0x58>)
 8002154:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002156:	4b12      	ldr	r3, [pc, #72]	@ (80021a0 <MX_I2S3_Init+0x54>)
 8002158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800215c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800215e:	4b10      	ldr	r3, [pc, #64]	@ (80021a0 <MX_I2S3_Init+0x54>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002164:	4b0e      	ldr	r3, [pc, #56]	@ (80021a0 <MX_I2S3_Init+0x54>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800216a:	4b0d      	ldr	r3, [pc, #52]	@ (80021a0 <MX_I2S3_Init+0x54>)
 800216c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002170:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8002172:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <MX_I2S3_Init+0x54>)
 8002174:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8002178:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800217a:	4b09      	ldr	r3, [pc, #36]	@ (80021a0 <MX_I2S3_Init+0x54>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002180:	4b07      	ldr	r3, [pc, #28]	@ (80021a0 <MX_I2S3_Init+0x54>)
 8002182:	2200      	movs	r2, #0
 8002184:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002186:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <MX_I2S3_Init+0x54>)
 8002188:	2200      	movs	r2, #0
 800218a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800218c:	4804      	ldr	r0, [pc, #16]	@ (80021a0 <MX_I2S3_Init+0x54>)
 800218e:	f005 fd73 	bl	8007c78 <HAL_I2S_Init>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8002198:	f000 f8d0 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000290 	.word	0x20000290
 80021a4:	40003c00 	.word	0x40003c00

080021a8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80021ac:	4b0e      	ldr	r3, [pc, #56]	@ (80021e8 <MX_TIM10_Init+0x40>)
 80021ae:	4a0f      	ldr	r2, [pc, #60]	@ (80021ec <MX_TIM10_Init+0x44>)
 80021b0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 48000;
 80021b2:	4b0d      	ldr	r3, [pc, #52]	@ (80021e8 <MX_TIM10_Init+0x40>)
 80021b4:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80021b8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ba:	4b0b      	ldr	r3, [pc, #44]	@ (80021e8 <MX_TIM10_Init+0x40>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 800;
 80021c0:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <MX_TIM10_Init+0x40>)
 80021c2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80021c6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c8:	4b07      	ldr	r3, [pc, #28]	@ (80021e8 <MX_TIM10_Init+0x40>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ce:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <MX_TIM10_Init+0x40>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80021d4:	4804      	ldr	r0, [pc, #16]	@ (80021e8 <MX_TIM10_Init+0x40>)
 80021d6:	f007 fc03 	bl	80099e0 <HAL_TIM_Base_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80021e0:	f000 f8ac 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000338 	.word	0x20000338
 80021ec:	40014400 	.word	0x40014400

080021f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	4b0c      	ldr	r3, [pc, #48]	@ (800222c <MX_DMA_Init+0x3c>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	4a0b      	ldr	r2, [pc, #44]	@ (800222c <MX_DMA_Init+0x3c>)
 8002200:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002204:	6313      	str	r3, [r2, #48]	@ 0x30
 8002206:	4b09      	ldr	r3, [pc, #36]	@ (800222c <MX_DMA_Init+0x3c>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	2010      	movs	r0, #16
 8002218:	f001 f9db 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800221c:	2010      	movs	r0, #16
 800221e:	f001 f9f4 	bl	800360a <HAL_NVIC_EnableIRQ>

}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023800 	.word	0x40023800

08002230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	@ 0x28
 8002234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	609a      	str	r2, [r3, #8]
 8002242:	60da      	str	r2, [r3, #12]
 8002244:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	4b39      	ldr	r3, [pc, #228]	@ (8002330 <MX_GPIO_Init+0x100>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	4a38      	ldr	r2, [pc, #224]	@ (8002330 <MX_GPIO_Init+0x100>)
 8002250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002254:	6313      	str	r3, [r2, #48]	@ 0x30
 8002256:	4b36      	ldr	r3, [pc, #216]	@ (8002330 <MX_GPIO_Init+0x100>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b32      	ldr	r3, [pc, #200]	@ (8002330 <MX_GPIO_Init+0x100>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	4a31      	ldr	r2, [pc, #196]	@ (8002330 <MX_GPIO_Init+0x100>)
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	6313      	str	r3, [r2, #48]	@ 0x30
 8002272:	4b2f      	ldr	r3, [pc, #188]	@ (8002330 <MX_GPIO_Init+0x100>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	4b2b      	ldr	r3, [pc, #172]	@ (8002330 <MX_GPIO_Init+0x100>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	4a2a      	ldr	r2, [pc, #168]	@ (8002330 <MX_GPIO_Init+0x100>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6313      	str	r3, [r2, #48]	@ 0x30
 800228e:	4b28      	ldr	r3, [pc, #160]	@ (8002330 <MX_GPIO_Init+0x100>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	4b24      	ldr	r3, [pc, #144]	@ (8002330 <MX_GPIO_Init+0x100>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	4a23      	ldr	r2, [pc, #140]	@ (8002330 <MX_GPIO_Init+0x100>)
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022aa:	4b21      	ldr	r3, [pc, #132]	@ (8002330 <MX_GPIO_Init+0x100>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2101      	movs	r1, #1
 80022ba:	481e      	ldr	r0, [pc, #120]	@ (8002334 <MX_GPIO_Init+0x104>)
 80022bc:	f002 f866 	bl	800438c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022c0:	2301      	movs	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c4:	2301      	movs	r3, #1
 80022c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	4619      	mov	r1, r3
 80022d6:	4817      	ldr	r0, [pc, #92]	@ (8002334 <MX_GPIO_Init+0x104>)
 80022d8:	f001 fdf0 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80022dc:	2307      	movs	r3, #7
 80022de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022e6:	2302      	movs	r3, #2
 80022e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	4811      	ldr	r0, [pc, #68]	@ (8002338 <MX_GPIO_Init+0x108>)
 80022f2:	f001 fde3 	bl	8003ebc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2100      	movs	r1, #0
 80022fa:	2006      	movs	r0, #6
 80022fc:	f001 f969 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002300:	2006      	movs	r0, #6
 8002302:	f001 f982 	bl	800360a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	2007      	movs	r0, #7
 800230c:	f001 f961 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002310:	2007      	movs	r0, #7
 8002312:	f001 f97a 	bl	800360a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2100      	movs	r1, #0
 800231a:	2008      	movs	r0, #8
 800231c:	f001 f959 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002320:	2008      	movs	r0, #8
 8002322:	f001 f972 	bl	800360a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002326:	bf00      	nop
 8002328:	3728      	adds	r7, #40	@ 0x28
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800
 8002334:	40020800 	.word	0x40020800
 8002338:	40020000 	.word	0x40020000

0800233c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002340:	b672      	cpsid	i
}
 8002342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002344:	bf00      	nop
 8002346:	e7fd      	b.n	8002344 <Error_Handler+0x8>

08002348 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800234e:	f000 fa8f 	bl	8002870 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002352:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002356:	2201      	movs	r2, #1
 8002358:	2178      	movs	r1, #120	@ 0x78
 800235a:	485b      	ldr	r0, [pc, #364]	@ (80024c8 <SSD1306_Init+0x180>)
 800235c:	f004 ff1a 	bl	8007194 <HAL_I2C_IsDeviceReady>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002366:	2300      	movs	r3, #0
 8002368:	e0a9      	b.n	80024be <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800236a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800236e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002370:	e002      	b.n	8002378 <SSD1306_Init+0x30>
		p--;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3b01      	subs	r3, #1
 8002376:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f9      	bne.n	8002372 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800237e:	22ae      	movs	r2, #174	@ 0xae
 8002380:	2100      	movs	r1, #0
 8002382:	2078      	movs	r0, #120	@ 0x78
 8002384:	f000 faf0 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002388:	2220      	movs	r2, #32
 800238a:	2100      	movs	r1, #0
 800238c:	2078      	movs	r0, #120	@ 0x78
 800238e:	f000 faeb 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002392:	2210      	movs	r2, #16
 8002394:	2100      	movs	r1, #0
 8002396:	2078      	movs	r0, #120	@ 0x78
 8002398:	f000 fae6 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800239c:	22b0      	movs	r2, #176	@ 0xb0
 800239e:	2100      	movs	r1, #0
 80023a0:	2078      	movs	r0, #120	@ 0x78
 80023a2:	f000 fae1 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80023a6:	22c8      	movs	r2, #200	@ 0xc8
 80023a8:	2100      	movs	r1, #0
 80023aa:	2078      	movs	r0, #120	@ 0x78
 80023ac:	f000 fadc 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80023b0:	2200      	movs	r2, #0
 80023b2:	2100      	movs	r1, #0
 80023b4:	2078      	movs	r0, #120	@ 0x78
 80023b6:	f000 fad7 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80023ba:	2210      	movs	r2, #16
 80023bc:	2100      	movs	r1, #0
 80023be:	2078      	movs	r0, #120	@ 0x78
 80023c0:	f000 fad2 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80023c4:	2240      	movs	r2, #64	@ 0x40
 80023c6:	2100      	movs	r1, #0
 80023c8:	2078      	movs	r0, #120	@ 0x78
 80023ca:	f000 facd 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80023ce:	2281      	movs	r2, #129	@ 0x81
 80023d0:	2100      	movs	r1, #0
 80023d2:	2078      	movs	r0, #120	@ 0x78
 80023d4:	f000 fac8 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80023d8:	22ff      	movs	r2, #255	@ 0xff
 80023da:	2100      	movs	r1, #0
 80023dc:	2078      	movs	r0, #120	@ 0x78
 80023de:	f000 fac3 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80023e2:	22a1      	movs	r2, #161	@ 0xa1
 80023e4:	2100      	movs	r1, #0
 80023e6:	2078      	movs	r0, #120	@ 0x78
 80023e8:	f000 fabe 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80023ec:	22a6      	movs	r2, #166	@ 0xa6
 80023ee:	2100      	movs	r1, #0
 80023f0:	2078      	movs	r0, #120	@ 0x78
 80023f2:	f000 fab9 	bl	8002968 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80023f6:	22a8      	movs	r2, #168	@ 0xa8
 80023f8:	2100      	movs	r1, #0
 80023fa:	2078      	movs	r0, #120	@ 0x78
 80023fc:	f000 fab4 	bl	8002968 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8002400:	223f      	movs	r2, #63	@ 0x3f
 8002402:	2100      	movs	r1, #0
 8002404:	2078      	movs	r0, #120	@ 0x78
 8002406:	f000 faaf 	bl	8002968 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800240a:	22a4      	movs	r2, #164	@ 0xa4
 800240c:	2100      	movs	r1, #0
 800240e:	2078      	movs	r0, #120	@ 0x78
 8002410:	f000 faaa 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002414:	22d3      	movs	r2, #211	@ 0xd3
 8002416:	2100      	movs	r1, #0
 8002418:	2078      	movs	r0, #120	@ 0x78
 800241a:	f000 faa5 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800241e:	2200      	movs	r2, #0
 8002420:	2100      	movs	r1, #0
 8002422:	2078      	movs	r0, #120	@ 0x78
 8002424:	f000 faa0 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002428:	22d5      	movs	r2, #213	@ 0xd5
 800242a:	2100      	movs	r1, #0
 800242c:	2078      	movs	r0, #120	@ 0x78
 800242e:	f000 fa9b 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002432:	22f0      	movs	r2, #240	@ 0xf0
 8002434:	2100      	movs	r1, #0
 8002436:	2078      	movs	r0, #120	@ 0x78
 8002438:	f000 fa96 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800243c:	22d9      	movs	r2, #217	@ 0xd9
 800243e:	2100      	movs	r1, #0
 8002440:	2078      	movs	r0, #120	@ 0x78
 8002442:	f000 fa91 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002446:	2222      	movs	r2, #34	@ 0x22
 8002448:	2100      	movs	r1, #0
 800244a:	2078      	movs	r0, #120	@ 0x78
 800244c:	f000 fa8c 	bl	8002968 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002450:	22da      	movs	r2, #218	@ 0xda
 8002452:	2100      	movs	r1, #0
 8002454:	2078      	movs	r0, #120	@ 0x78
 8002456:	f000 fa87 	bl	8002968 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 800245a:	2212      	movs	r2, #18
 800245c:	2100      	movs	r1, #0
 800245e:	2078      	movs	r0, #120	@ 0x78
 8002460:	f000 fa82 	bl	8002968 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002464:	22db      	movs	r2, #219	@ 0xdb
 8002466:	2100      	movs	r1, #0
 8002468:	2078      	movs	r0, #120	@ 0x78
 800246a:	f000 fa7d 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800246e:	2220      	movs	r2, #32
 8002470:	2100      	movs	r1, #0
 8002472:	2078      	movs	r0, #120	@ 0x78
 8002474:	f000 fa78 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002478:	228d      	movs	r2, #141	@ 0x8d
 800247a:	2100      	movs	r1, #0
 800247c:	2078      	movs	r0, #120	@ 0x78
 800247e:	f000 fa73 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002482:	2214      	movs	r2, #20
 8002484:	2100      	movs	r1, #0
 8002486:	2078      	movs	r0, #120	@ 0x78
 8002488:	f000 fa6e 	bl	8002968 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800248c:	22af      	movs	r2, #175	@ 0xaf
 800248e:	2100      	movs	r1, #0
 8002490:	2078      	movs	r0, #120	@ 0x78
 8002492:	f000 fa69 	bl	8002968 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002496:	222e      	movs	r2, #46	@ 0x2e
 8002498:	2100      	movs	r1, #0
 800249a:	2078      	movs	r0, #120	@ 0x78
 800249c:	f000 fa64 	bl	8002968 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80024a0:	2000      	movs	r0, #0
 80024a2:	f000 f843 	bl	800252c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80024a6:	f000 f813 	bl	80024d0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80024aa:	4b08      	ldr	r3, [pc, #32]	@ (80024cc <SSD1306_Init+0x184>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80024b0:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <SSD1306_Init+0x184>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80024b6:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <SSD1306_Init+0x184>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80024bc:	2301      	movs	r3, #1
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	2000023c 	.word	0x2000023c
 80024cc:	20000788 	.word	0x20000788

080024d0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80024d6:	2300      	movs	r3, #0
 80024d8:	71fb      	strb	r3, [r7, #7]
 80024da:	e01d      	b.n	8002518 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	3b50      	subs	r3, #80	@ 0x50
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	2100      	movs	r1, #0
 80024e6:	2078      	movs	r0, #120	@ 0x78
 80024e8:	f000 fa3e 	bl	8002968 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80024ec:	2200      	movs	r2, #0
 80024ee:	2100      	movs	r1, #0
 80024f0:	2078      	movs	r0, #120	@ 0x78
 80024f2:	f000 fa39 	bl	8002968 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80024f6:	2210      	movs	r2, #16
 80024f8:	2100      	movs	r1, #0
 80024fa:	2078      	movs	r0, #120	@ 0x78
 80024fc:	f000 fa34 	bl	8002968 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	01db      	lsls	r3, r3, #7
 8002504:	4a08      	ldr	r2, [pc, #32]	@ (8002528 <SSD1306_UpdateScreen+0x58>)
 8002506:	441a      	add	r2, r3
 8002508:	2380      	movs	r3, #128	@ 0x80
 800250a:	2140      	movs	r1, #64	@ 0x40
 800250c:	2078      	movs	r0, #120	@ 0x78
 800250e:	f000 f9c5 	bl	800289c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	3301      	adds	r3, #1
 8002516:	71fb      	strb	r3, [r7, #7]
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	2b07      	cmp	r3, #7
 800251c:	d9de      	bls.n	80024dc <SSD1306_UpdateScreen+0xc>
	}
}
 800251e:	bf00      	nop
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000388 	.word	0x20000388

0800252c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <SSD1306_Fill+0x14>
 800253c:	2300      	movs	r3, #0
 800253e:	e000      	b.n	8002542 <SSD1306_Fill+0x16>
 8002540:	23ff      	movs	r3, #255	@ 0xff
 8002542:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002546:	4619      	mov	r1, r3
 8002548:	4803      	ldr	r0, [pc, #12]	@ (8002558 <SSD1306_Fill+0x2c>)
 800254a:	f00f fe6b 	bl	8012224 <memset>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000388 	.word	0x20000388

0800255c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	80fb      	strh	r3, [r7, #6]
 8002566:	460b      	mov	r3, r1
 8002568:	80bb      	strh	r3, [r7, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	70fb      	strb	r3, [r7, #3]
	if (
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	2b7f      	cmp	r3, #127	@ 0x7f
 8002572:	d848      	bhi.n	8002606 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002574:	88bb      	ldrh	r3, [r7, #4]
 8002576:	2b3f      	cmp	r3, #63	@ 0x3f
 8002578:	d845      	bhi.n	8002606 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800257a:	4b26      	ldr	r3, [pc, #152]	@ (8002614 <SSD1306_DrawPixel+0xb8>)
 800257c:	791b      	ldrb	r3, [r3, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d006      	beq.n	8002590 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf0c      	ite	eq
 8002588:	2301      	moveq	r3, #1
 800258a:	2300      	movne	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d11a      	bne.n	80025cc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002596:	88fa      	ldrh	r2, [r7, #6]
 8002598:	88bb      	ldrh	r3, [r7, #4]
 800259a:	08db      	lsrs	r3, r3, #3
 800259c:	b298      	uxth	r0, r3
 800259e:	4603      	mov	r3, r0
 80025a0:	01db      	lsls	r3, r3, #7
 80025a2:	4413      	add	r3, r2
 80025a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002618 <SSD1306_DrawPixel+0xbc>)
 80025a6:	5cd3      	ldrb	r3, [r2, r3]
 80025a8:	b25a      	sxtb	r2, r3
 80025aa:	88bb      	ldrh	r3, [r7, #4]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	2101      	movs	r1, #1
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	b25b      	sxtb	r3, r3
 80025b8:	4313      	orrs	r3, r2
 80025ba:	b259      	sxtb	r1, r3
 80025bc:	88fa      	ldrh	r2, [r7, #6]
 80025be:	4603      	mov	r3, r0
 80025c0:	01db      	lsls	r3, r3, #7
 80025c2:	4413      	add	r3, r2
 80025c4:	b2c9      	uxtb	r1, r1
 80025c6:	4a14      	ldr	r2, [pc, #80]	@ (8002618 <SSD1306_DrawPixel+0xbc>)
 80025c8:	54d1      	strb	r1, [r2, r3]
 80025ca:	e01d      	b.n	8002608 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80025cc:	88fa      	ldrh	r2, [r7, #6]
 80025ce:	88bb      	ldrh	r3, [r7, #4]
 80025d0:	08db      	lsrs	r3, r3, #3
 80025d2:	b298      	uxth	r0, r3
 80025d4:	4603      	mov	r3, r0
 80025d6:	01db      	lsls	r3, r3, #7
 80025d8:	4413      	add	r3, r2
 80025da:	4a0f      	ldr	r2, [pc, #60]	@ (8002618 <SSD1306_DrawPixel+0xbc>)
 80025dc:	5cd3      	ldrb	r3, [r2, r3]
 80025de:	b25a      	sxtb	r2, r3
 80025e0:	88bb      	ldrh	r3, [r7, #4]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	b25b      	sxtb	r3, r3
 80025f2:	4013      	ands	r3, r2
 80025f4:	b259      	sxtb	r1, r3
 80025f6:	88fa      	ldrh	r2, [r7, #6]
 80025f8:	4603      	mov	r3, r0
 80025fa:	01db      	lsls	r3, r3, #7
 80025fc:	4413      	add	r3, r2
 80025fe:	b2c9      	uxtb	r1, r1
 8002600:	4a05      	ldr	r2, [pc, #20]	@ (8002618 <SSD1306_DrawPixel+0xbc>)
 8002602:	54d1      	strb	r1, [r2, r3]
 8002604:	e000      	b.n	8002608 <SSD1306_DrawPixel+0xac>
		return;
 8002606:	bf00      	nop
	}
}
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000788 	.word	0x20000788
 8002618:	20000388 	.word	0x20000388

0800261c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	460a      	mov	r2, r1
 8002626:	80fb      	strh	r3, [r7, #6]
 8002628:	4613      	mov	r3, r2
 800262a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800262c:	4a05      	ldr	r2, [pc, #20]	@ (8002644 <SSD1306_GotoXY+0x28>)
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002632:	4a04      	ldr	r2, [pc, #16]	@ (8002644 <SSD1306_GotoXY+0x28>)
 8002634:	88bb      	ldrh	r3, [r7, #4]
 8002636:	8053      	strh	r3, [r2, #2]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	20000788 	.word	0x20000788

08002648 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	6039      	str	r1, [r7, #0]
 8002652:	71fb      	strb	r3, [r7, #7]
 8002654:	4613      	mov	r3, r2
 8002656:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002658:	4b39      	ldr	r3, [pc, #228]	@ (8002740 <SSD1306_Putc+0xf8>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	4413      	add	r3, r2
	if (
 8002664:	2b7f      	cmp	r3, #127	@ 0x7f
 8002666:	dc07      	bgt.n	8002678 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002668:	4b35      	ldr	r3, [pc, #212]	@ (8002740 <SSD1306_Putc+0xf8>)
 800266a:	885b      	ldrh	r3, [r3, #2]
 800266c:	461a      	mov	r2, r3
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	785b      	ldrb	r3, [r3, #1]
 8002672:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002674:	2b3f      	cmp	r3, #63	@ 0x3f
 8002676:	dd01      	ble.n	800267c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002678:	2300      	movs	r3, #0
 800267a:	e05d      	b.n	8002738 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	e04b      	b.n	800271a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	3b20      	subs	r3, #32
 800268a:	6839      	ldr	r1, [r7, #0]
 800268c:	7849      	ldrb	r1, [r1, #1]
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4619      	mov	r1, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	440b      	add	r3, r1
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80026a0:	2300      	movs	r3, #0
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	e030      	b.n	8002708 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d010      	beq.n	80026d8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80026b6:	4b22      	ldr	r3, [pc, #136]	@ (8002740 <SSD1306_Putc+0xf8>)
 80026b8:	881a      	ldrh	r2, [r3, #0]
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	4413      	add	r3, r2
 80026c0:	b298      	uxth	r0, r3
 80026c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002740 <SSD1306_Putc+0xf8>)
 80026c4:	885a      	ldrh	r2, [r3, #2]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	79ba      	ldrb	r2, [r7, #6]
 80026d0:	4619      	mov	r1, r3
 80026d2:	f7ff ff43 	bl	800255c <SSD1306_DrawPixel>
 80026d6:	e014      	b.n	8002702 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80026d8:	4b19      	ldr	r3, [pc, #100]	@ (8002740 <SSD1306_Putc+0xf8>)
 80026da:	881a      	ldrh	r2, [r3, #0]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	b298      	uxth	r0, r3
 80026e4:	4b16      	ldr	r3, [pc, #88]	@ (8002740 <SSD1306_Putc+0xf8>)
 80026e6:	885a      	ldrh	r2, [r3, #2]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	b299      	uxth	r1, r3
 80026f0:	79bb      	ldrb	r3, [r7, #6]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bf0c      	ite	eq
 80026f6:	2301      	moveq	r3, #1
 80026f8:	2300      	movne	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	f7ff ff2d 	bl	800255c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	3301      	adds	r3, #1
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4293      	cmp	r3, r2
 8002712:	d3c8      	bcc.n	80026a6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	3301      	adds	r3, #1
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	785b      	ldrb	r3, [r3, #1]
 800271e:	461a      	mov	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	4293      	cmp	r3, r2
 8002724:	d3ad      	bcc.n	8002682 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <SSD1306_Putc+0xf8>)
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	7812      	ldrb	r2, [r2, #0]
 800272e:	4413      	add	r3, r2
 8002730:	b29a      	uxth	r2, r3
 8002732:	4b03      	ldr	r3, [pc, #12]	@ (8002740 <SSD1306_Putc+0xf8>)
 8002734:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002736:	79fb      	ldrb	r3, [r7, #7]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000788 	.word	0x20000788

08002744 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	4613      	mov	r3, r2
 8002750:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002752:	e012      	b.n	800277a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	79fa      	ldrb	r2, [r7, #7]
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff73 	bl	8002648 <SSD1306_Putc>
 8002762:	4603      	mov	r3, r0
 8002764:	461a      	mov	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d002      	beq.n	8002774 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	e008      	b.n	8002786 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3301      	adds	r3, #1
 8002778:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1e8      	bne.n	8002754 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	781b      	ldrb	r3, [r3, #0]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	60ba      	str	r2, [r7, #8]
 8002796:	461a      	mov	r2, r3
 8002798:	4603      	mov	r3, r0
 800279a:	81fb      	strh	r3, [r7, #14]
 800279c:	460b      	mov	r3, r1
 800279e:	81bb      	strh	r3, [r7, #12]
 80027a0:	4613      	mov	r3, r2
 80027a2:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80027a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027a8:	3307      	adds	r3, #7
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	da00      	bge.n	80027b0 <SSD1306_DrawBitmap+0x22>
 80027ae:	3307      	adds	r3, #7
 80027b0:	10db      	asrs	r3, r3, #3
 80027b2:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80027b8:	2300      	movs	r3, #0
 80027ba:	82bb      	strh	r3, [r7, #20]
 80027bc:	e044      	b.n	8002848 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80027be:	2300      	movs	r3, #0
 80027c0:	827b      	strh	r3, [r7, #18]
 80027c2:	e02f      	b.n	8002824 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80027c4:	8a7b      	ldrh	r3, [r7, #18]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	75fb      	strb	r3, [r7, #23]
 80027d4:	e012      	b.n	80027fc <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80027d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027da:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80027de:	fb03 f202 	mul.w	r2, r3, r2
 80027e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	da00      	bge.n	80027ec <SSD1306_DrawBitmap+0x5e>
 80027ea:	3307      	adds	r3, #7
 80027ec:	10db      	asrs	r3, r3, #3
 80027ee:	b21b      	sxth	r3, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	461a      	mov	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4413      	add	r3, r2
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80027fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002800:	2b00      	cmp	r3, #0
 8002802:	da09      	bge.n	8002818 <SSD1306_DrawBitmap+0x8a>
 8002804:	89fa      	ldrh	r2, [r7, #14]
 8002806:	8a7b      	ldrh	r3, [r7, #18]
 8002808:	4413      	add	r3, r2
 800280a:	b29b      	uxth	r3, r3
 800280c:	89b9      	ldrh	r1, [r7, #12]
 800280e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fea2 	bl	800255c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002818:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800281c:	b29b      	uxth	r3, r3
 800281e:	3301      	adds	r3, #1
 8002820:	b29b      	uxth	r3, r3
 8002822:	827b      	strh	r3, [r7, #18]
 8002824:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002828:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800282c:	429a      	cmp	r2, r3
 800282e:	dbc9      	blt.n	80027c4 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002830:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002834:	b29b      	uxth	r3, r3
 8002836:	3301      	adds	r3, #1
 8002838:	b29b      	uxth	r3, r3
 800283a:	82bb      	strh	r3, [r7, #20]
 800283c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002840:	b29b      	uxth	r3, r3
 8002842:	3301      	adds	r3, #1
 8002844:	b29b      	uxth	r3, r3
 8002846:	81bb      	strh	r3, [r7, #12]
 8002848:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800284c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002850:	429a      	cmp	r2, r3
 8002852:	dbb4      	blt.n	80027be <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <SSD1306_Clear>:

void SSD1306_Clear (void)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002862:	2000      	movs	r0, #0
 8002864:	f7ff fe62 	bl	800252c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002868:	f7ff fe32 	bl	80024d0 <SSD1306_UpdateScreen>
}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}

08002870 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002876:	4b08      	ldr	r3, [pc, #32]	@ (8002898 <ssd1306_I2C_Init+0x28>)
 8002878:	607b      	str	r3, [r7, #4]
	while(p>0)
 800287a:	e002      	b.n	8002882 <ssd1306_I2C_Init+0x12>
		p--;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f9      	bne.n	800287c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	0003d090 	.word	0x0003d090

0800289c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b0c7      	sub	sp, #284	@ 0x11c
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	4604      	mov	r4, r0
 80028a4:	4608      	mov	r0, r1
 80028a6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80028aa:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80028ae:	600a      	str	r2, [r1, #0]
 80028b0:	4619      	mov	r1, r3
 80028b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028b6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80028ba:	4622      	mov	r2, r4
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028c2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80028c6:	4602      	mov	r2, r0
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80028d2:	460a      	mov	r2, r1
 80028d4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80028d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80028de:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80028e2:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80028e6:	7812      	ldrb	r2, [r2, #0]
 80028e8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80028ea:	2300      	movs	r3, #0
 80028ec:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80028f0:	e015      	b.n	800291e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80028f2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80028f6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80028fa:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	441a      	add	r2, r3
 8002902:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002906:	3301      	adds	r3, #1
 8002908:	7811      	ldrb	r1, [r2, #0]
 800290a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800290e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002912:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002914:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002918:	3301      	adds	r3, #1
 800291a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800291e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002922:	b29b      	uxth	r3, r3
 8002924:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002928:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800292c:	8812      	ldrh	r2, [r2, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d8df      	bhi.n	80028f2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8002932:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002936:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	b299      	uxth	r1, r3
 800293e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002942:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	b29b      	uxth	r3, r3
 800294c:	f107 020c 	add.w	r2, r7, #12
 8002950:	200a      	movs	r0, #10
 8002952:	9000      	str	r0, [sp, #0]
 8002954:	4803      	ldr	r0, [pc, #12]	@ (8002964 <ssd1306_I2C_WriteMulti+0xc8>)
 8002956:	f003 fff3 	bl	8006940 <HAL_I2C_Master_Transmit>
}
 800295a:	bf00      	nop
 800295c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002960:	46bd      	mov	sp, r7
 8002962:	bd90      	pop	{r4, r7, pc}
 8002964:	2000023c 	.word	0x2000023c

08002968 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af02      	add	r7, sp, #8
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
 8002972:	460b      	mov	r3, r1
 8002974:	71bb      	strb	r3, [r7, #6]
 8002976:	4613      	mov	r3, r2
 8002978:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800297a:	79bb      	ldrb	r3, [r7, #6]
 800297c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800297e:	797b      	ldrb	r3, [r7, #5]
 8002980:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	b299      	uxth	r1, r3
 8002986:	f107 020c 	add.w	r2, r7, #12
 800298a:	230a      	movs	r3, #10
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	2302      	movs	r3, #2
 8002990:	4803      	ldr	r0, [pc, #12]	@ (80029a0 <ssd1306_I2C_Write+0x38>)
 8002992:	f003 ffd5 	bl	8006940 <HAL_I2C_Master_Transmit>
}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	2000023c 	.word	0x2000023c

080029a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	4b10      	ldr	r3, [pc, #64]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	4a0f      	ldr	r2, [pc, #60]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ba:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029c2:	607b      	str	r3, [r7, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	4b09      	ldr	r3, [pc, #36]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	4a08      	ldr	r2, [pc, #32]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029d6:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029e2:	2007      	movs	r0, #7
 80029e4:	f000 fdea 	bl	80035bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40023800 	.word	0x40023800

080029f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08c      	sub	sp, #48	@ 0x30
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	f107 031c 	add.w	r3, r7, #28
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a3b      	ldr	r2, [pc, #236]	@ (8002b00 <HAL_I2C_MspInit+0x10c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d12d      	bne.n	8002a72 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b04 <HAL_I2C_MspInit+0x110>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	4a39      	ldr	r2, [pc, #228]	@ (8002b04 <HAL_I2C_MspInit+0x110>)
 8002a20:	f043 0302 	orr.w	r3, r3, #2
 8002a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a26:	4b37      	ldr	r3, [pc, #220]	@ (8002b04 <HAL_I2C_MspInit+0x110>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002a32:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a38:	2312      	movs	r3, #18
 8002a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a40:	2303      	movs	r3, #3
 8002a42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a44:	2304      	movs	r3, #4
 8002a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a48:	f107 031c 	add.w	r3, r7, #28
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	482e      	ldr	r0, [pc, #184]	@ (8002b08 <HAL_I2C_MspInit+0x114>)
 8002a50:	f001 fa34 	bl	8003ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	4b2a      	ldr	r3, [pc, #168]	@ (8002b04 <HAL_I2C_MspInit+0x110>)
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	4a29      	ldr	r2, [pc, #164]	@ (8002b04 <HAL_I2C_MspInit+0x110>)
 8002a5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a62:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a64:	4b27      	ldr	r3, [pc, #156]	@ (8002b04 <HAL_I2C_MspInit+0x110>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a70:	e041      	b.n	8002af6 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a25      	ldr	r2, [pc, #148]	@ (8002b0c <HAL_I2C_MspInit+0x118>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d13c      	bne.n	8002af6 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	4b20      	ldr	r3, [pc, #128]	@ (8002b04 <HAL_I2C_MspInit+0x110>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	4a1f      	ldr	r2, [pc, #124]	@ (8002b04 <HAL_I2C_MspInit+0x110>)
 8002a86:	f043 0302 	orr.w	r3, r3, #2
 8002a8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b04 <HAL_I2C_MspInit+0x110>)
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a9e:	2312      	movs	r3, #18
 8002aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002aaa:	2304      	movs	r3, #4
 8002aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aae:	f107 031c 	add.w	r3, r7, #28
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4814      	ldr	r0, [pc, #80]	@ (8002b08 <HAL_I2C_MspInit+0x114>)
 8002ab6:	f001 fa01 	bl	8003ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002aba:	2308      	movs	r3, #8
 8002abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002abe:	2312      	movs	r3, #18
 8002ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002aca:	2309      	movs	r3, #9
 8002acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ace:	f107 031c 	add.w	r3, r7, #28
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	480c      	ldr	r0, [pc, #48]	@ (8002b08 <HAL_I2C_MspInit+0x114>)
 8002ad6:	f001 f9f1 	bl	8003ebc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	4b09      	ldr	r3, [pc, #36]	@ (8002b04 <HAL_I2C_MspInit+0x110>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	4a08      	ldr	r2, [pc, #32]	@ (8002b04 <HAL_I2C_MspInit+0x110>)
 8002ae4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aea:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <HAL_I2C_MspInit+0x110>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
}
 8002af6:	bf00      	nop
 8002af8:	3730      	adds	r7, #48	@ 0x30
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40005400 	.word	0x40005400
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40020400 	.word	0x40020400
 8002b0c:	40005800 	.word	0x40005800

08002b10 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a15      	ldr	r2, [pc, #84]	@ (8002b74 <HAL_I2C_MspDeInit+0x64>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d10f      	bne.n	8002b42 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002b22:	4b15      	ldr	r3, [pc, #84]	@ (8002b78 <HAL_I2C_MspDeInit+0x68>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	4a14      	ldr	r2, [pc, #80]	@ (8002b78 <HAL_I2C_MspDeInit+0x68>)
 8002b28:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b2c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8002b2e:	2140      	movs	r1, #64	@ 0x40
 8002b30:	4812      	ldr	r0, [pc, #72]	@ (8002b7c <HAL_I2C_MspDeInit+0x6c>)
 8002b32:	f001 fb47 	bl	80041c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002b36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b3a:	4810      	ldr	r0, [pc, #64]	@ (8002b7c <HAL_I2C_MspDeInit+0x6c>)
 8002b3c:	f001 fb42 	bl	80041c4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002b40:	e013      	b.n	8002b6a <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a0e      	ldr	r2, [pc, #56]	@ (8002b80 <HAL_I2C_MspDeInit+0x70>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d10e      	bne.n	8002b6a <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <HAL_I2C_MspDeInit+0x68>)
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	4a09      	ldr	r2, [pc, #36]	@ (8002b78 <HAL_I2C_MspDeInit+0x68>)
 8002b52:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002b56:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002b58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002b5c:	4807      	ldr	r0, [pc, #28]	@ (8002b7c <HAL_I2C_MspDeInit+0x6c>)
 8002b5e:	f001 fb31 	bl	80041c4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8002b62:	2108      	movs	r1, #8
 8002b64:	4805      	ldr	r0, [pc, #20]	@ (8002b7c <HAL_I2C_MspDeInit+0x6c>)
 8002b66:	f001 fb2d 	bl	80041c4 <HAL_GPIO_DeInit>
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40005400 	.word	0x40005400
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40020400 	.word	0x40020400
 8002b80:	40005800 	.word	0x40005800

08002b84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b090      	sub	sp, #64	@ 0x40
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	60da      	str	r2, [r3, #12]
 8002baa:	611a      	str	r2, [r3, #16]
 8002bac:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a4f      	ldr	r2, [pc, #316]	@ (8002cf0 <HAL_I2S_MspInit+0x16c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	f040 8096 	bne.w	8002ce6 <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8002bbe:	23c8      	movs	r3, #200	@ 0xc8
 8002bc0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8002bc2:	2305      	movs	r3, #5
 8002bc4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bca:	f107 0314 	add.w	r3, r7, #20
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f006 fd72 	bl	80096b8 <HAL_RCCEx_PeriphCLKConfig>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8002bda:	f7ff fbaf 	bl	800233c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	4b44      	ldr	r3, [pc, #272]	@ (8002cf4 <HAL_I2S_MspInit+0x170>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	4a43      	ldr	r2, [pc, #268]	@ (8002cf4 <HAL_I2S_MspInit+0x170>)
 8002be8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bee:	4b41      	ldr	r3, [pc, #260]	@ (8002cf4 <HAL_I2S_MspInit+0x170>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf4 <HAL_I2S_MspInit+0x170>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	4a3c      	ldr	r2, [pc, #240]	@ (8002cf4 <HAL_I2S_MspInit+0x170>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0a:	4b3a      	ldr	r3, [pc, #232]	@ (8002cf4 <HAL_I2S_MspInit+0x170>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	4b36      	ldr	r3, [pc, #216]	@ (8002cf4 <HAL_I2S_MspInit+0x170>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	4a35      	ldr	r2, [pc, #212]	@ (8002cf4 <HAL_I2S_MspInit+0x170>)
 8002c20:	f043 0304 	orr.w	r3, r3, #4
 8002c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c26:	4b33      	ldr	r3, [pc, #204]	@ (8002cf4 <HAL_I2S_MspInit+0x170>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c32:	2310      	movs	r3, #16
 8002c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	2302      	movs	r3, #2
 8002c38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c42:	2306      	movs	r3, #6
 8002c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	482a      	ldr	r0, [pc, #168]	@ (8002cf8 <HAL_I2S_MspInit+0x174>)
 8002c4e:	f001 f935 	bl	8003ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8002c52:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8002c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c60:	2300      	movs	r3, #0
 8002c62:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c64:	2306      	movs	r3, #6
 8002c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4823      	ldr	r0, [pc, #140]	@ (8002cfc <HAL_I2S_MspInit+0x178>)
 8002c70:	f001 f924 	bl	8003ebc <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002c74:	4b22      	ldr	r3, [pc, #136]	@ (8002d00 <HAL_I2S_MspInit+0x17c>)
 8002c76:	4a23      	ldr	r2, [pc, #140]	@ (8002d04 <HAL_I2S_MspInit+0x180>)
 8002c78:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002c7a:	4b21      	ldr	r3, [pc, #132]	@ (8002d00 <HAL_I2S_MspInit+0x17c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c80:	4b1f      	ldr	r3, [pc, #124]	@ (8002d00 <HAL_I2S_MspInit+0x17c>)
 8002c82:	2240      	movs	r2, #64	@ 0x40
 8002c84:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c86:	4b1e      	ldr	r3, [pc, #120]	@ (8002d00 <HAL_I2S_MspInit+0x17c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8002d00 <HAL_I2S_MspInit+0x17c>)
 8002c8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c92:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c94:	4b1a      	ldr	r3, [pc, #104]	@ (8002d00 <HAL_I2S_MspInit+0x17c>)
 8002c96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c9a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c9c:	4b18      	ldr	r3, [pc, #96]	@ (8002d00 <HAL_I2S_MspInit+0x17c>)
 8002c9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ca2:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8002ca4:	4b16      	ldr	r3, [pc, #88]	@ (8002d00 <HAL_I2S_MspInit+0x17c>)
 8002ca6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002caa:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cac:	4b14      	ldr	r3, [pc, #80]	@ (8002d00 <HAL_I2S_MspInit+0x17c>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002cb2:	4b13      	ldr	r3, [pc, #76]	@ (8002d00 <HAL_I2S_MspInit+0x17c>)
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002cb8:	4b11      	ldr	r3, [pc, #68]	@ (8002d00 <HAL_I2S_MspInit+0x17c>)
 8002cba:	2203      	movs	r2, #3
 8002cbc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002cbe:	4b10      	ldr	r3, [pc, #64]	@ (8002d00 <HAL_I2S_MspInit+0x17c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d00 <HAL_I2S_MspInit+0x17c>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002cca:	480d      	ldr	r0, [pc, #52]	@ (8002d00 <HAL_I2S_MspInit+0x17c>)
 8002ccc:	f000 fcb8 	bl	8003640 <HAL_DMA_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 8002cd6:	f7ff fb31 	bl	800233c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a08      	ldr	r2, [pc, #32]	@ (8002d00 <HAL_I2S_MspInit+0x17c>)
 8002cde:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ce0:	4a07      	ldr	r2, [pc, #28]	@ (8002d00 <HAL_I2S_MspInit+0x17c>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002ce6:	bf00      	nop
 8002ce8:	3740      	adds	r7, #64	@ 0x40
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40003c00 	.word	0x40003c00
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40020000 	.word	0x40020000
 8002cfc:	40020800 	.word	0x40020800
 8002d00:	200002d8 	.word	0x200002d8
 8002d04:	40026088 	.word	0x40026088

08002d08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0e      	ldr	r2, [pc, #56]	@ (8002d50 <HAL_TIM_Base_MspInit+0x48>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d115      	bne.n	8002d46 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d54 <HAL_TIM_Base_MspInit+0x4c>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d22:	4a0c      	ldr	r2, [pc, #48]	@ (8002d54 <HAL_TIM_Base_MspInit+0x4c>)
 8002d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d54 <HAL_TIM_Base_MspInit+0x4c>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002d36:	2200      	movs	r2, #0
 8002d38:	2100      	movs	r1, #0
 8002d3a:	2019      	movs	r0, #25
 8002d3c:	f000 fc49 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d40:	2019      	movs	r0, #25
 8002d42:	f000 fc62 	bl	800360a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM10_MspInit 1 */

  }

}
 8002d46:	bf00      	nop
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40014400 	.word	0x40014400
 8002d54:	40023800 	.word	0x40023800

08002d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d5c:	bf00      	nop
 8002d5e:	e7fd      	b.n	8002d5c <NMI_Handler+0x4>

08002d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d64:	bf00      	nop
 8002d66:	e7fd      	b.n	8002d64 <HardFault_Handler+0x4>

08002d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d6c:	bf00      	nop
 8002d6e:	e7fd      	b.n	8002d6c <MemManage_Handler+0x4>

08002d70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d74:	bf00      	nop
 8002d76:	e7fd      	b.n	8002d74 <BusFault_Handler+0x4>

08002d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d7c:	bf00      	nop
 8002d7e:	e7fd      	b.n	8002d7c <UsageFault_Handler+0x4>

08002d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dae:	f000 faf1 	bl	8003394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002dba:	2001      	movs	r0, #1
 8002dbc:	f001 fb00 	bl	80043c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002dc0:	bf00      	nop
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002dc8:	2002      	movs	r0, #2
 8002dca:	f001 faf9 	bl	80043c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002dd6:	2004      	movs	r0, #4
 8002dd8:	f001 faf2 	bl	80043c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002ddc:	bf00      	nop
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002de4:	4802      	ldr	r0, [pc, #8]	@ (8002df0 <DMA1_Stream5_IRQHandler+0x10>)
 8002de6:	f000 fdff 	bl	80039e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200002d8 	.word	0x200002d8

08002df4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002df8:	4802      	ldr	r0, [pc, #8]	@ (8002e04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002dfa:	f006 fea3 	bl	8009b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000338 	.word	0x20000338

08002e08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002e0c:	4802      	ldr	r0, [pc, #8]	@ (8002e18 <OTG_FS_IRQHandler+0x10>)
 8002e0e:	f001 fdcf 	bl	80049b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20002650 	.word	0x20002650

08002e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e24:	4a14      	ldr	r2, [pc, #80]	@ (8002e78 <_sbrk+0x5c>)
 8002e26:	4b15      	ldr	r3, [pc, #84]	@ (8002e7c <_sbrk+0x60>)
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e30:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <_sbrk+0x64>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e38:	4b11      	ldr	r3, [pc, #68]	@ (8002e80 <_sbrk+0x64>)
 8002e3a:	4a12      	ldr	r2, [pc, #72]	@ (8002e84 <_sbrk+0x68>)
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e3e:	4b10      	ldr	r3, [pc, #64]	@ (8002e80 <_sbrk+0x64>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d207      	bcs.n	8002e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e4c:	f00f fa2c 	bl	80122a8 <__errno>
 8002e50:	4603      	mov	r3, r0
 8002e52:	220c      	movs	r2, #12
 8002e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e56:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5a:	e009      	b.n	8002e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e5c:	4b08      	ldr	r3, [pc, #32]	@ (8002e80 <_sbrk+0x64>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e62:	4b07      	ldr	r3, [pc, #28]	@ (8002e80 <_sbrk+0x64>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	4a05      	ldr	r2, [pc, #20]	@ (8002e80 <_sbrk+0x64>)
 8002e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20020000 	.word	0x20020000
 8002e7c:	00000400 	.word	0x00000400
 8002e80:	20000790 	.word	0x20000790
 8002e84:	20002b78 	.word	0x20002b78

08002e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e8c:	4b08      	ldr	r3, [pc, #32]	@ (8002eb0 <SystemInit+0x28>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e92:	4a07      	ldr	r2, [pc, #28]	@ (8002eb0 <SystemInit+0x28>)
 8002e94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e9c:	4b04      	ldr	r3, [pc, #16]	@ (8002eb0 <SystemInit+0x28>)
 8002e9e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002ea2:	609a      	str	r2, [r3, #8]
#endif
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8002ebc:	4b08      	ldr	r3, [pc, #32]	@ (8002ee0 <PlayerInit+0x2c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	2003      	movs	r0, #3
 8002ec8:	f7fd fb06 	bl	80004d8 <AUDIO_OUT_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <PlayerInit+0x22>
	{
		return 1;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8002ed6:	2300      	movs	r3, #0
	}
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000048 	.word	0x20000048

08002ee4 <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
  int bytesread;


  f_close(&WavFile);
 8002eee:	482f      	ldr	r0, [pc, #188]	@ (8002fac <AUDIO_PLAYER_Start+0xc8>)
 8002ef0:	f00e f971 	bl	80111d6 <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8002ef4:	f7fd ff58 	bl	8000da8 <AUDIO_GetWavObjectNumber>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	461a      	mov	r2, r3
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d94d      	bls.n	8002fa0 <AUDIO_PLAYER_Start+0xbc>
  {

	/////////////INCLUIDO POR JAVIER DIAZ-CANO////////////////////////////
	strcpy(current_song, (char *)FileList.file[idx].name);
 8002f04:	79fa      	ldrb	r2, [r7, #7]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	4a27      	ldr	r2, [pc, #156]	@ (8002fb0 <AUDIO_PLAYER_Start+0xcc>)
 8002f12:	4413      	add	r3, r2
 8002f14:	3301      	adds	r3, #1
 8002f16:	4619      	mov	r1, r3
 8002f18:	4826      	ldr	r0, [pc, #152]	@ (8002fb4 <AUDIO_PLAYER_Start+0xd0>)
 8002f1a:	f00f f9f1 	bl	8012300 <strcpy>
    /////////////////////////////////////////////////////////////////////

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 8002f1e:	79fa      	ldrb	r2, [r7, #7]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	4a21      	ldr	r2, [pc, #132]	@ (8002fb0 <AUDIO_PLAYER_Start+0xcc>)
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3301      	adds	r3, #1
 8002f30:	2201      	movs	r2, #1
 8002f32:	4619      	mov	r1, r3
 8002f34:	481d      	ldr	r0, [pc, #116]	@ (8002fac <AUDIO_PLAYER_Start+0xc8>)
 8002f36:	f00d fdd7 	bl	8010ae8 <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8002f3a:	f107 030c 	add.w	r3, r7, #12
 8002f3e:	222c      	movs	r2, #44	@ 0x2c
 8002f40:	491d      	ldr	r1, [pc, #116]	@ (8002fb8 <AUDIO_PLAYER_Start+0xd4>)
 8002f42:	481a      	ldr	r0, [pc, #104]	@ (8002fac <AUDIO_PLAYER_Start+0xc8>)
 8002f44:	f00d ff8a 	bl	8010e5c <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 8002f48:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb8 <AUDIO_PLAYER_Start+0xd4>)
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ffb1 	bl	8002eb4 <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8002f52:	4b1a      	ldr	r3, [pc, #104]	@ (8002fbc <AUDIO_PLAYER_Start+0xd8>)
 8002f54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4813      	ldr	r0, [pc, #76]	@ (8002fac <AUDIO_PLAYER_Start+0xc8>)
 8002f60:	f00e f963 	bl	801122a <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8002f64:	f107 030c 	add.w	r3, r7, #12
 8002f68:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f6c:	4913      	ldr	r1, [pc, #76]	@ (8002fbc <AUDIO_PLAYER_Start+0xd8>)
 8002f6e:	480f      	ldr	r0, [pc, #60]	@ (8002fac <AUDIO_PLAYER_Start+0xc8>)
 8002f70:	f00d ff74 	bl	8010e5c <f_read>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d112      	bne.n	8002fa0 <AUDIO_PLAYER_Start+0xbc>
    {
      AudioState = AUDIO_STATE_PLAY;
 8002f7a:	4b11      	ldr	r3, [pc, #68]	@ (8002fc0 <AUDIO_PLAYER_Start+0xdc>)
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00c      	beq.n	8002fa0 <AUDIO_PLAYER_Start+0xbc>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8002f86:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f8a:	480c      	ldr	r0, [pc, #48]	@ (8002fbc <AUDIO_PLAYER_Start+0xd8>)
 8002f8c:	f7fd faf2 	bl	8000574 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	461a      	mov	r2, r3
 8002f94:	4b09      	ldr	r3, [pc, #36]	@ (8002fbc <AUDIO_PLAYER_Start+0xd8>)
 8002f96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f9a:	605a      	str	r2, [r3, #4]
          return AUDIO_ERROR_NONE;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e000      	b.n	8002fa2 <AUDIO_PLAYER_Start+0xbe>
        }
      }
  }


  return AUDIO_ERROR_IO;
 8002fa0:	2301      	movs	r3, #1
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20001bd0 	.word	0x20001bd0
 8002fb0:	200017c8 	.word	0x200017c8
 8002fb4:	200017a0 	.word	0x200017a0
 8002fb8:	20001ba4 	.word	0x20001ba4
 8002fbc:	20000794 	.word	0x20000794
 8002fc0:	2000179c 	.word	0x2000179c

08002fc4 <get_name>:


///// INCLUIDO POR JAVIER DIAZ-CANO ///////////////////////////////////////////////////
char* get_name(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
    return current_song;  // Devuelve el nombre de la cancion en reproduccion
 8002fc8:	4b02      	ldr	r3, [pc, #8]	@ (8002fd4 <get_name+0x10>)
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	200017a0 	.word	0x200017a0

08002fd8 <quitar_extension>:

char* quitar_extension(const char* cad)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
    int tam = strlen(cad);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7fd f8f9 	bl	80001d8 <strlen>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	60fb      	str	r3, [r7, #12]
    char* result = malloc(tam + 1); // Reserva memoria dinamica
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	3301      	adds	r3, #1
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f00f f85a 	bl	80120a8 <malloc>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	60bb      	str	r3, [r7, #8]
    strcpy(result, cad);            // Copia la cadena original
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	68b8      	ldr	r0, [r7, #8]
 8002ffc:	f00f f980 	bl	8012300 <strcpy>
    result[tam - 4] = '\0';         // Reemplaza la extension con '\0' (elimina los ultimos 4 caracteres ".wav")
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3b04      	subs	r3, #4
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	4413      	add	r3, r2
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]
    return result;
 800300c:	68bb      	ldr	r3, [r7, #8]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 8003018:	b590      	push	{r4, r7, lr}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8003022:	2300      	movs	r3, #0
 8003024:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 8003026:	4b82      	ldr	r3, [pc, #520]	@ (8003230 <AUDIO_PLAYER_Process+0x218>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	3b03      	subs	r3, #3
 800302c:	2b0a      	cmp	r3, #10
 800302e:	f200 80f6 	bhi.w	800321e <AUDIO_PLAYER_Process+0x206>
 8003032:	a201      	add	r2, pc, #4	@ (adr r2, 8003038 <AUDIO_PLAYER_Process+0x20>)
 8003034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003038:	08003065 	.word	0x08003065
 800303c:	0800321f 	.word	0x0800321f
 8003040:	0800312b 	.word	0x0800312b
 8003044:	08003179 	.word	0x08003179
 8003048:	0800321f 	.word	0x0800321f
 800304c:	0800321f 	.word	0x0800321f
 8003050:	08003119 	.word	0x08003119
 8003054:	080031bb 	.word	0x080031bb
 8003058:	080031c7 	.word	0x080031c7
 800305c:	080031d3 	.word	0x080031d3
 8003060:	080031f9 	.word	0x080031f9
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8003064:	4b73      	ldr	r3, [pc, #460]	@ (8003234 <AUDIO_PLAYER_Process+0x21c>)
 8003066:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	4b72      	ldr	r3, [pc, #456]	@ (8003238 <AUDIO_PLAYER_Process+0x220>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	429a      	cmp	r2, r3
 8003072:	d305      	bcc.n	8003080 <AUDIO_PLAYER_Process+0x68>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8003074:	2002      	movs	r0, #2
 8003076:	f7fd fad3 	bl	8000620 <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 800307a:	4b6d      	ldr	r3, [pc, #436]	@ (8003230 <AUDIO_PLAYER_Process+0x218>)
 800307c:	2205      	movs	r2, #5
 800307e:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8003080:	4b6c      	ldr	r3, [pc, #432]	@ (8003234 <AUDIO_PLAYER_Process+0x21c>)
 8003082:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d11e      	bne.n	80030ca <AUDIO_PLAYER_Process+0xb2>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 800308c:	f107 0308 	add.w	r3, r7, #8
 8003090:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003094:	4967      	ldr	r1, [pc, #412]	@ (8003234 <AUDIO_PLAYER_Process+0x21c>)
 8003096:	4869      	ldr	r0, [pc, #420]	@ (800323c <AUDIO_PLAYER_Process+0x224>)
 8003098:	f00d fee0 	bl	8010e5c <f_read>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d004      	beq.n	80030ac <AUDIO_PLAYER_Process+0x94>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80030a2:	2002      	movs	r0, #2
 80030a4:	f7fd fabc 	bl	8000620 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0bc      	b.n	8003226 <AUDIO_PLAYER_Process+0x20e>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 80030ac:	4b61      	ldr	r3, [pc, #388]	@ (8003234 <AUDIO_PLAYER_Process+0x21c>)
 80030ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 80030b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003234 <AUDIO_PLAYER_Process+0x21c>)
 80030b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	4413      	add	r3, r2
 80030c2:	4a5c      	ldr	r2, [pc, #368]	@ (8003234 <AUDIO_PLAYER_Process+0x21c>)
 80030c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030c8:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 80030ca:	4b5a      	ldr	r3, [pc, #360]	@ (8003234 <AUDIO_PLAYER_Process+0x21c>)
 80030cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	f040 80a5 	bne.w	8003222 <AUDIO_PLAYER_Process+0x20a>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 80030d8:	f107 0308 	add.w	r3, r7, #8
 80030dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030e0:	4957      	ldr	r1, [pc, #348]	@ (8003240 <AUDIO_PLAYER_Process+0x228>)
 80030e2:	4856      	ldr	r0, [pc, #344]	@ (800323c <AUDIO_PLAYER_Process+0x224>)
 80030e4:	f00d feba 	bl	8010e5c <f_read>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d004      	beq.n	80030f8 <AUDIO_PLAYER_Process+0xe0>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80030ee:	2002      	movs	r0, #2
 80030f0:	f7fd fa96 	bl	8000620 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 80030f4:	2301      	movs	r3, #1
 80030f6:	e096      	b.n	8003226 <AUDIO_PLAYER_Process+0x20e>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 80030f8:	4b4e      	ldr	r3, [pc, #312]	@ (8003234 <AUDIO_PLAYER_Process+0x21c>)
 80030fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8003102:	4b4c      	ldr	r3, [pc, #304]	@ (8003234 <AUDIO_PLAYER_Process+0x21c>)
 8003104:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4413      	add	r3, r2
 800310e:	4a49      	ldr	r2, [pc, #292]	@ (8003234 <AUDIO_PLAYER_Process+0x21c>)
 8003110:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003114:	6053      	str	r3, [r2, #4]
    }
    break;
 8003116:	e084      	b.n	8003222 <AUDIO_PLAYER_Process+0x20a>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8003118:	2002      	movs	r0, #2
 800311a:	f7fd fa81 	bl	8000620 <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 800311e:	4b44      	ldr	r3, [pc, #272]	@ (8003230 <AUDIO_PLAYER_Process+0x218>)
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
    break;
 8003128:	e07c      	b.n	8003224 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 800312a:	4b46      	ldr	r3, [pc, #280]	@ (8003244 <AUDIO_PLAYER_Process+0x22c>)
 800312c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003130:	b29b      	uxth	r3, r3
 8003132:	3301      	adds	r3, #1
 8003134:	b29b      	uxth	r3, r3
 8003136:	b21a      	sxth	r2, r3
 8003138:	4b42      	ldr	r3, [pc, #264]	@ (8003244 <AUDIO_PLAYER_Process+0x22c>)
 800313a:	801a      	strh	r2, [r3, #0]
 800313c:	4b41      	ldr	r3, [pc, #260]	@ (8003244 <AUDIO_PLAYER_Process+0x22c>)
 800313e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003142:	461c      	mov	r4, r3
 8003144:	f7fd fe30 	bl	8000da8 <AUDIO_GetWavObjectNumber>
 8003148:	4603      	mov	r3, r0
 800314a:	429c      	cmp	r4, r3
 800314c:	db09      	blt.n	8003162 <AUDIO_PLAYER_Process+0x14a>
    {
    	if (isLoop)
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <AUDIO_PLAYER_Process+0x144>
    	{
    		FilePos = 0;
 8003154:	4b3b      	ldr	r3, [pc, #236]	@ (8003244 <AUDIO_PLAYER_Process+0x22c>)
 8003156:	2200      	movs	r2, #0
 8003158:	801a      	strh	r2, [r3, #0]
 800315a:	e002      	b.n	8003162 <AUDIO_PLAYER_Process+0x14a>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 800315c:	4b34      	ldr	r3, [pc, #208]	@ (8003230 <AUDIO_PLAYER_Process+0x218>)
 800315e:	2209      	movs	r2, #9
 8003160:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8003162:	2002      	movs	r0, #2
 8003164:	f7fd fa5c 	bl	8000620 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8003168:	4b36      	ldr	r3, [pc, #216]	@ (8003244 <AUDIO_PLAYER_Process+0x22c>)
 800316a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff feb7 	bl	8002ee4 <AUDIO_PLAYER_Start>
    break;    
 8003176:	e055      	b.n	8003224 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8003178:	4b32      	ldr	r3, [pc, #200]	@ (8003244 <AUDIO_PLAYER_Process+0x22c>)
 800317a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29b      	uxth	r3, r3
 8003184:	b21a      	sxth	r2, r3
 8003186:	4b2f      	ldr	r3, [pc, #188]	@ (8003244 <AUDIO_PLAYER_Process+0x22c>)
 8003188:	801a      	strh	r2, [r3, #0]
 800318a:	4b2e      	ldr	r3, [pc, #184]	@ (8003244 <AUDIO_PLAYER_Process+0x22c>)
 800318c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003190:	2b00      	cmp	r3, #0
 8003192:	da07      	bge.n	80031a4 <AUDIO_PLAYER_Process+0x18c>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8003194:	f7fd fe08 	bl	8000da8 <AUDIO_GetWavObjectNumber>
 8003198:	4603      	mov	r3, r0
 800319a:	3b01      	subs	r3, #1
 800319c:	b29b      	uxth	r3, r3
 800319e:	b21a      	sxth	r2, r3
 80031a0:	4b28      	ldr	r3, [pc, #160]	@ (8003244 <AUDIO_PLAYER_Process+0x22c>)
 80031a2:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80031a4:	2002      	movs	r0, #2
 80031a6:	f7fd fa3b 	bl	8000620 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 80031aa:	4b26      	ldr	r3, [pc, #152]	@ (8003244 <AUDIO_PLAYER_Process+0x22c>)
 80031ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fe96 	bl	8002ee4 <AUDIO_PLAYER_Start>
    break;   
 80031b8:	e034      	b.n	8003224 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 80031ba:	f7fd fa05 	bl	80005c8 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 80031be:	4b1c      	ldr	r3, [pc, #112]	@ (8003230 <AUDIO_PLAYER_Process+0x218>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
    break;
 80031c4:	e02e      	b.n	8003224 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 80031c6:	f7fd fa15 	bl	80005f4 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 80031ca:	4b19      	ldr	r3, [pc, #100]	@ (8003230 <AUDIO_PLAYER_Process+0x218>)
 80031cc:	2203      	movs	r2, #3
 80031ce:	701a      	strb	r2, [r3, #0]
    break;
 80031d0:	e028      	b.n	8003224 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 80031d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003248 <AUDIO_PLAYER_Process+0x230>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b5a      	cmp	r3, #90	@ 0x5a
 80031d8:	d804      	bhi.n	80031e4 <AUDIO_PLAYER_Process+0x1cc>
    {
      uwVolume += 10;
 80031da:	4b1b      	ldr	r3, [pc, #108]	@ (8003248 <AUDIO_PLAYER_Process+0x230>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	330a      	adds	r3, #10
 80031e0:	4a19      	ldr	r2, [pc, #100]	@ (8003248 <AUDIO_PLAYER_Process+0x230>)
 80031e2:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 80031e4:	4b18      	ldr	r3, [pc, #96]	@ (8003248 <AUDIO_PLAYER_Process+0x230>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd fa40 	bl	8000670 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 80031f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003230 <AUDIO_PLAYER_Process+0x218>)
 80031f2:	2203      	movs	r2, #3
 80031f4:	701a      	strb	r2, [r3, #0]
    break;
 80031f6:	e015      	b.n	8003224 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 80031f8:	4b13      	ldr	r3, [pc, #76]	@ (8003248 <AUDIO_PLAYER_Process+0x230>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b09      	cmp	r3, #9
 80031fe:	d904      	bls.n	800320a <AUDIO_PLAYER_Process+0x1f2>
    {
      uwVolume -= 10;
 8003200:	4b11      	ldr	r3, [pc, #68]	@ (8003248 <AUDIO_PLAYER_Process+0x230>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3b0a      	subs	r3, #10
 8003206:	4a10      	ldr	r2, [pc, #64]	@ (8003248 <AUDIO_PLAYER_Process+0x230>)
 8003208:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 800320a:	4b0f      	ldr	r3, [pc, #60]	@ (8003248 <AUDIO_PLAYER_Process+0x230>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	4618      	mov	r0, r3
 8003212:	f7fd fa2d 	bl	8000670 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8003216:	4b06      	ldr	r3, [pc, #24]	@ (8003230 <AUDIO_PLAYER_Process+0x218>)
 8003218:	2203      	movs	r2, #3
 800321a:	701a      	strb	r2, [r3, #0]
    break;
 800321c:	e002      	b.n	8003224 <AUDIO_PLAYER_Process+0x20c>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 800321e:	bf00      	nop
 8003220:	e000      	b.n	8003224 <AUDIO_PLAYER_Process+0x20c>
    break;
 8003222:	bf00      	nop
  }
  return audio_error;
 8003224:	7bfb      	ldrb	r3, [r7, #15]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	bd90      	pop	{r4, r7, pc}
 800322e:	bf00      	nop
 8003230:	2000179c 	.word	0x2000179c
 8003234:	20000794 	.word	0x20000794
 8003238:	20001ba4 	.word	0x20001ba4
 800323c:	20001bd0 	.word	0x20001bd0
 8003240:	20000f94 	.word	0x20000f94
 8003244:	2000179e 	.word	0x2000179e
 8003248:	20000048 	.word	0x20000048

0800324c <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8003250:	4b06      	ldr	r3, [pc, #24]	@ (800326c <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b03      	cmp	r3, #3
 8003256:	d104      	bne.n	8003262 <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8003258:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 800325a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800325e:	2202      	movs	r2, #2
 8003260:	701a      	strb	r2, [r3, #0]
  }
}
 8003262:	bf00      	nop
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	2000179c 	.word	0x2000179c
 8003270:	20000794 	.word	0x20000794

08003274 <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8003278:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b03      	cmp	r3, #3
 800327e:	d104      	bne.n	800328a <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8003280:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8003282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
  }
}
 800328a:	bf00      	nop
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	2000179c 	.word	0x2000179c
 8003298:	20000794 	.word	0x20000794

0800329c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800329c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032a2:	e003      	b.n	80032ac <LoopCopyDataInit>

080032a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032a4:	4b0c      	ldr	r3, [pc, #48]	@ (80032d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032aa:	3104      	adds	r1, #4

080032ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032ac:	480b      	ldr	r0, [pc, #44]	@ (80032dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032ae:	4b0c      	ldr	r3, [pc, #48]	@ (80032e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032b4:	d3f6      	bcc.n	80032a4 <CopyDataInit>
  ldr  r2, =_sbss
 80032b6:	4a0b      	ldr	r2, [pc, #44]	@ (80032e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032b8:	e002      	b.n	80032c0 <LoopFillZerobss>

080032ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032bc:	f842 3b04 	str.w	r3, [r2], #4

080032c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032c0:	4b09      	ldr	r3, [pc, #36]	@ (80032e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032c4:	d3f9      	bcc.n	80032ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032c6:	f7ff fddf 	bl	8002e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032ca:	f00e fff3 	bl	80122b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ce:	f7fe fe13 	bl	8001ef8 <main>
  bx  lr    
 80032d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80032d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80032d8:	08017a94 	.word	0x08017a94
  ldr  r0, =_sdata
 80032dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032e0:	200000c4 	.word	0x200000c4
  ldr  r2, =_sbss
 80032e4:	200000c4 	.word	0x200000c4
  ldr  r3, = _ebss
 80032e8:	20002b78 	.word	0x20002b78

080032ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032ec:	e7fe      	b.n	80032ec <ADC_IRQHandler>
	...

080032f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003330 <HAL_Init+0x40>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003330 <HAL_Init+0x40>)
 80032fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003300:	4b0b      	ldr	r3, [pc, #44]	@ (8003330 <HAL_Init+0x40>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a0a      	ldr	r2, [pc, #40]	@ (8003330 <HAL_Init+0x40>)
 8003306:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800330a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800330c:	4b08      	ldr	r3, [pc, #32]	@ (8003330 <HAL_Init+0x40>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a07      	ldr	r2, [pc, #28]	@ (8003330 <HAL_Init+0x40>)
 8003312:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003316:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003318:	2003      	movs	r0, #3
 800331a:	f000 f94f 	bl	80035bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800331e:	2000      	movs	r0, #0
 8003320:	f000 f808 	bl	8003334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003324:	f7ff fb3e 	bl	80029a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40023c00 	.word	0x40023c00

08003334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800333c:	4b12      	ldr	r3, [pc, #72]	@ (8003388 <HAL_InitTick+0x54>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4b12      	ldr	r3, [pc, #72]	@ (800338c <HAL_InitTick+0x58>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	4619      	mov	r1, r3
 8003346:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800334a:	fbb3 f3f1 	udiv	r3, r3, r1
 800334e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003352:	4618      	mov	r0, r3
 8003354:	f000 f967 	bl	8003626 <HAL_SYSTICK_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e00e      	b.n	8003380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b0f      	cmp	r3, #15
 8003366:	d80a      	bhi.n	800337e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003368:	2200      	movs	r2, #0
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	f04f 30ff 	mov.w	r0, #4294967295
 8003370:	f000 f92f 	bl	80035d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003374:	4a06      	ldr	r2, [pc, #24]	@ (8003390 <HAL_InitTick+0x5c>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	e000      	b.n	8003380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20000044 	.word	0x20000044
 800338c:	20000050 	.word	0x20000050
 8003390:	2000004c 	.word	0x2000004c

08003394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003398:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <HAL_IncTick+0x20>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	4b06      	ldr	r3, [pc, #24]	@ (80033b8 <HAL_IncTick+0x24>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	4a04      	ldr	r2, [pc, #16]	@ (80033b8 <HAL_IncTick+0x24>)
 80033a6:	6013      	str	r3, [r2, #0]
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000050 	.word	0x20000050
 80033b8:	20001e00 	.word	0x20001e00

080033bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return uwTick;
 80033c0:	4b03      	ldr	r3, [pc, #12]	@ (80033d0 <HAL_GetTick+0x14>)
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20001e00 	.word	0x20001e00

080033d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033dc:	f7ff ffee 	bl	80033bc <HAL_GetTick>
 80033e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d005      	beq.n	80033fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003418 <HAL_Delay+0x44>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4413      	add	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033fa:	bf00      	nop
 80033fc:	f7ff ffde 	bl	80033bc <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	429a      	cmp	r2, r3
 800340a:	d8f7      	bhi.n	80033fc <HAL_Delay+0x28>
  {
  }
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000050 	.word	0x20000050

0800341c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800342c:	4b0c      	ldr	r3, [pc, #48]	@ (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003438:	4013      	ands	r3, r2
 800343a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003444:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003448:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800344c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800344e:	4a04      	ldr	r2, [pc, #16]	@ (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	60d3      	str	r3, [r2, #12]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003468:	4b04      	ldr	r3, [pc, #16]	@ (800347c <__NVIC_GetPriorityGrouping+0x18>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	0a1b      	lsrs	r3, r3, #8
 800346e:	f003 0307 	and.w	r3, r3, #7
}
 8003472:	4618      	mov	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	2b00      	cmp	r3, #0
 8003490:	db0b      	blt.n	80034aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	f003 021f 	and.w	r2, r3, #31
 8003498:	4907      	ldr	r1, [pc, #28]	@ (80034b8 <__NVIC_EnableIRQ+0x38>)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	2001      	movs	r0, #1
 80034a2:	fa00 f202 	lsl.w	r2, r0, r2
 80034a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000e100 	.word	0xe000e100

080034bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	6039      	str	r1, [r7, #0]
 80034c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	db0a      	blt.n	80034e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	490c      	ldr	r1, [pc, #48]	@ (8003508 <__NVIC_SetPriority+0x4c>)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	0112      	lsls	r2, r2, #4
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	440b      	add	r3, r1
 80034e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e4:	e00a      	b.n	80034fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	4908      	ldr	r1, [pc, #32]	@ (800350c <__NVIC_SetPriority+0x50>)
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	3b04      	subs	r3, #4
 80034f4:	0112      	lsls	r2, r2, #4
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	440b      	add	r3, r1
 80034fa:	761a      	strb	r2, [r3, #24]
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	e000e100 	.word	0xe000e100
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003510:	b480      	push	{r7}
 8003512:	b089      	sub	sp, #36	@ 0x24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f1c3 0307 	rsb	r3, r3, #7
 800352a:	2b04      	cmp	r3, #4
 800352c:	bf28      	it	cs
 800352e:	2304      	movcs	r3, #4
 8003530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3304      	adds	r3, #4
 8003536:	2b06      	cmp	r3, #6
 8003538:	d902      	bls.n	8003540 <NVIC_EncodePriority+0x30>
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3b03      	subs	r3, #3
 800353e:	e000      	b.n	8003542 <NVIC_EncodePriority+0x32>
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003544:	f04f 32ff 	mov.w	r2, #4294967295
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43da      	mvns	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	401a      	ands	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003558:	f04f 31ff 	mov.w	r1, #4294967295
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	43d9      	mvns	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003568:	4313      	orrs	r3, r2
         );
}
 800356a:	4618      	mov	r0, r3
 800356c:	3724      	adds	r7, #36	@ 0x24
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3b01      	subs	r3, #1
 8003584:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003588:	d301      	bcc.n	800358e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800358a:	2301      	movs	r3, #1
 800358c:	e00f      	b.n	80035ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800358e:	4a0a      	ldr	r2, [pc, #40]	@ (80035b8 <SysTick_Config+0x40>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3b01      	subs	r3, #1
 8003594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003596:	210f      	movs	r1, #15
 8003598:	f04f 30ff 	mov.w	r0, #4294967295
 800359c:	f7ff ff8e 	bl	80034bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a0:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <SysTick_Config+0x40>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035a6:	4b04      	ldr	r3, [pc, #16]	@ (80035b8 <SysTick_Config+0x40>)
 80035a8:	2207      	movs	r2, #7
 80035aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	e000e010 	.word	0xe000e010

080035bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ff29 	bl	800341c <__NVIC_SetPriorityGrouping>
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	4603      	mov	r3, r0
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035e4:	f7ff ff3e 	bl	8003464 <__NVIC_GetPriorityGrouping>
 80035e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	6978      	ldr	r0, [r7, #20]
 80035f0:	f7ff ff8e 	bl	8003510 <NVIC_EncodePriority>
 80035f4:	4602      	mov	r2, r0
 80035f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fa:	4611      	mov	r1, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff5d 	bl	80034bc <__NVIC_SetPriority>
}
 8003602:	bf00      	nop
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	4603      	mov	r3, r0
 8003612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff31 	bl	8003480 <__NVIC_EnableIRQ>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ffa2 	bl	8003578 <SysTick_Config>
 8003634:	4603      	mov	r3, r0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800364c:	f7ff feb6 	bl	80033bc <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e099      	b.n	8003790 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800367c:	e00f      	b.n	800369e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800367e:	f7ff fe9d 	bl	80033bc <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b05      	cmp	r3, #5
 800368a:	d908      	bls.n	800369e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2203      	movs	r2, #3
 8003696:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e078      	b.n	8003790 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e8      	bne.n	800367e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4b38      	ldr	r3, [pc, #224]	@ (8003798 <HAL_DMA_Init+0x158>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d107      	bne.n	8003708 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003700:	4313      	orrs	r3, r2
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f023 0307 	bic.w	r3, r3, #7
 800371e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372e:	2b04      	cmp	r3, #4
 8003730:	d117      	bne.n	8003762 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00e      	beq.n	8003762 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 fb3d 	bl	8003dc4 <DMA_CheckFifoParam>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2240      	movs	r2, #64	@ 0x40
 8003754:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800375e:	2301      	movs	r3, #1
 8003760:	e016      	b.n	8003790 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 faf4 	bl	8003d58 <DMA_CalcBaseAndBitshift>
 8003770:	4603      	mov	r3, r0
 8003772:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003778:	223f      	movs	r2, #63	@ 0x3f
 800377a:	409a      	lsls	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	f010803f 	.word	0xf010803f

0800379c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e050      	b.n	8003850 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d101      	bne.n	80037be <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80037ba:	2302      	movs	r3, #2
 80037bc:	e048      	b.n	8003850 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0201 	bic.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2200      	movs	r2, #0
 80037dc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2200      	movs	r2, #0
 80037e4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2200      	movs	r2, #0
 80037ec:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2200      	movs	r2, #0
 80037f4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2221      	movs	r2, #33	@ 0x21
 80037fc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 faaa 	bl	8003d58 <DMA_CalcBaseAndBitshift>
 8003804:	4603      	mov	r3, r0
 8003806:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003830:	223f      	movs	r2, #63	@ 0x3f
 8003832:	409a      	lsls	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_DMA_Start_IT+0x26>
 800387a:	2302      	movs	r3, #2
 800387c:	e040      	b.n	8003900 <HAL_DMA_Start_IT+0xa8>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d12f      	bne.n	80038f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2202      	movs	r2, #2
 8003896:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fa28 	bl	8003cfc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b0:	223f      	movs	r2, #63	@ 0x3f
 80038b2:	409a      	lsls	r2, r3
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0216 	orr.w	r2, r2, #22
 80038c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0208 	orr.w	r2, r2, #8
 80038de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0201 	orr.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	e005      	b.n	80038fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038fa:	2302      	movs	r3, #2
 80038fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003914:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003916:	f7ff fd51 	bl	80033bc <HAL_GetTick>
 800391a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d008      	beq.n	800393a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2280      	movs	r2, #128	@ 0x80
 800392c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e052      	b.n	80039e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0216 	bic.w	r2, r2, #22
 8003948:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003958:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d103      	bne.n	800396a <HAL_DMA_Abort+0x62>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003966:	2b00      	cmp	r3, #0
 8003968:	d007      	beq.n	800397a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0208 	bic.w	r2, r2, #8
 8003978:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0201 	bic.w	r2, r2, #1
 8003988:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800398a:	e013      	b.n	80039b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800398c:	f7ff fd16 	bl	80033bc <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b05      	cmp	r3, #5
 8003998:	d90c      	bls.n	80039b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2203      	movs	r2, #3
 80039a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e015      	b.n	80039e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1e4      	bne.n	800398c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c6:	223f      	movs	r2, #63	@ 0x3f
 80039c8:	409a      	lsls	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039f4:	4b8e      	ldr	r3, [pc, #568]	@ (8003c30 <HAL_DMA_IRQHandler+0x248>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a8e      	ldr	r2, [pc, #568]	@ (8003c34 <HAL_DMA_IRQHandler+0x24c>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	0a9b      	lsrs	r3, r3, #10
 8003a00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a12:	2208      	movs	r2, #8
 8003a14:	409a      	lsls	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d01a      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0204 	bic.w	r2, r2, #4
 8003a3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a40:	2208      	movs	r2, #8
 8003a42:	409a      	lsls	r2, r3
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4c:	f043 0201 	orr.w	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a58:	2201      	movs	r2, #1
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d012      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a76:	2201      	movs	r2, #1
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a82:	f043 0202 	orr.w	r2, r3, #2
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8e:	2204      	movs	r2, #4
 8003a90:	409a      	lsls	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d012      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00b      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aac:	2204      	movs	r2, #4
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab8:	f043 0204 	orr.w	r2, r3, #4
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac4:	2210      	movs	r2, #16
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d043      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d03c      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae2:	2210      	movs	r2, #16
 8003ae4:	409a      	lsls	r2, r3
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d018      	beq.n	8003b2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d108      	bne.n	8003b18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d024      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
 8003b16:	e01f      	b.n	8003b58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01b      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
 8003b28:	e016      	b.n	8003b58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d107      	bne.n	8003b48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0208 	bic.w	r2, r2, #8
 8003b46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 808f 	beq.w	8003c88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8087 	beq.w	8003c88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7e:	2220      	movs	r2, #32
 8003b80:	409a      	lsls	r2, r3
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b05      	cmp	r3, #5
 8003b90:	d136      	bne.n	8003c00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0216 	bic.w	r2, r2, #22
 8003ba0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d103      	bne.n	8003bc2 <HAL_DMA_IRQHandler+0x1da>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0208 	bic.w	r2, r2, #8
 8003bd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd6:	223f      	movs	r2, #63	@ 0x3f
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d07e      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	4798      	blx	r3
        }
        return;
 8003bfe:	e079      	b.n	8003cf4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01d      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10d      	bne.n	8003c38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d031      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
 8003c2c:	e02c      	b.n	8003c88 <HAL_DMA_IRQHandler+0x2a0>
 8003c2e:	bf00      	nop
 8003c30:	20000044 	.word	0x20000044
 8003c34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d023      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	4798      	blx	r3
 8003c48:	e01e      	b.n	8003c88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10f      	bne.n	8003c78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0210 	bic.w	r2, r2, #16
 8003c66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d032      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d022      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2205      	movs	r2, #5
 8003ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d307      	bcc.n	8003cd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f2      	bne.n	8003cb4 <HAL_DMA_IRQHandler+0x2cc>
 8003cce:	e000      	b.n	8003cd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003cd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4798      	blx	r3
 8003cf2:	e000      	b.n	8003cf6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cf4:	bf00      	nop
    }
  }
}
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b40      	cmp	r3, #64	@ 0x40
 8003d28:	d108      	bne.n	8003d3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d3a:	e007      	b.n	8003d4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	60da      	str	r2, [r3, #12]
}
 8003d4c:	bf00      	nop
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	3b10      	subs	r3, #16
 8003d68:	4a14      	ldr	r2, [pc, #80]	@ (8003dbc <DMA_CalcBaseAndBitshift+0x64>)
 8003d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6e:	091b      	lsrs	r3, r3, #4
 8003d70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d72:	4a13      	ldr	r2, [pc, #76]	@ (8003dc0 <DMA_CalcBaseAndBitshift+0x68>)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d909      	bls.n	8003d9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d8e:	f023 0303 	bic.w	r3, r3, #3
 8003d92:	1d1a      	adds	r2, r3, #4
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d98:	e007      	b.n	8003daa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003da2:	f023 0303 	bic.w	r3, r3, #3
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	aaaaaaab 	.word	0xaaaaaaab
 8003dc0:	08017628 	.word	0x08017628

08003dc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d11f      	bne.n	8003e1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d856      	bhi.n	8003e92 <DMA_CheckFifoParam+0xce>
 8003de4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dec <DMA_CheckFifoParam+0x28>)
 8003de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dea:	bf00      	nop
 8003dec:	08003dfd 	.word	0x08003dfd
 8003df0:	08003e0f 	.word	0x08003e0f
 8003df4:	08003dfd 	.word	0x08003dfd
 8003df8:	08003e93 	.word	0x08003e93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d046      	beq.n	8003e96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e0c:	e043      	b.n	8003e96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e16:	d140      	bne.n	8003e9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e1c:	e03d      	b.n	8003e9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e26:	d121      	bne.n	8003e6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d837      	bhi.n	8003e9e <DMA_CheckFifoParam+0xda>
 8003e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e34 <DMA_CheckFifoParam+0x70>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003e45 	.word	0x08003e45
 8003e38:	08003e4b 	.word	0x08003e4b
 8003e3c:	08003e45 	.word	0x08003e45
 8003e40:	08003e5d 	.word	0x08003e5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	73fb      	strb	r3, [r7, #15]
      break;
 8003e48:	e030      	b.n	8003eac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d025      	beq.n	8003ea2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e5a:	e022      	b.n	8003ea2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e64:	d11f      	bne.n	8003ea6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e6a:	e01c      	b.n	8003ea6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d903      	bls.n	8003e7a <DMA_CheckFifoParam+0xb6>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	d003      	beq.n	8003e80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e78:	e018      	b.n	8003eac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e7e:	e015      	b.n	8003eac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00e      	beq.n	8003eaa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e90:	e00b      	b.n	8003eaa <DMA_CheckFifoParam+0xe6>
      break;
 8003e92:	bf00      	nop
 8003e94:	e00a      	b.n	8003eac <DMA_CheckFifoParam+0xe8>
      break;
 8003e96:	bf00      	nop
 8003e98:	e008      	b.n	8003eac <DMA_CheckFifoParam+0xe8>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e006      	b.n	8003eac <DMA_CheckFifoParam+0xe8>
      break;
 8003e9e:	bf00      	nop
 8003ea0:	e004      	b.n	8003eac <DMA_CheckFifoParam+0xe8>
      break;
 8003ea2:	bf00      	nop
 8003ea4:	e002      	b.n	8003eac <DMA_CheckFifoParam+0xe8>
      break;   
 8003ea6:	bf00      	nop
 8003ea8:	e000      	b.n	8003eac <DMA_CheckFifoParam+0xe8>
      break;
 8003eaa:	bf00      	nop
    }
  } 
  
  return status; 
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop

08003ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b089      	sub	sp, #36	@ 0x24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	e159      	b.n	800418c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ed8:	2201      	movs	r2, #1
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	f040 8148 	bne.w	8004186 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d005      	beq.n	8003f0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d130      	bne.n	8003f70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	2203      	movs	r2, #3
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4013      	ands	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f44:	2201      	movs	r2, #1
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4013      	ands	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	091b      	lsrs	r3, r3, #4
 8003f5a:	f003 0201 	and.w	r2, r3, #1
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d017      	beq.n	8003fac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	2203      	movs	r2, #3
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d123      	bne.n	8004000 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	08da      	lsrs	r2, r3, #3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3208      	adds	r2, #8
 8003fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	220f      	movs	r2, #15
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	08da      	lsrs	r2, r3, #3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3208      	adds	r2, #8
 8003ffa:	69b9      	ldr	r1, [r7, #24]
 8003ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	2203      	movs	r2, #3
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4013      	ands	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 0203 	and.w	r2, r3, #3
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4313      	orrs	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80a2 	beq.w	8004186 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	4b57      	ldr	r3, [pc, #348]	@ (80041a4 <HAL_GPIO_Init+0x2e8>)
 8004048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404a:	4a56      	ldr	r2, [pc, #344]	@ (80041a4 <HAL_GPIO_Init+0x2e8>)
 800404c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004050:	6453      	str	r3, [r2, #68]	@ 0x44
 8004052:	4b54      	ldr	r3, [pc, #336]	@ (80041a4 <HAL_GPIO_Init+0x2e8>)
 8004054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004056:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800405e:	4a52      	ldr	r2, [pc, #328]	@ (80041a8 <HAL_GPIO_Init+0x2ec>)
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	089b      	lsrs	r3, r3, #2
 8004064:	3302      	adds	r3, #2
 8004066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800406a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	220f      	movs	r2, #15
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43db      	mvns	r3, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4013      	ands	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a49      	ldr	r2, [pc, #292]	@ (80041ac <HAL_GPIO_Init+0x2f0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d019      	beq.n	80040be <HAL_GPIO_Init+0x202>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a48      	ldr	r2, [pc, #288]	@ (80041b0 <HAL_GPIO_Init+0x2f4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d013      	beq.n	80040ba <HAL_GPIO_Init+0x1fe>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a47      	ldr	r2, [pc, #284]	@ (80041b4 <HAL_GPIO_Init+0x2f8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00d      	beq.n	80040b6 <HAL_GPIO_Init+0x1fa>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a46      	ldr	r2, [pc, #280]	@ (80041b8 <HAL_GPIO_Init+0x2fc>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d007      	beq.n	80040b2 <HAL_GPIO_Init+0x1f6>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a45      	ldr	r2, [pc, #276]	@ (80041bc <HAL_GPIO_Init+0x300>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d101      	bne.n	80040ae <HAL_GPIO_Init+0x1f2>
 80040aa:	2304      	movs	r3, #4
 80040ac:	e008      	b.n	80040c0 <HAL_GPIO_Init+0x204>
 80040ae:	2307      	movs	r3, #7
 80040b0:	e006      	b.n	80040c0 <HAL_GPIO_Init+0x204>
 80040b2:	2303      	movs	r3, #3
 80040b4:	e004      	b.n	80040c0 <HAL_GPIO_Init+0x204>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e002      	b.n	80040c0 <HAL_GPIO_Init+0x204>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <HAL_GPIO_Init+0x204>
 80040be:	2300      	movs	r3, #0
 80040c0:	69fa      	ldr	r2, [r7, #28]
 80040c2:	f002 0203 	and.w	r2, r2, #3
 80040c6:	0092      	lsls	r2, r2, #2
 80040c8:	4093      	lsls	r3, r2
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040d0:	4935      	ldr	r1, [pc, #212]	@ (80041a8 <HAL_GPIO_Init+0x2ec>)
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	089b      	lsrs	r3, r3, #2
 80040d6:	3302      	adds	r3, #2
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040de:	4b38      	ldr	r3, [pc, #224]	@ (80041c0 <HAL_GPIO_Init+0x304>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	43db      	mvns	r3, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4013      	ands	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004102:	4a2f      	ldr	r2, [pc, #188]	@ (80041c0 <HAL_GPIO_Init+0x304>)
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004108:	4b2d      	ldr	r3, [pc, #180]	@ (80041c0 <HAL_GPIO_Init+0x304>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800412c:	4a24      	ldr	r2, [pc, #144]	@ (80041c0 <HAL_GPIO_Init+0x304>)
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004132:	4b23      	ldr	r3, [pc, #140]	@ (80041c0 <HAL_GPIO_Init+0x304>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	43db      	mvns	r3, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4013      	ands	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	4313      	orrs	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004156:	4a1a      	ldr	r2, [pc, #104]	@ (80041c0 <HAL_GPIO_Init+0x304>)
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800415c:	4b18      	ldr	r3, [pc, #96]	@ (80041c0 <HAL_GPIO_Init+0x304>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	43db      	mvns	r3, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4013      	ands	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004180:	4a0f      	ldr	r2, [pc, #60]	@ (80041c0 <HAL_GPIO_Init+0x304>)
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	3301      	adds	r3, #1
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	2b0f      	cmp	r3, #15
 8004190:	f67f aea2 	bls.w	8003ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop
 8004198:	3724      	adds	r7, #36	@ 0x24
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40023800 	.word	0x40023800
 80041a8:	40013800 	.word	0x40013800
 80041ac:	40020000 	.word	0x40020000
 80041b0:	40020400 	.word	0x40020400
 80041b4:	40020800 	.word	0x40020800
 80041b8:	40020c00 	.word	0x40020c00
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40013c00 	.word	0x40013c00

080041c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	e0bb      	b.n	8004358 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041e0:	2201      	movs	r2, #1
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4013      	ands	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	f040 80ab 	bne.w	8004352 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80041fc:	4a5c      	ldr	r2, [pc, #368]	@ (8004370 <HAL_GPIO_DeInit+0x1ac>)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	089b      	lsrs	r3, r3, #2
 8004202:	3302      	adds	r3, #2
 8004204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004208:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	220f      	movs	r2, #15
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	4013      	ands	r3, r2
 800421c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a54      	ldr	r2, [pc, #336]	@ (8004374 <HAL_GPIO_DeInit+0x1b0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d019      	beq.n	800425a <HAL_GPIO_DeInit+0x96>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a53      	ldr	r2, [pc, #332]	@ (8004378 <HAL_GPIO_DeInit+0x1b4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <HAL_GPIO_DeInit+0x92>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a52      	ldr	r2, [pc, #328]	@ (800437c <HAL_GPIO_DeInit+0x1b8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00d      	beq.n	8004252 <HAL_GPIO_DeInit+0x8e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a51      	ldr	r2, [pc, #324]	@ (8004380 <HAL_GPIO_DeInit+0x1bc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d007      	beq.n	800424e <HAL_GPIO_DeInit+0x8a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a50      	ldr	r2, [pc, #320]	@ (8004384 <HAL_GPIO_DeInit+0x1c0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d101      	bne.n	800424a <HAL_GPIO_DeInit+0x86>
 8004246:	2304      	movs	r3, #4
 8004248:	e008      	b.n	800425c <HAL_GPIO_DeInit+0x98>
 800424a:	2307      	movs	r3, #7
 800424c:	e006      	b.n	800425c <HAL_GPIO_DeInit+0x98>
 800424e:	2303      	movs	r3, #3
 8004250:	e004      	b.n	800425c <HAL_GPIO_DeInit+0x98>
 8004252:	2302      	movs	r3, #2
 8004254:	e002      	b.n	800425c <HAL_GPIO_DeInit+0x98>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <HAL_GPIO_DeInit+0x98>
 800425a:	2300      	movs	r3, #0
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	f002 0203 	and.w	r2, r2, #3
 8004262:	0092      	lsls	r2, r2, #2
 8004264:	4093      	lsls	r3, r2
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	429a      	cmp	r2, r3
 800426a:	d132      	bne.n	80042d2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800426c:	4b46      	ldr	r3, [pc, #280]	@ (8004388 <HAL_GPIO_DeInit+0x1c4>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	43db      	mvns	r3, r3
 8004274:	4944      	ldr	r1, [pc, #272]	@ (8004388 <HAL_GPIO_DeInit+0x1c4>)
 8004276:	4013      	ands	r3, r2
 8004278:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800427a:	4b43      	ldr	r3, [pc, #268]	@ (8004388 <HAL_GPIO_DeInit+0x1c4>)
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	43db      	mvns	r3, r3
 8004282:	4941      	ldr	r1, [pc, #260]	@ (8004388 <HAL_GPIO_DeInit+0x1c4>)
 8004284:	4013      	ands	r3, r2
 8004286:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004288:	4b3f      	ldr	r3, [pc, #252]	@ (8004388 <HAL_GPIO_DeInit+0x1c4>)
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	43db      	mvns	r3, r3
 8004290:	493d      	ldr	r1, [pc, #244]	@ (8004388 <HAL_GPIO_DeInit+0x1c4>)
 8004292:	4013      	ands	r3, r2
 8004294:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004296:	4b3c      	ldr	r3, [pc, #240]	@ (8004388 <HAL_GPIO_DeInit+0x1c4>)
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	43db      	mvns	r3, r3
 800429e:	493a      	ldr	r1, [pc, #232]	@ (8004388 <HAL_GPIO_DeInit+0x1c4>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	220f      	movs	r2, #15
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80042b4:	4a2e      	ldr	r2, [pc, #184]	@ (8004370 <HAL_GPIO_DeInit+0x1ac>)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	089b      	lsrs	r3, r3, #2
 80042ba:	3302      	adds	r3, #2
 80042bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	43da      	mvns	r2, r3
 80042c4:	482a      	ldr	r0, [pc, #168]	@ (8004370 <HAL_GPIO_DeInit+0x1ac>)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	089b      	lsrs	r3, r3, #2
 80042ca:	400a      	ands	r2, r1
 80042cc:	3302      	adds	r3, #2
 80042ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	2103      	movs	r1, #3
 80042dc:	fa01 f303 	lsl.w	r3, r1, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	401a      	ands	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	08da      	lsrs	r2, r3, #3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3208      	adds	r2, #8
 80042f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	220f      	movs	r2, #15
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	43db      	mvns	r3, r3
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	08d2      	lsrs	r2, r2, #3
 8004308:	4019      	ands	r1, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3208      	adds	r2, #8
 800430e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	2103      	movs	r1, #3
 800431c:	fa01 f303 	lsl.w	r3, r1, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	401a      	ands	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	2101      	movs	r1, #1
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	43db      	mvns	r3, r3
 8004336:	401a      	ands	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	2103      	movs	r1, #3
 8004346:	fa01 f303 	lsl.w	r3, r1, r3
 800434a:	43db      	mvns	r3, r3
 800434c:	401a      	ands	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	3301      	adds	r3, #1
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b0f      	cmp	r3, #15
 800435c:	f67f af40 	bls.w	80041e0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004360:	bf00      	nop
 8004362:	bf00      	nop
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40013800 	.word	0x40013800
 8004374:	40020000 	.word	0x40020000
 8004378:	40020400 	.word	0x40020400
 800437c:	40020800 	.word	0x40020800
 8004380:	40020c00 	.word	0x40020c00
 8004384:	40021000 	.word	0x40021000
 8004388:	40013c00 	.word	0x40013c00

0800438c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	807b      	strh	r3, [r7, #2]
 8004398:	4613      	mov	r3, r2
 800439a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800439c:	787b      	ldrb	r3, [r7, #1]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043a2:	887a      	ldrh	r2, [r7, #2]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043a8:	e003      	b.n	80043b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043aa:	887b      	ldrh	r3, [r7, #2]
 80043ac:	041a      	lsls	r2, r3, #16
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	619a      	str	r2, [r3, #24]
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
	...

080043c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80043ca:	4b08      	ldr	r3, [pc, #32]	@ (80043ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043cc:	695a      	ldr	r2, [r3, #20]
 80043ce:	88fb      	ldrh	r3, [r7, #6]
 80043d0:	4013      	ands	r3, r2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d006      	beq.n	80043e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043d6:	4a05      	ldr	r2, [pc, #20]	@ (80043ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043d8:	88fb      	ldrh	r3, [r7, #6]
 80043da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fd f85a 	bl	8001498 <HAL_GPIO_EXTI_Callback>
  }
}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40013c00 	.word	0x40013c00

080043f0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e059      	b.n	80044b6 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d106      	bne.n	8004422 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f00d fb63 	bl	8011ae8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2203      	movs	r2, #3
 8004426:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004430:	d102      	bne.n	8004438 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f005 fdae 	bl	8009f9e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6818      	ldr	r0, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	7c1a      	ldrb	r2, [r3, #16]
 800444a:	f88d 2000 	strb.w	r2, [sp]
 800444e:	3304      	adds	r3, #4
 8004450:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004452:	f005 fd2f 	bl	8009eb4 <USB_CoreInit>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e026      	b.n	80044b6 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2101      	movs	r1, #1
 800446e:	4618      	mov	r0, r3
 8004470:	f005 fda6 	bl	8009fc0 <USB_SetCurrentMode>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d005      	beq.n	8004486 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2202      	movs	r2, #2
 800447e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e017      	b.n	80044b6 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	7c1a      	ldrb	r2, [r3, #16]
 800448e:	f88d 2000 	strb.w	r2, [sp]
 8004492:	3304      	adds	r3, #4
 8004494:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004496:	f005 ff49 	bl	800a32c <USB_HostInit>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e004      	b.n	80044b6 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80044be:	b590      	push	{r4, r7, lr}
 80044c0:	b08b      	sub	sp, #44	@ 0x2c
 80044c2:	af04      	add	r7, sp, #16
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	4608      	mov	r0, r1
 80044c8:	4611      	mov	r1, r2
 80044ca:	461a      	mov	r2, r3
 80044cc:	4603      	mov	r3, r0
 80044ce:	70fb      	strb	r3, [r7, #3]
 80044d0:	460b      	mov	r3, r1
 80044d2:	70bb      	strb	r3, [r7, #2]
 80044d4:	4613      	mov	r3, r2
 80044d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80044d8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80044da:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_HCD_HC_Init+0x2c>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e09d      	b.n	8004626 <HAL_HCD_HC_Init+0x168>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80044f2:	78fa      	ldrb	r2, [r7, #3]
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	3319      	adds	r3, #25
 8004502:	2200      	movs	r2, #0
 8004504:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	3314      	adds	r3, #20
 8004516:	787a      	ldrb	r2, [r7, #1]
 8004518:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800451a:	78fa      	ldrb	r2, [r7, #3]
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	3315      	adds	r3, #21
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800452e:	78fa      	ldrb	r2, [r7, #3]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	3326      	adds	r3, #38	@ 0x26
 800453e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004542:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004544:	78fa      	ldrb	r2, [r7, #3]
 8004546:	78bb      	ldrb	r3, [r7, #2]
 8004548:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800454c:	b2d8      	uxtb	r0, r3
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	4613      	mov	r3, r2
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	1a9b      	subs	r3, r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	3316      	adds	r3, #22
 800455c:	4602      	mov	r2, r0
 800455e:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	4619      	mov	r1, r3
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fbc7 	bl	8004cf8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800456a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800456e:	2b00      	cmp	r3, #0
 8004570:	da0a      	bge.n	8004588 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004572:	78fa      	ldrb	r2, [r7, #3]
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	3317      	adds	r3, #23
 8004582:	2201      	movs	r2, #1
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	e009      	b.n	800459c <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004588:	78fa      	ldrb	r2, [r7, #3]
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	3317      	adds	r3, #23
 8004598:	2200      	movs	r2, #0
 800459a:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f006 f811 	bl	800a5c8 <USB_GetHostSpeed>
 80045a6:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80045a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d10b      	bne.n	80045c8 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80045b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d107      	bne.n	80045c8 <HAL_HCD_HC_Init+0x10a>
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d104      	bne.n	80045c8 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2bbc      	cmp	r3, #188	@ 0xbc
 80045c2:	d901      	bls.n	80045c8 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80045c4:	23bc      	movs	r3, #188	@ 0xbc
 80045c6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80045c8:	78fa      	ldrb	r2, [r7, #3]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	3318      	adds	r3, #24
 80045d8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80045dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	b298      	uxth	r0, r3
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	1a9b      	subs	r3, r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	3328      	adds	r3, #40	@ 0x28
 80045f2:	4602      	mov	r2, r0
 80045f4:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	787c      	ldrb	r4, [r7, #1]
 8004600:	78ba      	ldrb	r2, [r7, #2]
 8004602:	78f9      	ldrb	r1, [r7, #3]
 8004604:	9302      	str	r3, [sp, #8]
 8004606:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	4623      	mov	r3, r4
 8004614:	f006 f800 	bl	800a618 <USB_HC_Init>
 8004618:	4603      	mov	r3, r0
 800461a:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004624:	7bfb      	ldrb	r3, [r7, #15]
}
 8004626:	4618      	mov	r0, r3
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	bd90      	pop	{r4, r7, pc}

0800462e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	460b      	mov	r3, r1
 8004638:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_HCD_HC_Halt+0x1e>
 8004648:	2302      	movs	r3, #2
 800464a:	e00f      	b.n	800466c <HAL_HCD_HC_Halt+0x3e>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	4611      	mov	r1, r2
 800465c:	4618      	mov	r0, r3
 800465e:	f006 fb46 	bl	800acee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800466a:	7bfb      	ldrb	r3, [r7, #15]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	4608      	mov	r0, r1
 800467e:	4611      	mov	r1, r2
 8004680:	461a      	mov	r2, r3
 8004682:	4603      	mov	r3, r0
 8004684:	70fb      	strb	r3, [r7, #3]
 8004686:	460b      	mov	r3, r1
 8004688:	70bb      	strb	r3, [r7, #2]
 800468a:	4613      	mov	r3, r2
 800468c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800468e:	78fa      	ldrb	r2, [r7, #3]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	3317      	adds	r3, #23
 800469e:	78ba      	ldrb	r2, [r7, #2]
 80046a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80046a2:	78fa      	ldrb	r2, [r7, #3]
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	3326      	adds	r3, #38	@ 0x26
 80046b2:	787a      	ldrb	r2, [r7, #1]
 80046b4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80046b6:	7c3b      	ldrb	r3, [r7, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d114      	bne.n	80046e6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80046bc:	78fa      	ldrb	r2, [r7, #3]
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	332a      	adds	r3, #42	@ 0x2a
 80046cc:	2203      	movs	r2, #3
 80046ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80046d0:	78fa      	ldrb	r2, [r7, #3]
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	4613      	mov	r3, r2
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	1a9b      	subs	r3, r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	3319      	adds	r3, #25
 80046e0:	7f3a      	ldrb	r2, [r7, #28]
 80046e2:	701a      	strb	r2, [r3, #0]
 80046e4:	e009      	b.n	80046fa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046e6:	78fa      	ldrb	r2, [r7, #3]
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	440b      	add	r3, r1
 80046f4:	332a      	adds	r3, #42	@ 0x2a
 80046f6:	2202      	movs	r2, #2
 80046f8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80046fa:	787b      	ldrb	r3, [r7, #1]
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	f200 8102 	bhi.w	8004906 <HAL_HCD_HC_SubmitRequest+0x292>
 8004702:	a201      	add	r2, pc, #4	@ (adr r2, 8004708 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004708:	08004719 	.word	0x08004719
 800470c:	080048f1 	.word	0x080048f1
 8004710:	080047dd 	.word	0x080047dd
 8004714:	08004867 	.word	0x08004867
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004718:	7c3b      	ldrb	r3, [r7, #16]
 800471a:	2b01      	cmp	r3, #1
 800471c:	f040 80f5 	bne.w	800490a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004720:	78bb      	ldrb	r3, [r7, #2]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d12d      	bne.n	8004782 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004726:	8b3b      	ldrh	r3, [r7, #24]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d109      	bne.n	8004740 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800472c:	78fa      	ldrb	r2, [r7, #3]
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	4613      	mov	r3, r2
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	333d      	adds	r3, #61	@ 0x3d
 800473c:	2201      	movs	r2, #1
 800473e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004740:	78fa      	ldrb	r2, [r7, #3]
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	333d      	adds	r3, #61	@ 0x3d
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10a      	bne.n	800476c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	1a9b      	subs	r3, r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	332a      	adds	r3, #42	@ 0x2a
 8004766:	2200      	movs	r2, #0
 8004768:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800476a:	e0ce      	b.n	800490a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800476c:	78fa      	ldrb	r2, [r7, #3]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	332a      	adds	r3, #42	@ 0x2a
 800477c:	2202      	movs	r2, #2
 800477e:	701a      	strb	r2, [r3, #0]
      break;
 8004780:	e0c3      	b.n	800490a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004782:	78fa      	ldrb	r2, [r7, #3]
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	1a9b      	subs	r3, r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	331a      	adds	r3, #26
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b01      	cmp	r3, #1
 8004796:	f040 80b8 	bne.w	800490a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800479a:	78fa      	ldrb	r2, [r7, #3]
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	333c      	adds	r3, #60	@ 0x3c
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10a      	bne.n	80047c6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047b0:	78fa      	ldrb	r2, [r7, #3]
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	4613      	mov	r3, r2
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	332a      	adds	r3, #42	@ 0x2a
 80047c0:	2200      	movs	r2, #0
 80047c2:	701a      	strb	r2, [r3, #0]
      break;
 80047c4:	e0a1      	b.n	800490a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047c6:	78fa      	ldrb	r2, [r7, #3]
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	1a9b      	subs	r3, r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	332a      	adds	r3, #42	@ 0x2a
 80047d6:	2202      	movs	r2, #2
 80047d8:	701a      	strb	r2, [r3, #0]
      break;
 80047da:	e096      	b.n	800490a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80047dc:	78bb      	ldrb	r3, [r7, #2]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d120      	bne.n	8004824 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80047e2:	78fa      	ldrb	r2, [r7, #3]
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	4613      	mov	r3, r2
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	333d      	adds	r3, #61	@ 0x3d
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10a      	bne.n	800480e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047f8:	78fa      	ldrb	r2, [r7, #3]
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	332a      	adds	r3, #42	@ 0x2a
 8004808:	2200      	movs	r2, #0
 800480a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800480c:	e07e      	b.n	800490c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800480e:	78fa      	ldrb	r2, [r7, #3]
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	4613      	mov	r3, r2
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	332a      	adds	r3, #42	@ 0x2a
 800481e:	2202      	movs	r2, #2
 8004820:	701a      	strb	r2, [r3, #0]
      break;
 8004822:	e073      	b.n	800490c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004824:	78fa      	ldrb	r2, [r7, #3]
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	4613      	mov	r3, r2
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	333c      	adds	r3, #60	@ 0x3c
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10a      	bne.n	8004850 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800483a:	78fa      	ldrb	r2, [r7, #3]
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	4613      	mov	r3, r2
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	1a9b      	subs	r3, r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	332a      	adds	r3, #42	@ 0x2a
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
      break;
 800484e:	e05d      	b.n	800490c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004850:	78fa      	ldrb	r2, [r7, #3]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	1a9b      	subs	r3, r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	332a      	adds	r3, #42	@ 0x2a
 8004860:	2202      	movs	r2, #2
 8004862:	701a      	strb	r2, [r3, #0]
      break;
 8004864:	e052      	b.n	800490c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004866:	78bb      	ldrb	r3, [r7, #2]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d120      	bne.n	80048ae <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800486c:	78fa      	ldrb	r2, [r7, #3]
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	4613      	mov	r3, r2
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	1a9b      	subs	r3, r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	333d      	adds	r3, #61	@ 0x3d
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004882:	78fa      	ldrb	r2, [r7, #3]
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	332a      	adds	r3, #42	@ 0x2a
 8004892:	2200      	movs	r2, #0
 8004894:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004896:	e039      	b.n	800490c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004898:	78fa      	ldrb	r2, [r7, #3]
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	4613      	mov	r3, r2
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	332a      	adds	r3, #42	@ 0x2a
 80048a8:	2202      	movs	r2, #2
 80048aa:	701a      	strb	r2, [r3, #0]
      break;
 80048ac:	e02e      	b.n	800490c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80048ae:	78fa      	ldrb	r2, [r7, #3]
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	1a9b      	subs	r3, r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	440b      	add	r3, r1
 80048bc:	333c      	adds	r3, #60	@ 0x3c
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80048c4:	78fa      	ldrb	r2, [r7, #3]
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	4613      	mov	r3, r2
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	1a9b      	subs	r3, r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	332a      	adds	r3, #42	@ 0x2a
 80048d4:	2200      	movs	r2, #0
 80048d6:	701a      	strb	r2, [r3, #0]
      break;
 80048d8:	e018      	b.n	800490c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80048da:	78fa      	ldrb	r2, [r7, #3]
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	332a      	adds	r3, #42	@ 0x2a
 80048ea:	2202      	movs	r2, #2
 80048ec:	701a      	strb	r2, [r3, #0]
      break;
 80048ee:	e00d      	b.n	800490c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80048f0:	78fa      	ldrb	r2, [r7, #3]
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	4613      	mov	r3, r2
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	332a      	adds	r3, #42	@ 0x2a
 8004900:	2200      	movs	r2, #0
 8004902:	701a      	strb	r2, [r3, #0]
      break;
 8004904:	e002      	b.n	800490c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004906:	bf00      	nop
 8004908:	e000      	b.n	800490c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800490a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800490c:	78fa      	ldrb	r2, [r7, #3]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	332c      	adds	r3, #44	@ 0x2c
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004920:	78fa      	ldrb	r2, [r7, #3]
 8004922:	8b39      	ldrh	r1, [r7, #24]
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4403      	add	r3, r0
 8004930:	3334      	adds	r3, #52	@ 0x34
 8004932:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	334c      	adds	r3, #76	@ 0x4c
 8004944:	2200      	movs	r2, #0
 8004946:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004948:	78fa      	ldrb	r2, [r7, #3]
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	3338      	adds	r3, #56	@ 0x38
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800495c:	78fa      	ldrb	r2, [r7, #3]
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	4613      	mov	r3, r2
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	1a9b      	subs	r3, r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	3315      	adds	r3, #21
 800496c:	78fa      	ldrb	r2, [r7, #3]
 800496e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004970:	78fa      	ldrb	r2, [r7, #3]
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	4613      	mov	r3, r2
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	1a9b      	subs	r3, r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	440b      	add	r3, r1
 800497e:	334d      	adds	r3, #77	@ 0x4d
 8004980:	2200      	movs	r2, #0
 8004982:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	78fa      	ldrb	r2, [r7, #3]
 800498a:	4613      	mov	r3, r2
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	1a9b      	subs	r3, r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	3310      	adds	r3, #16
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	4413      	add	r3, r2
 8004998:	1d19      	adds	r1, r3, #4
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	799b      	ldrb	r3, [r3, #6]
 800499e:	461a      	mov	r2, r3
 80049a0:	f005 ff50 	bl	800a844 <USB_HC_StartXfer>
 80049a4:	4603      	mov	r3, r0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop

080049b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f005 fc70 	bl	800a2ac <USB_GetMode>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	f040 80fb 	bne.w	8004bca <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f005 fc33 	bl	800a244 <USB_ReadInterrupts>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 80f1 	beq.w	8004bc8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f005 fc2a 	bl	800a244 <USB_ReadInterrupts>
 80049f0:	4603      	mov	r3, r0
 80049f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049fa:	d104      	bne.n	8004a06 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004a04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f005 fc1a 	bl	800a244 <USB_ReadInterrupts>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a1a:	d104      	bne.n	8004a26 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f005 fc0a 	bl	800a244 <USB_ReadInterrupts>
 8004a30:	4603      	mov	r3, r0
 8004a32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a3a:	d104      	bne.n	8004a46 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004a44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f005 fbfa 	bl	800a244 <USB_ReadInterrupts>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d103      	bne.n	8004a62 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f005 fbec 	bl	800a244 <USB_ReadInterrupts>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a76:	d120      	bne.n	8004aba <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004a80:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d113      	bne.n	8004aba <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004a92:	2110      	movs	r1, #16
 8004a94:	6938      	ldr	r0, [r7, #16]
 8004a96:	f005 fadf 	bl	800a058 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004a9a:	6938      	ldr	r0, [r7, #16]
 8004a9c:	f005 fb0e 	bl	800a0bc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	7a5b      	ldrb	r3, [r3, #9]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d105      	bne.n	8004ab4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2101      	movs	r1, #1
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f005 fcea 	bl	800a488 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f00d f895 	bl	8011be4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f005 fbc0 	bl	800a244 <USB_ReadInterrupts>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004aca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ace:	d102      	bne.n	8004ad6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f001 fd4d 	bl	8006570 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f005 fbb2 	bl	800a244 <USB_ReadInterrupts>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d106      	bne.n	8004af8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f00d f85e 	bl	8011bac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2208      	movs	r2, #8
 8004af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f005 fba1 	bl	800a244 <USB_ReadInterrupts>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b0c:	d139      	bne.n	8004b82 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f006 f8da 	bl	800accc <USB_HC_ReadInterrupt>
 8004b18:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	e025      	b.n	8004b6c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d018      	beq.n	8004b66 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b4a:	d106      	bne.n	8004b5a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	4619      	mov	r1, r3
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f905 	bl	8004d62 <HCD_HC_IN_IRQHandler>
 8004b58:	e005      	b.n	8004b66 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	4619      	mov	r1, r3
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 ff67 	bl	8005a34 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	795b      	ldrb	r3, [r3, #5]
 8004b70:	461a      	mov	r2, r3
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d3d3      	bcc.n	8004b20 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f005 fb5c 	bl	800a244 <USB_ReadInterrupts>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	f003 0310 	and.w	r3, r3, #16
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d101      	bne.n	8004b9a <HAL_HCD_IRQHandler+0x1ea>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <HAL_HCD_IRQHandler+0x1ec>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d014      	beq.n	8004bca <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699a      	ldr	r2, [r3, #24]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0210 	bic.w	r2, r2, #16
 8004bae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f001 fbfe 	bl	80063b2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699a      	ldr	r2, [r3, #24]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0210 	orr.w	r2, r2, #16
 8004bc4:	619a      	str	r2, [r3, #24]
 8004bc6:	e000      	b.n	8004bca <HAL_HCD_IRQHandler+0x21a>
      return;
 8004bc8:	bf00      	nop
    }
  }
}
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_HCD_Start+0x16>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e013      	b.n	8004c0e <HAL_HCD_Start+0x3e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f005 fcae 	bl	800a556 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f005 f9bc 	bl	8009f7c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b082      	sub	sp, #8
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_HCD_Stop+0x16>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e00d      	b.n	8004c48 <HAL_HCD_Stop+0x32>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f006 f978 	bl	800af2e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f005 fc50 	bl	800a502 <USB_ResetPort>
 8004c62:	4603      	mov	r3, r0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	460b      	mov	r3, r1
 8004c76:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004c78:	78fa      	ldrb	r2, [r7, #3]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	334c      	adds	r3, #76	@ 0x4c
 8004c88:	781b      	ldrb	r3, [r3, #0]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004ca2:	78fa      	ldrb	r2, [r7, #3]
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	3338      	adds	r3, #56	@ 0x38
 8004cb2:	681b      	ldr	r3, [r3, #0]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f005 fc92 	bl	800a5f6 <USB_GetCurrentFrame>
 8004cd2:	4603      	mov	r3, r0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f005 fc6d 	bl	800a5c8 <USB_GetHostSpeed>
 8004cee:	4603      	mov	r3, r0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	460b      	mov	r3, r1
 8004d02:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004d04:	78fa      	ldrb	r2, [r7, #3]
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	1a9b      	subs	r3, r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	331a      	adds	r3, #26
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004d18:	78fa      	ldrb	r2, [r7, #3]
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	1a9b      	subs	r3, r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	331b      	adds	r3, #27
 8004d28:	2200      	movs	r2, #0
 8004d2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004d2c:	78fa      	ldrb	r2, [r7, #3]
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	4613      	mov	r3, r2
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	1a9b      	subs	r3, r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	3325      	adds	r3, #37	@ 0x25
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004d40:	78fa      	ldrb	r2, [r7, #3]
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	4613      	mov	r3, r2
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	1a9b      	subs	r3, r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	3324      	adds	r3, #36	@ 0x24
 8004d50:	2200      	movs	r2, #0
 8004d52:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b086      	sub	sp, #24
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	78fa      	ldrb	r2, [r7, #3]
 8004d7e:	4611      	mov	r1, r2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f005 fa72 	bl	800a26a <USB_ReadChInterrupts>
 8004d86:	4603      	mov	r3, r0
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d11a      	bne.n	8004dc6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	2304      	movs	r3, #4
 8004da0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004da2:	78fa      	ldrb	r2, [r7, #3]
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	4613      	mov	r3, r2
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	1a9b      	subs	r3, r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	334d      	adds	r3, #77	@ 0x4d
 8004db2:	2207      	movs	r2, #7
 8004db4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	78fa      	ldrb	r2, [r7, #3]
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f005 ff95 	bl	800acee <USB_HC_Halt>
 8004dc4:	e09e      	b.n	8004f04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	78fa      	ldrb	r2, [r7, #3]
 8004dcc:	4611      	mov	r1, r2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f005 fa4b 	bl	800a26a <USB_ReadChInterrupts>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dde:	d11b      	bne.n	8004e18 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dec:	461a      	mov	r2, r3
 8004dee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004df2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004df4:	78fa      	ldrb	r2, [r7, #3]
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	1a9b      	subs	r3, r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	334d      	adds	r3, #77	@ 0x4d
 8004e04:	2208      	movs	r2, #8
 8004e06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	78fa      	ldrb	r2, [r7, #3]
 8004e0e:	4611      	mov	r1, r2
 8004e10:	4618      	mov	r0, r3
 8004e12:	f005 ff6c 	bl	800acee <USB_HC_Halt>
 8004e16:	e075      	b.n	8004f04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	78fa      	ldrb	r2, [r7, #3]
 8004e1e:	4611      	mov	r1, r2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f005 fa22 	bl	800a26a <USB_ReadChInterrupts>
 8004e26:	4603      	mov	r3, r0
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d11a      	bne.n	8004e66 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	2308      	movs	r3, #8
 8004e40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004e42:	78fa      	ldrb	r2, [r7, #3]
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	1a9b      	subs	r3, r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	334d      	adds	r3, #77	@ 0x4d
 8004e52:	2206      	movs	r2, #6
 8004e54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	78fa      	ldrb	r2, [r7, #3]
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f005 ff45 	bl	800acee <USB_HC_Halt>
 8004e64:	e04e      	b.n	8004f04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	78fa      	ldrb	r2, [r7, #3]
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f005 f9fb 	bl	800a26a <USB_ReadChInterrupts>
 8004e74:	4603      	mov	r3, r0
 8004e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7e:	d11b      	bne.n	8004eb8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e92:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004e94:	78fa      	ldrb	r2, [r7, #3]
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	1a9b      	subs	r3, r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	334d      	adds	r3, #77	@ 0x4d
 8004ea4:	2209      	movs	r2, #9
 8004ea6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	78fa      	ldrb	r2, [r7, #3]
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f005 ff1c 	bl	800acee <USB_HC_Halt>
 8004eb6:	e025      	b.n	8004f04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	78fa      	ldrb	r2, [r7, #3]
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f005 f9d2 	bl	800a26a <USB_ReadChInterrupts>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ecc:	2b80      	cmp	r3, #128	@ 0x80
 8004ece:	d119      	bne.n	8004f04 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004ed0:	78fb      	ldrb	r3, [r7, #3]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004edc:	461a      	mov	r2, r3
 8004ede:	2380      	movs	r3, #128	@ 0x80
 8004ee0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004ee2:	78fa      	ldrb	r2, [r7, #3]
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	1a9b      	subs	r3, r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	334d      	adds	r3, #77	@ 0x4d
 8004ef2:	2207      	movs	r2, #7
 8004ef4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	78fa      	ldrb	r2, [r7, #3]
 8004efc:	4611      	mov	r1, r2
 8004efe:	4618      	mov	r0, r3
 8004f00:	f005 fef5 	bl	800acee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	78fa      	ldrb	r2, [r7, #3]
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f005 f9ac 	bl	800a26a <USB_ReadChInterrupts>
 8004f12:	4603      	mov	r3, r0
 8004f14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f1c:	d112      	bne.n	8004f44 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	78fa      	ldrb	r2, [r7, #3]
 8004f24:	4611      	mov	r1, r2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f005 fee1 	bl	800acee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f38:	461a      	mov	r2, r3
 8004f3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f3e:	6093      	str	r3, [r2, #8]
 8004f40:	f000 bd75 	b.w	8005a2e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f005 f98c 	bl	800a26a <USB_ReadChInterrupts>
 8004f52:	4603      	mov	r3, r0
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	f040 8128 	bne.w	80051ae <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	2320      	movs	r3, #32
 8004f6e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004f70:	78fa      	ldrb	r2, [r7, #3]
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	4613      	mov	r3, r2
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	1a9b      	subs	r3, r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	331b      	adds	r3, #27
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d119      	bne.n	8004fba <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004f86:	78fa      	ldrb	r2, [r7, #3]
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	1a9b      	subs	r3, r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	440b      	add	r3, r1
 8004f94:	331b      	adds	r3, #27
 8004f96:	2200      	movs	r2, #0
 8004f98:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004f9a:	78fb      	ldrb	r3, [r7, #3]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	78fa      	ldrb	r2, [r7, #3]
 8004faa:	0151      	lsls	r1, r2, #5
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	440a      	add	r2, r1
 8004fb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004fb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fb8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	799b      	ldrb	r3, [r3, #6]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d01b      	beq.n	8004ffa <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004fc2:	78fa      	ldrb	r2, [r7, #3]
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	3330      	adds	r3, #48	@ 0x30
 8004fd2:	6819      	ldr	r1, [r3, #0]
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe6:	78fa      	ldrb	r2, [r7, #3]
 8004fe8:	1ac9      	subs	r1, r1, r3
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	4613      	mov	r3, r2
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	1a9b      	subs	r3, r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4403      	add	r3, r0
 8004ff6:	3338      	adds	r3, #56	@ 0x38
 8004ff8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004ffa:	78fa      	ldrb	r2, [r7, #3]
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	4613      	mov	r3, r2
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	334d      	adds	r3, #77	@ 0x4d
 800500a:	2201      	movs	r2, #1
 800500c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800500e:	78fa      	ldrb	r2, [r7, #3]
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	4613      	mov	r3, r2
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	1a9b      	subs	r3, r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	3344      	adds	r3, #68	@ 0x44
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005022:	78fb      	ldrb	r3, [r7, #3]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	4413      	add	r3, r2
 800502a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800502e:	461a      	mov	r2, r3
 8005030:	2301      	movs	r3, #1
 8005032:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005034:	78fa      	ldrb	r2, [r7, #3]
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	4613      	mov	r3, r2
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	1a9b      	subs	r3, r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	440b      	add	r3, r1
 8005042:	3326      	adds	r3, #38	@ 0x26
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800504a:	78fa      	ldrb	r2, [r7, #3]
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	1a9b      	subs	r3, r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	440b      	add	r3, r1
 8005058:	3326      	adds	r3, #38	@ 0x26
 800505a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800505c:	2b02      	cmp	r3, #2
 800505e:	d110      	bne.n	8005082 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	78fa      	ldrb	r2, [r7, #3]
 8005066:	4611      	mov	r1, r2
 8005068:	4618      	mov	r0, r3
 800506a:	f005 fe40 	bl	800acee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800506e:	78fb      	ldrb	r3, [r7, #3]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4413      	add	r3, r2
 8005076:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800507a:	461a      	mov	r2, r3
 800507c:	2310      	movs	r3, #16
 800507e:	6093      	str	r3, [r2, #8]
 8005080:	e03d      	b.n	80050fe <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005082:	78fa      	ldrb	r2, [r7, #3]
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	4613      	mov	r3, r2
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	440b      	add	r3, r1
 8005090:	3326      	adds	r3, #38	@ 0x26
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b03      	cmp	r3, #3
 8005096:	d00a      	beq.n	80050ae <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005098:	78fa      	ldrb	r2, [r7, #3]
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	4613      	mov	r3, r2
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	3326      	adds	r3, #38	@ 0x26
 80050a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d127      	bne.n	80050fe <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	78fa      	ldrb	r2, [r7, #3]
 80050be:	0151      	lsls	r1, r2, #5
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	440a      	add	r2, r1
 80050c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80050cc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80050ce:	78fa      	ldrb	r2, [r7, #3]
 80050d0:	6879      	ldr	r1, [r7, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	334c      	adds	r3, #76	@ 0x4c
 80050de:	2201      	movs	r2, #1
 80050e0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80050e2:	78fa      	ldrb	r2, [r7, #3]
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	1a9b      	subs	r3, r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	334c      	adds	r3, #76	@ 0x4c
 80050f2:	781a      	ldrb	r2, [r3, #0]
 80050f4:	78fb      	ldrb	r3, [r7, #3]
 80050f6:	4619      	mov	r1, r3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f00c fd81 	bl	8011c00 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	799b      	ldrb	r3, [r3, #6]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d13b      	bne.n	800517e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005106:	78fa      	ldrb	r2, [r7, #3]
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	440b      	add	r3, r1
 8005114:	3338      	adds	r3, #56	@ 0x38
 8005116:	6819      	ldr	r1, [r3, #0]
 8005118:	78fa      	ldrb	r2, [r7, #3]
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	4613      	mov	r3, r2
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4403      	add	r3, r0
 8005126:	3328      	adds	r3, #40	@ 0x28
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	440b      	add	r3, r1
 800512c:	1e59      	subs	r1, r3, #1
 800512e:	78fa      	ldrb	r2, [r7, #3]
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	4613      	mov	r3, r2
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	1a9b      	subs	r3, r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4403      	add	r3, r0
 800513c:	3328      	adds	r3, #40	@ 0x28
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	fbb1 f3f3 	udiv	r3, r1, r3
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 8470 	beq.w	8005a2e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800514e:	78fa      	ldrb	r2, [r7, #3]
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	4613      	mov	r3, r2
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	333c      	adds	r3, #60	@ 0x3c
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	78fa      	ldrb	r2, [r7, #3]
 8005162:	f083 0301 	eor.w	r3, r3, #1
 8005166:	b2d8      	uxtb	r0, r3
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	1a9b      	subs	r3, r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	333c      	adds	r3, #60	@ 0x3c
 8005176:	4602      	mov	r2, r0
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	f000 bc58 	b.w	8005a2e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800517e:	78fa      	ldrb	r2, [r7, #3]
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	1a9b      	subs	r3, r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	333c      	adds	r3, #60	@ 0x3c
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	78fa      	ldrb	r2, [r7, #3]
 8005192:	f083 0301 	eor.w	r3, r3, #1
 8005196:	b2d8      	uxtb	r0, r3
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	440b      	add	r3, r1
 80051a4:	333c      	adds	r3, #60	@ 0x3c
 80051a6:	4602      	mov	r2, r0
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	f000 bc40 	b.w	8005a2e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	78fa      	ldrb	r2, [r7, #3]
 80051b4:	4611      	mov	r1, r2
 80051b6:	4618      	mov	r0, r3
 80051b8:	f005 f857 	bl	800a26a <USB_ReadChInterrupts>
 80051bc:	4603      	mov	r3, r0
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d131      	bne.n	800522a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80051c6:	78fb      	ldrb	r3, [r7, #3]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051d2:	461a      	mov	r2, r3
 80051d4:	2320      	movs	r3, #32
 80051d6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80051d8:	78fa      	ldrb	r2, [r7, #3]
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	4613      	mov	r3, r2
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	1a9b      	subs	r3, r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	331a      	adds	r3, #26
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	f040 841f 	bne.w	8005a2e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80051f0:	78fa      	ldrb	r2, [r7, #3]
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	4613      	mov	r3, r2
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	1a9b      	subs	r3, r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	440b      	add	r3, r1
 80051fe:	331b      	adds	r3, #27
 8005200:	2201      	movs	r2, #1
 8005202:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005204:	78fa      	ldrb	r2, [r7, #3]
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	4613      	mov	r3, r2
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	1a9b      	subs	r3, r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	334d      	adds	r3, #77	@ 0x4d
 8005214:	2203      	movs	r2, #3
 8005216:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	78fa      	ldrb	r2, [r7, #3]
 800521e:	4611      	mov	r1, r2
 8005220:	4618      	mov	r0, r3
 8005222:	f005 fd64 	bl	800acee <USB_HC_Halt>
 8005226:	f000 bc02 	b.w	8005a2e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	78fa      	ldrb	r2, [r7, #3]
 8005230:	4611      	mov	r1, r2
 8005232:	4618      	mov	r0, r3
 8005234:	f005 f819 	bl	800a26a <USB_ReadChInterrupts>
 8005238:	4603      	mov	r3, r0
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b02      	cmp	r3, #2
 8005240:	f040 8305 	bne.w	800584e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005244:	78fb      	ldrb	r3, [r7, #3]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	4413      	add	r3, r2
 800524c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005250:	461a      	mov	r2, r3
 8005252:	2302      	movs	r3, #2
 8005254:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005256:	78fa      	ldrb	r2, [r7, #3]
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	4613      	mov	r3, r2
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	440b      	add	r3, r1
 8005264:	334d      	adds	r3, #77	@ 0x4d
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d114      	bne.n	8005296 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800526c:	78fa      	ldrb	r2, [r7, #3]
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	4613      	mov	r3, r2
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	1a9b      	subs	r3, r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	440b      	add	r3, r1
 800527a:	334d      	adds	r3, #77	@ 0x4d
 800527c:	2202      	movs	r2, #2
 800527e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005280:	78fa      	ldrb	r2, [r7, #3]
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	4613      	mov	r3, r2
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	1a9b      	subs	r3, r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	440b      	add	r3, r1
 800528e:	334c      	adds	r3, #76	@ 0x4c
 8005290:	2201      	movs	r2, #1
 8005292:	701a      	strb	r2, [r3, #0]
 8005294:	e2cc      	b.n	8005830 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005296:	78fa      	ldrb	r2, [r7, #3]
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	1a9b      	subs	r3, r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	440b      	add	r3, r1
 80052a4:	334d      	adds	r3, #77	@ 0x4d
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b06      	cmp	r3, #6
 80052aa:	d114      	bne.n	80052d6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80052ac:	78fa      	ldrb	r2, [r7, #3]
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	4613      	mov	r3, r2
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	1a9b      	subs	r3, r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	440b      	add	r3, r1
 80052ba:	334d      	adds	r3, #77	@ 0x4d
 80052bc:	2202      	movs	r2, #2
 80052be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80052c0:	78fa      	ldrb	r2, [r7, #3]
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	4613      	mov	r3, r2
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	1a9b      	subs	r3, r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	334c      	adds	r3, #76	@ 0x4c
 80052d0:	2205      	movs	r2, #5
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	e2ac      	b.n	8005830 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80052d6:	78fa      	ldrb	r2, [r7, #3]
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	4613      	mov	r3, r2
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	1a9b      	subs	r3, r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	440b      	add	r3, r1
 80052e4:	334d      	adds	r3, #77	@ 0x4d
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b07      	cmp	r3, #7
 80052ea:	d00b      	beq.n	8005304 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80052ec:	78fa      	ldrb	r2, [r7, #3]
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	4613      	mov	r3, r2
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	1a9b      	subs	r3, r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	334d      	adds	r3, #77	@ 0x4d
 80052fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80052fe:	2b09      	cmp	r3, #9
 8005300:	f040 80a6 	bne.w	8005450 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005304:	78fa      	ldrb	r2, [r7, #3]
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	4613      	mov	r3, r2
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	1a9b      	subs	r3, r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	440b      	add	r3, r1
 8005312:	334d      	adds	r3, #77	@ 0x4d
 8005314:	2202      	movs	r2, #2
 8005316:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005318:	78fa      	ldrb	r2, [r7, #3]
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	4613      	mov	r3, r2
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	1a9b      	subs	r3, r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	3344      	adds	r3, #68	@ 0x44
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	1c59      	adds	r1, r3, #1
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	4613      	mov	r3, r2
 8005330:	011b      	lsls	r3, r3, #4
 8005332:	1a9b      	subs	r3, r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4403      	add	r3, r0
 8005338:	3344      	adds	r3, #68	@ 0x44
 800533a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800533c:	78fa      	ldrb	r2, [r7, #3]
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	4613      	mov	r3, r2
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	3344      	adds	r3, #68	@ 0x44
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d943      	bls.n	80053da <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005352:	78fa      	ldrb	r2, [r7, #3]
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	4613      	mov	r3, r2
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	440b      	add	r3, r1
 8005360:	3344      	adds	r3, #68	@ 0x44
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005366:	78fa      	ldrb	r2, [r7, #3]
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	4613      	mov	r3, r2
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	1a9b      	subs	r3, r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	440b      	add	r3, r1
 8005374:	331a      	adds	r3, #26
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d123      	bne.n	80053c4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800537c:	78fa      	ldrb	r2, [r7, #3]
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	4613      	mov	r3, r2
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	1a9b      	subs	r3, r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	331b      	adds	r3, #27
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005390:	78fa      	ldrb	r2, [r7, #3]
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	4613      	mov	r3, r2
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	1a9b      	subs	r3, r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	331c      	adds	r3, #28
 80053a0:	2200      	movs	r2, #0
 80053a2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	78fa      	ldrb	r2, [r7, #3]
 80053b4:	0151      	lsls	r1, r2, #5
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	440a      	add	r2, r1
 80053ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053c2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	334c      	adds	r3, #76	@ 0x4c
 80053d4:	2204      	movs	r2, #4
 80053d6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80053d8:	e229      	b.n	800582e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80053da:	78fa      	ldrb	r2, [r7, #3]
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	4613      	mov	r3, r2
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	440b      	add	r3, r1
 80053e8:	334c      	adds	r3, #76	@ 0x4c
 80053ea:	2202      	movs	r2, #2
 80053ec:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80053ee:	78fa      	ldrb	r2, [r7, #3]
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	4613      	mov	r3, r2
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	1a9b      	subs	r3, r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	440b      	add	r3, r1
 80053fc:	3326      	adds	r3, #38	@ 0x26
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00b      	beq.n	800541c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005404:	78fa      	ldrb	r2, [r7, #3]
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	4613      	mov	r3, r2
 800540a:	011b      	lsls	r3, r3, #4
 800540c:	1a9b      	subs	r3, r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	440b      	add	r3, r1
 8005412:	3326      	adds	r3, #38	@ 0x26
 8005414:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005416:	2b02      	cmp	r3, #2
 8005418:	f040 8209 	bne.w	800582e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	4413      	add	r3, r2
 8005424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005432:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800543a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	4413      	add	r3, r2
 8005444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005448:	461a      	mov	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800544e:	e1ee      	b.n	800582e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005450:	78fa      	ldrb	r2, [r7, #3]
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	4613      	mov	r3, r2
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	1a9b      	subs	r3, r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	334d      	adds	r3, #77	@ 0x4d
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b05      	cmp	r3, #5
 8005464:	f040 80c8 	bne.w	80055f8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005468:	78fa      	ldrb	r2, [r7, #3]
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	1a9b      	subs	r3, r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	334d      	adds	r3, #77	@ 0x4d
 8005478:	2202      	movs	r2, #2
 800547a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800547c:	78fa      	ldrb	r2, [r7, #3]
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	331b      	adds	r3, #27
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b01      	cmp	r3, #1
 8005490:	f040 81ce 	bne.w	8005830 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005494:	78fa      	ldrb	r2, [r7, #3]
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4613      	mov	r3, r2
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	3326      	adds	r3, #38	@ 0x26
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d16b      	bne.n	8005582 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80054aa:	78fa      	ldrb	r2, [r7, #3]
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	4613      	mov	r3, r2
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	440b      	add	r3, r1
 80054b8:	3348      	adds	r3, #72	@ 0x48
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	1c59      	adds	r1, r3, #1
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	4613      	mov	r3, r2
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	1a9b      	subs	r3, r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4403      	add	r3, r0
 80054ca:	3348      	adds	r3, #72	@ 0x48
 80054cc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80054ce:	78fa      	ldrb	r2, [r7, #3]
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	1a9b      	subs	r3, r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	3348      	adds	r3, #72	@ 0x48
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d943      	bls.n	800556c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80054e4:	78fa      	ldrb	r2, [r7, #3]
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	4613      	mov	r3, r2
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	1a9b      	subs	r3, r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	3348      	adds	r3, #72	@ 0x48
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80054f8:	78fa      	ldrb	r2, [r7, #3]
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	4613      	mov	r3, r2
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	331b      	adds	r3, #27
 8005508:	2200      	movs	r2, #0
 800550a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800550c:	78fa      	ldrb	r2, [r7, #3]
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	4613      	mov	r3, r2
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	1a9b      	subs	r3, r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	440b      	add	r3, r1
 800551a:	3344      	adds	r3, #68	@ 0x44
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d809      	bhi.n	8005536 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8005522:	78fa      	ldrb	r2, [r7, #3]
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	1a9b      	subs	r3, r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	331c      	adds	r3, #28
 8005532:	2201      	movs	r2, #1
 8005534:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005536:	78fb      	ldrb	r3, [r7, #3]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	4413      	add	r3, r2
 800553e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	0151      	lsls	r1, r2, #5
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	440a      	add	r2, r1
 800554c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005554:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8005556:	78fa      	ldrb	r2, [r7, #3]
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	1a9b      	subs	r3, r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	334c      	adds	r3, #76	@ 0x4c
 8005566:	2204      	movs	r2, #4
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	e014      	b.n	8005596 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800556c:	78fa      	ldrb	r2, [r7, #3]
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	334c      	adds	r3, #76	@ 0x4c
 800557c:	2202      	movs	r2, #2
 800557e:	701a      	strb	r2, [r3, #0]
 8005580:	e009      	b.n	8005596 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005582:	78fa      	ldrb	r2, [r7, #3]
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	4613      	mov	r3, r2
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	334c      	adds	r3, #76	@ 0x4c
 8005592:	2202      	movs	r2, #2
 8005594:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005596:	78fa      	ldrb	r2, [r7, #3]
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	3326      	adds	r3, #38	@ 0x26
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00b      	beq.n	80055c4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80055ac:	78fa      	ldrb	r2, [r7, #3]
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	4613      	mov	r3, r2
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	1a9b      	subs	r3, r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	3326      	adds	r3, #38	@ 0x26
 80055bc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80055be:	2b02      	cmp	r3, #2
 80055c0:	f040 8136 	bne.w	8005830 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80055da:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80055e2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055f0:	461a      	mov	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	e11b      	b.n	8005830 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80055f8:	78fa      	ldrb	r2, [r7, #3]
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	4613      	mov	r3, r2
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	1a9b      	subs	r3, r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	334d      	adds	r3, #77	@ 0x4d
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	2b03      	cmp	r3, #3
 800560c:	f040 8081 	bne.w	8005712 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005610:	78fa      	ldrb	r2, [r7, #3]
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	4613      	mov	r3, r2
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	1a9b      	subs	r3, r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	440b      	add	r3, r1
 800561e:	334d      	adds	r3, #77	@ 0x4d
 8005620:	2202      	movs	r2, #2
 8005622:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005624:	78fa      	ldrb	r2, [r7, #3]
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	4613      	mov	r3, r2
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	1a9b      	subs	r3, r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	331b      	adds	r3, #27
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b01      	cmp	r3, #1
 8005638:	f040 80fa 	bne.w	8005830 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800563c:	78fa      	ldrb	r2, [r7, #3]
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	4613      	mov	r3, r2
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	1a9b      	subs	r3, r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	440b      	add	r3, r1
 800564a:	334c      	adds	r3, #76	@ 0x4c
 800564c:	2202      	movs	r2, #2
 800564e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	4413      	add	r3, r2
 8005658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	78fa      	ldrb	r2, [r7, #3]
 8005660:	0151      	lsls	r1, r2, #5
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	440a      	add	r2, r1
 8005666:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800566a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800566e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4413      	add	r3, r2
 8005678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	78fa      	ldrb	r2, [r7, #3]
 8005680:	0151      	lsls	r1, r2, #5
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	440a      	add	r2, r1
 8005686:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800568a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800568e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	4413      	add	r3, r2
 8005698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	78fa      	ldrb	r2, [r7, #3]
 80056a0:	0151      	lsls	r1, r2, #5
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	440a      	add	r2, r1
 80056a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056aa:	f023 0320 	bic.w	r3, r3, #32
 80056ae:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80056b0:	78fa      	ldrb	r2, [r7, #3]
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	4613      	mov	r3, r2
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	1a9b      	subs	r3, r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	3326      	adds	r3, #38	@ 0x26
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00b      	beq.n	80056de <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80056c6:	78fa      	ldrb	r2, [r7, #3]
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	4613      	mov	r3, r2
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	1a9b      	subs	r3, r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	440b      	add	r3, r1
 80056d4:	3326      	adds	r3, #38	@ 0x26
 80056d6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80056d8:	2b02      	cmp	r3, #2
 80056da:	f040 80a9 	bne.w	8005830 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80056de:	78fb      	ldrb	r3, [r7, #3]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80056f4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056fc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80056fe:	78fb      	ldrb	r3, [r7, #3]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	4413      	add	r3, r2
 8005706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800570a:	461a      	mov	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	e08e      	b.n	8005830 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005712:	78fa      	ldrb	r2, [r7, #3]
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	4613      	mov	r3, r2
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	1a9b      	subs	r3, r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	440b      	add	r3, r1
 8005720:	334d      	adds	r3, #77	@ 0x4d
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b04      	cmp	r3, #4
 8005726:	d143      	bne.n	80057b0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005728:	78fa      	ldrb	r2, [r7, #3]
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	4613      	mov	r3, r2
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	1a9b      	subs	r3, r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	440b      	add	r3, r1
 8005736:	334d      	adds	r3, #77	@ 0x4d
 8005738:	2202      	movs	r2, #2
 800573a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800573c:	78fa      	ldrb	r2, [r7, #3]
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	334c      	adds	r3, #76	@ 0x4c
 800574c:	2202      	movs	r2, #2
 800574e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005750:	78fa      	ldrb	r2, [r7, #3]
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	4613      	mov	r3, r2
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	3326      	adds	r3, #38	@ 0x26
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005766:	78fa      	ldrb	r2, [r7, #3]
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	1a9b      	subs	r3, r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	3326      	adds	r3, #38	@ 0x26
 8005776:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005778:	2b02      	cmp	r3, #2
 800577a:	d159      	bne.n	8005830 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	4413      	add	r3, r2
 8005784:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005792:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800579a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057a8:	461a      	mov	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	e03f      	b.n	8005830 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80057b0:	78fa      	ldrb	r2, [r7, #3]
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	4613      	mov	r3, r2
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	1a9b      	subs	r3, r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	440b      	add	r3, r1
 80057be:	334d      	adds	r3, #77	@ 0x4d
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b08      	cmp	r3, #8
 80057c4:	d126      	bne.n	8005814 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80057c6:	78fa      	ldrb	r2, [r7, #3]
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	4613      	mov	r3, r2
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	334d      	adds	r3, #77	@ 0x4d
 80057d6:	2202      	movs	r2, #2
 80057d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80057da:	78fa      	ldrb	r2, [r7, #3]
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	4613      	mov	r3, r2
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	440b      	add	r3, r1
 80057e8:	3344      	adds	r3, #68	@ 0x44
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	1c59      	adds	r1, r3, #1
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	4613      	mov	r3, r2
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	1a9b      	subs	r3, r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4403      	add	r3, r0
 80057fa:	3344      	adds	r3, #68	@ 0x44
 80057fc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80057fe:	78fa      	ldrb	r2, [r7, #3]
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	334c      	adds	r3, #76	@ 0x4c
 800580e:	2204      	movs	r2, #4
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	e00d      	b.n	8005830 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005814:	78fa      	ldrb	r2, [r7, #3]
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	4613      	mov	r3, r2
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	1a9b      	subs	r3, r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	440b      	add	r3, r1
 8005822:	334d      	adds	r3, #77	@ 0x4d
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b02      	cmp	r3, #2
 8005828:	f000 8100 	beq.w	8005a2c <HCD_HC_IN_IRQHandler+0xcca>
 800582c:	e000      	b.n	8005830 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800582e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005830:	78fa      	ldrb	r2, [r7, #3]
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	4613      	mov	r3, r2
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	1a9b      	subs	r3, r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	334c      	adds	r3, #76	@ 0x4c
 8005840:	781a      	ldrb	r2, [r3, #0]
 8005842:	78fb      	ldrb	r3, [r7, #3]
 8005844:	4619      	mov	r1, r3
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f00c f9da 	bl	8011c00 <HAL_HCD_HC_NotifyURBChange_Callback>
 800584c:	e0ef      	b.n	8005a2e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	78fa      	ldrb	r2, [r7, #3]
 8005854:	4611      	mov	r1, r2
 8005856:	4618      	mov	r0, r3
 8005858:	f004 fd07 	bl	800a26a <USB_ReadChInterrupts>
 800585c:	4603      	mov	r3, r0
 800585e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005862:	2b40      	cmp	r3, #64	@ 0x40
 8005864:	d12f      	bne.n	80058c6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	4413      	add	r3, r2
 800586e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005872:	461a      	mov	r2, r3
 8005874:	2340      	movs	r3, #64	@ 0x40
 8005876:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005878:	78fa      	ldrb	r2, [r7, #3]
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	4613      	mov	r3, r2
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	1a9b      	subs	r3, r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	440b      	add	r3, r1
 8005886:	334d      	adds	r3, #77	@ 0x4d
 8005888:	2205      	movs	r2, #5
 800588a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800588c:	78fa      	ldrb	r2, [r7, #3]
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	4613      	mov	r3, r2
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	331a      	adds	r3, #26
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d109      	bne.n	80058b6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80058a2:	78fa      	ldrb	r2, [r7, #3]
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	4613      	mov	r3, r2
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	1a9b      	subs	r3, r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	3344      	adds	r3, #68	@ 0x44
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	78fa      	ldrb	r2, [r7, #3]
 80058bc:	4611      	mov	r1, r2
 80058be:	4618      	mov	r0, r3
 80058c0:	f005 fa15 	bl	800acee <USB_HC_Halt>
 80058c4:	e0b3      	b.n	8005a2e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	78fa      	ldrb	r2, [r7, #3]
 80058cc:	4611      	mov	r1, r2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f004 fccb 	bl	800a26a <USB_ReadChInterrupts>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	2b10      	cmp	r3, #16
 80058dc:	f040 80a7 	bne.w	8005a2e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80058e0:	78fa      	ldrb	r2, [r7, #3]
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	4613      	mov	r3, r2
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	1a9b      	subs	r3, r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	440b      	add	r3, r1
 80058ee:	3326      	adds	r3, #38	@ 0x26
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d11b      	bne.n	800592e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80058f6:	78fa      	ldrb	r2, [r7, #3]
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	4613      	mov	r3, r2
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	1a9b      	subs	r3, r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	440b      	add	r3, r1
 8005904:	3344      	adds	r3, #68	@ 0x44
 8005906:	2200      	movs	r2, #0
 8005908:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800590a:	78fa      	ldrb	r2, [r7, #3]
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	4613      	mov	r3, r2
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	1a9b      	subs	r3, r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	440b      	add	r3, r1
 8005918:	334d      	adds	r3, #77	@ 0x4d
 800591a:	2204      	movs	r2, #4
 800591c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	78fa      	ldrb	r2, [r7, #3]
 8005924:	4611      	mov	r1, r2
 8005926:	4618      	mov	r0, r3
 8005928:	f005 f9e1 	bl	800acee <USB_HC_Halt>
 800592c:	e03f      	b.n	80059ae <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800592e:	78fa      	ldrb	r2, [r7, #3]
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	4613      	mov	r3, r2
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	1a9b      	subs	r3, r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	440b      	add	r3, r1
 800593c:	3326      	adds	r3, #38	@ 0x26
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005944:	78fa      	ldrb	r2, [r7, #3]
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	4613      	mov	r3, r2
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	440b      	add	r3, r1
 8005952:	3326      	adds	r3, #38	@ 0x26
 8005954:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005956:	2b02      	cmp	r3, #2
 8005958:	d129      	bne.n	80059ae <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800595a:	78fa      	ldrb	r2, [r7, #3]
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	011b      	lsls	r3, r3, #4
 8005962:	1a9b      	subs	r3, r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	440b      	add	r3, r1
 8005968:	3344      	adds	r3, #68	@ 0x44
 800596a:	2200      	movs	r2, #0
 800596c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	799b      	ldrb	r3, [r3, #6]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <HCD_HC_IN_IRQHandler+0xc2a>
 8005976:	78fa      	ldrb	r2, [r7, #3]
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	1a9b      	subs	r3, r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	331b      	adds	r3, #27
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d110      	bne.n	80059ae <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800598c:	78fa      	ldrb	r2, [r7, #3]
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	4613      	mov	r3, r2
 8005992:	011b      	lsls	r3, r3, #4
 8005994:	1a9b      	subs	r3, r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	334d      	adds	r3, #77	@ 0x4d
 800599c:	2204      	movs	r2, #4
 800599e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	78fa      	ldrb	r2, [r7, #3]
 80059a6:	4611      	mov	r1, r2
 80059a8:	4618      	mov	r0, r3
 80059aa:	f005 f9a0 	bl	800acee <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80059ae:	78fa      	ldrb	r2, [r7, #3]
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	4613      	mov	r3, r2
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	1a9b      	subs	r3, r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	331b      	adds	r3, #27
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d129      	bne.n	8005a18 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80059c4:	78fa      	ldrb	r2, [r7, #3]
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	1a9b      	subs	r3, r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	331b      	adds	r3, #27
 80059d4:	2200      	movs	r2, #0
 80059d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	78fa      	ldrb	r2, [r7, #3]
 80059e8:	0151      	lsls	r1, r2, #5
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	440a      	add	r2, r1
 80059ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80059f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059f6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	78fa      	ldrb	r2, [r7, #3]
 8005a08:	0151      	lsls	r1, r2, #5
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	440a      	add	r2, r1
 8005a0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a12:	f043 0320 	orr.w	r3, r3, #32
 8005a16:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005a18:	78fb      	ldrb	r3, [r7, #3]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a24:	461a      	mov	r2, r3
 8005a26:	2310      	movs	r3, #16
 8005a28:	6093      	str	r3, [r2, #8]
 8005a2a:	e000      	b.n	8005a2e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005a2c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	78fa      	ldrb	r2, [r7, #3]
 8005a50:	4611      	mov	r1, r2
 8005a52:	4618      	mov	r0, r3
 8005a54:	f004 fc09 	bl	800a26a <USB_ReadChInterrupts>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d11b      	bne.n	8005a9a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005a62:	78fb      	ldrb	r3, [r7, #3]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a6e:	461a      	mov	r2, r3
 8005a70:	2304      	movs	r3, #4
 8005a72:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005a74:	78fa      	ldrb	r2, [r7, #3]
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	334d      	adds	r3, #77	@ 0x4d
 8005a84:	2207      	movs	r2, #7
 8005a86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	78fa      	ldrb	r2, [r7, #3]
 8005a8e:	4611      	mov	r1, r2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f005 f92c 	bl	800acee <USB_HC_Halt>
 8005a96:	f000 bc89 	b.w	80063ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	78fa      	ldrb	r2, [r7, #3]
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f004 fbe1 	bl	800a26a <USB_ReadChInterrupts>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	f040 8082 	bne.w	8005bb8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005ab4:	78fb      	ldrb	r3, [r7, #3]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	2320      	movs	r3, #32
 8005ac4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005ac6:	78fa      	ldrb	r2, [r7, #3]
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	4613      	mov	r3, r2
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	1a9b      	subs	r3, r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	3319      	adds	r3, #25
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d124      	bne.n	8005b26 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005adc:	78fa      	ldrb	r2, [r7, #3]
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	1a9b      	subs	r3, r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	440b      	add	r3, r1
 8005aea:	3319      	adds	r3, #25
 8005aec:	2200      	movs	r2, #0
 8005aee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005af0:	78fa      	ldrb	r2, [r7, #3]
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	4613      	mov	r3, r2
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	334c      	adds	r3, #76	@ 0x4c
 8005b00:	2202      	movs	r2, #2
 8005b02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005b04:	78fa      	ldrb	r2, [r7, #3]
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	1a9b      	subs	r3, r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	440b      	add	r3, r1
 8005b12:	334d      	adds	r3, #77	@ 0x4d
 8005b14:	2203      	movs	r2, #3
 8005b16:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	78fa      	ldrb	r2, [r7, #3]
 8005b1e:	4611      	mov	r1, r2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f005 f8e4 	bl	800acee <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005b26:	78fa      	ldrb	r2, [r7, #3]
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	1a9b      	subs	r3, r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	440b      	add	r3, r1
 8005b34:	331a      	adds	r3, #26
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	f040 8437 	bne.w	80063ac <HCD_HC_OUT_IRQHandler+0x978>
 8005b3e:	78fa      	ldrb	r2, [r7, #3]
 8005b40:	6879      	ldr	r1, [r7, #4]
 8005b42:	4613      	mov	r3, r2
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	1a9b      	subs	r3, r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	440b      	add	r3, r1
 8005b4c:	331b      	adds	r3, #27
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f040 842b 	bne.w	80063ac <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005b56:	78fa      	ldrb	r2, [r7, #3]
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	1a9b      	subs	r3, r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	3326      	adds	r3, #38	@ 0x26
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d009      	beq.n	8005b80 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005b6c:	78fa      	ldrb	r2, [r7, #3]
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	4613      	mov	r3, r2
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	1a9b      	subs	r3, r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	331b      	adds	r3, #27
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005b80:	78fa      	ldrb	r2, [r7, #3]
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	4613      	mov	r3, r2
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	1a9b      	subs	r3, r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	334d      	adds	r3, #77	@ 0x4d
 8005b90:	2203      	movs	r2, #3
 8005b92:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	78fa      	ldrb	r2, [r7, #3]
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f005 f8a6 	bl	800acee <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005ba2:	78fa      	ldrb	r2, [r7, #3]
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	1a9b      	subs	r3, r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	440b      	add	r3, r1
 8005bb0:	3344      	adds	r3, #68	@ 0x44
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	e3f9      	b.n	80063ac <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	78fa      	ldrb	r2, [r7, #3]
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f004 fb52 	bl	800a26a <USB_ReadChInterrupts>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bd0:	d111      	bne.n	8005bf6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bde:	461a      	mov	r2, r3
 8005be0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005be4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	78fa      	ldrb	r2, [r7, #3]
 8005bec:	4611      	mov	r1, r2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f005 f87d 	bl	800acee <USB_HC_Halt>
 8005bf4:	e3da      	b.n	80063ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	78fa      	ldrb	r2, [r7, #3]
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f004 fb33 	bl	800a26a <USB_ReadChInterrupts>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d168      	bne.n	8005ce0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005c0e:	78fa      	ldrb	r2, [r7, #3]
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	4613      	mov	r3, r2
 8005c14:	011b      	lsls	r3, r3, #4
 8005c16:	1a9b      	subs	r3, r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	440b      	add	r3, r1
 8005c1c:	3344      	adds	r3, #68	@ 0x44
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	78fa      	ldrb	r2, [r7, #3]
 8005c28:	4611      	mov	r1, r2
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f004 fb1d 	bl	800a26a <USB_ReadChInterrupts>
 8005c30:	4603      	mov	r3, r0
 8005c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c36:	2b40      	cmp	r3, #64	@ 0x40
 8005c38:	d112      	bne.n	8005c60 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005c3a:	78fa      	ldrb	r2, [r7, #3]
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	1a9b      	subs	r3, r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	440b      	add	r3, r1
 8005c48:	3319      	adds	r3, #25
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005c4e:	78fb      	ldrb	r3, [r7, #3]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	2340      	movs	r3, #64	@ 0x40
 8005c5e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005c60:	78fa      	ldrb	r2, [r7, #3]
 8005c62:	6879      	ldr	r1, [r7, #4]
 8005c64:	4613      	mov	r3, r2
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	1a9b      	subs	r3, r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	440b      	add	r3, r1
 8005c6e:	331b      	adds	r3, #27
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d019      	beq.n	8005caa <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005c76:	78fa      	ldrb	r2, [r7, #3]
 8005c78:	6879      	ldr	r1, [r7, #4]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	1a9b      	subs	r3, r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	440b      	add	r3, r1
 8005c84:	331b      	adds	r3, #27
 8005c86:	2200      	movs	r2, #0
 8005c88:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005c8a:	78fb      	ldrb	r3, [r7, #3]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	78fa      	ldrb	r2, [r7, #3]
 8005c9a:	0151      	lsls	r1, r2, #5
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	440a      	add	r2, r1
 8005ca0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ca4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ca8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005caa:	78fb      	ldrb	r3, [r7, #3]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	2301      	movs	r3, #1
 8005cba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005cbc:	78fa      	ldrb	r2, [r7, #3]
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	1a9b      	subs	r3, r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	334d      	adds	r3, #77	@ 0x4d
 8005ccc:	2201      	movs	r2, #1
 8005cce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	78fa      	ldrb	r2, [r7, #3]
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f005 f808 	bl	800acee <USB_HC_Halt>
 8005cde:	e365      	b.n	80063ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	78fa      	ldrb	r2, [r7, #3]
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f004 fabe 	bl	800a26a <USB_ReadChInterrupts>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf4:	2b40      	cmp	r3, #64	@ 0x40
 8005cf6:	d139      	bne.n	8005d6c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005cf8:	78fa      	ldrb	r2, [r7, #3]
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	1a9b      	subs	r3, r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	440b      	add	r3, r1
 8005d06:	334d      	adds	r3, #77	@ 0x4d
 8005d08:	2205      	movs	r2, #5
 8005d0a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005d0c:	78fa      	ldrb	r2, [r7, #3]
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	4613      	mov	r3, r2
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	1a9b      	subs	r3, r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	331a      	adds	r3, #26
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d109      	bne.n	8005d36 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005d22:	78fa      	ldrb	r2, [r7, #3]
 8005d24:	6879      	ldr	r1, [r7, #4]
 8005d26:	4613      	mov	r3, r2
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	1a9b      	subs	r3, r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	440b      	add	r3, r1
 8005d30:	3319      	adds	r3, #25
 8005d32:	2201      	movs	r2, #1
 8005d34:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005d36:	78fa      	ldrb	r2, [r7, #3]
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	1a9b      	subs	r3, r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	440b      	add	r3, r1
 8005d44:	3344      	adds	r3, #68	@ 0x44
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	78fa      	ldrb	r2, [r7, #3]
 8005d50:	4611      	mov	r1, r2
 8005d52:	4618      	mov	r0, r3
 8005d54:	f004 ffcb 	bl	800acee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d64:	461a      	mov	r2, r3
 8005d66:	2340      	movs	r3, #64	@ 0x40
 8005d68:	6093      	str	r3, [r2, #8]
 8005d6a:	e31f      	b.n	80063ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	78fa      	ldrb	r2, [r7, #3]
 8005d72:	4611      	mov	r1, r2
 8005d74:	4618      	mov	r0, r3
 8005d76:	f004 fa78 	bl	800a26a <USB_ReadChInterrupts>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f003 0308 	and.w	r3, r3, #8
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d11a      	bne.n	8005dba <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d90:	461a      	mov	r2, r3
 8005d92:	2308      	movs	r3, #8
 8005d94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005d96:	78fa      	ldrb	r2, [r7, #3]
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	011b      	lsls	r3, r3, #4
 8005d9e:	1a9b      	subs	r3, r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	440b      	add	r3, r1
 8005da4:	334d      	adds	r3, #77	@ 0x4d
 8005da6:	2206      	movs	r2, #6
 8005da8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	78fa      	ldrb	r2, [r7, #3]
 8005db0:	4611      	mov	r1, r2
 8005db2:	4618      	mov	r0, r3
 8005db4:	f004 ff9b 	bl	800acee <USB_HC_Halt>
 8005db8:	e2f8      	b.n	80063ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	78fa      	ldrb	r2, [r7, #3]
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f004 fa51 	bl	800a26a <USB_ReadChInterrupts>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	2b10      	cmp	r3, #16
 8005dd0:	d144      	bne.n	8005e5c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005dd2:	78fa      	ldrb	r2, [r7, #3]
 8005dd4:	6879      	ldr	r1, [r7, #4]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	011b      	lsls	r3, r3, #4
 8005dda:	1a9b      	subs	r3, r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	440b      	add	r3, r1
 8005de0:	3344      	adds	r3, #68	@ 0x44
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005de6:	78fa      	ldrb	r2, [r7, #3]
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	4613      	mov	r3, r2
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	1a9b      	subs	r3, r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	440b      	add	r3, r1
 8005df4:	334d      	adds	r3, #77	@ 0x4d
 8005df6:	2204      	movs	r2, #4
 8005df8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005dfa:	78fa      	ldrb	r2, [r7, #3]
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	011b      	lsls	r3, r3, #4
 8005e02:	1a9b      	subs	r3, r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	440b      	add	r3, r1
 8005e08:	3319      	adds	r3, #25
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d114      	bne.n	8005e3a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005e10:	78fa      	ldrb	r2, [r7, #3]
 8005e12:	6879      	ldr	r1, [r7, #4]
 8005e14:	4613      	mov	r3, r2
 8005e16:	011b      	lsls	r3, r3, #4
 8005e18:	1a9b      	subs	r3, r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	440b      	add	r3, r1
 8005e1e:	3318      	adds	r3, #24
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d109      	bne.n	8005e3a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005e26:	78fa      	ldrb	r2, [r7, #3]
 8005e28:	6879      	ldr	r1, [r7, #4]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	011b      	lsls	r3, r3, #4
 8005e2e:	1a9b      	subs	r3, r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	440b      	add	r3, r1
 8005e34:	3319      	adds	r3, #25
 8005e36:	2201      	movs	r2, #1
 8005e38:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	78fa      	ldrb	r2, [r7, #3]
 8005e40:	4611      	mov	r1, r2
 8005e42:	4618      	mov	r0, r3
 8005e44:	f004 ff53 	bl	800acee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e54:	461a      	mov	r2, r3
 8005e56:	2310      	movs	r3, #16
 8005e58:	6093      	str	r3, [r2, #8]
 8005e5a:	e2a7      	b.n	80063ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	78fa      	ldrb	r2, [r7, #3]
 8005e62:	4611      	mov	r1, r2
 8005e64:	4618      	mov	r0, r3
 8005e66:	f004 fa00 	bl	800a26a <USB_ReadChInterrupts>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e70:	2b80      	cmp	r3, #128	@ 0x80
 8005e72:	f040 8083 	bne.w	8005f7c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	799b      	ldrb	r3, [r3, #6]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d111      	bne.n	8005ea2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005e7e:	78fa      	ldrb	r2, [r7, #3]
 8005e80:	6879      	ldr	r1, [r7, #4]
 8005e82:	4613      	mov	r3, r2
 8005e84:	011b      	lsls	r3, r3, #4
 8005e86:	1a9b      	subs	r3, r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	334d      	adds	r3, #77	@ 0x4d
 8005e8e:	2207      	movs	r2, #7
 8005e90:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	78fa      	ldrb	r2, [r7, #3]
 8005e98:	4611      	mov	r1, r2
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f004 ff27 	bl	800acee <USB_HC_Halt>
 8005ea0:	e062      	b.n	8005f68 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005ea2:	78fa      	ldrb	r2, [r7, #3]
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	1a9b      	subs	r3, r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	440b      	add	r3, r1
 8005eb0:	3344      	adds	r3, #68	@ 0x44
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	1c59      	adds	r1, r3, #1
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	1a9b      	subs	r3, r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4403      	add	r3, r0
 8005ec2:	3344      	adds	r3, #68	@ 0x44
 8005ec4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005ec6:	78fa      	ldrb	r2, [r7, #3]
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	1a9b      	subs	r3, r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	3344      	adds	r3, #68	@ 0x44
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d922      	bls.n	8005f22 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005edc:	78fa      	ldrb	r2, [r7, #3]
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	3344      	adds	r3, #68	@ 0x44
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005ef0:	78fa      	ldrb	r2, [r7, #3]
 8005ef2:	6879      	ldr	r1, [r7, #4]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	011b      	lsls	r3, r3, #4
 8005ef8:	1a9b      	subs	r3, r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	440b      	add	r3, r1
 8005efe:	334c      	adds	r3, #76	@ 0x4c
 8005f00:	2204      	movs	r2, #4
 8005f02:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005f04:	78fa      	ldrb	r2, [r7, #3]
 8005f06:	6879      	ldr	r1, [r7, #4]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	1a9b      	subs	r3, r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	440b      	add	r3, r1
 8005f12:	334c      	adds	r3, #76	@ 0x4c
 8005f14:	781a      	ldrb	r2, [r3, #0]
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f00b fe70 	bl	8011c00 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005f20:	e022      	b.n	8005f68 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005f22:	78fa      	ldrb	r2, [r7, #3]
 8005f24:	6879      	ldr	r1, [r7, #4]
 8005f26:	4613      	mov	r3, r2
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	1a9b      	subs	r3, r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	440b      	add	r3, r1
 8005f30:	334c      	adds	r3, #76	@ 0x4c
 8005f32:	2202      	movs	r2, #2
 8005f34:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005f36:	78fb      	ldrb	r3, [r7, #3]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f4c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f54:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f62:	461a      	mov	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f74:	461a      	mov	r2, r3
 8005f76:	2380      	movs	r3, #128	@ 0x80
 8005f78:	6093      	str	r3, [r2, #8]
 8005f7a:	e217      	b.n	80063ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	78fa      	ldrb	r2, [r7, #3]
 8005f82:	4611      	mov	r1, r2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f004 f970 	bl	800a26a <USB_ReadChInterrupts>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f94:	d11b      	bne.n	8005fce <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005f96:	78fa      	ldrb	r2, [r7, #3]
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	011b      	lsls	r3, r3, #4
 8005f9e:	1a9b      	subs	r3, r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	440b      	add	r3, r1
 8005fa4:	334d      	adds	r3, #77	@ 0x4d
 8005fa6:	2209      	movs	r2, #9
 8005fa8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	78fa      	ldrb	r2, [r7, #3]
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f004 fe9b 	bl	800acee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fca:	6093      	str	r3, [r2, #8]
 8005fcc:	e1ee      	b.n	80063ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	78fa      	ldrb	r2, [r7, #3]
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f004 f947 	bl	800a26a <USB_ReadChInterrupts>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	f040 81df 	bne.w	80063a6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005ffa:	78fa      	ldrb	r2, [r7, #3]
 8005ffc:	6879      	ldr	r1, [r7, #4]
 8005ffe:	4613      	mov	r3, r2
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	1a9b      	subs	r3, r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	440b      	add	r3, r1
 8006008:	334d      	adds	r3, #77	@ 0x4d
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b01      	cmp	r3, #1
 800600e:	f040 8093 	bne.w	8006138 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006012:	78fa      	ldrb	r2, [r7, #3]
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	4613      	mov	r3, r2
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	440b      	add	r3, r1
 8006020:	334d      	adds	r3, #77	@ 0x4d
 8006022:	2202      	movs	r2, #2
 8006024:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006026:	78fa      	ldrb	r2, [r7, #3]
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	4613      	mov	r3, r2
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	1a9b      	subs	r3, r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	440b      	add	r3, r1
 8006034:	334c      	adds	r3, #76	@ 0x4c
 8006036:	2201      	movs	r2, #1
 8006038:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800603a:	78fa      	ldrb	r2, [r7, #3]
 800603c:	6879      	ldr	r1, [r7, #4]
 800603e:	4613      	mov	r3, r2
 8006040:	011b      	lsls	r3, r3, #4
 8006042:	1a9b      	subs	r3, r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	440b      	add	r3, r1
 8006048:	3326      	adds	r3, #38	@ 0x26
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b02      	cmp	r3, #2
 800604e:	d00b      	beq.n	8006068 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8006050:	78fa      	ldrb	r2, [r7, #3]
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	4613      	mov	r3, r2
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	1a9b      	subs	r3, r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	3326      	adds	r3, #38	@ 0x26
 8006060:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006062:	2b03      	cmp	r3, #3
 8006064:	f040 8190 	bne.w	8006388 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	799b      	ldrb	r3, [r3, #6]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d115      	bne.n	800609c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8006070:	78fa      	ldrb	r2, [r7, #3]
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	4613      	mov	r3, r2
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	1a9b      	subs	r3, r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	333d      	adds	r3, #61	@ 0x3d
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	78fa      	ldrb	r2, [r7, #3]
 8006084:	f083 0301 	eor.w	r3, r3, #1
 8006088:	b2d8      	uxtb	r0, r3
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	4613      	mov	r3, r2
 800608e:	011b      	lsls	r3, r3, #4
 8006090:	1a9b      	subs	r3, r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	440b      	add	r3, r1
 8006096:	333d      	adds	r3, #61	@ 0x3d
 8006098:	4602      	mov	r2, r0
 800609a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	799b      	ldrb	r3, [r3, #6]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	f040 8171 	bne.w	8006388 <HCD_HC_OUT_IRQHandler+0x954>
 80060a6:	78fa      	ldrb	r2, [r7, #3]
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	4613      	mov	r3, r2
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	1a9b      	subs	r3, r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	440b      	add	r3, r1
 80060b4:	3334      	adds	r3, #52	@ 0x34
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8165 	beq.w	8006388 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80060be:	78fa      	ldrb	r2, [r7, #3]
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	1a9b      	subs	r3, r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	3334      	adds	r3, #52	@ 0x34
 80060ce:	6819      	ldr	r1, [r3, #0]
 80060d0:	78fa      	ldrb	r2, [r7, #3]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	4613      	mov	r3, r2
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	1a9b      	subs	r3, r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4403      	add	r3, r0
 80060de:	3328      	adds	r3, #40	@ 0x28
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	440b      	add	r3, r1
 80060e4:	1e59      	subs	r1, r3, #1
 80060e6:	78fa      	ldrb	r2, [r7, #3]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	4613      	mov	r3, r2
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	1a9b      	subs	r3, r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4403      	add	r3, r0
 80060f4:	3328      	adds	r3, #40	@ 0x28
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80060fc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 813f 	beq.w	8006388 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800610a:	78fa      	ldrb	r2, [r7, #3]
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	4613      	mov	r3, r2
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	1a9b      	subs	r3, r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	440b      	add	r3, r1
 8006118:	333d      	adds	r3, #61	@ 0x3d
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	78fa      	ldrb	r2, [r7, #3]
 800611e:	f083 0301 	eor.w	r3, r3, #1
 8006122:	b2d8      	uxtb	r0, r3
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	4613      	mov	r3, r2
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	1a9b      	subs	r3, r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	440b      	add	r3, r1
 8006130:	333d      	adds	r3, #61	@ 0x3d
 8006132:	4602      	mov	r2, r0
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	e127      	b.n	8006388 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006138:	78fa      	ldrb	r2, [r7, #3]
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	4613      	mov	r3, r2
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	1a9b      	subs	r3, r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	334d      	adds	r3, #77	@ 0x4d
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	2b03      	cmp	r3, #3
 800614c:	d120      	bne.n	8006190 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800614e:	78fa      	ldrb	r2, [r7, #3]
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	1a9b      	subs	r3, r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	440b      	add	r3, r1
 800615c:	334d      	adds	r3, #77	@ 0x4d
 800615e:	2202      	movs	r2, #2
 8006160:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006162:	78fa      	ldrb	r2, [r7, #3]
 8006164:	6879      	ldr	r1, [r7, #4]
 8006166:	4613      	mov	r3, r2
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	440b      	add	r3, r1
 8006170:	331b      	adds	r3, #27
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b01      	cmp	r3, #1
 8006176:	f040 8107 	bne.w	8006388 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800617a:	78fa      	ldrb	r2, [r7, #3]
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	4613      	mov	r3, r2
 8006180:	011b      	lsls	r3, r3, #4
 8006182:	1a9b      	subs	r3, r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	440b      	add	r3, r1
 8006188:	334c      	adds	r3, #76	@ 0x4c
 800618a:	2202      	movs	r2, #2
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	e0fb      	b.n	8006388 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006190:	78fa      	ldrb	r2, [r7, #3]
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	4613      	mov	r3, r2
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	1a9b      	subs	r3, r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	440b      	add	r3, r1
 800619e:	334d      	adds	r3, #77	@ 0x4d
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d13a      	bne.n	800621c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80061a6:	78fa      	ldrb	r2, [r7, #3]
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	4613      	mov	r3, r2
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	1a9b      	subs	r3, r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	440b      	add	r3, r1
 80061b4:	334d      	adds	r3, #77	@ 0x4d
 80061b6:	2202      	movs	r2, #2
 80061b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80061ba:	78fa      	ldrb	r2, [r7, #3]
 80061bc:	6879      	ldr	r1, [r7, #4]
 80061be:	4613      	mov	r3, r2
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	1a9b      	subs	r3, r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	440b      	add	r3, r1
 80061c8:	334c      	adds	r3, #76	@ 0x4c
 80061ca:	2202      	movs	r2, #2
 80061cc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80061ce:	78fa      	ldrb	r2, [r7, #3]
 80061d0:	6879      	ldr	r1, [r7, #4]
 80061d2:	4613      	mov	r3, r2
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	1a9b      	subs	r3, r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	440b      	add	r3, r1
 80061dc:	331b      	adds	r3, #27
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	f040 80d1 	bne.w	8006388 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80061e6:	78fa      	ldrb	r2, [r7, #3]
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	4613      	mov	r3, r2
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	1a9b      	subs	r3, r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	440b      	add	r3, r1
 80061f4:	331b      	adds	r3, #27
 80061f6:	2200      	movs	r2, #0
 80061f8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80061fa:	78fb      	ldrb	r3, [r7, #3]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	4413      	add	r3, r2
 8006202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	78fa      	ldrb	r2, [r7, #3]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	440a      	add	r2, r1
 8006210:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006218:	6053      	str	r3, [r2, #4]
 800621a:	e0b5      	b.n	8006388 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800621c:	78fa      	ldrb	r2, [r7, #3]
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	4613      	mov	r3, r2
 8006222:	011b      	lsls	r3, r3, #4
 8006224:	1a9b      	subs	r3, r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	440b      	add	r3, r1
 800622a:	334d      	adds	r3, #77	@ 0x4d
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b05      	cmp	r3, #5
 8006230:	d114      	bne.n	800625c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006232:	78fa      	ldrb	r2, [r7, #3]
 8006234:	6879      	ldr	r1, [r7, #4]
 8006236:	4613      	mov	r3, r2
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	440b      	add	r3, r1
 8006240:	334d      	adds	r3, #77	@ 0x4d
 8006242:	2202      	movs	r2, #2
 8006244:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006246:	78fa      	ldrb	r2, [r7, #3]
 8006248:	6879      	ldr	r1, [r7, #4]
 800624a:	4613      	mov	r3, r2
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	1a9b      	subs	r3, r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	440b      	add	r3, r1
 8006254:	334c      	adds	r3, #76	@ 0x4c
 8006256:	2202      	movs	r2, #2
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	e095      	b.n	8006388 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800625c:	78fa      	ldrb	r2, [r7, #3]
 800625e:	6879      	ldr	r1, [r7, #4]
 8006260:	4613      	mov	r3, r2
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	1a9b      	subs	r3, r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	440b      	add	r3, r1
 800626a:	334d      	adds	r3, #77	@ 0x4d
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b06      	cmp	r3, #6
 8006270:	d114      	bne.n	800629c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006272:	78fa      	ldrb	r2, [r7, #3]
 8006274:	6879      	ldr	r1, [r7, #4]
 8006276:	4613      	mov	r3, r2
 8006278:	011b      	lsls	r3, r3, #4
 800627a:	1a9b      	subs	r3, r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	440b      	add	r3, r1
 8006280:	334d      	adds	r3, #77	@ 0x4d
 8006282:	2202      	movs	r2, #2
 8006284:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006286:	78fa      	ldrb	r2, [r7, #3]
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	4613      	mov	r3, r2
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	1a9b      	subs	r3, r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	440b      	add	r3, r1
 8006294:	334c      	adds	r3, #76	@ 0x4c
 8006296:	2205      	movs	r2, #5
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	e075      	b.n	8006388 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800629c:	78fa      	ldrb	r2, [r7, #3]
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	4613      	mov	r3, r2
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	1a9b      	subs	r3, r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	334d      	adds	r3, #77	@ 0x4d
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b07      	cmp	r3, #7
 80062b0:	d00a      	beq.n	80062c8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80062b2:	78fa      	ldrb	r2, [r7, #3]
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	1a9b      	subs	r3, r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	440b      	add	r3, r1
 80062c0:	334d      	adds	r3, #77	@ 0x4d
 80062c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80062c4:	2b09      	cmp	r3, #9
 80062c6:	d170      	bne.n	80063aa <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80062c8:	78fa      	ldrb	r2, [r7, #3]
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	4613      	mov	r3, r2
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	1a9b      	subs	r3, r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	440b      	add	r3, r1
 80062d6:	334d      	adds	r3, #77	@ 0x4d
 80062d8:	2202      	movs	r2, #2
 80062da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80062dc:	78fa      	ldrb	r2, [r7, #3]
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	4613      	mov	r3, r2
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	1a9b      	subs	r3, r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	440b      	add	r3, r1
 80062ea:	3344      	adds	r3, #68	@ 0x44
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	1c59      	adds	r1, r3, #1
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	4613      	mov	r3, r2
 80062f4:	011b      	lsls	r3, r3, #4
 80062f6:	1a9b      	subs	r3, r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4403      	add	r3, r0
 80062fc:	3344      	adds	r3, #68	@ 0x44
 80062fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006300:	78fa      	ldrb	r2, [r7, #3]
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	4613      	mov	r3, r2
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	1a9b      	subs	r3, r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	3344      	adds	r3, #68	@ 0x44
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b02      	cmp	r3, #2
 8006314:	d914      	bls.n	8006340 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006316:	78fa      	ldrb	r2, [r7, #3]
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	4613      	mov	r3, r2
 800631c:	011b      	lsls	r3, r3, #4
 800631e:	1a9b      	subs	r3, r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	440b      	add	r3, r1
 8006324:	3344      	adds	r3, #68	@ 0x44
 8006326:	2200      	movs	r2, #0
 8006328:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800632a:	78fa      	ldrb	r2, [r7, #3]
 800632c:	6879      	ldr	r1, [r7, #4]
 800632e:	4613      	mov	r3, r2
 8006330:	011b      	lsls	r3, r3, #4
 8006332:	1a9b      	subs	r3, r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	440b      	add	r3, r1
 8006338:	334c      	adds	r3, #76	@ 0x4c
 800633a:	2204      	movs	r2, #4
 800633c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800633e:	e022      	b.n	8006386 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006340:	78fa      	ldrb	r2, [r7, #3]
 8006342:	6879      	ldr	r1, [r7, #4]
 8006344:	4613      	mov	r3, r2
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	1a9b      	subs	r3, r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	440b      	add	r3, r1
 800634e:	334c      	adds	r3, #76	@ 0x4c
 8006350:	2202      	movs	r2, #2
 8006352:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006354:	78fb      	ldrb	r3, [r7, #3]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	4413      	add	r3, r2
 800635c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800636a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006372:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	4413      	add	r3, r2
 800637c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006380:	461a      	mov	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006386:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006388:	78fa      	ldrb	r2, [r7, #3]
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	4613      	mov	r3, r2
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	1a9b      	subs	r3, r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	440b      	add	r3, r1
 8006396:	334c      	adds	r3, #76	@ 0x4c
 8006398:	781a      	ldrb	r2, [r3, #0]
 800639a:	78fb      	ldrb	r3, [r7, #3]
 800639c:	4619      	mov	r1, r3
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f00b fc2e 	bl	8011c00 <HAL_HCD_HC_NotifyURBChange_Callback>
 80063a4:	e002      	b.n	80063ac <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80063a6:	bf00      	nop
 80063a8:	e000      	b.n	80063ac <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80063aa:	bf00      	nop
  }
}
 80063ac:	3718      	adds	r7, #24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b08a      	sub	sp, #40	@ 0x28
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f003 030f 	and.w	r3, r3, #15
 80063d2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	0c5b      	lsrs	r3, r3, #17
 80063d8:	f003 030f 	and.w	r3, r3, #15
 80063dc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	091b      	lsrs	r3, r3, #4
 80063e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063e6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d004      	beq.n	80063f8 <HCD_RXQLVL_IRQHandler+0x46>
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b05      	cmp	r3, #5
 80063f2:	f000 80b6 	beq.w	8006562 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80063f6:	e0b7      	b.n	8006568 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 80b3 	beq.w	8006566 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006400:	6879      	ldr	r1, [r7, #4]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	4613      	mov	r3, r2
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	1a9b      	subs	r3, r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	440b      	add	r3, r1
 800640e:	332c      	adds	r3, #44	@ 0x2c
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 80a7 	beq.w	8006566 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	4613      	mov	r3, r2
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	1a9b      	subs	r3, r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	440b      	add	r3, r1
 8006426:	3338      	adds	r3, #56	@ 0x38
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	18d1      	adds	r1, r2, r3
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	4613      	mov	r3, r2
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	1a9b      	subs	r3, r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4403      	add	r3, r0
 800643c:	3334      	adds	r3, #52	@ 0x34
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4299      	cmp	r1, r3
 8006442:	f200 8083 	bhi.w	800654c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	6879      	ldr	r1, [r7, #4]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	4613      	mov	r3, r2
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	1a9b      	subs	r3, r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	440b      	add	r3, r1
 8006458:	332c      	adds	r3, #44	@ 0x2c
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	b292      	uxth	r2, r2
 8006460:	4619      	mov	r1, r3
 8006462:	f003 fe97 	bl	800a194 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	4613      	mov	r3, r2
 800646c:	011b      	lsls	r3, r3, #4
 800646e:	1a9b      	subs	r3, r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	440b      	add	r3, r1
 8006474:	332c      	adds	r3, #44	@ 0x2c
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	18d1      	adds	r1, r2, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	4613      	mov	r3, r2
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	1a9b      	subs	r3, r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4403      	add	r3, r0
 800648a:	332c      	adds	r3, #44	@ 0x2c
 800648c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	4613      	mov	r3, r2
 8006494:	011b      	lsls	r3, r3, #4
 8006496:	1a9b      	subs	r3, r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	440b      	add	r3, r1
 800649c:	3338      	adds	r3, #56	@ 0x38
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	18d1      	adds	r1, r2, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	4613      	mov	r3, r2
 80064aa:	011b      	lsls	r3, r3, #4
 80064ac:	1a9b      	subs	r3, r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4403      	add	r3, r0
 80064b2:	3338      	adds	r3, #56	@ 0x38
 80064b4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	0cdb      	lsrs	r3, r3, #19
 80064c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ca:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	4613      	mov	r3, r2
 80064d2:	011b      	lsls	r3, r3, #4
 80064d4:	1a9b      	subs	r3, r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	440b      	add	r3, r1
 80064da:	3328      	adds	r3, #40	@ 0x28
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d13f      	bne.n	8006566 <HCD_RXQLVL_IRQHandler+0x1b4>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d03c      	beq.n	8006566 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006502:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800650a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	4413      	add	r3, r2
 8006514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006518:	461a      	mov	r2, r3
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	4613      	mov	r3, r2
 8006524:	011b      	lsls	r3, r3, #4
 8006526:	1a9b      	subs	r3, r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	440b      	add	r3, r1
 800652c:	333c      	adds	r3, #60	@ 0x3c
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	f083 0301 	eor.w	r3, r3, #1
 8006534:	b2d8      	uxtb	r0, r3
 8006536:	6879      	ldr	r1, [r7, #4]
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	4613      	mov	r3, r2
 800653c:	011b      	lsls	r3, r3, #4
 800653e:	1a9b      	subs	r3, r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	440b      	add	r3, r1
 8006544:	333c      	adds	r3, #60	@ 0x3c
 8006546:	4602      	mov	r2, r0
 8006548:	701a      	strb	r2, [r3, #0]
      break;
 800654a:	e00c      	b.n	8006566 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	4613      	mov	r3, r2
 8006552:	011b      	lsls	r3, r3, #4
 8006554:	1a9b      	subs	r3, r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	334c      	adds	r3, #76	@ 0x4c
 800655c:	2204      	movs	r2, #4
 800655e:	701a      	strb	r2, [r3, #0]
      break;
 8006560:	e001      	b.n	8006566 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8006562:	bf00      	nop
 8006564:	e000      	b.n	8006568 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006566:	bf00      	nop
  }
}
 8006568:	bf00      	nop
 800656a:	3728      	adds	r7, #40	@ 0x28
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800659c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d10b      	bne.n	80065c0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d102      	bne.n	80065b8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f00b fb08 	bl	8011bc8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f043 0302 	orr.w	r3, r3, #2
 80065be:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d132      	bne.n	8006630 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f043 0308 	orr.w	r3, r3, #8
 80065d0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d126      	bne.n	800662a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	7a5b      	ldrb	r3, [r3, #9]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d113      	bne.n	800660c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80065ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065ee:	d106      	bne.n	80065fe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2102      	movs	r1, #2
 80065f6:	4618      	mov	r0, r3
 80065f8:	f003 ff46 	bl	800a488 <USB_InitFSLSPClkSel>
 80065fc:	e011      	b.n	8006622 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2101      	movs	r1, #1
 8006604:	4618      	mov	r0, r3
 8006606:	f003 ff3f 	bl	800a488 <USB_InitFSLSPClkSel>
 800660a:	e00a      	b.n	8006622 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	79db      	ldrb	r3, [r3, #7]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d106      	bne.n	8006622 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800661a:	461a      	mov	r2, r3
 800661c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006620:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f00b fafa 	bl	8011c1c <HAL_HCD_PortEnabled_Callback>
 8006628:	e002      	b.n	8006630 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f00b fb04 	bl	8011c38 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b20      	cmp	r3, #32
 8006638:	d103      	bne.n	8006642 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f043 0320 	orr.w	r3, r3, #32
 8006640:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006648:	461a      	mov	r2, r3
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	6013      	str	r3, [r2, #0]
}
 800664e:	bf00      	nop
 8006650:	3718      	adds	r7, #24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e12b      	b.n	80068c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fc f9b8 	bl	80029f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2224      	movs	r2, #36	@ 0x24
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0201 	bic.w	r2, r2, #1
 800669a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80066ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80066bc:	f002 ffe8 	bl	8009690 <HAL_RCC_GetPCLK1Freq>
 80066c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	4a81      	ldr	r2, [pc, #516]	@ (80068cc <HAL_I2C_Init+0x274>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d807      	bhi.n	80066dc <HAL_I2C_Init+0x84>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4a80      	ldr	r2, [pc, #512]	@ (80068d0 <HAL_I2C_Init+0x278>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	bf94      	ite	ls
 80066d4:	2301      	movls	r3, #1
 80066d6:	2300      	movhi	r3, #0
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	e006      	b.n	80066ea <HAL_I2C_Init+0x92>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4a7d      	ldr	r2, [pc, #500]	@ (80068d4 <HAL_I2C_Init+0x27c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	bf94      	ite	ls
 80066e4:	2301      	movls	r3, #1
 80066e6:	2300      	movhi	r3, #0
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e0e7      	b.n	80068c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4a78      	ldr	r2, [pc, #480]	@ (80068d8 <HAL_I2C_Init+0x280>)
 80066f6:	fba2 2303 	umull	r2, r3, r2, r3
 80066fa:	0c9b      	lsrs	r3, r3, #18
 80066fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	430a      	orrs	r2, r1
 8006710:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	4a6a      	ldr	r2, [pc, #424]	@ (80068cc <HAL_I2C_Init+0x274>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d802      	bhi.n	800672c <HAL_I2C_Init+0xd4>
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	3301      	adds	r3, #1
 800672a:	e009      	b.n	8006740 <HAL_I2C_Init+0xe8>
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006732:	fb02 f303 	mul.w	r3, r2, r3
 8006736:	4a69      	ldr	r2, [pc, #420]	@ (80068dc <HAL_I2C_Init+0x284>)
 8006738:	fba2 2303 	umull	r2, r3, r2, r3
 800673c:	099b      	lsrs	r3, r3, #6
 800673e:	3301      	adds	r3, #1
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6812      	ldr	r2, [r2, #0]
 8006744:	430b      	orrs	r3, r1
 8006746:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006752:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	495c      	ldr	r1, [pc, #368]	@ (80068cc <HAL_I2C_Init+0x274>)
 800675c:	428b      	cmp	r3, r1
 800675e:	d819      	bhi.n	8006794 <HAL_I2C_Init+0x13c>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	1e59      	subs	r1, r3, #1
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	fbb1 f3f3 	udiv	r3, r1, r3
 800676e:	1c59      	adds	r1, r3, #1
 8006770:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006774:	400b      	ands	r3, r1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <HAL_I2C_Init+0x138>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	1e59      	subs	r1, r3, #1
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	fbb1 f3f3 	udiv	r3, r1, r3
 8006788:	3301      	adds	r3, #1
 800678a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800678e:	e051      	b.n	8006834 <HAL_I2C_Init+0x1dc>
 8006790:	2304      	movs	r3, #4
 8006792:	e04f      	b.n	8006834 <HAL_I2C_Init+0x1dc>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d111      	bne.n	80067c0 <HAL_I2C_Init+0x168>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	1e58      	subs	r0, r3, #1
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6859      	ldr	r1, [r3, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	440b      	add	r3, r1
 80067aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80067ae:	3301      	adds	r3, #1
 80067b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bf0c      	ite	eq
 80067b8:	2301      	moveq	r3, #1
 80067ba:	2300      	movne	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	e012      	b.n	80067e6 <HAL_I2C_Init+0x18e>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	1e58      	subs	r0, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6859      	ldr	r1, [r3, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	440b      	add	r3, r1
 80067ce:	0099      	lsls	r1, r3, #2
 80067d0:	440b      	add	r3, r1
 80067d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80067d6:	3301      	adds	r3, #1
 80067d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067dc:	2b00      	cmp	r3, #0
 80067de:	bf0c      	ite	eq
 80067e0:	2301      	moveq	r3, #1
 80067e2:	2300      	movne	r3, #0
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <HAL_I2C_Init+0x196>
 80067ea:	2301      	movs	r3, #1
 80067ec:	e022      	b.n	8006834 <HAL_I2C_Init+0x1dc>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10e      	bne.n	8006814 <HAL_I2C_Init+0x1bc>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	1e58      	subs	r0, r3, #1
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6859      	ldr	r1, [r3, #4]
 80067fe:	460b      	mov	r3, r1
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	440b      	add	r3, r1
 8006804:	fbb0 f3f3 	udiv	r3, r0, r3
 8006808:	3301      	adds	r3, #1
 800680a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800680e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006812:	e00f      	b.n	8006834 <HAL_I2C_Init+0x1dc>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	1e58      	subs	r0, r3, #1
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6859      	ldr	r1, [r3, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	440b      	add	r3, r1
 8006822:	0099      	lsls	r1, r3, #2
 8006824:	440b      	add	r3, r1
 8006826:	fbb0 f3f3 	udiv	r3, r0, r3
 800682a:	3301      	adds	r3, #1
 800682c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006830:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	6809      	ldr	r1, [r1, #0]
 8006838:	4313      	orrs	r3, r2
 800683a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	69da      	ldr	r2, [r3, #28]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006862:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	6911      	ldr	r1, [r2, #16]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	68d2      	ldr	r2, [r2, #12]
 800686e:	4311      	orrs	r1, r2
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6812      	ldr	r2, [r2, #0]
 8006874:	430b      	orrs	r3, r1
 8006876:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695a      	ldr	r2, [r3, #20]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0201 	orr.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	000186a0 	.word	0x000186a0
 80068d0:	001e847f 	.word	0x001e847f
 80068d4:	003d08ff 	.word	0x003d08ff
 80068d8:	431bde83 	.word	0x431bde83
 80068dc:	10624dd3 	.word	0x10624dd3

080068e0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e021      	b.n	8006936 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2224      	movs	r2, #36	@ 0x24
 80068f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0201 	bic.w	r2, r2, #1
 8006908:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fc f900 	bl	8002b10 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b088      	sub	sp, #32
 8006944:	af02      	add	r7, sp, #8
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	607a      	str	r2, [r7, #4]
 800694a:	461a      	mov	r2, r3
 800694c:	460b      	mov	r3, r1
 800694e:	817b      	strh	r3, [r7, #10]
 8006950:	4613      	mov	r3, r2
 8006952:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006954:	f7fc fd32 	bl	80033bc <HAL_GetTick>
 8006958:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b20      	cmp	r3, #32
 8006964:	f040 80e0 	bne.w	8006b28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	2319      	movs	r3, #25
 800696e:	2201      	movs	r2, #1
 8006970:	4970      	ldr	r1, [pc, #448]	@ (8006b34 <HAL_I2C_Master_Transmit+0x1f4>)
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 ff4a 	bl	800780c <I2C_WaitOnFlagUntilTimeout>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800697e:	2302      	movs	r3, #2
 8006980:	e0d3      	b.n	8006b2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006988:	2b01      	cmp	r3, #1
 800698a:	d101      	bne.n	8006990 <HAL_I2C_Master_Transmit+0x50>
 800698c:	2302      	movs	r3, #2
 800698e:	e0cc      	b.n	8006b2a <HAL_I2C_Master_Transmit+0x1ea>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d007      	beq.n	80069b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f042 0201 	orr.w	r2, r2, #1
 80069b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2221      	movs	r2, #33	@ 0x21
 80069ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2210      	movs	r2, #16
 80069d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	893a      	ldrh	r2, [r7, #8]
 80069e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4a50      	ldr	r2, [pc, #320]	@ (8006b38 <HAL_I2C_Master_Transmit+0x1f8>)
 80069f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80069f8:	8979      	ldrh	r1, [r7, #10]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	6a3a      	ldr	r2, [r7, #32]
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 fd04 	bl	800740c <I2C_MasterRequestWrite>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e08d      	b.n	8006b2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a0e:	2300      	movs	r3, #0
 8006a10:	613b      	str	r3, [r7, #16]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	613b      	str	r3, [r7, #16]
 8006a22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006a24:	e066      	b.n	8006af4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	6a39      	ldr	r1, [r7, #32]
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f001 f808 	bl	8007a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00d      	beq.n	8006a52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3a:	2b04      	cmp	r3, #4
 8006a3c:	d107      	bne.n	8006a4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e06b      	b.n	8006b2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a56:	781a      	ldrb	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b04      	cmp	r3, #4
 8006a8e:	d11b      	bne.n	8006ac8 <HAL_I2C_Master_Transmit+0x188>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d017      	beq.n	8006ac8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9c:	781a      	ldrb	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	6a39      	ldr	r1, [r7, #32]
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 ffff 	bl	8007ad0 <I2C_WaitOnBTFFlagUntilTimeout>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00d      	beq.n	8006af4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006adc:	2b04      	cmp	r3, #4
 8006ade:	d107      	bne.n	8006af0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006aee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e01a      	b.n	8006b2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d194      	bne.n	8006a26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	e000      	b.n	8006b2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006b28:	2302      	movs	r3, #2
  }
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	00100002 	.word	0x00100002
 8006b38:	ffff0000 	.word	0xffff0000

08006b3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b088      	sub	sp, #32
 8006b40:	af02      	add	r7, sp, #8
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	4608      	mov	r0, r1
 8006b46:	4611      	mov	r1, r2
 8006b48:	461a      	mov	r2, r3
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	817b      	strh	r3, [r7, #10]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	813b      	strh	r3, [r7, #8]
 8006b52:	4613      	mov	r3, r2
 8006b54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b56:	f7fc fc31 	bl	80033bc <HAL_GetTick>
 8006b5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b20      	cmp	r3, #32
 8006b66:	f040 80d9 	bne.w	8006d1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	2319      	movs	r3, #25
 8006b70:	2201      	movs	r2, #1
 8006b72:	496d      	ldr	r1, [pc, #436]	@ (8006d28 <HAL_I2C_Mem_Write+0x1ec>)
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 fe49 	bl	800780c <I2C_WaitOnFlagUntilTimeout>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006b80:	2302      	movs	r3, #2
 8006b82:	e0cc      	b.n	8006d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d101      	bne.n	8006b92 <HAL_I2C_Mem_Write+0x56>
 8006b8e:	2302      	movs	r3, #2
 8006b90:	e0c5      	b.n	8006d1e <HAL_I2C_Mem_Write+0x1e2>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d007      	beq.n	8006bb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f042 0201 	orr.w	r2, r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2221      	movs	r2, #33	@ 0x21
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2240      	movs	r2, #64	@ 0x40
 8006bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a3a      	ldr	r2, [r7, #32]
 8006be2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4a4d      	ldr	r2, [pc, #308]	@ (8006d2c <HAL_I2C_Mem_Write+0x1f0>)
 8006bf8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bfa:	88f8      	ldrh	r0, [r7, #6]
 8006bfc:	893a      	ldrh	r2, [r7, #8]
 8006bfe:	8979      	ldrh	r1, [r7, #10]
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	9301      	str	r3, [sp, #4]
 8006c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	4603      	mov	r3, r0
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 fc80 	bl	8007510 <I2C_RequestMemoryWrite>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d052      	beq.n	8006cbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e081      	b.n	8006d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 ff0e 	bl	8007a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00d      	beq.n	8006c46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d107      	bne.n	8006c42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e06b      	b.n	8006d1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4a:	781a      	ldrb	r2, [r3, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	d11b      	bne.n	8006cbc <HAL_I2C_Mem_Write+0x180>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d017      	beq.n	8006cbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c90:	781a      	ldrb	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1aa      	bne.n	8006c1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 ff01 	bl	8007ad0 <I2C_WaitOnBTFFlagUntilTimeout>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00d      	beq.n	8006cf0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	d107      	bne.n	8006cec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e016      	b.n	8006d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e000      	b.n	8006d1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006d1c:	2302      	movs	r3, #2
  }
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3718      	adds	r7, #24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	00100002 	.word	0x00100002
 8006d2c:	ffff0000 	.word	0xffff0000

08006d30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08c      	sub	sp, #48	@ 0x30
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	4608      	mov	r0, r1
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4603      	mov	r3, r0
 8006d40:	817b      	strh	r3, [r7, #10]
 8006d42:	460b      	mov	r3, r1
 8006d44:	813b      	strh	r3, [r7, #8]
 8006d46:	4613      	mov	r3, r2
 8006d48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d4a:	f7fc fb37 	bl	80033bc <HAL_GetTick>
 8006d4e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b20      	cmp	r3, #32
 8006d5a:	f040 8214 	bne.w	8007186 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	2319      	movs	r3, #25
 8006d64:	2201      	movs	r2, #1
 8006d66:	497b      	ldr	r1, [pc, #492]	@ (8006f54 <HAL_I2C_Mem_Read+0x224>)
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f000 fd4f 	bl	800780c <I2C_WaitOnFlagUntilTimeout>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006d74:	2302      	movs	r3, #2
 8006d76:	e207      	b.n	8007188 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d101      	bne.n	8006d86 <HAL_I2C_Mem_Read+0x56>
 8006d82:	2302      	movs	r3, #2
 8006d84:	e200      	b.n	8007188 <HAL_I2C_Mem_Read+0x458>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d007      	beq.n	8006dac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f042 0201 	orr.w	r2, r2, #1
 8006daa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006dba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2222      	movs	r2, #34	@ 0x22
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2240      	movs	r2, #64	@ 0x40
 8006dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dd6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4a5b      	ldr	r2, [pc, #364]	@ (8006f58 <HAL_I2C_Mem_Read+0x228>)
 8006dec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006dee:	88f8      	ldrh	r0, [r7, #6]
 8006df0:	893a      	ldrh	r2, [r7, #8]
 8006df2:	8979      	ldrh	r1, [r7, #10]
 8006df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df6:	9301      	str	r3, [sp, #4]
 8006df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 fc1c 	bl	800763c <I2C_RequestMemoryRead>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e1bc      	b.n	8007188 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d113      	bne.n	8006e3e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e16:	2300      	movs	r3, #0
 8006e18:	623b      	str	r3, [r7, #32]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	623b      	str	r3, [r7, #32]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	623b      	str	r3, [r7, #32]
 8006e2a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	e190      	b.n	8007160 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d11b      	bne.n	8006e7e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e56:	2300      	movs	r3, #0
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	61fb      	str	r3, [r7, #28]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	61fb      	str	r3, [r7, #28]
 8006e6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	e170      	b.n	8007160 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d11b      	bne.n	8006ebe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e94:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ea4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	61bb      	str	r3, [r7, #24]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	61bb      	str	r3, [r7, #24]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	61bb      	str	r3, [r7, #24]
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	e150      	b.n	8007160 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006ed4:	e144      	b.n	8007160 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	f200 80f1 	bhi.w	80070c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d123      	bne.n	8006f30 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 fe37 	bl	8007b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e145      	b.n	8007188 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	691a      	ldr	r2, [r3, #16]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f2e:	e117      	b.n	8007160 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d14e      	bne.n	8006fd6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3e:	2200      	movs	r2, #0
 8006f40:	4906      	ldr	r1, [pc, #24]	@ (8006f5c <HAL_I2C_Mem_Read+0x22c>)
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 fc62 	bl	800780c <I2C_WaitOnFlagUntilTimeout>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d008      	beq.n	8006f60 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e11a      	b.n	8007188 <HAL_I2C_Mem_Read+0x458>
 8006f52:	bf00      	nop
 8006f54:	00100002 	.word	0x00100002
 8006f58:	ffff0000 	.word	0xffff0000
 8006f5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	691a      	ldr	r2, [r3, #16]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	691a      	ldr	r2, [r3, #16]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fac:	b2d2      	uxtb	r2, r2
 8006fae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006fd4:	e0c4      	b.n	8007160 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fdc:	2200      	movs	r2, #0
 8006fde:	496c      	ldr	r1, [pc, #432]	@ (8007190 <HAL_I2C_Mem_Read+0x460>)
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 fc13 	bl	800780c <I2C_WaitOnFlagUntilTimeout>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e0cb      	b.n	8007188 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ffe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	691a      	ldr	r2, [r3, #16]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700a:	b2d2      	uxtb	r2, r2
 800700c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007012:	1c5a      	adds	r2, r3, #1
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800701c:	3b01      	subs	r3, #1
 800701e:	b29a      	uxth	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007028:	b29b      	uxth	r3, r3
 800702a:	3b01      	subs	r3, #1
 800702c:	b29a      	uxth	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007038:	2200      	movs	r2, #0
 800703a:	4955      	ldr	r1, [pc, #340]	@ (8007190 <HAL_I2C_Mem_Read+0x460>)
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 fbe5 	bl	800780c <I2C_WaitOnFlagUntilTimeout>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e09d      	b.n	8007188 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800705a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	691a      	ldr	r2, [r3, #16]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007066:	b2d2      	uxtb	r2, r2
 8007068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800706e:	1c5a      	adds	r2, r3, #1
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007078:	3b01      	subs	r3, #1
 800707a:	b29a      	uxth	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007084:	b29b      	uxth	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b29a      	uxth	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691a      	ldr	r2, [r3, #16]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007098:	b2d2      	uxtb	r2, r2
 800709a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070aa:	3b01      	subs	r3, #1
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80070c0:	e04e      	b.n	8007160 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 fd4a 	bl	8007b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e058      	b.n	8007188 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	691a      	ldr	r2, [r3, #16]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070f2:	3b01      	subs	r3, #1
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070fe:	b29b      	uxth	r3, r3
 8007100:	3b01      	subs	r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	f003 0304 	and.w	r3, r3, #4
 8007112:	2b04      	cmp	r3, #4
 8007114:	d124      	bne.n	8007160 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800711a:	2b03      	cmp	r3, #3
 800711c:	d107      	bne.n	800712e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800712c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	691a      	ldr	r2, [r3, #16]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007138:	b2d2      	uxtb	r2, r2
 800713a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007140:	1c5a      	adds	r2, r3, #1
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800714a:	3b01      	subs	r3, #1
 800714c:	b29a      	uxth	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007156:	b29b      	uxth	r3, r3
 8007158:	3b01      	subs	r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007164:	2b00      	cmp	r3, #0
 8007166:	f47f aeb6 	bne.w	8006ed6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2220      	movs	r2, #32
 800716e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	e000      	b.n	8007188 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007186:	2302      	movs	r3, #2
  }
}
 8007188:	4618      	mov	r0, r3
 800718a:	3728      	adds	r7, #40	@ 0x28
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	00010004 	.word	0x00010004

08007194 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08a      	sub	sp, #40	@ 0x28
 8007198:	af02      	add	r7, sp, #8
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	607a      	str	r2, [r7, #4]
 800719e:	603b      	str	r3, [r7, #0]
 80071a0:	460b      	mov	r3, r1
 80071a2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80071a4:	f7fc f90a 	bl	80033bc <HAL_GetTick>
 80071a8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b20      	cmp	r3, #32
 80071b8:	f040 8111 	bne.w	80073de <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	2319      	movs	r3, #25
 80071c2:	2201      	movs	r2, #1
 80071c4:	4988      	ldr	r1, [pc, #544]	@ (80073e8 <HAL_I2C_IsDeviceReady+0x254>)
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f000 fb20 	bl	800780c <I2C_WaitOnFlagUntilTimeout>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d001      	beq.n	80071d6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80071d2:	2302      	movs	r3, #2
 80071d4:	e104      	b.n	80073e0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d101      	bne.n	80071e4 <HAL_I2C_IsDeviceReady+0x50>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e0fd      	b.n	80073e0 <HAL_I2C_IsDeviceReady+0x24c>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d007      	beq.n	800720a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f042 0201 	orr.w	r2, r2, #1
 8007208:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007218:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2224      	movs	r2, #36	@ 0x24
 800721e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4a70      	ldr	r2, [pc, #448]	@ (80073ec <HAL_I2C_IsDeviceReady+0x258>)
 800722c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800723c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2200      	movs	r2, #0
 8007246:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 fade 	bl	800780c <I2C_WaitOnFlagUntilTimeout>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00d      	beq.n	8007272 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007260:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007264:	d103      	bne.n	800726e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800726c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e0b6      	b.n	80073e0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007272:	897b      	ldrh	r3, [r7, #10]
 8007274:	b2db      	uxtb	r3, r3
 8007276:	461a      	mov	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007280:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007282:	f7fc f89b 	bl	80033bc <HAL_GetTick>
 8007286:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b02      	cmp	r3, #2
 8007294:	bf0c      	ite	eq
 8007296:	2301      	moveq	r3, #1
 8007298:	2300      	movne	r3, #0
 800729a:	b2db      	uxtb	r3, r3
 800729c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072ac:	bf0c      	ite	eq
 80072ae:	2301      	moveq	r3, #1
 80072b0:	2300      	movne	r3, #0
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80072b6:	e025      	b.n	8007304 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80072b8:	f7fc f880 	bl	80033bc <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d302      	bcc.n	80072ce <HAL_I2C_IsDeviceReady+0x13a>
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d103      	bne.n	80072d6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	22a0      	movs	r2, #160	@ 0xa0
 80072d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	bf0c      	ite	eq
 80072e4:	2301      	moveq	r3, #1
 80072e6:	2300      	movne	r3, #0
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072fa:	bf0c      	ite	eq
 80072fc:	2301      	moveq	r3, #1
 80072fe:	2300      	movne	r3, #0
 8007300:	b2db      	uxtb	r3, r3
 8007302:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2ba0      	cmp	r3, #160	@ 0xa0
 800730e:	d005      	beq.n	800731c <HAL_I2C_IsDeviceReady+0x188>
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d102      	bne.n	800731c <HAL_I2C_IsDeviceReady+0x188>
 8007316:	7dbb      	ldrb	r3, [r7, #22]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0cd      	beq.n	80072b8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2220      	movs	r2, #32
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b02      	cmp	r3, #2
 8007330:	d129      	bne.n	8007386 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007340:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007342:	2300      	movs	r3, #0
 8007344:	613b      	str	r3, [r7, #16]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	613b      	str	r3, [r7, #16]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	613b      	str	r3, [r7, #16]
 8007356:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	2319      	movs	r3, #25
 800735e:	2201      	movs	r2, #1
 8007360:	4921      	ldr	r1, [pc, #132]	@ (80073e8 <HAL_I2C_IsDeviceReady+0x254>)
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 fa52 	bl	800780c <I2C_WaitOnFlagUntilTimeout>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e036      	b.n	80073e0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2220      	movs	r2, #32
 8007376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	e02c      	b.n	80073e0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007394:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800739e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	2319      	movs	r3, #25
 80073a6:	2201      	movs	r2, #1
 80073a8:	490f      	ldr	r1, [pc, #60]	@ (80073e8 <HAL_I2C_IsDeviceReady+0x254>)
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f000 fa2e 	bl	800780c <I2C_WaitOnFlagUntilTimeout>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e012      	b.n	80073e0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	3301      	adds	r3, #1
 80073be:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	f4ff af32 	bcc.w	800722e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2220      	movs	r2, #32
 80073ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e000      	b.n	80073e0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80073de:	2302      	movs	r3, #2
  }
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3720      	adds	r7, #32
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	00100002 	.word	0x00100002
 80073ec:	ffff0000 	.word	0xffff0000

080073f0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073fe:	b2db      	uxtb	r3, r3
}
 8007400:	4618      	mov	r0, r3
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b088      	sub	sp, #32
 8007410:	af02      	add	r7, sp, #8
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	607a      	str	r2, [r7, #4]
 8007416:	603b      	str	r3, [r7, #0]
 8007418:	460b      	mov	r3, r1
 800741a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007420:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2b08      	cmp	r3, #8
 8007426:	d006      	beq.n	8007436 <I2C_MasterRequestWrite+0x2a>
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d003      	beq.n	8007436 <I2C_MasterRequestWrite+0x2a>
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007434:	d108      	bne.n	8007448 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007444:	601a      	str	r2, [r3, #0]
 8007446:	e00b      	b.n	8007460 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800744c:	2b12      	cmp	r3, #18
 800744e:	d107      	bne.n	8007460 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800745e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 f9cd 	bl	800780c <I2C_WaitOnFlagUntilTimeout>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00d      	beq.n	8007494 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007486:	d103      	bne.n	8007490 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800748e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	e035      	b.n	8007500 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800749c:	d108      	bne.n	80074b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800749e:	897b      	ldrh	r3, [r7, #10]
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	461a      	mov	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80074ac:	611a      	str	r2, [r3, #16]
 80074ae:	e01b      	b.n	80074e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80074b0:	897b      	ldrh	r3, [r7, #10]
 80074b2:	11db      	asrs	r3, r3, #7
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	f003 0306 	and.w	r3, r3, #6
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	f063 030f 	orn	r3, r3, #15
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	490e      	ldr	r1, [pc, #56]	@ (8007508 <I2C_MasterRequestWrite+0xfc>)
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 fa16 	bl	8007900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e010      	b.n	8007500 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80074de:	897b      	ldrh	r3, [r7, #10]
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	4907      	ldr	r1, [pc, #28]	@ (800750c <I2C_MasterRequestWrite+0x100>)
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 fa06 	bl	8007900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e000      	b.n	8007500 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3718      	adds	r7, #24
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	00010008 	.word	0x00010008
 800750c:	00010002 	.word	0x00010002

08007510 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af02      	add	r7, sp, #8
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	4608      	mov	r0, r1
 800751a:	4611      	mov	r1, r2
 800751c:	461a      	mov	r2, r3
 800751e:	4603      	mov	r3, r0
 8007520:	817b      	strh	r3, [r7, #10]
 8007522:	460b      	mov	r3, r1
 8007524:	813b      	strh	r3, [r7, #8]
 8007526:	4613      	mov	r3, r2
 8007528:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007538:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800753a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	2200      	movs	r2, #0
 8007542:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 f960 	bl	800780c <I2C_WaitOnFlagUntilTimeout>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00d      	beq.n	800756e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800755c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007560:	d103      	bne.n	800756a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007568:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e05f      	b.n	800762e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800756e:	897b      	ldrh	r3, [r7, #10]
 8007570:	b2db      	uxtb	r3, r3
 8007572:	461a      	mov	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800757c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800757e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007580:	6a3a      	ldr	r2, [r7, #32]
 8007582:	492d      	ldr	r1, [pc, #180]	@ (8007638 <I2C_RequestMemoryWrite+0x128>)
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 f9bb 	bl	8007900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e04c      	b.n	800762e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007594:	2300      	movs	r3, #0
 8007596:	617b      	str	r3, [r7, #20]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	617b      	str	r3, [r7, #20]
 80075a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ac:	6a39      	ldr	r1, [r7, #32]
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 fa46 	bl	8007a40 <I2C_WaitOnTXEFlagUntilTimeout>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00d      	beq.n	80075d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d107      	bne.n	80075d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e02b      	b.n	800762e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075d6:	88fb      	ldrh	r3, [r7, #6]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d105      	bne.n	80075e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075dc:	893b      	ldrh	r3, [r7, #8]
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	611a      	str	r2, [r3, #16]
 80075e6:	e021      	b.n	800762c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80075e8:	893b      	ldrh	r3, [r7, #8]
 80075ea:	0a1b      	lsrs	r3, r3, #8
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075f8:	6a39      	ldr	r1, [r7, #32]
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f000 fa20 	bl	8007a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00d      	beq.n	8007622 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760a:	2b04      	cmp	r3, #4
 800760c:	d107      	bne.n	800761e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800761c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e005      	b.n	800762e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007622:	893b      	ldrh	r3, [r7, #8]
 8007624:	b2da      	uxtb	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	00010002 	.word	0x00010002

0800763c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b088      	sub	sp, #32
 8007640:	af02      	add	r7, sp, #8
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	4608      	mov	r0, r1
 8007646:	4611      	mov	r1, r2
 8007648:	461a      	mov	r2, r3
 800764a:	4603      	mov	r3, r0
 800764c:	817b      	strh	r3, [r7, #10]
 800764e:	460b      	mov	r3, r1
 8007650:	813b      	strh	r3, [r7, #8]
 8007652:	4613      	mov	r3, r2
 8007654:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007664:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007674:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	2200      	movs	r2, #0
 800767e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 f8c2 	bl	800780c <I2C_WaitOnFlagUntilTimeout>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00d      	beq.n	80076aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007698:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800769c:	d103      	bne.n	80076a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e0aa      	b.n	8007800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076aa:	897b      	ldrh	r3, [r7, #10]
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	461a      	mov	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80076b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076bc:	6a3a      	ldr	r2, [r7, #32]
 80076be:	4952      	ldr	r1, [pc, #328]	@ (8007808 <I2C_RequestMemoryRead+0x1cc>)
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 f91d 	bl	8007900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e097      	b.n	8007800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076d0:	2300      	movs	r3, #0
 80076d2:	617b      	str	r3, [r7, #20]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	617b      	str	r3, [r7, #20]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076e8:	6a39      	ldr	r1, [r7, #32]
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 f9a8 	bl	8007a40 <I2C_WaitOnTXEFlagUntilTimeout>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00d      	beq.n	8007712 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076fa:	2b04      	cmp	r3, #4
 80076fc:	d107      	bne.n	800770e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800770c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e076      	b.n	8007800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007712:	88fb      	ldrh	r3, [r7, #6]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d105      	bne.n	8007724 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007718:	893b      	ldrh	r3, [r7, #8]
 800771a:	b2da      	uxtb	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	611a      	str	r2, [r3, #16]
 8007722:	e021      	b.n	8007768 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007724:	893b      	ldrh	r3, [r7, #8]
 8007726:	0a1b      	lsrs	r3, r3, #8
 8007728:	b29b      	uxth	r3, r3
 800772a:	b2da      	uxtb	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007734:	6a39      	ldr	r1, [r7, #32]
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 f982 	bl	8007a40 <I2C_WaitOnTXEFlagUntilTimeout>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00d      	beq.n	800775e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007746:	2b04      	cmp	r3, #4
 8007748:	d107      	bne.n	800775a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007758:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e050      	b.n	8007800 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800775e:	893b      	ldrh	r3, [r7, #8]
 8007760:	b2da      	uxtb	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800776a:	6a39      	ldr	r1, [r7, #32]
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 f967 	bl	8007a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00d      	beq.n	8007794 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777c:	2b04      	cmp	r3, #4
 800777e:	d107      	bne.n	8007790 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800778e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e035      	b.n	8007800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 f82b 	bl	800780c <I2C_WaitOnFlagUntilTimeout>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00d      	beq.n	80077d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ca:	d103      	bne.n	80077d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e013      	b.n	8007800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80077d8:	897b      	ldrh	r3, [r7, #10]
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	f043 0301 	orr.w	r3, r3, #1
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ea:	6a3a      	ldr	r2, [r7, #32]
 80077ec:	4906      	ldr	r1, [pc, #24]	@ (8007808 <I2C_RequestMemoryRead+0x1cc>)
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f000 f886 	bl	8007900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e000      	b.n	8007800 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	00010002 	.word	0x00010002

0800780c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	603b      	str	r3, [r7, #0]
 8007818:	4613      	mov	r3, r2
 800781a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800781c:	e048      	b.n	80078b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007824:	d044      	beq.n	80078b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007826:	f7fb fdc9 	bl	80033bc <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	429a      	cmp	r2, r3
 8007834:	d302      	bcc.n	800783c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d139      	bne.n	80078b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	0c1b      	lsrs	r3, r3, #16
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b01      	cmp	r3, #1
 8007844:	d10d      	bne.n	8007862 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	43da      	mvns	r2, r3
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	4013      	ands	r3, r2
 8007852:	b29b      	uxth	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	bf0c      	ite	eq
 8007858:	2301      	moveq	r3, #1
 800785a:	2300      	movne	r3, #0
 800785c:	b2db      	uxtb	r3, r3
 800785e:	461a      	mov	r2, r3
 8007860:	e00c      	b.n	800787c <I2C_WaitOnFlagUntilTimeout+0x70>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	43da      	mvns	r2, r3
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	4013      	ands	r3, r2
 800786e:	b29b      	uxth	r3, r3
 8007870:	2b00      	cmp	r3, #0
 8007872:	bf0c      	ite	eq
 8007874:	2301      	moveq	r3, #1
 8007876:	2300      	movne	r3, #0
 8007878:	b2db      	uxtb	r3, r3
 800787a:	461a      	mov	r2, r3
 800787c:	79fb      	ldrb	r3, [r7, #7]
 800787e:	429a      	cmp	r2, r3
 8007880:	d116      	bne.n	80078b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2220      	movs	r2, #32
 800788c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789c:	f043 0220 	orr.w	r2, r3, #32
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e023      	b.n	80078f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	0c1b      	lsrs	r3, r3, #16
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d10d      	bne.n	80078d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	43da      	mvns	r2, r3
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	4013      	ands	r3, r2
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	bf0c      	ite	eq
 80078cc:	2301      	moveq	r3, #1
 80078ce:	2300      	movne	r3, #0
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	461a      	mov	r2, r3
 80078d4:	e00c      	b.n	80078f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	43da      	mvns	r2, r3
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	4013      	ands	r3, r2
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	bf0c      	ite	eq
 80078e8:	2301      	moveq	r3, #1
 80078ea:	2300      	movne	r3, #0
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	461a      	mov	r2, r3
 80078f0:	79fb      	ldrb	r3, [r7, #7]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d093      	beq.n	800781e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
 800790c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800790e:	e071      	b.n	80079f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800791a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800791e:	d123      	bne.n	8007968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800792e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007938:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2220      	movs	r2, #32
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007954:	f043 0204 	orr.w	r2, r3, #4
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e067      	b.n	8007a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796e:	d041      	beq.n	80079f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007970:	f7fb fd24 	bl	80033bc <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	429a      	cmp	r2, r3
 800797e:	d302      	bcc.n	8007986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d136      	bne.n	80079f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	0c1b      	lsrs	r3, r3, #16
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b01      	cmp	r3, #1
 800798e:	d10c      	bne.n	80079aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	43da      	mvns	r2, r3
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	4013      	ands	r3, r2
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	bf14      	ite	ne
 80079a2:	2301      	movne	r3, #1
 80079a4:	2300      	moveq	r3, #0
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	e00b      	b.n	80079c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	43da      	mvns	r2, r3
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	4013      	ands	r3, r2
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	bf14      	ite	ne
 80079bc:	2301      	movne	r3, #1
 80079be:	2300      	moveq	r3, #0
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d016      	beq.n	80079f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2220      	movs	r2, #32
 80079d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e0:	f043 0220 	orr.w	r2, r3, #32
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e021      	b.n	8007a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	0c1b      	lsrs	r3, r3, #16
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d10c      	bne.n	8007a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	43da      	mvns	r2, r3
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	4013      	ands	r3, r2
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	bf14      	ite	ne
 8007a10:	2301      	movne	r3, #1
 8007a12:	2300      	moveq	r3, #0
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	e00b      	b.n	8007a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	43da      	mvns	r2, r3
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	4013      	ands	r3, r2
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	bf14      	ite	ne
 8007a2a:	2301      	movne	r3, #1
 8007a2c:	2300      	moveq	r3, #0
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f47f af6d 	bne.w	8007910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a4c:	e034      	b.n	8007ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 f8e3 	bl	8007c1a <I2C_IsAcknowledgeFailed>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e034      	b.n	8007ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a64:	d028      	beq.n	8007ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a66:	f7fb fca9 	bl	80033bc <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d302      	bcc.n	8007a7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d11d      	bne.n	8007ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a86:	2b80      	cmp	r3, #128	@ 0x80
 8007a88:	d016      	beq.n	8007ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2220      	movs	r2, #32
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa4:	f043 0220 	orr.w	r2, r3, #32
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e007      	b.n	8007ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ac2:	2b80      	cmp	r3, #128	@ 0x80
 8007ac4:	d1c3      	bne.n	8007a4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007adc:	e034      	b.n	8007b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 f89b 	bl	8007c1a <I2C_IsAcknowledgeFailed>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e034      	b.n	8007b58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af4:	d028      	beq.n	8007b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007af6:	f7fb fc61 	bl	80033bc <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d302      	bcc.n	8007b0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d11d      	bne.n	8007b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	f003 0304 	and.w	r3, r3, #4
 8007b16:	2b04      	cmp	r3, #4
 8007b18:	d016      	beq.n	8007b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2220      	movs	r2, #32
 8007b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b34:	f043 0220 	orr.w	r2, r3, #32
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e007      	b.n	8007b58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	f003 0304 	and.w	r3, r3, #4
 8007b52:	2b04      	cmp	r3, #4
 8007b54:	d1c3      	bne.n	8007ade <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b6c:	e049      	b.n	8007c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	f003 0310 	and.w	r3, r3, #16
 8007b78:	2b10      	cmp	r3, #16
 8007b7a:	d119      	bne.n	8007bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f06f 0210 	mvn.w	r2, #16
 8007b84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2220      	movs	r2, #32
 8007b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e030      	b.n	8007c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bb0:	f7fb fc04 	bl	80033bc <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d302      	bcc.n	8007bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d11d      	bne.n	8007c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd0:	2b40      	cmp	r3, #64	@ 0x40
 8007bd2:	d016      	beq.n	8007c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2220      	movs	r2, #32
 8007bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bee:	f043 0220 	orr.w	r2, r3, #32
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e007      	b.n	8007c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c0c:	2b40      	cmp	r3, #64	@ 0x40
 8007c0e:	d1ae      	bne.n	8007b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c30:	d11b      	bne.n	8007c6a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007c3a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2220      	movs	r2, #32
 8007c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c56:	f043 0204 	orr.w	r2, r3, #4
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e000      	b.n	8007c6c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b088      	sub	sp, #32
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e128      	b.n	8007edc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d109      	bne.n	8007caa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a90      	ldr	r2, [pc, #576]	@ (8007ee4 <HAL_I2S_Init+0x26c>)
 8007ca2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7fa ff6d 	bl	8002b84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2202      	movs	r2, #2
 8007cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	69db      	ldr	r3, [r3, #28]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	6812      	ldr	r2, [r2, #0]
 8007cbc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8007cc0:	f023 030f 	bic.w	r3, r3, #15
 8007cc4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d060      	beq.n	8007d98 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d102      	bne.n	8007ce4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007cde:	2310      	movs	r3, #16
 8007ce0:	617b      	str	r3, [r7, #20]
 8007ce2:	e001      	b.n	8007ce8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007ce4:	2320      	movs	r3, #32
 8007ce6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	2b20      	cmp	r3, #32
 8007cee:	d802      	bhi.n	8007cf6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	005b      	lsls	r3, r3, #1
 8007cf4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8007cf6:	2001      	movs	r0, #1
 8007cf8:	f001 fe10 	bl	800991c <HAL_RCCEx_GetPeriphCLKFreq>
 8007cfc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d06:	d125      	bne.n	8007d54 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d010      	beq.n	8007d32 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	005b      	lsls	r3, r3, #1
 8007d22:	461a      	mov	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d2c:	3305      	adds	r3, #5
 8007d2e:	613b      	str	r3, [r7, #16]
 8007d30:	e01f      	b.n	8007d72 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	00db      	lsls	r3, r3, #3
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	461a      	mov	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d4e:	3305      	adds	r3, #5
 8007d50:	613b      	str	r3, [r7, #16]
 8007d52:	e00e      	b.n	8007d72 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	461a      	mov	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6e:	3305      	adds	r3, #5
 8007d70:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	4a5c      	ldr	r2, [pc, #368]	@ (8007ee8 <HAL_I2S_Init+0x270>)
 8007d76:	fba2 2303 	umull	r2, r3, r2, r3
 8007d7a:	08db      	lsrs	r3, r3, #3
 8007d7c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	085b      	lsrs	r3, r3, #1
 8007d8e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	021b      	lsls	r3, r3, #8
 8007d94:	61bb      	str	r3, [r7, #24]
 8007d96:	e003      	b.n	8007da0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007d98:	2302      	movs	r3, #2
 8007d9a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d902      	bls.n	8007dac <HAL_I2S_Init+0x134>
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	2bff      	cmp	r3, #255	@ 0xff
 8007daa:	d907      	bls.n	8007dbc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007db0:	f043 0210 	orr.w	r2, r3, #16
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e08f      	b.n	8007edc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	691a      	ldr	r2, [r3, #16]
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	ea42 0103 	orr.w	r1, r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	69fa      	ldr	r2, [r7, #28]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8007dda:	f023 030f 	bic.w	r3, r3, #15
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	6851      	ldr	r1, [r2, #4]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	6892      	ldr	r2, [r2, #8]
 8007de6:	4311      	orrs	r1, r2
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	68d2      	ldr	r2, [r2, #12]
 8007dec:	4311      	orrs	r1, r2
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	6992      	ldr	r2, [r2, #24]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	431a      	orrs	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dfe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a1b      	ldr	r3, [r3, #32]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d161      	bne.n	8007ecc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a38      	ldr	r2, [pc, #224]	@ (8007eec <HAL_I2S_Init+0x274>)
 8007e0c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a37      	ldr	r2, [pc, #220]	@ (8007ef0 <HAL_I2S_Init+0x278>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d101      	bne.n	8007e1c <HAL_I2S_Init+0x1a4>
 8007e18:	4b36      	ldr	r3, [pc, #216]	@ (8007ef4 <HAL_I2S_Init+0x27c>)
 8007e1a:	e001      	b.n	8007e20 <HAL_I2S_Init+0x1a8>
 8007e1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	6812      	ldr	r2, [r2, #0]
 8007e26:	4932      	ldr	r1, [pc, #200]	@ (8007ef0 <HAL_I2S_Init+0x278>)
 8007e28:	428a      	cmp	r2, r1
 8007e2a:	d101      	bne.n	8007e30 <HAL_I2S_Init+0x1b8>
 8007e2c:	4a31      	ldr	r2, [pc, #196]	@ (8007ef4 <HAL_I2S_Init+0x27c>)
 8007e2e:	e001      	b.n	8007e34 <HAL_I2S_Init+0x1bc>
 8007e30:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8007e34:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8007e38:	f023 030f 	bic.w	r3, r3, #15
 8007e3c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a2b      	ldr	r2, [pc, #172]	@ (8007ef0 <HAL_I2S_Init+0x278>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d101      	bne.n	8007e4c <HAL_I2S_Init+0x1d4>
 8007e48:	4b2a      	ldr	r3, [pc, #168]	@ (8007ef4 <HAL_I2S_Init+0x27c>)
 8007e4a:	e001      	b.n	8007e50 <HAL_I2S_Init+0x1d8>
 8007e4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007e50:	2202      	movs	r2, #2
 8007e52:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a25      	ldr	r2, [pc, #148]	@ (8007ef0 <HAL_I2S_Init+0x278>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d101      	bne.n	8007e62 <HAL_I2S_Init+0x1ea>
 8007e5e:	4b25      	ldr	r3, [pc, #148]	@ (8007ef4 <HAL_I2S_Init+0x27c>)
 8007e60:	e001      	b.n	8007e66 <HAL_I2S_Init+0x1ee>
 8007e62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e72:	d003      	beq.n	8007e7c <HAL_I2S_Init+0x204>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d103      	bne.n	8007e84 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8007e7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007e80:	613b      	str	r3, [r7, #16]
 8007e82:	e001      	b.n	8007e88 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8007e84:	2300      	movs	r3, #0
 8007e86:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007e92:	4313      	orrs	r3, r2
 8007e94:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	897b      	ldrh	r3, [r7, #10]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007eb4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a0d      	ldr	r2, [pc, #52]	@ (8007ef0 <HAL_I2S_Init+0x278>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d101      	bne.n	8007ec4 <HAL_I2S_Init+0x24c>
 8007ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef4 <HAL_I2S_Init+0x27c>)
 8007ec2:	e001      	b.n	8007ec8 <HAL_I2S_Init+0x250>
 8007ec4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007ec8:	897a      	ldrh	r2, [r7, #10]
 8007eca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3720      	adds	r7, #32
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	08008775 	.word	0x08008775
 8007ee8:	cccccccd 	.word	0xcccccccd
 8007eec:	080088fd 	.word	0x080088fd
 8007ef0:	40003800 	.word	0x40003800
 8007ef4:	40003400 	.word	0x40003400

08007ef8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	4613      	mov	r3, r2
 8007f04:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <HAL_I2S_Transmit_DMA+0x1a>
 8007f0c:	88fb      	ldrh	r3, [r7, #6]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e08a      	b.n	800802c <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d001      	beq.n	8007f26 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8007f22:	2302      	movs	r3, #2
 8007f24:	e082      	b.n	800802c <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d101      	bne.n	8007f36 <HAL_I2S_Transmit_DMA+0x3e>
 8007f32:	2302      	movs	r3, #2
 8007f34:	e07a      	b.n	800802c <HAL_I2S_Transmit_DMA+0x134>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2203      	movs	r2, #3
 8007f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	f003 0307 	and.w	r3, r3, #7
 8007f5c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	d002      	beq.n	8007f6a <HAL_I2S_Transmit_DMA+0x72>
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	2b05      	cmp	r3, #5
 8007f68:	d10a      	bne.n	8007f80 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8007f6a:	88fb      	ldrh	r3, [r7, #6]
 8007f6c:	005b      	lsls	r3, r3, #1
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8007f74:	88fb      	ldrh	r3, [r7, #6]
 8007f76:	005b      	lsls	r3, r3, #1
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007f7e:	e005      	b.n	8007f8c <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	88fa      	ldrh	r2, [r7, #6]
 8007f84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	88fa      	ldrh	r2, [r7, #6]
 8007f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f90:	4a28      	ldr	r2, [pc, #160]	@ (8008034 <HAL_I2S_Transmit_DMA+0x13c>)
 8007f92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f98:	4a27      	ldr	r2, [pc, #156]	@ (8008038 <HAL_I2S_Transmit_DMA+0x140>)
 8007f9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa0:	4a26      	ldr	r2, [pc, #152]	@ (800803c <HAL_I2S_Transmit_DMA+0x144>)
 8007fa2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007fac:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007fb4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fba:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007fbc:	f7fb fc4c 	bl	8003858 <HAL_DMA_Start_IT>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00f      	beq.n	8007fe6 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fca:	f043 0208 	orr.w	r2, r3, #8
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e022      	b.n	800802c <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f003 0302 	and.w	r3, r3, #2
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d107      	bne.n	800800c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f042 0202 	orr.w	r2, r2, #2
 800800a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	69db      	ldr	r3, [r3, #28]
 8008012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008016:	2b00      	cmp	r3, #0
 8008018:	d107      	bne.n	800802a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	69da      	ldr	r2, [r3, #28]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008028:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3718      	adds	r7, #24
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	08008653 	.word	0x08008653
 8008038:	08008611 	.word	0x08008611
 800803c:	0800866f 	.word	0x0800866f

08008040 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b01      	cmp	r3, #1
 8008052:	d101      	bne.n	8008058 <HAL_I2S_DMAPause+0x18>
 8008054:	2302      	movs	r3, #2
 8008056:	e04a      	b.n	80080ee <HAL_I2S_DMAPause+0xae>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b03      	cmp	r3, #3
 800806a:	d108      	bne.n	800807e <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f022 0202 	bic.w	r2, r2, #2
 800807a:	605a      	str	r2, [r3, #4]
 800807c:	e032      	b.n	80080e4 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b04      	cmp	r3, #4
 8008088:	d108      	bne.n	800809c <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	685a      	ldr	r2, [r3, #4]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f022 0201 	bic.w	r2, r2, #1
 8008098:	605a      	str	r2, [r3, #4]
 800809a:	e023      	b.n	80080e4 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2b05      	cmp	r3, #5
 80080a6:	d11d      	bne.n	80080e4 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 0203 	bic.w	r2, r2, #3
 80080b6:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a0f      	ldr	r2, [pc, #60]	@ (80080fc <HAL_I2S_DMAPause+0xbc>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d101      	bne.n	80080c6 <HAL_I2S_DMAPause+0x86>
 80080c2:	4b0f      	ldr	r3, [pc, #60]	@ (8008100 <HAL_I2S_DMAPause+0xc0>)
 80080c4:	e001      	b.n	80080ca <HAL_I2S_DMAPause+0x8a>
 80080c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	490a      	ldr	r1, [pc, #40]	@ (80080fc <HAL_I2S_DMAPause+0xbc>)
 80080d2:	428b      	cmp	r3, r1
 80080d4:	d101      	bne.n	80080da <HAL_I2S_DMAPause+0x9a>
 80080d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008100 <HAL_I2S_DMAPause+0xc0>)
 80080d8:	e001      	b.n	80080de <HAL_I2S_DMAPause+0x9e>
 80080da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80080de:	f022 0203 	bic.w	r2, r2, #3
 80080e2:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	40003800 	.word	0x40003800
 8008100:	40003400 	.word	0x40003400

08008104 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b01      	cmp	r3, #1
 8008116:	d101      	bne.n	800811c <HAL_I2S_DMAResume+0x18>
 8008118:	2302      	movs	r3, #2
 800811a:	e07d      	b.n	8008218 <HAL_I2S_DMAResume+0x114>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b03      	cmp	r3, #3
 800812e:	d108      	bne.n	8008142 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685a      	ldr	r2, [r3, #4]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f042 0202 	orr.w	r2, r2, #2
 800813e:	605a      	str	r2, [r3, #4]
 8008140:	e056      	b.n	80081f0 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b04      	cmp	r3, #4
 800814c:	d108      	bne.n	8008160 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f042 0201 	orr.w	r2, r2, #1
 800815c:	605a      	str	r2, [r3, #4]
 800815e:	e047      	b.n	80081f0 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b05      	cmp	r3, #5
 800816a:	d141      	bne.n	80081f0 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	685a      	ldr	r2, [r3, #4]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f042 0203 	orr.w	r2, r2, #3
 800817a:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a28      	ldr	r2, [pc, #160]	@ (8008224 <HAL_I2S_DMAResume+0x120>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d101      	bne.n	800818a <HAL_I2S_DMAResume+0x86>
 8008186:	4b28      	ldr	r3, [pc, #160]	@ (8008228 <HAL_I2S_DMAResume+0x124>)
 8008188:	e001      	b.n	800818e <HAL_I2S_DMAResume+0x8a>
 800818a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4923      	ldr	r1, [pc, #140]	@ (8008224 <HAL_I2S_DMAResume+0x120>)
 8008196:	428b      	cmp	r3, r1
 8008198:	d101      	bne.n	800819e <HAL_I2S_DMAResume+0x9a>
 800819a:	4b23      	ldr	r3, [pc, #140]	@ (8008228 <HAL_I2S_DMAResume+0x124>)
 800819c:	e001      	b.n	80081a2 <HAL_I2S_DMAResume+0x9e>
 800819e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80081a2:	f042 0203 	orr.w	r2, r2, #3
 80081a6:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008224 <HAL_I2S_DMAResume+0x120>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d101      	bne.n	80081b6 <HAL_I2S_DMAResume+0xb2>
 80081b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008228 <HAL_I2S_DMAResume+0x124>)
 80081b4:	e001      	b.n	80081ba <HAL_I2S_DMAResume+0xb6>
 80081b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80081ba:	69db      	ldr	r3, [r3, #28]
 80081bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d115      	bne.n	80081f0 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a16      	ldr	r2, [pc, #88]	@ (8008224 <HAL_I2S_DMAResume+0x120>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d101      	bne.n	80081d2 <HAL_I2S_DMAResume+0xce>
 80081ce:	4b16      	ldr	r3, [pc, #88]	@ (8008228 <HAL_I2S_DMAResume+0x124>)
 80081d0:	e001      	b.n	80081d6 <HAL_I2S_DMAResume+0xd2>
 80081d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80081d6:	69da      	ldr	r2, [r3, #28]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4911      	ldr	r1, [pc, #68]	@ (8008224 <HAL_I2S_DMAResume+0x120>)
 80081de:	428b      	cmp	r3, r1
 80081e0:	d101      	bne.n	80081e6 <HAL_I2S_DMAResume+0xe2>
 80081e2:	4b11      	ldr	r3, [pc, #68]	@ (8008228 <HAL_I2S_DMAResume+0x124>)
 80081e4:	e001      	b.n	80081ea <HAL_I2S_DMAResume+0xe6>
 80081e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80081ea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80081ee:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d107      	bne.n	800820e <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	69da      	ldr	r2, [r3, #28]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800820c:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr
 8008224:	40003800 	.word	0x40003800
 8008228:	40003400 	.word	0x40003400

0800822c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b088      	sub	sp, #32
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008240:	d004      	beq.n	800824c <HAL_I2S_DMAStop+0x20>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	f040 80d1 	bne.w	80083ee <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00f      	beq.n	8008274 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008258:	4618      	mov	r0, r3
 800825a:	f7fb fb55 	bl	8003908 <HAL_DMA_Abort>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d007      	beq.n	8008274 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008268:	f043 0208 	orr.w	r2, r3, #8
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8008274:	2364      	movs	r3, #100	@ 0x64
 8008276:	2201      	movs	r2, #1
 8008278:	2102      	movs	r1, #2
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fb04 	bl	8008888 <I2S_WaitFlagStateUntilTimeout>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00b      	beq.n	800829e <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800828a:	f043 0201 	orr.w	r2, r3, #1
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800829e:	2364      	movs	r3, #100	@ 0x64
 80082a0:	2200      	movs	r2, #0
 80082a2:	2180      	movs	r1, #128	@ 0x80
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 faef 	bl	8008888 <I2S_WaitFlagStateUntilTimeout>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00b      	beq.n	80082c8 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082b4:	f043 0201 	orr.w	r2, r3, #1
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	69da      	ldr	r2, [r3, #28]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082d6:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80082d8:	2300      	movs	r3, #0
 80082da:	617b      	str	r3, [r7, #20]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	617b      	str	r3, [r7, #20]
 80082e4:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 0202 	bic.w	r2, r2, #2
 80082f4:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b05      	cmp	r3, #5
 8008300:	f040 8165 	bne.w	80085ce <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00f      	beq.n	800832c <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008310:	4618      	mov	r0, r3
 8008312:	f7fb faf9 	bl	8003908 <HAL_DMA_Abort>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d007      	beq.n	800832c <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008320:	f043 0208 	orr.w	r2, r3, #8
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a8a      	ldr	r2, [pc, #552]	@ (800855c <HAL_I2S_DMAStop+0x330>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d101      	bne.n	800833a <HAL_I2S_DMAStop+0x10e>
 8008336:	4b8a      	ldr	r3, [pc, #552]	@ (8008560 <HAL_I2S_DMAStop+0x334>)
 8008338:	e001      	b.n	800833e <HAL_I2S_DMAStop+0x112>
 800833a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800833e:	69da      	ldr	r2, [r3, #28]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4985      	ldr	r1, [pc, #532]	@ (800855c <HAL_I2S_DMAStop+0x330>)
 8008346:	428b      	cmp	r3, r1
 8008348:	d101      	bne.n	800834e <HAL_I2S_DMAStop+0x122>
 800834a:	4b85      	ldr	r3, [pc, #532]	@ (8008560 <HAL_I2S_DMAStop+0x334>)
 800834c:	e001      	b.n	8008352 <HAL_I2S_DMAStop+0x126>
 800834e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008352:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008356:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8008358:	2300      	movs	r3, #0
 800835a:	613b      	str	r3, [r7, #16]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a7e      	ldr	r2, [pc, #504]	@ (800855c <HAL_I2S_DMAStop+0x330>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d101      	bne.n	800836a <HAL_I2S_DMAStop+0x13e>
 8008366:	4b7e      	ldr	r3, [pc, #504]	@ (8008560 <HAL_I2S_DMAStop+0x334>)
 8008368:	e001      	b.n	800836e <HAL_I2S_DMAStop+0x142>
 800836a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	613b      	str	r3, [r7, #16]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a79      	ldr	r2, [pc, #484]	@ (800855c <HAL_I2S_DMAStop+0x330>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d101      	bne.n	8008380 <HAL_I2S_DMAStop+0x154>
 800837c:	4b78      	ldr	r3, [pc, #480]	@ (8008560 <HAL_I2S_DMAStop+0x334>)
 800837e:	e001      	b.n	8008384 <HAL_I2S_DMAStop+0x158>
 8008380:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	613b      	str	r3, [r7, #16]
 8008388:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a73      	ldr	r2, [pc, #460]	@ (800855c <HAL_I2S_DMAStop+0x330>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d101      	bne.n	8008398 <HAL_I2S_DMAStop+0x16c>
 8008394:	4b72      	ldr	r3, [pc, #456]	@ (8008560 <HAL_I2S_DMAStop+0x334>)
 8008396:	e001      	b.n	800839c <HAL_I2S_DMAStop+0x170>
 8008398:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	496e      	ldr	r1, [pc, #440]	@ (800855c <HAL_I2S_DMAStop+0x330>)
 80083a4:	428b      	cmp	r3, r1
 80083a6:	d101      	bne.n	80083ac <HAL_I2S_DMAStop+0x180>
 80083a8:	4b6d      	ldr	r3, [pc, #436]	@ (8008560 <HAL_I2S_DMAStop+0x334>)
 80083aa:	e001      	b.n	80083b0 <HAL_I2S_DMAStop+0x184>
 80083ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80083b0:	f022 0201 	bic.w	r2, r2, #1
 80083b4:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10c      	bne.n	80083d8 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80083d6:	e0fa      	b.n	80085ce <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a5f      	ldr	r2, [pc, #380]	@ (800855c <HAL_I2S_DMAStop+0x330>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d101      	bne.n	80083e6 <HAL_I2S_DMAStop+0x1ba>
 80083e2:	4b5f      	ldr	r3, [pc, #380]	@ (8008560 <HAL_I2S_DMAStop+0x334>)
 80083e4:	e001      	b.n	80083ea <HAL_I2S_DMAStop+0x1be>
 80083e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80083ea:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80083ec:	e0ef      	b.n	80085ce <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083f6:	d005      	beq.n	8008404 <HAL_I2S_DMAStop+0x1d8>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008400:	f040 80e5 	bne.w	80085ce <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00f      	beq.n	800842c <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008410:	4618      	mov	r0, r3
 8008412:	f7fb fa79 	bl	8003908 <HAL_DMA_Abort>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d007      	beq.n	800842c <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008420:	f043 0208 	orr.w	r2, r3, #8
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008432:	b2db      	uxtb	r3, r3
 8008434:	2b05      	cmp	r3, #5
 8008436:	f040 809a 	bne.w	800856e <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00f      	beq.n	8008462 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008446:	4618      	mov	r0, r3
 8008448:	f7fb fa5e 	bl	8003908 <HAL_DMA_Abort>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d007      	beq.n	8008462 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008456:	f043 0208 	orr.w	r2, r3, #8
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8008462:	f7fa ffab 	bl	80033bc <HAL_GetTick>
 8008466:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8008468:	e012      	b.n	8008490 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800846a:	f7fa ffa7 	bl	80033bc <HAL_GetTick>
 800846e:	4602      	mov	r2, r0
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	2b64      	cmp	r3, #100	@ 0x64
 8008476:	d90b      	bls.n	8008490 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800847c:	f043 0201 	orr.w	r2, r3, #1
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a31      	ldr	r2, [pc, #196]	@ (800855c <HAL_I2S_DMAStop+0x330>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d101      	bne.n	800849e <HAL_I2S_DMAStop+0x272>
 800849a:	4b31      	ldr	r3, [pc, #196]	@ (8008560 <HAL_I2S_DMAStop+0x334>)
 800849c:	e001      	b.n	80084a2 <HAL_I2S_DMAStop+0x276>
 800849e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	f003 0302 	and.w	r3, r3, #2
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d1de      	bne.n	800846a <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80084ac:	e012      	b.n	80084d4 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80084ae:	f7fa ff85 	bl	80033bc <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	2b64      	cmp	r3, #100	@ 0x64
 80084ba:	d90b      	bls.n	80084d4 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084c0:	f043 0201 	orr.w	r2, r3, #1
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a20      	ldr	r2, [pc, #128]	@ (800855c <HAL_I2S_DMAStop+0x330>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d101      	bne.n	80084e2 <HAL_I2S_DMAStop+0x2b6>
 80084de:	4b20      	ldr	r3, [pc, #128]	@ (8008560 <HAL_I2S_DMAStop+0x334>)
 80084e0:	e001      	b.n	80084e6 <HAL_I2S_DMAStop+0x2ba>
 80084e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084ec:	2b80      	cmp	r3, #128	@ 0x80
 80084ee:	d0de      	beq.n	80084ae <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a19      	ldr	r2, [pc, #100]	@ (800855c <HAL_I2S_DMAStop+0x330>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d101      	bne.n	80084fe <HAL_I2S_DMAStop+0x2d2>
 80084fa:	4b19      	ldr	r3, [pc, #100]	@ (8008560 <HAL_I2S_DMAStop+0x334>)
 80084fc:	e001      	b.n	8008502 <HAL_I2S_DMAStop+0x2d6>
 80084fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008502:	69da      	ldr	r2, [r3, #28]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4914      	ldr	r1, [pc, #80]	@ (800855c <HAL_I2S_DMAStop+0x330>)
 800850a:	428b      	cmp	r3, r1
 800850c:	d101      	bne.n	8008512 <HAL_I2S_DMAStop+0x2e6>
 800850e:	4b14      	ldr	r3, [pc, #80]	@ (8008560 <HAL_I2S_DMAStop+0x334>)
 8008510:	e001      	b.n	8008516 <HAL_I2S_DMAStop+0x2ea>
 8008512:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008516:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800851a:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 800851c:	2300      	movs	r3, #0
 800851e:	60fb      	str	r3, [r7, #12]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a0d      	ldr	r2, [pc, #52]	@ (800855c <HAL_I2S_DMAStop+0x330>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d101      	bne.n	800852e <HAL_I2S_DMAStop+0x302>
 800852a:	4b0d      	ldr	r3, [pc, #52]	@ (8008560 <HAL_I2S_DMAStop+0x334>)
 800852c:	e001      	b.n	8008532 <HAL_I2S_DMAStop+0x306>
 800852e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	60fb      	str	r3, [r7, #12]
 8008536:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a07      	ldr	r2, [pc, #28]	@ (800855c <HAL_I2S_DMAStop+0x330>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d101      	bne.n	8008546 <HAL_I2S_DMAStop+0x31a>
 8008542:	4b07      	ldr	r3, [pc, #28]	@ (8008560 <HAL_I2S_DMAStop+0x334>)
 8008544:	e001      	b.n	800854a <HAL_I2S_DMAStop+0x31e>
 8008546:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4902      	ldr	r1, [pc, #8]	@ (800855c <HAL_I2S_DMAStop+0x330>)
 8008552:	428b      	cmp	r3, r1
 8008554:	d106      	bne.n	8008564 <HAL_I2S_DMAStop+0x338>
 8008556:	4b02      	ldr	r3, [pc, #8]	@ (8008560 <HAL_I2S_DMAStop+0x334>)
 8008558:	e006      	b.n	8008568 <HAL_I2S_DMAStop+0x33c>
 800855a:	bf00      	nop
 800855c:	40003800 	.word	0x40003800
 8008560:	40003400 	.word	0x40003400
 8008564:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008568:	f022 0202 	bic.w	r2, r2, #2
 800856c:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	69da      	ldr	r2, [r3, #28]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800857c:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800857e:	2300      	movs	r3, #0
 8008580:	60bb      	str	r3, [r7, #8]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	60bb      	str	r3, [r7, #8]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	60bb      	str	r3, [r7, #8]
 8008592:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	685a      	ldr	r2, [r3, #4]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f022 0201 	bic.w	r2, r2, #1
 80085a2:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085ac:	d10c      	bne.n	80085c8 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	77fb      	strb	r3, [r7, #31]
 80085c6:	e002      	b.n	80085ce <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 80085d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3720      	adds	r7, #32
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008602:	b2db      	uxtb	r3, r3
}
 8008604:	4618      	mov	r0, r3
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800861c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10e      	bne.n	8008644 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f022 0202 	bic.w	r2, r2, #2
 8008634:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2200      	movs	r2, #0
 800863a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f7f8 f82b 	bl	80006a0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800864a:	bf00      	nop
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800865e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f7f8 f82f 	bl	80006c4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008666:	bf00      	nop
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800867a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f022 0203 	bic.w	r2, r2, #3
 800868a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086a4:	f043 0208 	orr.w	r2, r3, #8
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7f8 f979 	bl	80009a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80086b2:	bf00      	nop
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b082      	sub	sp, #8
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c6:	881a      	ldrh	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d2:	1c9a      	adds	r2, r3, #2
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086dc:	b29b      	uxth	r3, r3
 80086de:	3b01      	subs	r3, #1
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10e      	bne.n	800870e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80086fe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7f7 ffc9 	bl	80006a0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800870e:	bf00      	nop
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b082      	sub	sp, #8
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68da      	ldr	r2, [r3, #12]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008728:	b292      	uxth	r2, r2
 800872a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008730:	1c9a      	adds	r2, r3, #2
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800873a:	b29b      	uxth	r3, r3
 800873c:	3b01      	subs	r3, #1
 800873e:	b29a      	uxth	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008748:	b29b      	uxth	r3, r3
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10e      	bne.n	800876c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800875c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7ff ff3a 	bl	80085e0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800876c:	bf00      	nop
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800878a:	b2db      	uxtb	r3, r3
 800878c:	2b04      	cmp	r3, #4
 800878e:	d13a      	bne.n	8008806 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b01      	cmp	r3, #1
 8008798:	d109      	bne.n	80087ae <I2S_IRQHandler+0x3a>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087a4:	2b40      	cmp	r3, #64	@ 0x40
 80087a6:	d102      	bne.n	80087ae <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7ff ffb4 	bl	8008716 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087b4:	2b40      	cmp	r3, #64	@ 0x40
 80087b6:	d126      	bne.n	8008806 <I2S_IRQHandler+0x92>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f003 0320 	and.w	r3, r3, #32
 80087c2:	2b20      	cmp	r3, #32
 80087c4:	d11f      	bne.n	8008806 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80087d4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80087d6:	2300      	movs	r3, #0
 80087d8:	613b      	str	r3, [r7, #16]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	613b      	str	r3, [r7, #16]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	613b      	str	r3, [r7, #16]
 80087ea:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087f8:	f043 0202 	orr.w	r2, r3, #2
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7f8 f8cf 	bl	80009a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b03      	cmp	r3, #3
 8008810:	d136      	bne.n	8008880 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	f003 0302 	and.w	r3, r3, #2
 8008818:	2b02      	cmp	r3, #2
 800881a:	d109      	bne.n	8008830 <I2S_IRQHandler+0xbc>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008826:	2b80      	cmp	r3, #128	@ 0x80
 8008828:	d102      	bne.n	8008830 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff ff45 	bl	80086ba <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	f003 0308 	and.w	r3, r3, #8
 8008836:	2b08      	cmp	r3, #8
 8008838:	d122      	bne.n	8008880 <I2S_IRQHandler+0x10c>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f003 0320 	and.w	r3, r3, #32
 8008844:	2b20      	cmp	r3, #32
 8008846:	d11b      	bne.n	8008880 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	685a      	ldr	r2, [r3, #4]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008856:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008858:	2300      	movs	r3, #0
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	60fb      	str	r3, [r7, #12]
 8008864:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008872:	f043 0204 	orr.w	r2, r3, #4
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7f8 f892 	bl	80009a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008880:	bf00      	nop
 8008882:	3718      	adds	r7, #24
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	603b      	str	r3, [r7, #0]
 8008894:	4613      	mov	r3, r2
 8008896:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8008898:	f7fa fd90 	bl	80033bc <HAL_GetTick>
 800889c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800889e:	e018      	b.n	80088d2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a6:	d014      	beq.n	80088d2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80088a8:	f7fa fd88 	bl	80033bc <HAL_GetTick>
 80088ac:	4602      	mov	r2, r0
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d902      	bls.n	80088be <I2S_WaitFlagStateUntilTimeout+0x36>
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d109      	bne.n	80088d2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e00f      	b.n	80088f2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	689a      	ldr	r2, [r3, #8]
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	4013      	ands	r3, r2
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	429a      	cmp	r2, r3
 80088e0:	bf0c      	ite	eq
 80088e2:	2301      	moveq	r3, #1
 80088e4:	2300      	movne	r3, #0
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	461a      	mov	r2, r3
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d1d7      	bne.n	80088a0 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3718      	adds	r7, #24
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
	...

080088fc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b088      	sub	sp, #32
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a92      	ldr	r2, [pc, #584]	@ (8008b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d101      	bne.n	800891a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8008916:	4b92      	ldr	r3, [pc, #584]	@ (8008b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008918:	e001      	b.n	800891e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800891a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a8b      	ldr	r2, [pc, #556]	@ (8008b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d101      	bne.n	8008938 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8008934:	4b8a      	ldr	r3, [pc, #552]	@ (8008b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008936:	e001      	b.n	800893c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8008938:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008948:	d004      	beq.n	8008954 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	f040 8099 	bne.w	8008a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	f003 0302 	and.w	r3, r3, #2
 800895a:	2b02      	cmp	r3, #2
 800895c:	d107      	bne.n	800896e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008964:	2b00      	cmp	r3, #0
 8008966:	d002      	beq.n	800896e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f925 	bl	8008bb8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	f003 0301 	and.w	r3, r3, #1
 8008974:	2b01      	cmp	r3, #1
 8008976:	d107      	bne.n	8008988 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800897e:	2b00      	cmp	r3, #0
 8008980:	d002      	beq.n	8008988 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f9c8 	bl	8008d18 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800898e:	2b40      	cmp	r3, #64	@ 0x40
 8008990:	d13a      	bne.n	8008a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f003 0320 	and.w	r3, r3, #32
 8008998:	2b00      	cmp	r3, #0
 800899a:	d035      	beq.n	8008a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a6e      	ldr	r2, [pc, #440]	@ (8008b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d101      	bne.n	80089aa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80089a6:	4b6e      	ldr	r3, [pc, #440]	@ (8008b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80089a8:	e001      	b.n	80089ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80089aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80089ae:	685a      	ldr	r2, [r3, #4]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4969      	ldr	r1, [pc, #420]	@ (8008b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80089b6:	428b      	cmp	r3, r1
 80089b8:	d101      	bne.n	80089be <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80089ba:	4b69      	ldr	r3, [pc, #420]	@ (8008b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80089bc:	e001      	b.n	80089c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80089be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80089c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80089c6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80089d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80089d8:	2300      	movs	r3, #0
 80089da:	60fb      	str	r3, [r7, #12]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	60fb      	str	r3, [r7, #12]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089fa:	f043 0202 	orr.w	r2, r3, #2
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7f7 ffce 	bl	80009a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	2b08      	cmp	r3, #8
 8008a10:	f040 80c3 	bne.w	8008b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f003 0320 	and.w	r3, r3, #32
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f000 80bd 	beq.w	8008b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685a      	ldr	r2, [r3, #4]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008a2e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a49      	ldr	r2, [pc, #292]	@ (8008b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d101      	bne.n	8008a3e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8008a3a:	4b49      	ldr	r3, [pc, #292]	@ (8008b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008a3c:	e001      	b.n	8008a42 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8008a3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008a42:	685a      	ldr	r2, [r3, #4]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4944      	ldr	r1, [pc, #272]	@ (8008b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008a4a:	428b      	cmp	r3, r1
 8008a4c:	d101      	bne.n	8008a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8008a4e:	4b44      	ldr	r3, [pc, #272]	@ (8008b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008a50:	e001      	b.n	8008a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8008a52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008a56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008a5a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	60bb      	str	r3, [r7, #8]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	60bb      	str	r3, [r7, #8]
 8008a68:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a76:	f043 0204 	orr.w	r2, r3, #4
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7f7 ff90 	bl	80009a4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008a84:	e089      	b.n	8008b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	f003 0302 	and.w	r3, r3, #2
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d107      	bne.n	8008aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f8be 	bl	8008c1c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d107      	bne.n	8008aba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f8fd 	bl	8008cb4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ac0:	2b40      	cmp	r3, #64	@ 0x40
 8008ac2:	d12f      	bne.n	8008b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	f003 0320 	and.w	r3, r3, #32
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d02a      	beq.n	8008b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	685a      	ldr	r2, [r3, #4]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008adc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8008b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d101      	bne.n	8008aec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8008ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8008b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008aea:	e001      	b.n	8008af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8008aec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4919      	ldr	r1, [pc, #100]	@ (8008b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008af8:	428b      	cmp	r3, r1
 8008afa:	d101      	bne.n	8008b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8008afc:	4b18      	ldr	r3, [pc, #96]	@ (8008b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008afe:	e001      	b.n	8008b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8008b00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008b04:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008b08:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b16:	f043 0202 	orr.w	r2, r3, #2
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f7f7 ff40 	bl	80009a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	f003 0308 	and.w	r3, r3, #8
 8008b2a:	2b08      	cmp	r3, #8
 8008b2c:	d136      	bne.n	8008b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f003 0320 	and.w	r3, r3, #32
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d031      	beq.n	8008b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a07      	ldr	r2, [pc, #28]	@ (8008b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d101      	bne.n	8008b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8008b42:	4b07      	ldr	r3, [pc, #28]	@ (8008b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008b44:	e001      	b.n	8008b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8008b46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4902      	ldr	r1, [pc, #8]	@ (8008b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008b52:	428b      	cmp	r3, r1
 8008b54:	d106      	bne.n	8008b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8008b56:	4b02      	ldr	r3, [pc, #8]	@ (8008b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008b58:	e006      	b.n	8008b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8008b5a:	bf00      	nop
 8008b5c:	40003800 	.word	0x40003800
 8008b60:	40003400 	.word	0x40003400
 8008b64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008b68:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008b6c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	685a      	ldr	r2, [r3, #4]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008b7c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b8a:	f043 0204 	orr.w	r2, r3, #4
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7f7 ff06 	bl	80009a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008b98:	e000      	b.n	8008b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008b9a:	bf00      	nop
}
 8008b9c:	bf00      	nop
 8008b9e:	3720      	adds	r7, #32
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc4:	1c99      	adds	r1, r3, #2
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	6251      	str	r1, [r2, #36]	@ 0x24
 8008bca:	881a      	ldrh	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d113      	bne.n	8008c12 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	685a      	ldr	r2, [r3, #4]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008bf8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d106      	bne.n	8008c12 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7ff ffc9 	bl	8008ba4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008c12:	bf00      	nop
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
	...

08008c1c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c28:	1c99      	adds	r1, r3, #2
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	6251      	str	r1, [r2, #36]	@ 0x24
 8008c2e:	8819      	ldrh	r1, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a1d      	ldr	r2, [pc, #116]	@ (8008cac <I2SEx_TxISR_I2SExt+0x90>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d101      	bne.n	8008c3e <I2SEx_TxISR_I2SExt+0x22>
 8008c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8008cb0 <I2SEx_TxISR_I2SExt+0x94>)
 8008c3c:	e001      	b.n	8008c42 <I2SEx_TxISR_I2SExt+0x26>
 8008c3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008c42:	460a      	mov	r2, r1
 8008c44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d121      	bne.n	8008ca2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a12      	ldr	r2, [pc, #72]	@ (8008cac <I2SEx_TxISR_I2SExt+0x90>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d101      	bne.n	8008c6c <I2SEx_TxISR_I2SExt+0x50>
 8008c68:	4b11      	ldr	r3, [pc, #68]	@ (8008cb0 <I2SEx_TxISR_I2SExt+0x94>)
 8008c6a:	e001      	b.n	8008c70 <I2SEx_TxISR_I2SExt+0x54>
 8008c6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	490d      	ldr	r1, [pc, #52]	@ (8008cac <I2SEx_TxISR_I2SExt+0x90>)
 8008c78:	428b      	cmp	r3, r1
 8008c7a:	d101      	bne.n	8008c80 <I2SEx_TxISR_I2SExt+0x64>
 8008c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8008cb0 <I2SEx_TxISR_I2SExt+0x94>)
 8008c7e:	e001      	b.n	8008c84 <I2SEx_TxISR_I2SExt+0x68>
 8008c80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008c84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008c88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d106      	bne.n	8008ca2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7ff ff81 	bl	8008ba4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008ca2:	bf00      	nop
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	40003800 	.word	0x40003800
 8008cb0:	40003400 	.word	0x40003400

08008cb4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68d8      	ldr	r0, [r3, #12]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc6:	1c99      	adds	r1, r3, #2
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8008ccc:	b282      	uxth	r2, r0
 8008cce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d113      	bne.n	8008d10 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008cf6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d106      	bne.n	8008d10 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7ff ff4a 	bl	8008ba4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008d10:	bf00      	nop
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a20      	ldr	r2, [pc, #128]	@ (8008da8 <I2SEx_RxISR_I2SExt+0x90>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d101      	bne.n	8008d2e <I2SEx_RxISR_I2SExt+0x16>
 8008d2a:	4b20      	ldr	r3, [pc, #128]	@ (8008dac <I2SEx_RxISR_I2SExt+0x94>)
 8008d2c:	e001      	b.n	8008d32 <I2SEx_RxISR_I2SExt+0x1a>
 8008d2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008d32:	68d8      	ldr	r0, [r3, #12]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d38:	1c99      	adds	r1, r3, #2
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8008d3e:	b282      	uxth	r2, r0
 8008d40:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d121      	bne.n	8008d9e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a12      	ldr	r2, [pc, #72]	@ (8008da8 <I2SEx_RxISR_I2SExt+0x90>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d101      	bne.n	8008d68 <I2SEx_RxISR_I2SExt+0x50>
 8008d64:	4b11      	ldr	r3, [pc, #68]	@ (8008dac <I2SEx_RxISR_I2SExt+0x94>)
 8008d66:	e001      	b.n	8008d6c <I2SEx_RxISR_I2SExt+0x54>
 8008d68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	490d      	ldr	r1, [pc, #52]	@ (8008da8 <I2SEx_RxISR_I2SExt+0x90>)
 8008d74:	428b      	cmp	r3, r1
 8008d76:	d101      	bne.n	8008d7c <I2SEx_RxISR_I2SExt+0x64>
 8008d78:	4b0c      	ldr	r3, [pc, #48]	@ (8008dac <I2SEx_RxISR_I2SExt+0x94>)
 8008d7a:	e001      	b.n	8008d80 <I2SEx_RxISR_I2SExt+0x68>
 8008d7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008d80:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008d84:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d106      	bne.n	8008d9e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7ff ff03 	bl	8008ba4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008d9e:	bf00      	nop
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	40003800 	.word	0x40003800
 8008dac:	40003400 	.word	0x40003400

08008db0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d101      	bne.n	8008dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e267      	b.n	8009292 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d075      	beq.n	8008eba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008dce:	4b88      	ldr	r3, [pc, #544]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	f003 030c 	and.w	r3, r3, #12
 8008dd6:	2b04      	cmp	r3, #4
 8008dd8:	d00c      	beq.n	8008df4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008dda:	4b85      	ldr	r3, [pc, #532]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008de2:	2b08      	cmp	r3, #8
 8008de4:	d112      	bne.n	8008e0c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008de6:	4b82      	ldr	r3, [pc, #520]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008dee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008df2:	d10b      	bne.n	8008e0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008df4:	4b7e      	ldr	r3, [pc, #504]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d05b      	beq.n	8008eb8 <HAL_RCC_OscConfig+0x108>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d157      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e242      	b.n	8009292 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e14:	d106      	bne.n	8008e24 <HAL_RCC_OscConfig+0x74>
 8008e16:	4b76      	ldr	r3, [pc, #472]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a75      	ldr	r2, [pc, #468]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e20:	6013      	str	r3, [r2, #0]
 8008e22:	e01d      	b.n	8008e60 <HAL_RCC_OscConfig+0xb0>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e2c:	d10c      	bne.n	8008e48 <HAL_RCC_OscConfig+0x98>
 8008e2e:	4b70      	ldr	r3, [pc, #448]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a6f      	ldr	r2, [pc, #444]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a6c      	ldr	r2, [pc, #432]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e44:	6013      	str	r3, [r2, #0]
 8008e46:	e00b      	b.n	8008e60 <HAL_RCC_OscConfig+0xb0>
 8008e48:	4b69      	ldr	r3, [pc, #420]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a68      	ldr	r2, [pc, #416]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e52:	6013      	str	r3, [r2, #0]
 8008e54:	4b66      	ldr	r3, [pc, #408]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a65      	ldr	r2, [pc, #404]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d013      	beq.n	8008e90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e68:	f7fa faa8 	bl	80033bc <HAL_GetTick>
 8008e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e6e:	e008      	b.n	8008e82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e70:	f7fa faa4 	bl	80033bc <HAL_GetTick>
 8008e74:	4602      	mov	r2, r0
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	2b64      	cmp	r3, #100	@ 0x64
 8008e7c:	d901      	bls.n	8008e82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e207      	b.n	8009292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e82:	4b5b      	ldr	r3, [pc, #364]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d0f0      	beq.n	8008e70 <HAL_RCC_OscConfig+0xc0>
 8008e8e:	e014      	b.n	8008eba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e90:	f7fa fa94 	bl	80033bc <HAL_GetTick>
 8008e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e96:	e008      	b.n	8008eaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e98:	f7fa fa90 	bl	80033bc <HAL_GetTick>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	2b64      	cmp	r3, #100	@ 0x64
 8008ea4:	d901      	bls.n	8008eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	e1f3      	b.n	8009292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008eaa:	4b51      	ldr	r3, [pc, #324]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1f0      	bne.n	8008e98 <HAL_RCC_OscConfig+0xe8>
 8008eb6:	e000      	b.n	8008eba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 0302 	and.w	r3, r3, #2
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d063      	beq.n	8008f8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f003 030c 	and.w	r3, r3, #12
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00b      	beq.n	8008eea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ed2:	4b47      	ldr	r3, [pc, #284]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008eda:	2b08      	cmp	r3, #8
 8008edc:	d11c      	bne.n	8008f18 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ede:	4b44      	ldr	r3, [pc, #272]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d116      	bne.n	8008f18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008eea:	4b41      	ldr	r3, [pc, #260]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 0302 	and.w	r3, r3, #2
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d005      	beq.n	8008f02 <HAL_RCC_OscConfig+0x152>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d001      	beq.n	8008f02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	e1c7      	b.n	8009292 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f02:	4b3b      	ldr	r3, [pc, #236]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	00db      	lsls	r3, r3, #3
 8008f10:	4937      	ldr	r1, [pc, #220]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008f12:	4313      	orrs	r3, r2
 8008f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f16:	e03a      	b.n	8008f8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d020      	beq.n	8008f62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f20:	4b34      	ldr	r3, [pc, #208]	@ (8008ff4 <HAL_RCC_OscConfig+0x244>)
 8008f22:	2201      	movs	r2, #1
 8008f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f26:	f7fa fa49 	bl	80033bc <HAL_GetTick>
 8008f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f2c:	e008      	b.n	8008f40 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f2e:	f7fa fa45 	bl	80033bc <HAL_GetTick>
 8008f32:	4602      	mov	r2, r0
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	1ad3      	subs	r3, r2, r3
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d901      	bls.n	8008f40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e1a8      	b.n	8009292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f40:	4b2b      	ldr	r3, [pc, #172]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0302 	and.w	r3, r3, #2
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d0f0      	beq.n	8008f2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f4c:	4b28      	ldr	r3, [pc, #160]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	00db      	lsls	r3, r3, #3
 8008f5a:	4925      	ldr	r1, [pc, #148]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	600b      	str	r3, [r1, #0]
 8008f60:	e015      	b.n	8008f8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f62:	4b24      	ldr	r3, [pc, #144]	@ (8008ff4 <HAL_RCC_OscConfig+0x244>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f68:	f7fa fa28 	bl	80033bc <HAL_GetTick>
 8008f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f6e:	e008      	b.n	8008f82 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f70:	f7fa fa24 	bl	80033bc <HAL_GetTick>
 8008f74:	4602      	mov	r2, r0
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d901      	bls.n	8008f82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	e187      	b.n	8009292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f82:	4b1b      	ldr	r3, [pc, #108]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0302 	and.w	r3, r3, #2
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1f0      	bne.n	8008f70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0308 	and.w	r3, r3, #8
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d036      	beq.n	8009008 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d016      	beq.n	8008fd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fa2:	4b15      	ldr	r3, [pc, #84]	@ (8008ff8 <HAL_RCC_OscConfig+0x248>)
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fa8:	f7fa fa08 	bl	80033bc <HAL_GetTick>
 8008fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008fae:	e008      	b.n	8008fc2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008fb0:	f7fa fa04 	bl	80033bc <HAL_GetTick>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d901      	bls.n	8008fc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	e167      	b.n	8009292 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8008ff0 <HAL_RCC_OscConfig+0x240>)
 8008fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fc6:	f003 0302 	and.w	r3, r3, #2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d0f0      	beq.n	8008fb0 <HAL_RCC_OscConfig+0x200>
 8008fce:	e01b      	b.n	8009008 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008fd0:	4b09      	ldr	r3, [pc, #36]	@ (8008ff8 <HAL_RCC_OscConfig+0x248>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008fd6:	f7fa f9f1 	bl	80033bc <HAL_GetTick>
 8008fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008fdc:	e00e      	b.n	8008ffc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008fde:	f7fa f9ed 	bl	80033bc <HAL_GetTick>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d907      	bls.n	8008ffc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e150      	b.n	8009292 <HAL_RCC_OscConfig+0x4e2>
 8008ff0:	40023800 	.word	0x40023800
 8008ff4:	42470000 	.word	0x42470000
 8008ff8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ffc:	4b88      	ldr	r3, [pc, #544]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 8008ffe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009000:	f003 0302 	and.w	r3, r3, #2
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1ea      	bne.n	8008fde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 0304 	and.w	r3, r3, #4
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 8097 	beq.w	8009144 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009016:	2300      	movs	r3, #0
 8009018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800901a:	4b81      	ldr	r3, [pc, #516]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 800901c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800901e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10f      	bne.n	8009046 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009026:	2300      	movs	r3, #0
 8009028:	60bb      	str	r3, [r7, #8]
 800902a:	4b7d      	ldr	r3, [pc, #500]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 800902c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800902e:	4a7c      	ldr	r2, [pc, #496]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 8009030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009034:	6413      	str	r3, [r2, #64]	@ 0x40
 8009036:	4b7a      	ldr	r3, [pc, #488]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 8009038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800903a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800903e:	60bb      	str	r3, [r7, #8]
 8009040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009042:	2301      	movs	r3, #1
 8009044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009046:	4b77      	ldr	r3, [pc, #476]	@ (8009224 <HAL_RCC_OscConfig+0x474>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800904e:	2b00      	cmp	r3, #0
 8009050:	d118      	bne.n	8009084 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009052:	4b74      	ldr	r3, [pc, #464]	@ (8009224 <HAL_RCC_OscConfig+0x474>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a73      	ldr	r2, [pc, #460]	@ (8009224 <HAL_RCC_OscConfig+0x474>)
 8009058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800905c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800905e:	f7fa f9ad 	bl	80033bc <HAL_GetTick>
 8009062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009064:	e008      	b.n	8009078 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009066:	f7fa f9a9 	bl	80033bc <HAL_GetTick>
 800906a:	4602      	mov	r2, r0
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	2b02      	cmp	r3, #2
 8009072:	d901      	bls.n	8009078 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e10c      	b.n	8009292 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009078:	4b6a      	ldr	r3, [pc, #424]	@ (8009224 <HAL_RCC_OscConfig+0x474>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009080:	2b00      	cmp	r3, #0
 8009082:	d0f0      	beq.n	8009066 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d106      	bne.n	800909a <HAL_RCC_OscConfig+0x2ea>
 800908c:	4b64      	ldr	r3, [pc, #400]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 800908e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009090:	4a63      	ldr	r2, [pc, #396]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 8009092:	f043 0301 	orr.w	r3, r3, #1
 8009096:	6713      	str	r3, [r2, #112]	@ 0x70
 8009098:	e01c      	b.n	80090d4 <HAL_RCC_OscConfig+0x324>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	2b05      	cmp	r3, #5
 80090a0:	d10c      	bne.n	80090bc <HAL_RCC_OscConfig+0x30c>
 80090a2:	4b5f      	ldr	r3, [pc, #380]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 80090a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090a6:	4a5e      	ldr	r2, [pc, #376]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 80090a8:	f043 0304 	orr.w	r3, r3, #4
 80090ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80090ae:	4b5c      	ldr	r3, [pc, #368]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 80090b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090b2:	4a5b      	ldr	r2, [pc, #364]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 80090b4:	f043 0301 	orr.w	r3, r3, #1
 80090b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80090ba:	e00b      	b.n	80090d4 <HAL_RCC_OscConfig+0x324>
 80090bc:	4b58      	ldr	r3, [pc, #352]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 80090be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090c0:	4a57      	ldr	r2, [pc, #348]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 80090c2:	f023 0301 	bic.w	r3, r3, #1
 80090c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80090c8:	4b55      	ldr	r3, [pc, #340]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 80090ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090cc:	4a54      	ldr	r2, [pc, #336]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 80090ce:	f023 0304 	bic.w	r3, r3, #4
 80090d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d015      	beq.n	8009108 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090dc:	f7fa f96e 	bl	80033bc <HAL_GetTick>
 80090e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090e2:	e00a      	b.n	80090fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090e4:	f7fa f96a 	bl	80033bc <HAL_GetTick>
 80090e8:	4602      	mov	r2, r0
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d901      	bls.n	80090fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80090f6:	2303      	movs	r3, #3
 80090f8:	e0cb      	b.n	8009292 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090fa:	4b49      	ldr	r3, [pc, #292]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 80090fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090fe:	f003 0302 	and.w	r3, r3, #2
 8009102:	2b00      	cmp	r3, #0
 8009104:	d0ee      	beq.n	80090e4 <HAL_RCC_OscConfig+0x334>
 8009106:	e014      	b.n	8009132 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009108:	f7fa f958 	bl	80033bc <HAL_GetTick>
 800910c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800910e:	e00a      	b.n	8009126 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009110:	f7fa f954 	bl	80033bc <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800911e:	4293      	cmp	r3, r2
 8009120:	d901      	bls.n	8009126 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e0b5      	b.n	8009292 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009126:	4b3e      	ldr	r3, [pc, #248]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 8009128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800912a:	f003 0302 	and.w	r3, r3, #2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1ee      	bne.n	8009110 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009132:	7dfb      	ldrb	r3, [r7, #23]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d105      	bne.n	8009144 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009138:	4b39      	ldr	r3, [pc, #228]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 800913a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800913c:	4a38      	ldr	r2, [pc, #224]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 800913e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009142:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	2b00      	cmp	r3, #0
 800914a:	f000 80a1 	beq.w	8009290 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800914e:	4b34      	ldr	r3, [pc, #208]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f003 030c 	and.w	r3, r3, #12
 8009156:	2b08      	cmp	r3, #8
 8009158:	d05c      	beq.n	8009214 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	2b02      	cmp	r3, #2
 8009160:	d141      	bne.n	80091e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009162:	4b31      	ldr	r3, [pc, #196]	@ (8009228 <HAL_RCC_OscConfig+0x478>)
 8009164:	2200      	movs	r2, #0
 8009166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009168:	f7fa f928 	bl	80033bc <HAL_GetTick>
 800916c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800916e:	e008      	b.n	8009182 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009170:	f7fa f924 	bl	80033bc <HAL_GetTick>
 8009174:	4602      	mov	r2, r0
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	2b02      	cmp	r3, #2
 800917c:	d901      	bls.n	8009182 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e087      	b.n	8009292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009182:	4b27      	ldr	r3, [pc, #156]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1f0      	bne.n	8009170 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	69da      	ldr	r2, [r3, #28]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	431a      	orrs	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800919c:	019b      	lsls	r3, r3, #6
 800919e:	431a      	orrs	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a4:	085b      	lsrs	r3, r3, #1
 80091a6:	3b01      	subs	r3, #1
 80091a8:	041b      	lsls	r3, r3, #16
 80091aa:	431a      	orrs	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b0:	061b      	lsls	r3, r3, #24
 80091b2:	491b      	ldr	r1, [pc, #108]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 80091b4:	4313      	orrs	r3, r2
 80091b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80091b8:	4b1b      	ldr	r3, [pc, #108]	@ (8009228 <HAL_RCC_OscConfig+0x478>)
 80091ba:	2201      	movs	r2, #1
 80091bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091be:	f7fa f8fd 	bl	80033bc <HAL_GetTick>
 80091c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091c4:	e008      	b.n	80091d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091c6:	f7fa f8f9 	bl	80033bc <HAL_GetTick>
 80091ca:	4602      	mov	r2, r0
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d901      	bls.n	80091d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e05c      	b.n	8009292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091d8:	4b11      	ldr	r3, [pc, #68]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d0f0      	beq.n	80091c6 <HAL_RCC_OscConfig+0x416>
 80091e4:	e054      	b.n	8009290 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091e6:	4b10      	ldr	r3, [pc, #64]	@ (8009228 <HAL_RCC_OscConfig+0x478>)
 80091e8:	2200      	movs	r2, #0
 80091ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091ec:	f7fa f8e6 	bl	80033bc <HAL_GetTick>
 80091f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091f2:	e008      	b.n	8009206 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091f4:	f7fa f8e2 	bl	80033bc <HAL_GetTick>
 80091f8:	4602      	mov	r2, r0
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d901      	bls.n	8009206 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	e045      	b.n	8009292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009206:	4b06      	ldr	r3, [pc, #24]	@ (8009220 <HAL_RCC_OscConfig+0x470>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1f0      	bne.n	80091f4 <HAL_RCC_OscConfig+0x444>
 8009212:	e03d      	b.n	8009290 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d107      	bne.n	800922c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e038      	b.n	8009292 <HAL_RCC_OscConfig+0x4e2>
 8009220:	40023800 	.word	0x40023800
 8009224:	40007000 	.word	0x40007000
 8009228:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800922c:	4b1b      	ldr	r3, [pc, #108]	@ (800929c <HAL_RCC_OscConfig+0x4ec>)
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	699b      	ldr	r3, [r3, #24]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d028      	beq.n	800928c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009244:	429a      	cmp	r2, r3
 8009246:	d121      	bne.n	800928c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009252:	429a      	cmp	r2, r3
 8009254:	d11a      	bne.n	800928c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800925c:	4013      	ands	r3, r2
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009262:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009264:	4293      	cmp	r3, r2
 8009266:	d111      	bne.n	800928c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009272:	085b      	lsrs	r3, r3, #1
 8009274:	3b01      	subs	r3, #1
 8009276:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009278:	429a      	cmp	r2, r3
 800927a:	d107      	bne.n	800928c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009286:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009288:	429a      	cmp	r2, r3
 800928a:	d001      	beq.n	8009290 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	e000      	b.n	8009292 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3718      	adds	r7, #24
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	40023800 	.word	0x40023800

080092a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d101      	bne.n	80092b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e0cc      	b.n	800944e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80092b4:	4b68      	ldr	r3, [pc, #416]	@ (8009458 <HAL_RCC_ClockConfig+0x1b8>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 0307 	and.w	r3, r3, #7
 80092bc:	683a      	ldr	r2, [r7, #0]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d90c      	bls.n	80092dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092c2:	4b65      	ldr	r3, [pc, #404]	@ (8009458 <HAL_RCC_ClockConfig+0x1b8>)
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	b2d2      	uxtb	r2, r2
 80092c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092ca:	4b63      	ldr	r3, [pc, #396]	@ (8009458 <HAL_RCC_ClockConfig+0x1b8>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 0307 	and.w	r3, r3, #7
 80092d2:	683a      	ldr	r2, [r7, #0]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d001      	beq.n	80092dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	e0b8      	b.n	800944e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0302 	and.w	r3, r3, #2
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d020      	beq.n	800932a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f003 0304 	and.w	r3, r3, #4
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d005      	beq.n	8009300 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80092f4:	4b59      	ldr	r3, [pc, #356]	@ (800945c <HAL_RCC_ClockConfig+0x1bc>)
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	4a58      	ldr	r2, [pc, #352]	@ (800945c <HAL_RCC_ClockConfig+0x1bc>)
 80092fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80092fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f003 0308 	and.w	r3, r3, #8
 8009308:	2b00      	cmp	r3, #0
 800930a:	d005      	beq.n	8009318 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800930c:	4b53      	ldr	r3, [pc, #332]	@ (800945c <HAL_RCC_ClockConfig+0x1bc>)
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	4a52      	ldr	r2, [pc, #328]	@ (800945c <HAL_RCC_ClockConfig+0x1bc>)
 8009312:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009316:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009318:	4b50      	ldr	r3, [pc, #320]	@ (800945c <HAL_RCC_ClockConfig+0x1bc>)
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	494d      	ldr	r1, [pc, #308]	@ (800945c <HAL_RCC_ClockConfig+0x1bc>)
 8009326:	4313      	orrs	r3, r2
 8009328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	2b00      	cmp	r3, #0
 8009334:	d044      	beq.n	80093c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d107      	bne.n	800934e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800933e:	4b47      	ldr	r3, [pc, #284]	@ (800945c <HAL_RCC_ClockConfig+0x1bc>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009346:	2b00      	cmp	r3, #0
 8009348:	d119      	bne.n	800937e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e07f      	b.n	800944e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	2b02      	cmp	r3, #2
 8009354:	d003      	beq.n	800935e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800935a:	2b03      	cmp	r3, #3
 800935c:	d107      	bne.n	800936e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800935e:	4b3f      	ldr	r3, [pc, #252]	@ (800945c <HAL_RCC_ClockConfig+0x1bc>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d109      	bne.n	800937e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e06f      	b.n	800944e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800936e:	4b3b      	ldr	r3, [pc, #236]	@ (800945c <HAL_RCC_ClockConfig+0x1bc>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 0302 	and.w	r3, r3, #2
 8009376:	2b00      	cmp	r3, #0
 8009378:	d101      	bne.n	800937e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e067      	b.n	800944e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800937e:	4b37      	ldr	r3, [pc, #220]	@ (800945c <HAL_RCC_ClockConfig+0x1bc>)
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f023 0203 	bic.w	r2, r3, #3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	4934      	ldr	r1, [pc, #208]	@ (800945c <HAL_RCC_ClockConfig+0x1bc>)
 800938c:	4313      	orrs	r3, r2
 800938e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009390:	f7fa f814 	bl	80033bc <HAL_GetTick>
 8009394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009396:	e00a      	b.n	80093ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009398:	f7fa f810 	bl	80033bc <HAL_GetTick>
 800939c:	4602      	mov	r2, r0
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d901      	bls.n	80093ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	e04f      	b.n	800944e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093ae:	4b2b      	ldr	r3, [pc, #172]	@ (800945c <HAL_RCC_ClockConfig+0x1bc>)
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	f003 020c 	and.w	r2, r3, #12
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	429a      	cmp	r2, r3
 80093be:	d1eb      	bne.n	8009398 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80093c0:	4b25      	ldr	r3, [pc, #148]	@ (8009458 <HAL_RCC_ClockConfig+0x1b8>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0307 	and.w	r3, r3, #7
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d20c      	bcs.n	80093e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093ce:	4b22      	ldr	r3, [pc, #136]	@ (8009458 <HAL_RCC_ClockConfig+0x1b8>)
 80093d0:	683a      	ldr	r2, [r7, #0]
 80093d2:	b2d2      	uxtb	r2, r2
 80093d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093d6:	4b20      	ldr	r3, [pc, #128]	@ (8009458 <HAL_RCC_ClockConfig+0x1b8>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 0307 	and.w	r3, r3, #7
 80093de:	683a      	ldr	r2, [r7, #0]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d001      	beq.n	80093e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e032      	b.n	800944e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0304 	and.w	r3, r3, #4
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d008      	beq.n	8009406 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80093f4:	4b19      	ldr	r3, [pc, #100]	@ (800945c <HAL_RCC_ClockConfig+0x1bc>)
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	4916      	ldr	r1, [pc, #88]	@ (800945c <HAL_RCC_ClockConfig+0x1bc>)
 8009402:	4313      	orrs	r3, r2
 8009404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 0308 	and.w	r3, r3, #8
 800940e:	2b00      	cmp	r3, #0
 8009410:	d009      	beq.n	8009426 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009412:	4b12      	ldr	r3, [pc, #72]	@ (800945c <HAL_RCC_ClockConfig+0x1bc>)
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	00db      	lsls	r3, r3, #3
 8009420:	490e      	ldr	r1, [pc, #56]	@ (800945c <HAL_RCC_ClockConfig+0x1bc>)
 8009422:	4313      	orrs	r3, r2
 8009424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009426:	f000 f821 	bl	800946c <HAL_RCC_GetSysClockFreq>
 800942a:	4602      	mov	r2, r0
 800942c:	4b0b      	ldr	r3, [pc, #44]	@ (800945c <HAL_RCC_ClockConfig+0x1bc>)
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	091b      	lsrs	r3, r3, #4
 8009432:	f003 030f 	and.w	r3, r3, #15
 8009436:	490a      	ldr	r1, [pc, #40]	@ (8009460 <HAL_RCC_ClockConfig+0x1c0>)
 8009438:	5ccb      	ldrb	r3, [r1, r3]
 800943a:	fa22 f303 	lsr.w	r3, r2, r3
 800943e:	4a09      	ldr	r2, [pc, #36]	@ (8009464 <HAL_RCC_ClockConfig+0x1c4>)
 8009440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009442:	4b09      	ldr	r3, [pc, #36]	@ (8009468 <HAL_RCC_ClockConfig+0x1c8>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4618      	mov	r0, r3
 8009448:	f7f9 ff74 	bl	8003334 <HAL_InitTick>

  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	40023c00 	.word	0x40023c00
 800945c:	40023800 	.word	0x40023800
 8009460:	08017610 	.word	0x08017610
 8009464:	20000044 	.word	0x20000044
 8009468:	2000004c 	.word	0x2000004c

0800946c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800946c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009470:	b094      	sub	sp, #80	@ 0x50
 8009472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009474:	2300      	movs	r3, #0
 8009476:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8009478:	2300      	movs	r3, #0
 800947a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800947c:	2300      	movs	r3, #0
 800947e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009480:	2300      	movs	r3, #0
 8009482:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009484:	4b79      	ldr	r3, [pc, #484]	@ (800966c <HAL_RCC_GetSysClockFreq+0x200>)
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	f003 030c 	and.w	r3, r3, #12
 800948c:	2b08      	cmp	r3, #8
 800948e:	d00d      	beq.n	80094ac <HAL_RCC_GetSysClockFreq+0x40>
 8009490:	2b08      	cmp	r3, #8
 8009492:	f200 80e1 	bhi.w	8009658 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009496:	2b00      	cmp	r3, #0
 8009498:	d002      	beq.n	80094a0 <HAL_RCC_GetSysClockFreq+0x34>
 800949a:	2b04      	cmp	r3, #4
 800949c:	d003      	beq.n	80094a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800949e:	e0db      	b.n	8009658 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80094a0:	4b73      	ldr	r3, [pc, #460]	@ (8009670 <HAL_RCC_GetSysClockFreq+0x204>)
 80094a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80094a4:	e0db      	b.n	800965e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80094a6:	4b73      	ldr	r3, [pc, #460]	@ (8009674 <HAL_RCC_GetSysClockFreq+0x208>)
 80094a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80094aa:	e0d8      	b.n	800965e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80094ac:	4b6f      	ldr	r3, [pc, #444]	@ (800966c <HAL_RCC_GetSysClockFreq+0x200>)
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80094b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80094b6:	4b6d      	ldr	r3, [pc, #436]	@ (800966c <HAL_RCC_GetSysClockFreq+0x200>)
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d063      	beq.n	800958a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094c2:	4b6a      	ldr	r3, [pc, #424]	@ (800966c <HAL_RCC_GetSysClockFreq+0x200>)
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	099b      	lsrs	r3, r3, #6
 80094c8:	2200      	movs	r2, #0
 80094ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80094cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80094ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80094d6:	2300      	movs	r3, #0
 80094d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80094da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80094de:	4622      	mov	r2, r4
 80094e0:	462b      	mov	r3, r5
 80094e2:	f04f 0000 	mov.w	r0, #0
 80094e6:	f04f 0100 	mov.w	r1, #0
 80094ea:	0159      	lsls	r1, r3, #5
 80094ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80094f0:	0150      	lsls	r0, r2, #5
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	4621      	mov	r1, r4
 80094f8:	1a51      	subs	r1, r2, r1
 80094fa:	6139      	str	r1, [r7, #16]
 80094fc:	4629      	mov	r1, r5
 80094fe:	eb63 0301 	sbc.w	r3, r3, r1
 8009502:	617b      	str	r3, [r7, #20]
 8009504:	f04f 0200 	mov.w	r2, #0
 8009508:	f04f 0300 	mov.w	r3, #0
 800950c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009510:	4659      	mov	r1, fp
 8009512:	018b      	lsls	r3, r1, #6
 8009514:	4651      	mov	r1, sl
 8009516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800951a:	4651      	mov	r1, sl
 800951c:	018a      	lsls	r2, r1, #6
 800951e:	4651      	mov	r1, sl
 8009520:	ebb2 0801 	subs.w	r8, r2, r1
 8009524:	4659      	mov	r1, fp
 8009526:	eb63 0901 	sbc.w	r9, r3, r1
 800952a:	f04f 0200 	mov.w	r2, #0
 800952e:	f04f 0300 	mov.w	r3, #0
 8009532:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009536:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800953a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800953e:	4690      	mov	r8, r2
 8009540:	4699      	mov	r9, r3
 8009542:	4623      	mov	r3, r4
 8009544:	eb18 0303 	adds.w	r3, r8, r3
 8009548:	60bb      	str	r3, [r7, #8]
 800954a:	462b      	mov	r3, r5
 800954c:	eb49 0303 	adc.w	r3, r9, r3
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	f04f 0200 	mov.w	r2, #0
 8009556:	f04f 0300 	mov.w	r3, #0
 800955a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800955e:	4629      	mov	r1, r5
 8009560:	024b      	lsls	r3, r1, #9
 8009562:	4621      	mov	r1, r4
 8009564:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009568:	4621      	mov	r1, r4
 800956a:	024a      	lsls	r2, r1, #9
 800956c:	4610      	mov	r0, r2
 800956e:	4619      	mov	r1, r3
 8009570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009572:	2200      	movs	r2, #0
 8009574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009576:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009578:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800957c:	f7f6 fe34 	bl	80001e8 <__aeabi_uldivmod>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	4613      	mov	r3, r2
 8009586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009588:	e058      	b.n	800963c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800958a:	4b38      	ldr	r3, [pc, #224]	@ (800966c <HAL_RCC_GetSysClockFreq+0x200>)
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	099b      	lsrs	r3, r3, #6
 8009590:	2200      	movs	r2, #0
 8009592:	4618      	mov	r0, r3
 8009594:	4611      	mov	r1, r2
 8009596:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800959a:	623b      	str	r3, [r7, #32]
 800959c:	2300      	movs	r3, #0
 800959e:	627b      	str	r3, [r7, #36]	@ 0x24
 80095a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80095a4:	4642      	mov	r2, r8
 80095a6:	464b      	mov	r3, r9
 80095a8:	f04f 0000 	mov.w	r0, #0
 80095ac:	f04f 0100 	mov.w	r1, #0
 80095b0:	0159      	lsls	r1, r3, #5
 80095b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80095b6:	0150      	lsls	r0, r2, #5
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	4641      	mov	r1, r8
 80095be:	ebb2 0a01 	subs.w	sl, r2, r1
 80095c2:	4649      	mov	r1, r9
 80095c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80095c8:	f04f 0200 	mov.w	r2, #0
 80095cc:	f04f 0300 	mov.w	r3, #0
 80095d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80095d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80095d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80095dc:	ebb2 040a 	subs.w	r4, r2, sl
 80095e0:	eb63 050b 	sbc.w	r5, r3, fp
 80095e4:	f04f 0200 	mov.w	r2, #0
 80095e8:	f04f 0300 	mov.w	r3, #0
 80095ec:	00eb      	lsls	r3, r5, #3
 80095ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80095f2:	00e2      	lsls	r2, r4, #3
 80095f4:	4614      	mov	r4, r2
 80095f6:	461d      	mov	r5, r3
 80095f8:	4643      	mov	r3, r8
 80095fa:	18e3      	adds	r3, r4, r3
 80095fc:	603b      	str	r3, [r7, #0]
 80095fe:	464b      	mov	r3, r9
 8009600:	eb45 0303 	adc.w	r3, r5, r3
 8009604:	607b      	str	r3, [r7, #4]
 8009606:	f04f 0200 	mov.w	r2, #0
 800960a:	f04f 0300 	mov.w	r3, #0
 800960e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009612:	4629      	mov	r1, r5
 8009614:	028b      	lsls	r3, r1, #10
 8009616:	4621      	mov	r1, r4
 8009618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800961c:	4621      	mov	r1, r4
 800961e:	028a      	lsls	r2, r1, #10
 8009620:	4610      	mov	r0, r2
 8009622:	4619      	mov	r1, r3
 8009624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009626:	2200      	movs	r2, #0
 8009628:	61bb      	str	r3, [r7, #24]
 800962a:	61fa      	str	r2, [r7, #28]
 800962c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009630:	f7f6 fdda 	bl	80001e8 <__aeabi_uldivmod>
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	4613      	mov	r3, r2
 800963a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800963c:	4b0b      	ldr	r3, [pc, #44]	@ (800966c <HAL_RCC_GetSysClockFreq+0x200>)
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	0c1b      	lsrs	r3, r3, #16
 8009642:	f003 0303 	and.w	r3, r3, #3
 8009646:	3301      	adds	r3, #1
 8009648:	005b      	lsls	r3, r3, #1
 800964a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800964c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800964e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009650:	fbb2 f3f3 	udiv	r3, r2, r3
 8009654:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009656:	e002      	b.n	800965e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009658:	4b05      	ldr	r3, [pc, #20]	@ (8009670 <HAL_RCC_GetSysClockFreq+0x204>)
 800965a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800965c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800965e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009660:	4618      	mov	r0, r3
 8009662:	3750      	adds	r7, #80	@ 0x50
 8009664:	46bd      	mov	sp, r7
 8009666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800966a:	bf00      	nop
 800966c:	40023800 	.word	0x40023800
 8009670:	00f42400 	.word	0x00f42400
 8009674:	007a1200 	.word	0x007a1200

08009678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009678:	b480      	push	{r7}
 800967a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800967c:	4b03      	ldr	r3, [pc, #12]	@ (800968c <HAL_RCC_GetHCLKFreq+0x14>)
 800967e:	681b      	ldr	r3, [r3, #0]
}
 8009680:	4618      	mov	r0, r3
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	20000044 	.word	0x20000044

08009690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009694:	f7ff fff0 	bl	8009678 <HAL_RCC_GetHCLKFreq>
 8009698:	4602      	mov	r2, r0
 800969a:	4b05      	ldr	r3, [pc, #20]	@ (80096b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	0a9b      	lsrs	r3, r3, #10
 80096a0:	f003 0307 	and.w	r3, r3, #7
 80096a4:	4903      	ldr	r1, [pc, #12]	@ (80096b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80096a6:	5ccb      	ldrb	r3, [r1, r3]
 80096a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	40023800 	.word	0x40023800
 80096b4:	08017620 	.word	0x08017620

080096b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80096c0:	2300      	movs	r3, #0
 80096c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80096c4:	2300      	movs	r3, #0
 80096c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 0301 	and.w	r3, r3, #1
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d105      	bne.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d038      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80096e0:	4b68      	ldr	r3, [pc, #416]	@ (8009884 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80096e6:	f7f9 fe69 	bl	80033bc <HAL_GetTick>
 80096ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80096ec:	e008      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80096ee:	f7f9 fe65 	bl	80033bc <HAL_GetTick>
 80096f2:	4602      	mov	r2, r0
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d901      	bls.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e0bd      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009700:	4b61      	ldr	r3, [pc, #388]	@ (8009888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1f0      	bne.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685a      	ldr	r2, [r3, #4]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	019b      	lsls	r3, r3, #6
 8009716:	431a      	orrs	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	071b      	lsls	r3, r3, #28
 800971e:	495a      	ldr	r1, [pc, #360]	@ (8009888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009720:	4313      	orrs	r3, r2
 8009722:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009726:	4b57      	ldr	r3, [pc, #348]	@ (8009884 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009728:	2201      	movs	r2, #1
 800972a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800972c:	f7f9 fe46 	bl	80033bc <HAL_GetTick>
 8009730:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009732:	e008      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009734:	f7f9 fe42 	bl	80033bc <HAL_GetTick>
 8009738:	4602      	mov	r2, r0
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	2b02      	cmp	r3, #2
 8009740:	d901      	bls.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009742:	2303      	movs	r3, #3
 8009744:	e09a      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009746:	4b50      	ldr	r3, [pc, #320]	@ (8009888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800974e:	2b00      	cmp	r3, #0
 8009750:	d0f0      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 0302 	and.w	r3, r3, #2
 800975a:	2b00      	cmp	r3, #0
 800975c:	f000 8083 	beq.w	8009866 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009760:	2300      	movs	r3, #0
 8009762:	60fb      	str	r3, [r7, #12]
 8009764:	4b48      	ldr	r3, [pc, #288]	@ (8009888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009768:	4a47      	ldr	r2, [pc, #284]	@ (8009888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800976a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800976e:	6413      	str	r3, [r2, #64]	@ 0x40
 8009770:	4b45      	ldr	r3, [pc, #276]	@ (8009888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009778:	60fb      	str	r3, [r7, #12]
 800977a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800977c:	4b43      	ldr	r3, [pc, #268]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a42      	ldr	r2, [pc, #264]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009786:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009788:	f7f9 fe18 	bl	80033bc <HAL_GetTick>
 800978c:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800978e:	e008      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009790:	f7f9 fe14 	bl	80033bc <HAL_GetTick>
 8009794:	4602      	mov	r2, r0
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	2b02      	cmp	r3, #2
 800979c:	d901      	bls.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e06c      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80097a2:	4b3a      	ldr	r3, [pc, #232]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d0f0      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80097ae:	4b36      	ldr	r3, [pc, #216]	@ (8009888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097b6:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d02f      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097c6:	693a      	ldr	r2, [r7, #16]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d028      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80097cc:	4b2e      	ldr	r3, [pc, #184]	@ (8009888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097d4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80097d6:	4b2e      	ldr	r3, [pc, #184]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80097d8:	2201      	movs	r2, #1
 80097da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80097dc:	4b2c      	ldr	r3, [pc, #176]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80097de:	2200      	movs	r2, #0
 80097e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80097e2:	4a29      	ldr	r2, [pc, #164]	@ (8009888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80097e8:	4b27      	ldr	r3, [pc, #156]	@ (8009888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097ec:	f003 0301 	and.w	r3, r3, #1
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d114      	bne.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80097f4:	f7f9 fde2 	bl	80033bc <HAL_GetTick>
 80097f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097fa:	e00a      	b.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097fc:	f7f9 fdde 	bl	80033bc <HAL_GetTick>
 8009800:	4602      	mov	r2, r0
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800980a:	4293      	cmp	r3, r2
 800980c:	d901      	bls.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800980e:	2303      	movs	r3, #3
 8009810:	e034      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009812:	4b1d      	ldr	r3, [pc, #116]	@ (8009888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009816:	f003 0302 	and.w	r3, r3, #2
 800981a:	2b00      	cmp	r3, #0
 800981c:	d0ee      	beq.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009826:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800982a:	d10d      	bne.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800982c:	4b16      	ldr	r3, [pc, #88]	@ (8009888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800983c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009840:	4911      	ldr	r1, [pc, #68]	@ (8009888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009842:	4313      	orrs	r3, r2
 8009844:	608b      	str	r3, [r1, #8]
 8009846:	e005      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8009848:	4b0f      	ldr	r3, [pc, #60]	@ (8009888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	4a0e      	ldr	r2, [pc, #56]	@ (8009888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800984e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009852:	6093      	str	r3, [r2, #8]
 8009854:	4b0c      	ldr	r3, [pc, #48]	@ (8009888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009856:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009860:	4909      	ldr	r1, [pc, #36]	@ (8009888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009862:	4313      	orrs	r3, r2
 8009864:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0308 	and.w	r3, r3, #8
 800986e:	2b00      	cmp	r3, #0
 8009870:	d003      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	7d1a      	ldrb	r2, [r3, #20]
 8009876:	4b07      	ldr	r3, [pc, #28]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8009878:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3718      	adds	r7, #24
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	42470068 	.word	0x42470068
 8009888:	40023800 	.word	0x40023800
 800988c:	40007000 	.word	0x40007000
 8009890:	42470e40 	.word	0x42470e40
 8009894:	424711e0 	.word	0x424711e0

08009898 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2203      	movs	r2, #3
 80098a4:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80098a6:	4b1c      	ldr	r3, [pc, #112]	@ (8009918 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80098a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098ac:	099b      	lsrs	r3, r3, #6
 80098ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80098b6:	4b18      	ldr	r3, [pc, #96]	@ (8009918 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80098b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098bc:	0f1b      	lsrs	r3, r3, #28
 80098be:	f003 0207 	and.w	r2, r3, #7
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 80098c6:	4b14      	ldr	r3, [pc, #80]	@ (8009918 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80098c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098cc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80098d4:	4b10      	ldr	r3, [pc, #64]	@ (8009918 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80098dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80098de:	4b0e      	ldr	r3, [pc, #56]	@ (8009918 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80098e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098e2:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	431a      	orrs	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 80098ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009918 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80098f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d103      	bne.n	8009904 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8009902:	e002      	b.n	800990a <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	751a      	strb	r2, [r3, #20]
}
 800990a:	bf00      	nop
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	40023800 	.word	0x40023800

0800991c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800991c:	b480      	push	{r7}
 800991e:	b087      	sub	sp, #28
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8009924:	2300      	movs	r3, #0
 8009926:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8009928:	2300      	movs	r3, #0
 800992a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800992c:	2300      	movs	r3, #0
 800992e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8009930:	2300      	movs	r3, #0
 8009932:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2b01      	cmp	r3, #1
 8009938:	d141      	bne.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800993a:	4b25      	ldr	r3, [pc, #148]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009942:	60fb      	str	r3, [r7, #12]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d006      	beq.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009950:	d131      	bne.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8009952:	4b20      	ldr	r3, [pc, #128]	@ (80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8009954:	617b      	str	r3, [r7, #20]
          break;
 8009956:	e031      	b.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009958:	4b1d      	ldr	r3, [pc, #116]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009960:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009964:	d109      	bne.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8009966:	4b1a      	ldr	r3, [pc, #104]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8009968:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800996c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009970:	4a19      	ldr	r2, [pc, #100]	@ (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8009972:	fbb2 f3f3 	udiv	r3, r2, r3
 8009976:	613b      	str	r3, [r7, #16]
 8009978:	e008      	b.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800997a:	4b15      	ldr	r3, [pc, #84]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800997c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009980:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009984:	4a15      	ldr	r2, [pc, #84]	@ (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8009986:	fbb2 f3f3 	udiv	r3, r2, r3
 800998a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800998c:	4b10      	ldr	r3, [pc, #64]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800998e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009992:	099b      	lsrs	r3, r3, #6
 8009994:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	fb02 f303 	mul.w	r3, r2, r3
 800999e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80099a0:	4b0b      	ldr	r3, [pc, #44]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80099a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099a6:	0f1b      	lsrs	r3, r3, #28
 80099a8:	f003 0307 	and.w	r3, r3, #7
 80099ac:	68ba      	ldr	r2, [r7, #8]
 80099ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b2:	617b      	str	r3, [r7, #20]
          break;
 80099b4:	e002      	b.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80099b6:	2300      	movs	r3, #0
 80099b8:	617b      	str	r3, [r7, #20]
          break;
 80099ba:	bf00      	nop
        }
      }
      break;
 80099bc:	e000      	b.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 80099be:	bf00      	nop
    }
  }
  return frequency;
 80099c0:	697b      	ldr	r3, [r7, #20]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	371c      	adds	r7, #28
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	40023800 	.word	0x40023800
 80099d4:	00bb8000 	.word	0x00bb8000
 80099d8:	007a1200 	.word	0x007a1200
 80099dc:	00f42400 	.word	0x00f42400

080099e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d101      	bne.n	80099f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e041      	b.n	8009a76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d106      	bne.n	8009a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7f9 f97e 	bl	8002d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2202      	movs	r2, #2
 8009a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	3304      	adds	r3, #4
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	4610      	mov	r0, r2
 8009a20:	f000 f9a8 	bl	8009d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3708      	adds	r7, #8
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
	...

08009a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d001      	beq.n	8009a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	e044      	b.n	8009b22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68da      	ldr	r2, [r3, #12]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f042 0201 	orr.w	r2, r2, #1
 8009aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8009b30 <HAL_TIM_Base_Start_IT+0xb0>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d018      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0x6c>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ac2:	d013      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0x6c>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8009b34 <HAL_TIM_Base_Start_IT+0xb4>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d00e      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0x6c>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a19      	ldr	r2, [pc, #100]	@ (8009b38 <HAL_TIM_Base_Start_IT+0xb8>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d009      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0x6c>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a17      	ldr	r2, [pc, #92]	@ (8009b3c <HAL_TIM_Base_Start_IT+0xbc>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d004      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0x6c>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a16      	ldr	r2, [pc, #88]	@ (8009b40 <HAL_TIM_Base_Start_IT+0xc0>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d111      	bne.n	8009b10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	f003 0307 	and.w	r3, r3, #7
 8009af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2b06      	cmp	r3, #6
 8009afc:	d010      	beq.n	8009b20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f042 0201 	orr.w	r2, r2, #1
 8009b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b0e:	e007      	b.n	8009b20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f042 0201 	orr.w	r2, r2, #1
 8009b1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3714      	adds	r7, #20
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	40010000 	.word	0x40010000
 8009b34:	40000400 	.word	0x40000400
 8009b38:	40000800 	.word	0x40000800
 8009b3c:	40000c00 	.word	0x40000c00
 8009b40:	40014000 	.word	0x40014000

08009b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	691b      	ldr	r3, [r3, #16]
 8009b5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	f003 0302 	and.w	r3, r3, #2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d020      	beq.n	8009ba8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f003 0302 	and.w	r3, r3, #2
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d01b      	beq.n	8009ba8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f06f 0202 	mvn.w	r2, #2
 8009b78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	f003 0303 	and.w	r3, r3, #3
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f8d2 	bl	8009d38 <HAL_TIM_IC_CaptureCallback>
 8009b94:	e005      	b.n	8009ba2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f8c4 	bl	8009d24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 f8d5 	bl	8009d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	f003 0304 	and.w	r3, r3, #4
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d020      	beq.n	8009bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f003 0304 	and.w	r3, r3, #4
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d01b      	beq.n	8009bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f06f 0204 	mvn.w	r2, #4
 8009bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2202      	movs	r2, #2
 8009bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d003      	beq.n	8009be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f8ac 	bl	8009d38 <HAL_TIM_IC_CaptureCallback>
 8009be0:	e005      	b.n	8009bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f89e 	bl	8009d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f8af 	bl	8009d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	f003 0308 	and.w	r3, r3, #8
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d020      	beq.n	8009c40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f003 0308 	and.w	r3, r3, #8
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d01b      	beq.n	8009c40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f06f 0208 	mvn.w	r2, #8
 8009c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2204      	movs	r2, #4
 8009c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	69db      	ldr	r3, [r3, #28]
 8009c1e:	f003 0303 	and.w	r3, r3, #3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d003      	beq.n	8009c2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f886 	bl	8009d38 <HAL_TIM_IC_CaptureCallback>
 8009c2c:	e005      	b.n	8009c3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f878 	bl	8009d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f889 	bl	8009d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	f003 0310 	and.w	r3, r3, #16
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d020      	beq.n	8009c8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f003 0310 	and.w	r3, r3, #16
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d01b      	beq.n	8009c8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f06f 0210 	mvn.w	r2, #16
 8009c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2208      	movs	r2, #8
 8009c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	69db      	ldr	r3, [r3, #28]
 8009c6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f860 	bl	8009d38 <HAL_TIM_IC_CaptureCallback>
 8009c78:	e005      	b.n	8009c86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f852 	bl	8009d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f863 	bl	8009d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00c      	beq.n	8009cb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f003 0301 	and.w	r3, r3, #1
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d007      	beq.n	8009cb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f06f 0201 	mvn.w	r2, #1
 8009ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f7f7 fc38 	bl	8001520 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00c      	beq.n	8009cd4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d007      	beq.n	8009cd4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f8e6 	bl	8009ea0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00c      	beq.n	8009cf8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d007      	beq.n	8009cf8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f834 	bl	8009d60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	f003 0320 	and.w	r3, r3, #32
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00c      	beq.n	8009d1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f003 0320 	and.w	r3, r3, #32
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d007      	beq.n	8009d1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f06f 0220 	mvn.w	r2, #32
 8009d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 f8b8 	bl	8009e8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d1c:	bf00      	nop
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d2c:	bf00      	nop
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d68:	bf00      	nop
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a3a      	ldr	r2, [pc, #232]	@ (8009e70 <TIM_Base_SetConfig+0xfc>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d00f      	beq.n	8009dac <TIM_Base_SetConfig+0x38>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d92:	d00b      	beq.n	8009dac <TIM_Base_SetConfig+0x38>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a37      	ldr	r2, [pc, #220]	@ (8009e74 <TIM_Base_SetConfig+0x100>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d007      	beq.n	8009dac <TIM_Base_SetConfig+0x38>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a36      	ldr	r2, [pc, #216]	@ (8009e78 <TIM_Base_SetConfig+0x104>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d003      	beq.n	8009dac <TIM_Base_SetConfig+0x38>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a35      	ldr	r2, [pc, #212]	@ (8009e7c <TIM_Base_SetConfig+0x108>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d108      	bne.n	8009dbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8009e70 <TIM_Base_SetConfig+0xfc>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d01b      	beq.n	8009dfe <TIM_Base_SetConfig+0x8a>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dcc:	d017      	beq.n	8009dfe <TIM_Base_SetConfig+0x8a>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4a28      	ldr	r2, [pc, #160]	@ (8009e74 <TIM_Base_SetConfig+0x100>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d013      	beq.n	8009dfe <TIM_Base_SetConfig+0x8a>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a27      	ldr	r2, [pc, #156]	@ (8009e78 <TIM_Base_SetConfig+0x104>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d00f      	beq.n	8009dfe <TIM_Base_SetConfig+0x8a>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4a26      	ldr	r2, [pc, #152]	@ (8009e7c <TIM_Base_SetConfig+0x108>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d00b      	beq.n	8009dfe <TIM_Base_SetConfig+0x8a>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4a25      	ldr	r2, [pc, #148]	@ (8009e80 <TIM_Base_SetConfig+0x10c>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d007      	beq.n	8009dfe <TIM_Base_SetConfig+0x8a>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a24      	ldr	r2, [pc, #144]	@ (8009e84 <TIM_Base_SetConfig+0x110>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d003      	beq.n	8009dfe <TIM_Base_SetConfig+0x8a>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a23      	ldr	r2, [pc, #140]	@ (8009e88 <TIM_Base_SetConfig+0x114>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d108      	bne.n	8009e10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	689a      	ldr	r2, [r3, #8]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a0e      	ldr	r2, [pc, #56]	@ (8009e70 <TIM_Base_SetConfig+0xfc>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d103      	bne.n	8009e44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	691a      	ldr	r2, [r3, #16]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	f003 0301 	and.w	r3, r3, #1
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d105      	bne.n	8009e62 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	f023 0201 	bic.w	r2, r3, #1
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	611a      	str	r2, [r3, #16]
  }
}
 8009e62:	bf00      	nop
 8009e64:	3714      	adds	r7, #20
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	40010000 	.word	0x40010000
 8009e74:	40000400 	.word	0x40000400
 8009e78:	40000800 	.word	0x40000800
 8009e7c:	40000c00 	.word	0x40000c00
 8009e80:	40014000 	.word	0x40014000
 8009e84:	40014400 	.word	0x40014400
 8009e88:	40014800 	.word	0x40014800

08009e8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ea8:	bf00      	nop
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009eb4:	b084      	sub	sp, #16
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	f107 001c 	add.w	r0, r7, #28
 8009ec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ec6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d123      	bne.n	8009f16 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009ee2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009ef6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d105      	bne.n	8009f0a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f9dc 	bl	800a2c8 <USB_CoreReset>
 8009f10:	4603      	mov	r3, r0
 8009f12:	73fb      	strb	r3, [r7, #15]
 8009f14:	e01b      	b.n	8009f4e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 f9d0 	bl	800a2c8 <USB_CoreReset>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009f2c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d106      	bne.n	8009f42 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f38:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009f40:	e005      	b.n	8009f4e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009f4e:	7fbb      	ldrb	r3, [r7, #30]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d10b      	bne.n	8009f6c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	f043 0206 	orr.w	r2, r3, #6
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	f043 0220 	orr.w	r2, r3, #32
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f78:	b004      	add	sp, #16
 8009f7a:	4770      	bx	lr

08009f7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	f043 0201 	orr.w	r2, r3, #1
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f9e:	b480      	push	{r7}
 8009fa0:	b083      	sub	sp, #12
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	f023 0201 	bic.w	r2, r3, #1
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	460b      	mov	r3, r1
 8009fca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009fdc:	78fb      	ldrb	r3, [r7, #3]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d115      	bne.n	800a00e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009fee:	200a      	movs	r0, #10
 8009ff0:	f7f9 f9f0 	bl	80033d4 <HAL_Delay>
      ms += 10U;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	330a      	adds	r3, #10
 8009ff8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f956 	bl	800a2ac <USB_GetMode>
 800a000:	4603      	mov	r3, r0
 800a002:	2b01      	cmp	r3, #1
 800a004:	d01e      	beq.n	800a044 <USB_SetCurrentMode+0x84>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2bc7      	cmp	r3, #199	@ 0xc7
 800a00a:	d9f0      	bls.n	8009fee <USB_SetCurrentMode+0x2e>
 800a00c:	e01a      	b.n	800a044 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a00e:	78fb      	ldrb	r3, [r7, #3]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d115      	bne.n	800a040 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a020:	200a      	movs	r0, #10
 800a022:	f7f9 f9d7 	bl	80033d4 <HAL_Delay>
      ms += 10U;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	330a      	adds	r3, #10
 800a02a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 f93d 	bl	800a2ac <USB_GetMode>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d005      	beq.n	800a044 <USB_SetCurrentMode+0x84>
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2bc7      	cmp	r3, #199	@ 0xc7
 800a03c:	d9f0      	bls.n	800a020 <USB_SetCurrentMode+0x60>
 800a03e:	e001      	b.n	800a044 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	e005      	b.n	800a050 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2bc8      	cmp	r3, #200	@ 0xc8
 800a048:	d101      	bne.n	800a04e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e000      	b.n	800a050 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a062:	2300      	movs	r3, #0
 800a064:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	3301      	adds	r3, #1
 800a06a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a072:	d901      	bls.n	800a078 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a074:	2303      	movs	r3, #3
 800a076:	e01b      	b.n	800a0b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	daf2      	bge.n	800a066 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a080:	2300      	movs	r3, #0
 800a082:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	019b      	lsls	r3, r3, #6
 800a088:	f043 0220 	orr.w	r2, r3, #32
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	3301      	adds	r3, #1
 800a094:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a09c:	d901      	bls.n	800a0a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	e006      	b.n	800a0b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	f003 0320 	and.w	r3, r3, #32
 800a0aa:	2b20      	cmp	r3, #32
 800a0ac:	d0f0      	beq.n	800a090 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a0d4:	d901      	bls.n	800a0da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e018      	b.n	800a10c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	daf2      	bge.n	800a0c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2210      	movs	r2, #16
 800a0ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a0f8:	d901      	bls.n	800a0fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	e006      	b.n	800a10c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	f003 0310 	and.w	r3, r3, #16
 800a106:	2b10      	cmp	r3, #16
 800a108:	d0f0      	beq.n	800a0ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a118:	b480      	push	{r7}
 800a11a:	b089      	sub	sp, #36	@ 0x24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	4611      	mov	r1, r2
 800a124:	461a      	mov	r2, r3
 800a126:	460b      	mov	r3, r1
 800a128:	71fb      	strb	r3, [r7, #7]
 800a12a:	4613      	mov	r3, r2
 800a12c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a136:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d123      	bne.n	800a186 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a13e:	88bb      	ldrh	r3, [r7, #4]
 800a140:	3303      	adds	r3, #3
 800a142:	089b      	lsrs	r3, r3, #2
 800a144:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a146:	2300      	movs	r3, #0
 800a148:	61bb      	str	r3, [r7, #24]
 800a14a:	e018      	b.n	800a17e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a14c:	79fb      	ldrb	r3, [r7, #7]
 800a14e:	031a      	lsls	r2, r3, #12
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	4413      	add	r3, r2
 800a154:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a158:	461a      	mov	r2, r3
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	3301      	adds	r3, #1
 800a164:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	3301      	adds	r3, #1
 800a16a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	3301      	adds	r3, #1
 800a170:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	3301      	adds	r3, #1
 800a176:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	3301      	adds	r3, #1
 800a17c:	61bb      	str	r3, [r7, #24]
 800a17e:	69ba      	ldr	r2, [r7, #24]
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	429a      	cmp	r2, r3
 800a184:	d3e2      	bcc.n	800a14c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3724      	adds	r7, #36	@ 0x24
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a194:	b480      	push	{r7}
 800a196:	b08b      	sub	sp, #44	@ 0x2c
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a1aa:	88fb      	ldrh	r3, [r7, #6]
 800a1ac:	089b      	lsrs	r3, r3, #2
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a1b2:	88fb      	ldrh	r3, [r7, #6]
 800a1b4:	f003 0303 	and.w	r3, r3, #3
 800a1b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	623b      	str	r3, [r7, #32]
 800a1be:	e014      	b.n	800a1ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ca:	601a      	str	r2, [r3, #0]
    pDest++;
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1da:	3301      	adds	r3, #1
 800a1dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a1e4:	6a3b      	ldr	r3, [r7, #32]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	623b      	str	r3, [r7, #32]
 800a1ea:	6a3a      	ldr	r2, [r7, #32]
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d3e6      	bcc.n	800a1c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a1f2:	8bfb      	ldrh	r3, [r7, #30]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d01e      	beq.n	800a236 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a202:	461a      	mov	r2, r3
 800a204:	f107 0310 	add.w	r3, r7, #16
 800a208:	6812      	ldr	r2, [r2, #0]
 800a20a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a20c:	693a      	ldr	r2, [r7, #16]
 800a20e:	6a3b      	ldr	r3, [r7, #32]
 800a210:	b2db      	uxtb	r3, r3
 800a212:	00db      	lsls	r3, r3, #3
 800a214:	fa22 f303 	lsr.w	r3, r2, r3
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21c:	701a      	strb	r2, [r3, #0]
      i++;
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	3301      	adds	r3, #1
 800a222:	623b      	str	r3, [r7, #32]
      pDest++;
 800a224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a226:	3301      	adds	r3, #1
 800a228:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a22a:	8bfb      	ldrh	r3, [r7, #30]
 800a22c:	3b01      	subs	r3, #1
 800a22e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a230:	8bfb      	ldrh	r3, [r7, #30]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1ea      	bne.n	800a20c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a238:	4618      	mov	r0, r3
 800a23a:	372c      	adds	r7, #44	@ 0x2c
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	695b      	ldr	r3, [r3, #20]
 800a250:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	699b      	ldr	r3, [r3, #24]
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	4013      	ands	r3, r2
 800a25a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a25c:	68fb      	ldr	r3, [r7, #12]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3714      	adds	r7, #20
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr

0800a26a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800a26a:	b480      	push	{r7}
 800a26c:	b085      	sub	sp, #20
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
 800a272:	460b      	mov	r3, r1
 800a274:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800a27a:	78fb      	ldrb	r3, [r7, #3]
 800a27c:	015a      	lsls	r2, r3, #5
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	4413      	add	r3, r2
 800a282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800a28a:	78fb      	ldrb	r3, [r7, #3]
 800a28c:	015a      	lsls	r2, r3, #5
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	4413      	add	r3, r2
 800a292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	4013      	ands	r3, r2
 800a29c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a29e:	68bb      	ldr	r3, [r7, #8]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3714      	adds	r7, #20
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	695b      	ldr	r3, [r3, #20]
 800a2b8:	f003 0301 	and.w	r3, r3, #1
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a2e0:	d901      	bls.n	800a2e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	e01b      	b.n	800a31e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	daf2      	bge.n	800a2d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	f043 0201 	orr.w	r2, r3, #1
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	3301      	adds	r3, #1
 800a302:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a30a:	d901      	bls.n	800a310 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e006      	b.n	800a31e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	f003 0301 	and.w	r3, r3, #1
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d0f0      	beq.n	800a2fe <USB_CoreReset+0x36>

  return HAL_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3714      	adds	r7, #20
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
	...

0800a32c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a32c:	b084      	sub	sp, #16
 800a32e:	b580      	push	{r7, lr}
 800a330:	b086      	sub	sp, #24
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a33a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a34c:	461a      	mov	r2, r3
 800a34e:	2300      	movs	r3, #0
 800a350:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a356:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a362:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a36e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d119      	bne.n	800a3b6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a382:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a386:	2b01      	cmp	r3, #1
 800a388:	d10a      	bne.n	800a3a0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a398:	f043 0304 	orr.w	r3, r3, #4
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	e014      	b.n	800a3ca <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a3ae:	f023 0304 	bic.w	r3, r3, #4
 800a3b2:	6013      	str	r3, [r2, #0]
 800a3b4:	e009      	b.n	800a3ca <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a3c4:	f023 0304 	bic.w	r3, r3, #4
 800a3c8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a3ca:	2110      	movs	r1, #16
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f7ff fe43 	bl	800a058 <USB_FlushTxFifo>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d001      	beq.n	800a3dc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff fe6d 	bl	800a0bc <USB_FlushRxFifo>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d001      	beq.n	800a3ec <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	613b      	str	r3, [r7, #16]
 800a3f0:	e015      	b.n	800a41e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	015a      	lsls	r2, r3, #5
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3fe:	461a      	mov	r2, r3
 800a400:	f04f 33ff 	mov.w	r3, #4294967295
 800a404:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a412:	461a      	mov	r2, r3
 800a414:	2300      	movs	r3, #0
 800a416:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	3301      	adds	r3, #1
 800a41c:	613b      	str	r3, [r7, #16]
 800a41e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a422:	461a      	mov	r2, r3
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	4293      	cmp	r3, r2
 800a428:	d3e3      	bcc.n	800a3f2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f04f 32ff 	mov.w	r2, #4294967295
 800a436:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2280      	movs	r2, #128	@ 0x80
 800a43c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a0e      	ldr	r2, [pc, #56]	@ (800a47c <USB_HostInit+0x150>)
 800a442:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a0e      	ldr	r2, [pc, #56]	@ (800a480 <USB_HostInit+0x154>)
 800a448:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a44c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a450:	2b00      	cmp	r3, #0
 800a452:	d105      	bne.n	800a460 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	f043 0210 	orr.w	r2, r3, #16
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	699a      	ldr	r2, [r3, #24]
 800a464:	4b07      	ldr	r3, [pc, #28]	@ (800a484 <USB_HostInit+0x158>)
 800a466:	4313      	orrs	r3, r2
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a46c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3718      	adds	r7, #24
 800a472:	46bd      	mov	sp, r7
 800a474:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a478:	b004      	add	sp, #16
 800a47a:	4770      	bx	lr
 800a47c:	00600080 	.word	0x00600080
 800a480:	004000e0 	.word	0x004000e0
 800a484:	a3200008 	.word	0xa3200008

0800a488 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	460b      	mov	r3, r1
 800a492:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a4a6:	f023 0303 	bic.w	r3, r3, #3
 800a4aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	78fb      	ldrb	r3, [r7, #3]
 800a4b6:	f003 0303 	and.w	r3, r3, #3
 800a4ba:	68f9      	ldr	r1, [r7, #12]
 800a4bc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a4c4:	78fb      	ldrb	r3, [r7, #3]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d107      	bne.n	800a4da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a4d6:	6053      	str	r3, [r2, #4]
 800a4d8:	e00c      	b.n	800a4f4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800a4da:	78fb      	ldrb	r3, [r7, #3]
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d107      	bne.n	800a4f0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	f241 7370 	movw	r3, #6000	@ 0x1770
 800a4ec:	6053      	str	r3, [r2, #4]
 800a4ee:	e001      	b.n	800a4f4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e000      	b.n	800a4f6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3714      	adds	r7, #20
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b084      	sub	sp, #16
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a50e:	2300      	movs	r3, #0
 800a510:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a522:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a52c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a530:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a532:	2064      	movs	r0, #100	@ 0x64
 800a534:	f7f8 ff4e 	bl	80033d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a544:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a546:	200a      	movs	r0, #10
 800a548:	f7f8 ff44 	bl	80033d4 <HAL_Delay>

  return HAL_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a556:	b480      	push	{r7}
 800a558:	b085      	sub	sp, #20
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	460b      	mov	r3, r1
 800a560:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a566:	2300      	movs	r3, #0
 800a568:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a57a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a582:	2b00      	cmp	r3, #0
 800a584:	d109      	bne.n	800a59a <USB_DriveVbus+0x44>
 800a586:	78fb      	ldrb	r3, [r7, #3]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d106      	bne.n	800a59a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a594:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a598:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a5a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5a4:	d109      	bne.n	800a5ba <USB_DriveVbus+0x64>
 800a5a6:	78fb      	ldrb	r3, [r7, #3]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d106      	bne.n	800a5ba <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a5b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a5b8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3714      	adds	r7, #20
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	0c5b      	lsrs	r3, r3, #17
 800a5e6:	f003 0303 	and.w	r3, r3, #3
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3714      	adds	r7, #20
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr

0800a5f6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b085      	sub	sp, #20
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	b29b      	uxth	r3, r3
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3714      	adds	r7, #20
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b088      	sub	sp, #32
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	4608      	mov	r0, r1
 800a622:	4611      	mov	r1, r2
 800a624:	461a      	mov	r2, r3
 800a626:	4603      	mov	r3, r0
 800a628:	70fb      	strb	r3, [r7, #3]
 800a62a:	460b      	mov	r3, r1
 800a62c:	70bb      	strb	r3, [r7, #2]
 800a62e:	4613      	mov	r3, r2
 800a630:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a632:	2300      	movs	r3, #0
 800a634:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800a63a:	78fb      	ldrb	r3, [r7, #3]
 800a63c:	015a      	lsls	r2, r3, #5
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	4413      	add	r3, r2
 800a642:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a646:	461a      	mov	r2, r3
 800a648:	f04f 33ff 	mov.w	r3, #4294967295
 800a64c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a64e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a652:	2b03      	cmp	r3, #3
 800a654:	d867      	bhi.n	800a726 <USB_HC_Init+0x10e>
 800a656:	a201      	add	r2, pc, #4	@ (adr r2, 800a65c <USB_HC_Init+0x44>)
 800a658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a65c:	0800a66d 	.word	0x0800a66d
 800a660:	0800a6e9 	.word	0x0800a6e9
 800a664:	0800a66d 	.word	0x0800a66d
 800a668:	0800a6ab 	.word	0x0800a6ab
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a66c:	78fb      	ldrb	r3, [r7, #3]
 800a66e:	015a      	lsls	r2, r3, #5
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	4413      	add	r3, r2
 800a674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a678:	461a      	mov	r2, r3
 800a67a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800a67e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a680:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a684:	2b00      	cmp	r3, #0
 800a686:	da51      	bge.n	800a72c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a688:	78fb      	ldrb	r3, [r7, #3]
 800a68a:	015a      	lsls	r2, r3, #5
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	4413      	add	r3, r2
 800a690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	78fa      	ldrb	r2, [r7, #3]
 800a698:	0151      	lsls	r1, r2, #5
 800a69a:	693a      	ldr	r2, [r7, #16]
 800a69c:	440a      	add	r2, r1
 800a69e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a6a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6a6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800a6a8:	e040      	b.n	800a72c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a6aa:	78fb      	ldrb	r3, [r7, #3]
 800a6ac:	015a      	lsls	r2, r3, #5
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	f240 639d 	movw	r3, #1693	@ 0x69d
 800a6bc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a6be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	da34      	bge.n	800a730 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a6c6:	78fb      	ldrb	r3, [r7, #3]
 800a6c8:	015a      	lsls	r2, r3, #5
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	78fa      	ldrb	r2, [r7, #3]
 800a6d6:	0151      	lsls	r1, r2, #5
 800a6d8:	693a      	ldr	r2, [r7, #16]
 800a6da:	440a      	add	r2, r1
 800a6dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a6e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6e4:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a6e6:	e023      	b.n	800a730 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a6e8:	78fb      	ldrb	r3, [r7, #3]
 800a6ea:	015a      	lsls	r2, r3, #5
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	f240 2325 	movw	r3, #549	@ 0x225
 800a6fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a6fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a700:	2b00      	cmp	r3, #0
 800a702:	da17      	bge.n	800a734 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a704:	78fb      	ldrb	r3, [r7, #3]
 800a706:	015a      	lsls	r2, r3, #5
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	4413      	add	r3, r2
 800a70c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	78fa      	ldrb	r2, [r7, #3]
 800a714:	0151      	lsls	r1, r2, #5
 800a716:	693a      	ldr	r2, [r7, #16]
 800a718:	440a      	add	r2, r1
 800a71a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a71e:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800a722:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a724:	e006      	b.n	800a734 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	77fb      	strb	r3, [r7, #31]
      break;
 800a72a:	e004      	b.n	800a736 <USB_HC_Init+0x11e>
      break;
 800a72c:	bf00      	nop
 800a72e:	e002      	b.n	800a736 <USB_HC_Init+0x11e>
      break;
 800a730:	bf00      	nop
 800a732:	e000      	b.n	800a736 <USB_HC_Init+0x11e>
      break;
 800a734:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a736:	78fb      	ldrb	r3, [r7, #3]
 800a738:	015a      	lsls	r2, r3, #5
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	4413      	add	r3, r2
 800a73e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a742:	461a      	mov	r2, r3
 800a744:	2300      	movs	r3, #0
 800a746:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a748:	78fb      	ldrb	r3, [r7, #3]
 800a74a:	015a      	lsls	r2, r3, #5
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	78fa      	ldrb	r2, [r7, #3]
 800a758:	0151      	lsls	r1, r2, #5
 800a75a:	693a      	ldr	r2, [r7, #16]
 800a75c:	440a      	add	r2, r1
 800a75e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a762:	f043 0302 	orr.w	r3, r3, #2
 800a766:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a76e:	699a      	ldr	r2, [r3, #24]
 800a770:	78fb      	ldrb	r3, [r7, #3]
 800a772:	f003 030f 	and.w	r3, r3, #15
 800a776:	2101      	movs	r1, #1
 800a778:	fa01 f303 	lsl.w	r3, r1, r3
 800a77c:	6939      	ldr	r1, [r7, #16]
 800a77e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a782:	4313      	orrs	r3, r2
 800a784:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a792:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a796:	2b00      	cmp	r3, #0
 800a798:	da03      	bge.n	800a7a2 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a79a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a79e:	61bb      	str	r3, [r7, #24]
 800a7a0:	e001      	b.n	800a7a6 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f7ff ff0e 	bl	800a5c8 <USB_GetHostSpeed>
 800a7ac:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a7ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	d106      	bne.n	800a7c4 <USB_HC_Init+0x1ac>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d003      	beq.n	800a7c4 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a7bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a7c0:	617b      	str	r3, [r7, #20]
 800a7c2:	e001      	b.n	800a7c8 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a7c8:	787b      	ldrb	r3, [r7, #1]
 800a7ca:	059b      	lsls	r3, r3, #22
 800a7cc:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a7d0:	78bb      	ldrb	r3, [r7, #2]
 800a7d2:	02db      	lsls	r3, r3, #11
 800a7d4:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a7d8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a7da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a7de:	049b      	lsls	r3, r3, #18
 800a7e0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a7e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800a7e6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a7e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a7ec:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	431a      	orrs	r2, r3
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a7f6:	78fa      	ldrb	r2, [r7, #3]
 800a7f8:	0151      	lsls	r1, r2, #5
 800a7fa:	693a      	ldr	r2, [r7, #16]
 800a7fc:	440a      	add	r2, r1
 800a7fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a806:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a808:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a80c:	2b03      	cmp	r3, #3
 800a80e:	d003      	beq.n	800a818 <USB_HC_Init+0x200>
 800a810:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a814:	2b01      	cmp	r3, #1
 800a816:	d10f      	bne.n	800a838 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a818:	78fb      	ldrb	r3, [r7, #3]
 800a81a:	015a      	lsls	r2, r3, #5
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	4413      	add	r3, r2
 800a820:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	78fa      	ldrb	r2, [r7, #3]
 800a828:	0151      	lsls	r1, r2, #5
 800a82a:	693a      	ldr	r2, [r7, #16]
 800a82c:	440a      	add	r2, r1
 800a82e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a832:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a836:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a838:	7ffb      	ldrb	r3, [r7, #31]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3720      	adds	r7, #32
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop

0800a844 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b08c      	sub	sp, #48	@ 0x30
 800a848:	af02      	add	r7, sp, #8
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	4613      	mov	r3, r2
 800a850:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	785b      	ldrb	r3, [r3, #1]
 800a85a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800a85c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a860:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	799b      	ldrb	r3, [r3, #6]
 800a866:	2b01      	cmp	r3, #1
 800a868:	d158      	bne.n	800a91c <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800a86a:	2301      	movs	r3, #1
 800a86c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	78db      	ldrb	r3, [r3, #3]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d007      	beq.n	800a886 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a876:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a878:	68ba      	ldr	r2, [r7, #8]
 800a87a:	8a92      	ldrh	r2, [r2, #20]
 800a87c:	fb03 f202 	mul.w	r2, r3, r2
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	61da      	str	r2, [r3, #28]
 800a884:	e079      	b.n	800a97a <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	7c9b      	ldrb	r3, [r3, #18]
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d130      	bne.n	800a8f0 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	6a1b      	ldr	r3, [r3, #32]
 800a892:	2bbc      	cmp	r3, #188	@ 0xbc
 800a894:	d918      	bls.n	800a8c8 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	8a9b      	ldrh	r3, [r3, #20]
 800a89a:	461a      	mov	r2, r3
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	69da      	ldr	r2, [r3, #28]
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d003      	beq.n	800a8b8 <USB_HC_StartXfer+0x74>
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d103      	bne.n	800a8c0 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	60da      	str	r2, [r3, #12]
 800a8be:	e05c      	b.n	800a97a <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	60da      	str	r2, [r3, #12]
 800a8c6:	e058      	b.n	800a97a <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	6a1a      	ldr	r2, [r3, #32]
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d007      	beq.n	800a8e8 <USB_HC_StartXfer+0xa4>
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	2b02      	cmp	r3, #2
 800a8de:	d003      	beq.n	800a8e8 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	2204      	movs	r2, #4
 800a8e4:	60da      	str	r2, [r3, #12]
 800a8e6:	e048      	b.n	800a97a <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	2203      	movs	r2, #3
 800a8ec:	60da      	str	r2, [r3, #12]
 800a8ee:	e044      	b.n	800a97a <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800a8f0:	79fb      	ldrb	r3, [r7, #7]
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d10d      	bne.n	800a912 <USB_HC_StartXfer+0xce>
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	6a1b      	ldr	r3, [r3, #32]
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	8a92      	ldrh	r2, [r2, #20]
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d907      	bls.n	800a912 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a902:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	8a92      	ldrh	r2, [r2, #20]
 800a908:	fb03 f202 	mul.w	r2, r3, r2
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	61da      	str	r2, [r3, #28]
 800a910:	e033      	b.n	800a97a <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	6a1a      	ldr	r2, [r3, #32]
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	61da      	str	r2, [r3, #28]
 800a91a:	e02e      	b.n	800a97a <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	6a1b      	ldr	r3, [r3, #32]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d018      	beq.n	800a956 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	6a1b      	ldr	r3, [r3, #32]
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	8a92      	ldrh	r2, [r2, #20]
 800a92c:	4413      	add	r3, r2
 800a92e:	3b01      	subs	r3, #1
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	8a92      	ldrh	r2, [r2, #20]
 800a934:	fbb3 f3f2 	udiv	r3, r3, r2
 800a938:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800a93a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a93c:	8b7b      	ldrh	r3, [r7, #26]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d90b      	bls.n	800a95a <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 800a942:	8b7b      	ldrh	r3, [r7, #26]
 800a944:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a946:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a948:	68ba      	ldr	r2, [r7, #8]
 800a94a:	8a92      	ldrh	r2, [r2, #20]
 800a94c:	fb03 f202 	mul.w	r2, r3, r2
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	61da      	str	r2, [r3, #28]
 800a954:	e001      	b.n	800a95a <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 800a956:	2301      	movs	r3, #1
 800a958:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	78db      	ldrb	r3, [r3, #3]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d007      	beq.n	800a972 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a962:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	8a92      	ldrh	r2, [r2, #20]
 800a968:	fb03 f202 	mul.w	r2, r3, r2
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	61da      	str	r2, [r3, #28]
 800a970:	e003      	b.n	800a97a <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	6a1a      	ldr	r2, [r3, #32]
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	69db      	ldr	r3, [r3, #28]
 800a97e:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a982:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a984:	04d9      	lsls	r1, r3, #19
 800a986:	4ba4      	ldr	r3, [pc, #656]	@ (800ac18 <USB_HC_StartXfer+0x3d4>)
 800a988:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a98a:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	7d9b      	ldrb	r3, [r3, #22]
 800a990:	075b      	lsls	r3, r3, #29
 800a992:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a996:	69f9      	ldr	r1, [r7, #28]
 800a998:	0148      	lsls	r0, r1, #5
 800a99a:	6a39      	ldr	r1, [r7, #32]
 800a99c:	4401      	add	r1, r0
 800a99e:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a9a2:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a9a4:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a9a6:	79fb      	ldrb	r3, [r7, #7]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d009      	beq.n	800a9c0 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	6999      	ldr	r1, [r3, #24]
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	015a      	lsls	r2, r3, #5
 800a9b4:	6a3b      	ldr	r3, [r7, #32]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9bc:	460a      	mov	r2, r1
 800a9be:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a9c0:	6a3b      	ldr	r3, [r7, #32]
 800a9c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	f003 0301 	and.w	r3, r3, #1
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	bf0c      	ite	eq
 800a9d0:	2301      	moveq	r3, #1
 800a9d2:	2300      	movne	r3, #0
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	015a      	lsls	r2, r3, #5
 800a9dc:	6a3b      	ldr	r3, [r7, #32]
 800a9de:	4413      	add	r3, r2
 800a9e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	69fa      	ldr	r2, [r7, #28]
 800a9e8:	0151      	lsls	r1, r2, #5
 800a9ea:	6a3a      	ldr	r2, [r7, #32]
 800a9ec:	440a      	add	r2, r1
 800a9ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a9f2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a9f6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	015a      	lsls	r2, r3, #5
 800a9fc:	6a3b      	ldr	r3, [r7, #32]
 800a9fe:	4413      	add	r3, r2
 800aa00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	7e7b      	ldrb	r3, [r7, #25]
 800aa08:	075b      	lsls	r3, r3, #29
 800aa0a:	69f9      	ldr	r1, [r7, #28]
 800aa0c:	0148      	lsls	r0, r1, #5
 800aa0e:	6a39      	ldr	r1, [r7, #32]
 800aa10:	4401      	add	r1, r0
 800aa12:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800aa16:	4313      	orrs	r3, r2
 800aa18:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	799b      	ldrb	r3, [r3, #6]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	f040 80c4 	bne.w	800abac <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	7c5b      	ldrb	r3, [r3, #17]
 800aa28:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	69fa      	ldr	r2, [r7, #28]
 800aa32:	0151      	lsls	r1, r2, #5
 800aa34:	6a3a      	ldr	r2, [r7, #32]
 800aa36:	440a      	add	r2, r1
 800aa38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800aa3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800aa40:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	015a      	lsls	r2, r3, #5
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	4413      	add	r3, r2
 800aa4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	69fa      	ldr	r2, [r7, #28]
 800aa52:	0151      	lsls	r1, r2, #5
 800aa54:	6a3a      	ldr	r2, [r7, #32]
 800aa56:	440a      	add	r2, r1
 800aa58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa5c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800aa60:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	79db      	ldrb	r3, [r3, #7]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d123      	bne.n	800aab2 <USB_HC_StartXfer+0x26e>
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	78db      	ldrb	r3, [r3, #3]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d11f      	bne.n	800aab2 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	015a      	lsls	r2, r3, #5
 800aa76:	6a3b      	ldr	r3, [r7, #32]
 800aa78:	4413      	add	r3, r2
 800aa7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	69fa      	ldr	r2, [r7, #28]
 800aa82:	0151      	lsls	r1, r2, #5
 800aa84:	6a3a      	ldr	r2, [r7, #32]
 800aa86:	440a      	add	r2, r1
 800aa88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa90:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800aa92:	69fb      	ldr	r3, [r7, #28]
 800aa94:	015a      	lsls	r2, r3, #5
 800aa96:	6a3b      	ldr	r3, [r7, #32]
 800aa98:	4413      	add	r3, r2
 800aa9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	69fa      	ldr	r2, [r7, #28]
 800aaa2:	0151      	lsls	r1, r2, #5
 800aaa4:	6a3a      	ldr	r2, [r7, #32]
 800aaa6:	440a      	add	r2, r1
 800aaa8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aaac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aab0:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	7c9b      	ldrb	r3, [r3, #18]
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d003      	beq.n	800aac2 <USB_HC_StartXfer+0x27e>
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	7c9b      	ldrb	r3, [r3, #18]
 800aabe:	2b03      	cmp	r3, #3
 800aac0:	d117      	bne.n	800aaf2 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d113      	bne.n	800aaf2 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	78db      	ldrb	r3, [r3, #3]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d10f      	bne.n	800aaf2 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	015a      	lsls	r2, r3, #5
 800aad6:	6a3b      	ldr	r3, [r7, #32]
 800aad8:	4413      	add	r3, r2
 800aada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	69fa      	ldr	r2, [r7, #28]
 800aae2:	0151      	lsls	r1, r2, #5
 800aae4:	6a3a      	ldr	r2, [r7, #32]
 800aae6:	440a      	add	r2, r1
 800aae8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aaec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aaf0:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	7c9b      	ldrb	r3, [r3, #18]
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d163      	bne.n	800abc2 <USB_HC_StartXfer+0x37e>
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	78db      	ldrb	r3, [r3, #3]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d15f      	bne.n	800abc2 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	3b01      	subs	r3, #1
 800ab08:	2b03      	cmp	r3, #3
 800ab0a:	d859      	bhi.n	800abc0 <USB_HC_StartXfer+0x37c>
 800ab0c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab14 <USB_HC_StartXfer+0x2d0>)
 800ab0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab12:	bf00      	nop
 800ab14:	0800ab25 	.word	0x0800ab25
 800ab18:	0800ab47 	.word	0x0800ab47
 800ab1c:	0800ab69 	.word	0x0800ab69
 800ab20:	0800ab8b 	.word	0x0800ab8b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	015a      	lsls	r2, r3, #5
 800ab28:	6a3b      	ldr	r3, [r7, #32]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	69fa      	ldr	r2, [r7, #28]
 800ab34:	0151      	lsls	r1, r2, #5
 800ab36:	6a3a      	ldr	r2, [r7, #32]
 800ab38:	440a      	add	r2, r1
 800ab3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ab3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab42:	6053      	str	r3, [r2, #4]
          break;
 800ab44:	e03d      	b.n	800abc2 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	015a      	lsls	r2, r3, #5
 800ab4a:	6a3b      	ldr	r3, [r7, #32]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	69fa      	ldr	r2, [r7, #28]
 800ab56:	0151      	lsls	r1, r2, #5
 800ab58:	6a3a      	ldr	r2, [r7, #32]
 800ab5a:	440a      	add	r2, r1
 800ab5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ab60:	f043 030e 	orr.w	r3, r3, #14
 800ab64:	6053      	str	r3, [r2, #4]
          break;
 800ab66:	e02c      	b.n	800abc2 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	015a      	lsls	r2, r3, #5
 800ab6c:	6a3b      	ldr	r3, [r7, #32]
 800ab6e:	4413      	add	r3, r2
 800ab70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	69fa      	ldr	r2, [r7, #28]
 800ab78:	0151      	lsls	r1, r2, #5
 800ab7a:	6a3a      	ldr	r2, [r7, #32]
 800ab7c:	440a      	add	r2, r1
 800ab7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ab82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ab86:	6053      	str	r3, [r2, #4]
          break;
 800ab88:	e01b      	b.n	800abc2 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	015a      	lsls	r2, r3, #5
 800ab8e:	6a3b      	ldr	r3, [r7, #32]
 800ab90:	4413      	add	r3, r2
 800ab92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	69fa      	ldr	r2, [r7, #28]
 800ab9a:	0151      	lsls	r1, r2, #5
 800ab9c:	6a3a      	ldr	r2, [r7, #32]
 800ab9e:	440a      	add	r2, r1
 800aba0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aba4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aba8:	6053      	str	r3, [r2, #4]
          break;
 800abaa:	e00a      	b.n	800abc2 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	015a      	lsls	r2, r3, #5
 800abb0:	6a3b      	ldr	r3, [r7, #32]
 800abb2:	4413      	add	r3, r2
 800abb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800abb8:	461a      	mov	r2, r3
 800abba:	2300      	movs	r3, #0
 800abbc:	6053      	str	r3, [r2, #4]
 800abbe:	e000      	b.n	800abc2 <USB_HC_StartXfer+0x37e>
          break;
 800abc0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	015a      	lsls	r2, r3, #5
 800abc6:	6a3b      	ldr	r3, [r7, #32]
 800abc8:	4413      	add	r3, r2
 800abca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800abd8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	78db      	ldrb	r3, [r3, #3]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d004      	beq.n	800abec <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abe8:	613b      	str	r3, [r7, #16]
 800abea:	e003      	b.n	800abf4 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800abf2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800abfa:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	015a      	lsls	r2, r3, #5
 800ac00:	6a3b      	ldr	r3, [r7, #32]
 800ac02:	4413      	add	r3, r2
 800ac04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac08:	461a      	mov	r2, r3
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ac0e:	79fb      	ldrb	r3, [r7, #7]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d003      	beq.n	800ac1c <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 800ac14:	2300      	movs	r3, #0
 800ac16:	e055      	b.n	800acc4 <USB_HC_StartXfer+0x480>
 800ac18:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	78db      	ldrb	r3, [r3, #3]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d14e      	bne.n	800acc2 <USB_HC_StartXfer+0x47e>
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	6a1b      	ldr	r3, [r3, #32]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d04a      	beq.n	800acc2 <USB_HC_StartXfer+0x47e>
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	79db      	ldrb	r3, [r3, #7]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d146      	bne.n	800acc2 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	7c9b      	ldrb	r3, [r3, #18]
 800ac38:	2b03      	cmp	r3, #3
 800ac3a:	d831      	bhi.n	800aca0 <USB_HC_StartXfer+0x45c>
 800ac3c:	a201      	add	r2, pc, #4	@ (adr r2, 800ac44 <USB_HC_StartXfer+0x400>)
 800ac3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac42:	bf00      	nop
 800ac44:	0800ac55 	.word	0x0800ac55
 800ac48:	0800ac79 	.word	0x0800ac79
 800ac4c:	0800ac55 	.word	0x0800ac55
 800ac50:	0800ac79 	.word	0x0800ac79
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	6a1b      	ldr	r3, [r3, #32]
 800ac58:	3303      	adds	r3, #3
 800ac5a:	089b      	lsrs	r3, r3, #2
 800ac5c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ac5e:	8afa      	ldrh	r2, [r7, #22]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d91c      	bls.n	800aca4 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	699b      	ldr	r3, [r3, #24]
 800ac6e:	f043 0220 	orr.w	r2, r3, #32
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	619a      	str	r2, [r3, #24]
        }
        break;
 800ac76:	e015      	b.n	800aca4 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	6a1b      	ldr	r3, [r3, #32]
 800ac7c:	3303      	adds	r3, #3
 800ac7e:	089b      	lsrs	r3, r3, #2
 800ac80:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ac82:	8afa      	ldrh	r2, [r7, #22]
 800ac84:	6a3b      	ldr	r3, [r7, #32]
 800ac86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac8a:	691b      	ldr	r3, [r3, #16]
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d90a      	bls.n	800aca8 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	699b      	ldr	r3, [r3, #24]
 800ac96:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	619a      	str	r2, [r3, #24]
        }
        break;
 800ac9e:	e003      	b.n	800aca8 <USB_HC_StartXfer+0x464>

      default:
        break;
 800aca0:	bf00      	nop
 800aca2:	e002      	b.n	800acaa <USB_HC_StartXfer+0x466>
        break;
 800aca4:	bf00      	nop
 800aca6:	e000      	b.n	800acaa <USB_HC_StartXfer+0x466>
        break;
 800aca8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	6999      	ldr	r1, [r3, #24]
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	785a      	ldrb	r2, [r3, #1]
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	2000      	movs	r0, #0
 800acba:	9000      	str	r0, [sp, #0]
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f7ff fa2b 	bl	800a118 <USB_WritePacket>
  }

  return HAL_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3728      	adds	r7, #40	@ 0x28
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800accc:	b480      	push	{r7}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800acde:	695b      	ldr	r3, [r3, #20]
 800ace0:	b29b      	uxth	r3, r3
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3714      	adds	r7, #20
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr

0800acee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800acee:	b480      	push	{r7}
 800acf0:	b089      	sub	sp, #36	@ 0x24
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
 800acf6:	460b      	mov	r3, r1
 800acf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800acfe:	78fb      	ldrb	r3, [r7, #3]
 800ad00:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ad02:	2300      	movs	r3, #0
 800ad04:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	015a      	lsls	r2, r3, #5
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	0c9b      	lsrs	r3, r3, #18
 800ad16:	f003 0303 	and.w	r3, r3, #3
 800ad1a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	015a      	lsls	r2, r3, #5
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	4413      	add	r3, r2
 800ad24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	0fdb      	lsrs	r3, r3, #31
 800ad2c:	f003 0301 	and.w	r3, r3, #1
 800ad30:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	015a      	lsls	r2, r3, #5
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	4413      	add	r3, r2
 800ad3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	0fdb      	lsrs	r3, r3, #31
 800ad42:	f003 0301 	and.w	r3, r3, #1
 800ad46:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	f003 0320 	and.w	r3, r3, #32
 800ad50:	2b20      	cmp	r3, #32
 800ad52:	d10d      	bne.n	800ad70 <USB_HC_Halt+0x82>
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d10a      	bne.n	800ad70 <USB_HC_Halt+0x82>
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d005      	beq.n	800ad6c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d002      	beq.n	800ad6c <USB_HC_Halt+0x7e>
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	2b03      	cmp	r3, #3
 800ad6a:	d101      	bne.n	800ad70 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	e0d8      	b.n	800af22 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d002      	beq.n	800ad7c <USB_HC_Halt+0x8e>
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	2b02      	cmp	r3, #2
 800ad7a:	d173      	bne.n	800ae64 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	015a      	lsls	r2, r3, #5
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	4413      	add	r3, r2
 800ad84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	69ba      	ldr	r2, [r7, #24]
 800ad8c:	0151      	lsls	r1, r2, #5
 800ad8e:	69fa      	ldr	r2, [r7, #28]
 800ad90:	440a      	add	r2, r1
 800ad92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ad96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ad9a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	f003 0320 	and.w	r3, r3, #32
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d14a      	bne.n	800ae3e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d133      	bne.n	800ae1c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	015a      	lsls	r2, r3, #5
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	4413      	add	r3, r2
 800adbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	69ba      	ldr	r2, [r7, #24]
 800adc4:	0151      	lsls	r1, r2, #5
 800adc6:	69fa      	ldr	r2, [r7, #28]
 800adc8:	440a      	add	r2, r1
 800adca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800adce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800add2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	015a      	lsls	r2, r3, #5
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	4413      	add	r3, r2
 800addc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	69ba      	ldr	r2, [r7, #24]
 800ade4:	0151      	lsls	r1, r2, #5
 800ade6:	69fa      	ldr	r2, [r7, #28]
 800ade8:	440a      	add	r2, r1
 800adea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800adee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800adf2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	3301      	adds	r3, #1
 800adf8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ae00:	d82e      	bhi.n	800ae60 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	015a      	lsls	r2, r3, #5
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	4413      	add	r3, r2
 800ae0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae18:	d0ec      	beq.n	800adf4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae1a:	e081      	b.n	800af20 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	015a      	lsls	r2, r3, #5
 800ae20:	69fb      	ldr	r3, [r7, #28]
 800ae22:	4413      	add	r3, r2
 800ae24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	69ba      	ldr	r2, [r7, #24]
 800ae2c:	0151      	lsls	r1, r2, #5
 800ae2e:	69fa      	ldr	r2, [r7, #28]
 800ae30:	440a      	add	r2, r1
 800ae32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ae3a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae3c:	e070      	b.n	800af20 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	015a      	lsls	r2, r3, #5
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	4413      	add	r3, r2
 800ae46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	69ba      	ldr	r2, [r7, #24]
 800ae4e:	0151      	lsls	r1, r2, #5
 800ae50:	69fa      	ldr	r2, [r7, #28]
 800ae52:	440a      	add	r2, r1
 800ae54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ae5c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae5e:	e05f      	b.n	800af20 <USB_HC_Halt+0x232>
            break;
 800ae60:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae62:	e05d      	b.n	800af20 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	015a      	lsls	r2, r3, #5
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	4413      	add	r3, r2
 800ae6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	69ba      	ldr	r2, [r7, #24]
 800ae74:	0151      	lsls	r1, r2, #5
 800ae76:	69fa      	ldr	r2, [r7, #28]
 800ae78:	440a      	add	r2, r1
 800ae7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae82:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae8a:	691b      	ldr	r3, [r3, #16]
 800ae8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d133      	bne.n	800aefc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	015a      	lsls	r2, r3, #5
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	69ba      	ldr	r2, [r7, #24]
 800aea4:	0151      	lsls	r1, r2, #5
 800aea6:	69fa      	ldr	r2, [r7, #28]
 800aea8:	440a      	add	r2, r1
 800aeaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aeae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aeb2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	015a      	lsls	r2, r3, #5
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	4413      	add	r3, r2
 800aebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	69ba      	ldr	r2, [r7, #24]
 800aec4:	0151      	lsls	r1, r2, #5
 800aec6:	69fa      	ldr	r2, [r7, #28]
 800aec8:	440a      	add	r2, r1
 800aeca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aece:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aed2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	3301      	adds	r3, #1
 800aed8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aee0:	d81d      	bhi.n	800af1e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aee2:	69bb      	ldr	r3, [r7, #24]
 800aee4:	015a      	lsls	r2, r3, #5
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	4413      	add	r3, r2
 800aeea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aef4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aef8:	d0ec      	beq.n	800aed4 <USB_HC_Halt+0x1e6>
 800aefa:	e011      	b.n	800af20 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	015a      	lsls	r2, r3, #5
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	4413      	add	r3, r2
 800af04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	69ba      	ldr	r2, [r7, #24]
 800af0c:	0151      	lsls	r1, r2, #5
 800af0e:	69fa      	ldr	r2, [r7, #28]
 800af10:	440a      	add	r2, r1
 800af12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800af16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800af1a:	6013      	str	r3, [r2, #0]
 800af1c:	e000      	b.n	800af20 <USB_HC_Halt+0x232>
          break;
 800af1e:	bf00      	nop
    }
  }

  return HAL_OK;
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	3724      	adds	r7, #36	@ 0x24
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr

0800af2e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	b088      	sub	sp, #32
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800af36:	2300      	movs	r3, #0
 800af38:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800af3e:	2300      	movs	r3, #0
 800af40:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f7ff f82b 	bl	8009f9e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800af48:	2110      	movs	r1, #16
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f7ff f884 	bl	800a058 <USB_FlushTxFifo>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d001      	beq.n	800af5a <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f7ff f8ae 	bl	800a0bc <USB_FlushRxFifo>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d001      	beq.n	800af6a <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800af6a:	2300      	movs	r3, #0
 800af6c:	61bb      	str	r3, [r7, #24]
 800af6e:	e01f      	b.n	800afb0 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	015a      	lsls	r2, r3, #5
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	4413      	add	r3, r2
 800af78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800af86:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af8e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800af96:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	015a      	lsls	r2, r3, #5
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	4413      	add	r3, r2
 800afa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800afa4:	461a      	mov	r2, r3
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	3301      	adds	r3, #1
 800afae:	61bb      	str	r3, [r7, #24]
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	2b0f      	cmp	r3, #15
 800afb4:	d9dc      	bls.n	800af70 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800afb6:	2300      	movs	r3, #0
 800afb8:	61bb      	str	r3, [r7, #24]
 800afba:	e034      	b.n	800b026 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	015a      	lsls	r2, r3, #5
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	4413      	add	r3, r2
 800afc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800afd2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800afda:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800afe2:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	015a      	lsls	r2, r3, #5
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	4413      	add	r3, r2
 800afec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aff0:	461a      	mov	r2, r3
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	3301      	adds	r3, #1
 800affa:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b002:	d80c      	bhi.n	800b01e <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	015a      	lsls	r2, r3, #5
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	4413      	add	r3, r2
 800b00c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b016:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b01a:	d0ec      	beq.n	800aff6 <USB_StopHost+0xc8>
 800b01c:	e000      	b.n	800b020 <USB_StopHost+0xf2>
        break;
 800b01e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	3301      	adds	r3, #1
 800b024:	61bb      	str	r3, [r7, #24]
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	2b0f      	cmp	r3, #15
 800b02a:	d9c7      	bls.n	800afbc <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b032:	461a      	mov	r2, r3
 800b034:	f04f 33ff 	mov.w	r3, #4294967295
 800b038:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f04f 32ff 	mov.w	r2, #4294967295
 800b040:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f7fe ff9a 	bl	8009f7c <USB_EnableGlobalInt>

  return ret;
 800b048:	7ffb      	ldrb	r3, [r7, #31]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3720      	adds	r7, #32
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
	...

0800b054 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800b058:	4904      	ldr	r1, [pc, #16]	@ (800b06c <MX_FATFS_Init+0x18>)
 800b05a:	4805      	ldr	r0, [pc, #20]	@ (800b070 <MX_FATFS_Init+0x1c>)
 800b05c:	f006 fc10 	bl	8011880 <FATFS_LinkDriver>
 800b060:	4603      	mov	r3, r0
 800b062:	461a      	mov	r2, r3
 800b064:	4b03      	ldr	r3, [pc, #12]	@ (800b074 <MX_FATFS_Init+0x20>)
 800b066:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b068:	bf00      	nop
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	20001e08 	.word	0x20001e08
 800b070:	08017630 	.word	0x08017630
 800b074:	20001e04 	.word	0x20001e04

0800b078 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b078:	b480      	push	{r7}
 800b07a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b07c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b07e:	4618      	mov	r0, r3
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	4603      	mov	r3, r0
 800b090:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800b092:	2300      	movs	r3, #0
}
 800b094:	4618      	mov	r0, r3
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800b0ae:	79fb      	ldrb	r3, [r7, #7]
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	4808      	ldr	r0, [pc, #32]	@ (800b0d4 <USBH_status+0x34>)
 800b0b4:	f000 fe79 	bl	800bdaa <USBH_MSC_UnitIsReady>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d002      	beq.n	800b0c4 <USBH_status+0x24>
  {
    res = RES_OK;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	73fb      	strb	r3, [r7, #15]
 800b0c2:	e001      	b.n	800b0c8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	20002274 	.word	0x20002274

0800b0d8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b094      	sub	sp, #80	@ 0x50
 800b0dc:	af02      	add	r7, sp, #8
 800b0de:	60b9      	str	r1, [r7, #8]
 800b0e0:	607a      	str	r2, [r7, #4]
 800b0e2:	603b      	str	r3, [r7, #0]
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800b0ee:	7bf9      	ldrb	r1, [r7, #15]
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	4813      	ldr	r0, [pc, #76]	@ (800b148 <USBH_read+0x70>)
 800b0fa:	f000 feaa 	bl	800be52 <USBH_MSC_Read>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d103      	bne.n	800b10c <USBH_read+0x34>
  {
    res = RES_OK;
 800b104:	2300      	movs	r3, #0
 800b106:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b10a:	e017      	b.n	800b13c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800b10c:	f107 0210 	add.w	r2, r7, #16
 800b110:	7bfb      	ldrb	r3, [r7, #15]
 800b112:	4619      	mov	r1, r3
 800b114:	480c      	ldr	r0, [pc, #48]	@ (800b148 <USBH_read+0x70>)
 800b116:	f000 fe73 	bl	800be00 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800b11a:	7f7b      	ldrb	r3, [r7, #29]
 800b11c:	2b3a      	cmp	r3, #58	@ 0x3a
 800b11e:	d005      	beq.n	800b12c <USBH_read+0x54>
 800b120:	2b3a      	cmp	r3, #58	@ 0x3a
 800b122:	dc07      	bgt.n	800b134 <USBH_read+0x5c>
 800b124:	2b04      	cmp	r3, #4
 800b126:	d001      	beq.n	800b12c <USBH_read+0x54>
 800b128:	2b28      	cmp	r3, #40	@ 0x28
 800b12a:	d103      	bne.n	800b134 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800b12c:	2303      	movs	r3, #3
 800b12e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800b132:	e003      	b.n	800b13c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800b13a:	bf00      	nop
    }
  }

  return res;
 800b13c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b140:	4618      	mov	r0, r3
 800b142:	3748      	adds	r7, #72	@ 0x48
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	20002274 	.word	0x20002274

0800b14c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b094      	sub	sp, #80	@ 0x50
 800b150:	af02      	add	r7, sp, #8
 800b152:	60b9      	str	r1, [r7, #8]
 800b154:	607a      	str	r2, [r7, #4]
 800b156:	603b      	str	r3, [r7, #0]
 800b158:	4603      	mov	r3, r0
 800b15a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b15c:	2301      	movs	r3, #1
 800b15e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800b162:	7bf9      	ldrb	r1, [r7, #15]
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	4817      	ldr	r0, [pc, #92]	@ (800b1cc <USBH_write+0x80>)
 800b16e:	f000 fed0 	bl	800bf12 <USBH_MSC_Write>
 800b172:	4603      	mov	r3, r0
 800b174:	2b00      	cmp	r3, #0
 800b176:	d103      	bne.n	800b180 <USBH_write+0x34>
  {
    res = RES_OK;
 800b178:	2300      	movs	r3, #0
 800b17a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b17e:	e01f      	b.n	800b1c0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800b180:	f107 0210 	add.w	r2, r7, #16
 800b184:	7bfb      	ldrb	r3, [r7, #15]
 800b186:	4619      	mov	r1, r3
 800b188:	4810      	ldr	r0, [pc, #64]	@ (800b1cc <USBH_write+0x80>)
 800b18a:	f000 fe39 	bl	800be00 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800b18e:	7f7b      	ldrb	r3, [r7, #29]
 800b190:	2b3a      	cmp	r3, #58	@ 0x3a
 800b192:	d00d      	beq.n	800b1b0 <USBH_write+0x64>
 800b194:	2b3a      	cmp	r3, #58	@ 0x3a
 800b196:	dc0f      	bgt.n	800b1b8 <USBH_write+0x6c>
 800b198:	2b28      	cmp	r3, #40	@ 0x28
 800b19a:	d009      	beq.n	800b1b0 <USBH_write+0x64>
 800b19c:	2b28      	cmp	r3, #40	@ 0x28
 800b19e:	dc0b      	bgt.n	800b1b8 <USBH_write+0x6c>
 800b1a0:	2b04      	cmp	r3, #4
 800b1a2:	d005      	beq.n	800b1b0 <USBH_write+0x64>
 800b1a4:	2b27      	cmp	r3, #39	@ 0x27
 800b1a6:	d107      	bne.n	800b1b8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800b1ae:	e007      	b.n	800b1c0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800b1b6:	e003      	b.n	800b1c0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800b1be:	bf00      	nop
    }
  }

  return res;
 800b1c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3748      	adds	r7, #72	@ 0x48
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	20002274 	.word	0x20002274

0800b1d0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b090      	sub	sp, #64	@ 0x40
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	603a      	str	r2, [r7, #0]
 800b1da:	71fb      	strb	r3, [r7, #7]
 800b1dc:	460b      	mov	r3, r1
 800b1de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800b1e6:	79bb      	ldrb	r3, [r7, #6]
 800b1e8:	2b03      	cmp	r3, #3
 800b1ea:	d852      	bhi.n	800b292 <USBH_ioctl+0xc2>
 800b1ec:	a201      	add	r2, pc, #4	@ (adr r2, 800b1f4 <USBH_ioctl+0x24>)
 800b1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f2:	bf00      	nop
 800b1f4:	0800b205 	.word	0x0800b205
 800b1f8:	0800b20d 	.word	0x0800b20d
 800b1fc:	0800b237 	.word	0x0800b237
 800b200:	0800b263 	.word	0x0800b263
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800b204:	2300      	movs	r3, #0
 800b206:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800b20a:	e045      	b.n	800b298 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b20c:	f107 0208 	add.w	r2, r7, #8
 800b210:	79fb      	ldrb	r3, [r7, #7]
 800b212:	4619      	mov	r1, r3
 800b214:	4823      	ldr	r0, [pc, #140]	@ (800b2a4 <USBH_ioctl+0xd4>)
 800b216:	f000 fdf3 	bl	800be00 <USBH_MSC_GetLUNInfo>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d106      	bne.n	800b22e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b226:	2300      	movs	r3, #0
 800b228:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b22c:	e034      	b.n	800b298 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800b234:	e030      	b.n	800b298 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b236:	f107 0208 	add.w	r2, r7, #8
 800b23a:	79fb      	ldrb	r3, [r7, #7]
 800b23c:	4619      	mov	r1, r3
 800b23e:	4819      	ldr	r0, [pc, #100]	@ (800b2a4 <USBH_ioctl+0xd4>)
 800b240:	f000 fdde 	bl	800be00 <USBH_MSC_GetLUNInfo>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d107      	bne.n	800b25a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800b24a:	8a3b      	ldrh	r3, [r7, #16]
 800b24c:	461a      	mov	r2, r3
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b252:	2300      	movs	r3, #0
 800b254:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b258:	e01e      	b.n	800b298 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800b260:	e01a      	b.n	800b298 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b262:	f107 0208 	add.w	r2, r7, #8
 800b266:	79fb      	ldrb	r3, [r7, #7]
 800b268:	4619      	mov	r1, r3
 800b26a:	480e      	ldr	r0, [pc, #56]	@ (800b2a4 <USBH_ioctl+0xd4>)
 800b26c:	f000 fdc8 	bl	800be00 <USBH_MSC_GetLUNInfo>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d109      	bne.n	800b28a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800b276:	8a3b      	ldrh	r3, [r7, #16]
 800b278:	0a5b      	lsrs	r3, r3, #9
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	461a      	mov	r2, r3
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b282:	2300      	movs	r3, #0
 800b284:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b288:	e006      	b.n	800b298 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800b290:	e002      	b.n	800b298 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800b292:	2304      	movs	r3, #4
 800b294:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 800b298:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3740      	adds	r7, #64	@ 0x40
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	20002274 	.word	0x20002274

0800b2a8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b2a8:	b590      	push	{r4, r7, lr}
 800b2aa:	b089      	sub	sp, #36	@ 0x24
 800b2ac:	af04      	add	r7, sp, #16
 800b2ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b2b6:	7919      	ldrb	r1, [r3, #4]
 800b2b8:	2350      	movs	r3, #80	@ 0x50
 800b2ba:	2206      	movs	r2, #6
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f001 fcd7 	bl	800cc70 <USBH_FindInterface>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800b2c6:	7bfb      	ldrb	r3, [r7, #15]
 800b2c8:	2bff      	cmp	r3, #255	@ 0xff
 800b2ca:	d002      	beq.n	800b2d2 <USBH_MSC_InterfaceInit+0x2a>
 800b2cc:	7bfb      	ldrb	r3, [r7, #15]
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d901      	bls.n	800b2d6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b2d2:	2302      	movs	r3, #2
 800b2d4:	e106      	b.n	800b4e4 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800b2d6:	7bfb      	ldrb	r3, [r7, #15]
 800b2d8:	4619      	mov	r1, r3
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f001 fcac 	bl	800cc38 <USBH_SelectInterface>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b2e4:	7bbb      	ldrb	r3, [r7, #14]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d001      	beq.n	800b2ee <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800b2ea:	2302      	movs	r3, #2
 800b2ec:	e0fa      	b.n	800b4e4 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800b2f4:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800b2f8:	f006 fed6 	bl	80120a8 <malloc>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b306:	69db      	ldr	r3, [r3, #28]
 800b308:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d101      	bne.n	800b314 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800b310:	2302      	movs	r3, #2
 800b312:	e0e7      	b.n	800b4e4 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800b314:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800b318:	2100      	movs	r1, #0
 800b31a:	68b8      	ldr	r0, [r7, #8]
 800b31c:	f006 ff82 	bl	8012224 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b320:	7bfb      	ldrb	r3, [r7, #15]
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	211a      	movs	r1, #26
 800b326:	fb01 f303 	mul.w	r3, r1, r3
 800b32a:	4413      	add	r3, r2
 800b32c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	b25b      	sxtb	r3, r3
 800b334:	2b00      	cmp	r3, #0
 800b336:	da16      	bge.n	800b366 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b338:	7bfb      	ldrb	r3, [r7, #15]
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	211a      	movs	r1, #26
 800b33e:	fb01 f303 	mul.w	r3, r1, r3
 800b342:	4413      	add	r3, r2
 800b344:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b348:	781a      	ldrb	r2, [r3, #0]
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b34e:	7bfb      	ldrb	r3, [r7, #15]
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	211a      	movs	r1, #26
 800b354:	fb01 f303 	mul.w	r3, r1, r3
 800b358:	4413      	add	r3, r2
 800b35a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b35e:	881a      	ldrh	r2, [r3, #0]
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	815a      	strh	r2, [r3, #10]
 800b364:	e015      	b.n	800b392 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b366:	7bfb      	ldrb	r3, [r7, #15]
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	211a      	movs	r1, #26
 800b36c:	fb01 f303 	mul.w	r3, r1, r3
 800b370:	4413      	add	r3, r2
 800b372:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b376:	781a      	ldrb	r2, [r3, #0]
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b37c:	7bfb      	ldrb	r3, [r7, #15]
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	211a      	movs	r1, #26
 800b382:	fb01 f303 	mul.w	r3, r1, r3
 800b386:	4413      	add	r3, r2
 800b388:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b38c:	881a      	ldrh	r2, [r3, #0]
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800b392:	7bfb      	ldrb	r3, [r7, #15]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	211a      	movs	r1, #26
 800b398:	fb01 f303 	mul.w	r3, r1, r3
 800b39c:	4413      	add	r3, r2
 800b39e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	b25b      	sxtb	r3, r3
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	da16      	bge.n	800b3d8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b3aa:	7bfb      	ldrb	r3, [r7, #15]
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	211a      	movs	r1, #26
 800b3b0:	fb01 f303 	mul.w	r3, r1, r3
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800b3ba:	781a      	ldrb	r2, [r3, #0]
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	211a      	movs	r1, #26
 800b3c6:	fb01 f303 	mul.w	r3, r1, r3
 800b3ca:	4413      	add	r3, r2
 800b3cc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800b3d0:	881a      	ldrh	r2, [r3, #0]
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	815a      	strh	r2, [r3, #10]
 800b3d6:	e015      	b.n	800b404 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	211a      	movs	r1, #26
 800b3de:	fb01 f303 	mul.w	r3, r1, r3
 800b3e2:	4413      	add	r3, r2
 800b3e4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800b3e8:	781a      	ldrb	r2, [r3, #0]
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b3ee:	7bfb      	ldrb	r3, [r7, #15]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	211a      	movs	r1, #26
 800b3f4:	fb01 f303 	mul.w	r3, r1, r3
 800b3f8:	4413      	add	r3, r2
 800b3fa:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800b3fe:	881a      	ldrh	r2, [r3, #0]
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	2200      	movs	r2, #0
 800b408:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	2200      	movs	r2, #0
 800b40e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	2200      	movs	r2, #0
 800b414:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	799b      	ldrb	r3, [r3, #6]
 800b41a:	4619      	mov	r1, r3
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f002 ffb4 	bl	800e38a <USBH_AllocPipe>
 800b422:	4603      	mov	r3, r0
 800b424:	461a      	mov	r2, r3
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	79db      	ldrb	r3, [r3, #7]
 800b42e:	4619      	mov	r1, r3
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f002 ffaa 	bl	800e38a <USBH_AllocPipe>
 800b436:	4603      	mov	r3, r0
 800b438:	461a      	mov	r2, r3
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 fe02 	bl	800c048 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	799b      	ldrb	r3, [r3, #6]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d01e      	beq.n	800b48a <USBH_MSC_InterfaceInit+0x1e2>
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	891b      	ldrh	r3, [r3, #8]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d01a      	beq.n	800b48a <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	7959      	ldrb	r1, [r3, #5]
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	7998      	ldrb	r0, [r3, #6]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b468:	68ba      	ldr	r2, [r7, #8]
 800b46a:	8912      	ldrh	r2, [r2, #8]
 800b46c:	9202      	str	r2, [sp, #8]
 800b46e:	2202      	movs	r2, #2
 800b470:	9201      	str	r2, [sp, #4]
 800b472:	9300      	str	r3, [sp, #0]
 800b474:	4623      	mov	r3, r4
 800b476:	4602      	mov	r2, r0
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f002 ff57 	bl	800e32c <USBH_OpenPipe>
 800b47e:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	79db      	ldrb	r3, [r3, #7]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d02c      	beq.n	800b4e2 <USBH_MSC_InterfaceInit+0x23a>
 800b488:	e001      	b.n	800b48e <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800b48a:	2303      	movs	r3, #3
 800b48c:	e02a      	b.n	800b4e4 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	895b      	ldrh	r3, [r3, #10]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d025      	beq.n	800b4e2 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	7919      	ldrb	r1, [r3, #4]
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	79d8      	ldrb	r0, [r3, #7]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b4aa:	68ba      	ldr	r2, [r7, #8]
 800b4ac:	8952      	ldrh	r2, [r2, #10]
 800b4ae:	9202      	str	r2, [sp, #8]
 800b4b0:	2202      	movs	r2, #2
 800b4b2:	9201      	str	r2, [sp, #4]
 800b4b4:	9300      	str	r3, [sp, #0]
 800b4b6:	4623      	mov	r3, r4
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f002 ff36 	bl	800e32c <USBH_OpenPipe>
 800b4c0:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	791b      	ldrb	r3, [r3, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f006 fd32 	bl	8011f34 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	795b      	ldrb	r3, [r3, #5]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f006 fd2b 	bl	8011f34 <USBH_LL_SetToggle>

  return USBH_OK;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e000      	b.n	800b4e4 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800b4e2:	2303      	movs	r3, #3
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3714      	adds	r7, #20
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd90      	pop	{r4, r7, pc}

0800b4ec <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4fa:	69db      	ldr	r3, [r3, #28]
 800b4fc:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	795b      	ldrb	r3, [r3, #5]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00e      	beq.n	800b524 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	795b      	ldrb	r3, [r3, #5]
 800b50a:	4619      	mov	r1, r3
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f002 ff2c 	bl	800e36a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	795b      	ldrb	r3, [r3, #5]
 800b516:	4619      	mov	r1, r3
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f002 ff57 	bl	800e3cc <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	791b      	ldrb	r3, [r3, #4]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00e      	beq.n	800b54a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	791b      	ldrb	r3, [r3, #4]
 800b530:	4619      	mov	r1, r3
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f002 ff19 	bl	800e36a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	791b      	ldrb	r3, [r3, #4]
 800b53c:	4619      	mov	r1, r3
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f002 ff44 	bl	800e3cc <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2200      	movs	r2, #0
 800b548:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b550:	69db      	ldr	r3, [r3, #28]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00b      	beq.n	800b56e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b55c:	69db      	ldr	r3, [r3, #28]
 800b55e:	4618      	mov	r0, r3
 800b560:	f006 fdaa 	bl	80120b8 <free>
    phost->pActiveClass->pData = 0U;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b56a:	2200      	movs	r2, #0
 800b56c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b56e:	2300      	movs	r3, #0
}
 800b570:	4618      	mov	r0, r3
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b586:	69db      	ldr	r3, [r3, #28]
 800b588:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b58a:	2301      	movs	r3, #1
 800b58c:	73fb      	strb	r3, [r7, #15]
  uint8_t lun_idx;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	7b9b      	ldrb	r3, [r3, #14]
 800b592:	2b03      	cmp	r3, #3
 800b594:	d041      	beq.n	800b61a <USBH_MSC_ClassRequest+0xa2>
 800b596:	2b03      	cmp	r3, #3
 800b598:	dc4b      	bgt.n	800b632 <USBH_MSC_ClassRequest+0xba>
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d001      	beq.n	800b5a2 <USBH_MSC_ClassRequest+0x2a>
 800b59e:	2b02      	cmp	r3, #2
 800b5a0:	d147      	bne.n	800b632 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:

      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 fd30 	bl	800c00c <USBH_MSC_BOT_REQ_GetMaxLUN>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800b5b0:	7bfb      	ldrb	r3, [r7, #15]
 800b5b2:	2b03      	cmp	r3, #3
 800b5b4:	d104      	bne.n	800b5c0 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d137      	bne.n	800b636 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	2b02      	cmp	r3, #2
 800b5cc:	d804      	bhi.n	800b5d8 <USBH_MSC_ClassRequest+0x60>
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	b2da      	uxtb	r2, r3
 800b5d6:	e000      	b.n	800b5da <USBH_MSC_ClassRequest+0x62>
 800b5d8:	2202      	movs	r2, #2
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 800b5de:	2300      	movs	r3, #0
 800b5e0:	73bb      	strb	r3, [r7, #14]
 800b5e2:	e014      	b.n	800b60e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
 800b5e4:	7bbb      	ldrb	r3, [r7, #14]
 800b5e6:	68ba      	ldr	r2, [r7, #8]
 800b5e8:	2134      	movs	r1, #52	@ 0x34
 800b5ea:	fb01 f303 	mul.w	r3, r1, r3
 800b5ee:	4413      	add	r3, r2
 800b5f0:	3392      	adds	r3, #146	@ 0x92
 800b5f2:	2202      	movs	r2, #2
 800b5f4:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 800b5f6:	7bbb      	ldrb	r3, [r7, #14]
 800b5f8:	68ba      	ldr	r2, [r7, #8]
 800b5fa:	2134      	movs	r1, #52	@ 0x34
 800b5fc:	fb01 f303 	mul.w	r3, r1, r3
 800b600:	4413      	add	r3, r2
 800b602:	33c1      	adds	r3, #193	@ 0xc1
 800b604:	2200      	movs	r2, #0
 800b606:	701a      	strb	r2, [r3, #0]
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 800b608:	7bbb      	ldrb	r3, [r7, #14]
 800b60a:	3301      	adds	r3, #1
 800b60c:	73bb      	strb	r3, [r7, #14]
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	7bba      	ldrb	r2, [r7, #14]
 800b614:	429a      	cmp	r2, r3
 800b616:	d3e5      	bcc.n	800b5e4 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800b618:	e00d      	b.n	800b636 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800b61a:	2100      	movs	r1, #0
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f002 f8ff 	bl	800d820 <USBH_ClrFeature>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d108      	bne.n	800b63a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	7bda      	ldrb	r2, [r3, #15]
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	739a      	strb	r2, [r3, #14]
      }
      break;
 800b630:	e003      	b.n	800b63a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800b632:	bf00      	nop
 800b634:	e002      	b.n	800b63c <USBH_MSC_ClassRequest+0xc4>
      break;
 800b636:	bf00      	nop
 800b638:	e000      	b.n	800b63c <USBH_MSC_ClassRequest+0xc4>
      break;
 800b63a:	bf00      	nop
  }

  return status;
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
	...

0800b648 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b086      	sub	sp, #24
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b656:	69db      	ldr	r3, [r3, #28]
 800b658:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800b65a:	2301      	movs	r3, #1
 800b65c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800b65e:	2301      	movs	r3, #1
 800b660:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800b662:	2301      	movs	r3, #1
 800b664:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	7b1b      	ldrb	r3, [r3, #12]
 800b66a:	2b0a      	cmp	r3, #10
 800b66c:	f000 8280 	beq.w	800bb70 <USBH_MSC_Process+0x528>
 800b670:	2b0a      	cmp	r3, #10
 800b672:	f300 82b8 	bgt.w	800bbe6 <USBH_MSC_Process+0x59e>
 800b676:	2b00      	cmp	r3, #0
 800b678:	d003      	beq.n	800b682 <USBH_MSC_Process+0x3a>
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	f000 82b0 	beq.w	800bbe0 <USBH_MSC_Process+0x598>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800b680:	e2b1      	b.n	800bbe6 <USBH_MSC_Process+0x59e>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b688:	693a      	ldr	r2, [r7, #16]
 800b68a:	7812      	ldrb	r2, [r2, #0]
 800b68c:	4293      	cmp	r3, r2
 800b68e:	f080 825d 	bcs.w	800bb4c <USBH_MSC_Process+0x504>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b698:	4619      	mov	r1, r3
 800b69a:	693a      	ldr	r2, [r7, #16]
 800b69c:	2334      	movs	r3, #52	@ 0x34
 800b69e:	fb01 f303 	mul.w	r3, r1, r3
 800b6a2:	4413      	add	r3, r2
 800b6a4:	3391      	adds	r3, #145	@ 0x91
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	693a      	ldr	r2, [r7, #16]
 800b6b4:	2334      	movs	r3, #52	@ 0x34
 800b6b6:	fb01 f303 	mul.w	r3, r1, r3
 800b6ba:	4413      	add	r3, r2
 800b6bc:	3390      	adds	r3, #144	@ 0x90
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	2b08      	cmp	r3, #8
 800b6c2:	f200 824b 	bhi.w	800bb5c <USBH_MSC_Process+0x514>
 800b6c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b6cc <USBH_MSC_Process+0x84>)
 800b6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6cc:	0800b6f1 	.word	0x0800b6f1
 800b6d0:	0800bb5d 	.word	0x0800bb5d
 800b6d4:	0800b7bb 	.word	0x0800b7bb
 800b6d8:	0800b941 	.word	0x0800b941
 800b6dc:	0800b717 	.word	0x0800b717
 800b6e0:	0800ba0d 	.word	0x0800ba0d
 800b6e4:	0800bb5d 	.word	0x0800bb5d
 800b6e8:	0800bb5d 	.word	0x0800bb5d
 800b6ec:	0800bb3b 	.word	0x0800bb3b
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	693a      	ldr	r2, [r7, #16]
 800b6fa:	2334      	movs	r3, #52	@ 0x34
 800b6fc:	fb01 f303 	mul.w	r3, r1, r3
 800b700:	4413      	add	r3, r2
 800b702:	3390      	adds	r3, #144	@ 0x90
 800b704:	2204      	movs	r2, #4
 800b706:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            break;
 800b714:	e22b      	b.n	800bb6e <USBH_MSC_Process+0x526>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b71c:	b2d9      	uxtb	r1, r3
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b724:	461a      	mov	r2, r3
 800b726:	2334      	movs	r3, #52	@ 0x34
 800b728:	fb02 f303 	mul.w	r3, r2, r3
 800b72c:	3398      	adds	r3, #152	@ 0x98
 800b72e:	693a      	ldr	r2, [r7, #16]
 800b730:	4413      	add	r3, r2
 800b732:	3307      	adds	r3, #7
 800b734:	461a      	mov	r2, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 ffa3 	bl	800c682 <USBH_MSC_SCSI_Inquiry>
 800b73c:	4603      	mov	r3, r0
 800b73e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b740:	7bfb      	ldrb	r3, [r7, #15]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d10c      	bne.n	800b760 <USBH_MSC_Process+0x118>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b74c:	4619      	mov	r1, r3
 800b74e:	693a      	ldr	r2, [r7, #16]
 800b750:	2334      	movs	r3, #52	@ 0x34
 800b752:	fb01 f303 	mul.w	r3, r1, r3
 800b756:	4413      	add	r3, r2
 800b758:	3390      	adds	r3, #144	@ 0x90
 800b75a:	2202      	movs	r2, #2
 800b75c:	701a      	strb	r2, [r3, #0]
            break;
 800b75e:	e1ff      	b.n	800bb60 <USBH_MSC_Process+0x518>
            else if (scsi_status == USBH_FAIL)
 800b760:	7bfb      	ldrb	r3, [r7, #15]
 800b762:	2b02      	cmp	r3, #2
 800b764:	d10c      	bne.n	800b780 <USBH_MSC_Process+0x138>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b76c:	4619      	mov	r1, r3
 800b76e:	693a      	ldr	r2, [r7, #16]
 800b770:	2334      	movs	r3, #52	@ 0x34
 800b772:	fb01 f303 	mul.w	r3, r1, r3
 800b776:	4413      	add	r3, r2
 800b778:	3390      	adds	r3, #144	@ 0x90
 800b77a:	2205      	movs	r2, #5
 800b77c:	701a      	strb	r2, [r3, #0]
            break;
 800b77e:	e1ef      	b.n	800bb60 <USBH_MSC_Process+0x518>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b780:	7bfb      	ldrb	r3, [r7, #15]
 800b782:	2b04      	cmp	r3, #4
 800b784:	f040 81ec 	bne.w	800bb60 <USBH_MSC_Process+0x518>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b78e:	4619      	mov	r1, r3
 800b790:	693a      	ldr	r2, [r7, #16]
 800b792:	2334      	movs	r3, #52	@ 0x34
 800b794:	fb01 f303 	mul.w	r3, r1, r3
 800b798:	4413      	add	r3, r2
 800b79a:	3390      	adds	r3, #144	@ 0x90
 800b79c:	2208      	movs	r2, #8
 800b79e:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	693a      	ldr	r2, [r7, #16]
 800b7aa:	2334      	movs	r3, #52	@ 0x34
 800b7ac:	fb01 f303 	mul.w	r3, r1, r3
 800b7b0:	4413      	add	r3, r2
 800b7b2:	3391      	adds	r3, #145	@ 0x91
 800b7b4:	2202      	movs	r2, #2
 800b7b6:	701a      	strb	r2, [r3, #0]
            break;
 800b7b8:	e1d2      	b.n	800bb60 <USBH_MSC_Process+0x518>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fe9f 	bl	800c508 <USBH_MSC_SCSI_TestUnitReady>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800b7ce:	7bbb      	ldrb	r3, [r7, #14]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d14a      	bne.n	800b86a <USBH_MSC_Process+0x222>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b7da:	4619      	mov	r1, r3
 800b7dc:	693a      	ldr	r2, [r7, #16]
 800b7de:	2334      	movs	r3, #52	@ 0x34
 800b7e0:	fb01 f303 	mul.w	r3, r1, r3
 800b7e4:	4413      	add	r3, r2
 800b7e6:	3392      	adds	r3, #146	@ 0x92
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d00c      	beq.n	800b808 <USBH_MSC_Process+0x1c0>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	693a      	ldr	r2, [r7, #16]
 800b7f8:	2334      	movs	r3, #52	@ 0x34
 800b7fa:	fb01 f303 	mul.w	r3, r1, r3
 800b7fe:	4413      	add	r3, r2
 800b800:	33c1      	adds	r3, #193	@ 0xc1
 800b802:	2201      	movs	r2, #1
 800b804:	701a      	strb	r2, [r3, #0]
 800b806:	e00b      	b.n	800b820 <USBH_MSC_Process+0x1d8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b80e:	4619      	mov	r1, r3
 800b810:	693a      	ldr	r2, [r7, #16]
 800b812:	2334      	movs	r3, #52	@ 0x34
 800b814:	fb01 f303 	mul.w	r3, r1, r3
 800b818:	4413      	add	r3, r2
 800b81a:	33c1      	adds	r3, #193	@ 0xc1
 800b81c:	2200      	movs	r2, #0
 800b81e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b826:	4619      	mov	r1, r3
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	2334      	movs	r3, #52	@ 0x34
 800b82c:	fb01 f303 	mul.w	r3, r1, r3
 800b830:	4413      	add	r3, r2
 800b832:	3390      	adds	r3, #144	@ 0x90
 800b834:	2203      	movs	r2, #3
 800b836:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b83e:	4619      	mov	r1, r3
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	2334      	movs	r3, #52	@ 0x34
 800b844:	fb01 f303 	mul.w	r3, r1, r3
 800b848:	4413      	add	r3, r2
 800b84a:	3391      	adds	r3, #145	@ 0x91
 800b84c:	2200      	movs	r2, #0
 800b84e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b856:	4619      	mov	r1, r3
 800b858:	693a      	ldr	r2, [r7, #16]
 800b85a:	2334      	movs	r3, #52	@ 0x34
 800b85c:	fb01 f303 	mul.w	r3, r1, r3
 800b860:	4413      	add	r3, r2
 800b862:	3392      	adds	r3, #146	@ 0x92
 800b864:	2200      	movs	r2, #0
 800b866:	701a      	strb	r2, [r3, #0]
            break;
 800b868:	e17c      	b.n	800bb64 <USBH_MSC_Process+0x51c>
            else if (ready_status == USBH_FAIL)
 800b86a:	7bbb      	ldrb	r3, [r7, #14]
 800b86c:	2b02      	cmp	r3, #2
 800b86e:	d14a      	bne.n	800b906 <USBH_MSC_Process+0x2be>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b876:	4619      	mov	r1, r3
 800b878:	693a      	ldr	r2, [r7, #16]
 800b87a:	2334      	movs	r3, #52	@ 0x34
 800b87c:	fb01 f303 	mul.w	r3, r1, r3
 800b880:	4413      	add	r3, r2
 800b882:	3392      	adds	r3, #146	@ 0x92
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	2b02      	cmp	r3, #2
 800b888:	d00c      	beq.n	800b8a4 <USBH_MSC_Process+0x25c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b890:	4619      	mov	r1, r3
 800b892:	693a      	ldr	r2, [r7, #16]
 800b894:	2334      	movs	r3, #52	@ 0x34
 800b896:	fb01 f303 	mul.w	r3, r1, r3
 800b89a:	4413      	add	r3, r2
 800b89c:	33c1      	adds	r3, #193	@ 0xc1
 800b89e:	2201      	movs	r2, #1
 800b8a0:	701a      	strb	r2, [r3, #0]
 800b8a2:	e00b      	b.n	800b8bc <USBH_MSC_Process+0x274>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	693a      	ldr	r2, [r7, #16]
 800b8ae:	2334      	movs	r3, #52	@ 0x34
 800b8b0:	fb01 f303 	mul.w	r3, r1, r3
 800b8b4:	4413      	add	r3, r2
 800b8b6:	33c1      	adds	r3, #193	@ 0xc1
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	693a      	ldr	r2, [r7, #16]
 800b8c6:	2334      	movs	r3, #52	@ 0x34
 800b8c8:	fb01 f303 	mul.w	r3, r1, r3
 800b8cc:	4413      	add	r3, r2
 800b8ce:	3390      	adds	r3, #144	@ 0x90
 800b8d0:	2205      	movs	r2, #5
 800b8d2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b8da:	4619      	mov	r1, r3
 800b8dc:	693a      	ldr	r2, [r7, #16]
 800b8de:	2334      	movs	r3, #52	@ 0x34
 800b8e0:	fb01 f303 	mul.w	r3, r1, r3
 800b8e4:	4413      	add	r3, r2
 800b8e6:	3391      	adds	r3, #145	@ 0x91
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	693a      	ldr	r2, [r7, #16]
 800b8f6:	2334      	movs	r3, #52	@ 0x34
 800b8f8:	fb01 f303 	mul.w	r3, r1, r3
 800b8fc:	4413      	add	r3, r2
 800b8fe:	3392      	adds	r3, #146	@ 0x92
 800b900:	2202      	movs	r2, #2
 800b902:	701a      	strb	r2, [r3, #0]
            break;
 800b904:	e12e      	b.n	800bb64 <USBH_MSC_Process+0x51c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800b906:	7bbb      	ldrb	r3, [r7, #14]
 800b908:	2b04      	cmp	r3, #4
 800b90a:	f040 812b 	bne.w	800bb64 <USBH_MSC_Process+0x51c>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b914:	4619      	mov	r1, r3
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	2334      	movs	r3, #52	@ 0x34
 800b91a:	fb01 f303 	mul.w	r3, r1, r3
 800b91e:	4413      	add	r3, r2
 800b920:	3390      	adds	r3, #144	@ 0x90
 800b922:	2208      	movs	r2, #8
 800b924:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b92c:	4619      	mov	r1, r3
 800b92e:	693a      	ldr	r2, [r7, #16]
 800b930:	2334      	movs	r3, #52	@ 0x34
 800b932:	fb01 f303 	mul.w	r3, r1, r3
 800b936:	4413      	add	r3, r2
 800b938:	3391      	adds	r3, #145	@ 0x91
 800b93a:	2202      	movs	r2, #2
 800b93c:	701a      	strb	r2, [r3, #0]
            break;
 800b93e:	e111      	b.n	800bb64 <USBH_MSC_Process+0x51c>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b946:	b2d9      	uxtb	r1, r3
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b94e:	461a      	mov	r2, r3
 800b950:	2334      	movs	r3, #52	@ 0x34
 800b952:	fb02 f303 	mul.w	r3, r2, r3
 800b956:	3390      	adds	r3, #144	@ 0x90
 800b958:	693a      	ldr	r2, [r7, #16]
 800b95a:	4413      	add	r3, r2
 800b95c:	3304      	adds	r3, #4
 800b95e:	461a      	mov	r2, r3
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 fe14 	bl	800c58e <USBH_MSC_SCSI_ReadCapacity>
 800b966:	4603      	mov	r3, r0
 800b968:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b96a:	7bfb      	ldrb	r3, [r7, #15]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d120      	bne.n	800b9b2 <USBH_MSC_Process+0x36a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b976:	4619      	mov	r1, r3
 800b978:	693a      	ldr	r2, [r7, #16]
 800b97a:	2334      	movs	r3, #52	@ 0x34
 800b97c:	fb01 f303 	mul.w	r3, r1, r3
 800b980:	4413      	add	r3, r2
 800b982:	3390      	adds	r3, #144	@ 0x90
 800b984:	2201      	movs	r2, #1
 800b986:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b98e:	4619      	mov	r1, r3
 800b990:	693a      	ldr	r2, [r7, #16]
 800b992:	2334      	movs	r3, #52	@ 0x34
 800b994:	fb01 f303 	mul.w	r3, r1, r3
 800b998:	4413      	add	r3, r2
 800b99a:	3391      	adds	r3, #145	@ 0x91
 800b99c:	2200      	movs	r2, #0
 800b99e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	b29a      	uxth	r2, r3
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800b9b0:	e0da      	b.n	800bb68 <USBH_MSC_Process+0x520>
            else if (scsi_status == USBH_FAIL)
 800b9b2:	7bfb      	ldrb	r3, [r7, #15]
 800b9b4:	2b02      	cmp	r3, #2
 800b9b6:	d10c      	bne.n	800b9d2 <USBH_MSC_Process+0x38a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b9be:	4619      	mov	r1, r3
 800b9c0:	693a      	ldr	r2, [r7, #16]
 800b9c2:	2334      	movs	r3, #52	@ 0x34
 800b9c4:	fb01 f303 	mul.w	r3, r1, r3
 800b9c8:	4413      	add	r3, r2
 800b9ca:	3390      	adds	r3, #144	@ 0x90
 800b9cc:	2205      	movs	r2, #5
 800b9ce:	701a      	strb	r2, [r3, #0]
            break;
 800b9d0:	e0ca      	b.n	800bb68 <USBH_MSC_Process+0x520>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b9d2:	7bfb      	ldrb	r3, [r7, #15]
 800b9d4:	2b04      	cmp	r3, #4
 800b9d6:	f040 80c7 	bne.w	800bb68 <USBH_MSC_Process+0x520>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	693a      	ldr	r2, [r7, #16]
 800b9e4:	2334      	movs	r3, #52	@ 0x34
 800b9e6:	fb01 f303 	mul.w	r3, r1, r3
 800b9ea:	4413      	add	r3, r2
 800b9ec:	3390      	adds	r3, #144	@ 0x90
 800b9ee:	2208      	movs	r2, #8
 800b9f0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	693a      	ldr	r2, [r7, #16]
 800b9fc:	2334      	movs	r3, #52	@ 0x34
 800b9fe:	fb01 f303 	mul.w	r3, r1, r3
 800ba02:	4413      	add	r3, r2
 800ba04:	3391      	adds	r3, #145	@ 0x91
 800ba06:	2202      	movs	r2, #2
 800ba08:	701a      	strb	r2, [r3, #0]
            break;
 800ba0a:	e0ad      	b.n	800bb68 <USBH_MSC_Process+0x520>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ba12:	b2d9      	uxtb	r1, r3
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	2334      	movs	r3, #52	@ 0x34
 800ba1e:	fb02 f303 	mul.w	r3, r2, r3
 800ba22:	3398      	adds	r3, #152	@ 0x98
 800ba24:	693a      	ldr	r2, [r7, #16]
 800ba26:	4413      	add	r3, r2
 800ba28:	3304      	adds	r3, #4
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 fecd 	bl	800c7cc <USBH_MSC_SCSI_RequestSense>
 800ba32:	4603      	mov	r3, r0
 800ba34:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d146      	bne.n	800baca <USBH_MSC_Process+0x482>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ba42:	4619      	mov	r1, r3
 800ba44:	693a      	ldr	r2, [r7, #16]
 800ba46:	2334      	movs	r3, #52	@ 0x34
 800ba48:	fb01 f303 	mul.w	r3, r1, r3
 800ba4c:	4413      	add	r3, r2
 800ba4e:	339c      	adds	r3, #156	@ 0x9c
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	2b06      	cmp	r3, #6
 800ba54:	d00c      	beq.n	800ba70 <USBH_MSC_Process+0x428>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	693a      	ldr	r2, [r7, #16]
 800ba60:	2334      	movs	r3, #52	@ 0x34
 800ba62:	fb01 f303 	mul.w	r3, r1, r3
 800ba66:	4413      	add	r3, r2
 800ba68:	339c      	adds	r3, #156	@ 0x9c
 800ba6a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d117      	bne.n	800baa0 <USBH_MSC_Process+0x458>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800ba7c:	1ad3      	subs	r3, r2, r3
 800ba7e:	f242 720f 	movw	r2, #9999	@ 0x270f
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d80c      	bhi.n	800baa0 <USBH_MSC_Process+0x458>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	693a      	ldr	r2, [r7, #16]
 800ba90:	2334      	movs	r3, #52	@ 0x34
 800ba92:	fb01 f303 	mul.w	r3, r1, r3
 800ba96:	4413      	add	r3, r2
 800ba98:	3390      	adds	r3, #144	@ 0x90
 800ba9a:	2202      	movs	r2, #2
 800ba9c:	701a      	strb	r2, [r3, #0]
                  break;
 800ba9e:	e066      	b.n	800bb6e <USBH_MSC_Process+0x526>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800baa6:	4619      	mov	r1, r3
 800baa8:	693a      	ldr	r2, [r7, #16]
 800baaa:	2334      	movs	r3, #52	@ 0x34
 800baac:	fb01 f303 	mul.w	r3, r1, r3
 800bab0:	4413      	add	r3, r2
 800bab2:	3390      	adds	r3, #144	@ 0x90
 800bab4:	2201      	movs	r2, #1
 800bab6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800babe:	3301      	adds	r3, #1
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800bac8:	e050      	b.n	800bb6c <USBH_MSC_Process+0x524>
            else if (scsi_status == USBH_FAIL)
 800baca:	7bfb      	ldrb	r3, [r7, #15]
 800bacc:	2b02      	cmp	r3, #2
 800bace:	d118      	bne.n	800bb02 <USBH_MSC_Process+0x4ba>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800bad6:	4619      	mov	r1, r3
 800bad8:	693a      	ldr	r2, [r7, #16]
 800bada:	2334      	movs	r3, #52	@ 0x34
 800badc:	fb01 f303 	mul.w	r3, r1, r3
 800bae0:	4413      	add	r3, r2
 800bae2:	3390      	adds	r3, #144	@ 0x90
 800bae4:	2208      	movs	r2, #8
 800bae6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800baee:	4619      	mov	r1, r3
 800baf0:	693a      	ldr	r2, [r7, #16]
 800baf2:	2334      	movs	r3, #52	@ 0x34
 800baf4:	fb01 f303 	mul.w	r3, r1, r3
 800baf8:	4413      	add	r3, r2
 800bafa:	3391      	adds	r3, #145	@ 0x91
 800bafc:	2202      	movs	r2, #2
 800bafe:	701a      	strb	r2, [r3, #0]
            break;
 800bb00:	e034      	b.n	800bb6c <USBH_MSC_Process+0x524>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
 800bb04:	2b04      	cmp	r3, #4
 800bb06:	d131      	bne.n	800bb6c <USBH_MSC_Process+0x524>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800bb0e:	4619      	mov	r1, r3
 800bb10:	693a      	ldr	r2, [r7, #16]
 800bb12:	2334      	movs	r3, #52	@ 0x34
 800bb14:	fb01 f303 	mul.w	r3, r1, r3
 800bb18:	4413      	add	r3, r2
 800bb1a:	3390      	adds	r3, #144	@ 0x90
 800bb1c:	2208      	movs	r2, #8
 800bb1e:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800bb26:	4619      	mov	r1, r3
 800bb28:	693a      	ldr	r2, [r7, #16]
 800bb2a:	2334      	movs	r3, #52	@ 0x34
 800bb2c:	fb01 f303 	mul.w	r3, r1, r3
 800bb30:	4413      	add	r3, r2
 800bb32:	3391      	adds	r3, #145	@ 0x91
 800bb34:	2202      	movs	r2, #2
 800bb36:	701a      	strb	r2, [r3, #0]
            break;
 800bb38:	e018      	b.n	800bb6c <USBH_MSC_Process+0x524>
            MSC_Handle->current_lun++;
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800bb40:	3301      	adds	r3, #1
 800bb42:	b29a      	uxth	r2, r3
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800bb4a:	e010      	b.n	800bb6e <USBH_MSC_Process+0x526>
        MSC_Handle->current_lun = 0U;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_USER_NOTIFY;
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	220a      	movs	r2, #10
 800bb58:	731a      	strb	r2, [r3, #12]
      break;
 800bb5a:	e045      	b.n	800bbe8 <USBH_MSC_Process+0x5a0>
            break;
 800bb5c:	bf00      	nop
 800bb5e:	e043      	b.n	800bbe8 <USBH_MSC_Process+0x5a0>
            break;
 800bb60:	bf00      	nop
 800bb62:	e041      	b.n	800bbe8 <USBH_MSC_Process+0x5a0>
            break;
 800bb64:	bf00      	nop
 800bb66:	e03f      	b.n	800bbe8 <USBH_MSC_Process+0x5a0>
            break;
 800bb68:	bf00      	nop
 800bb6a:	e03d      	b.n	800bbe8 <USBH_MSC_Process+0x5a0>
            break;
 800bb6c:	bf00      	nop
      break;
 800bb6e:	e03b      	b.n	800bbe8 <USBH_MSC_Process+0x5a0>
      if (MSC_Handle->lun < MSC_Handle->max_lun)
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 800bb76:	693a      	ldr	r2, [r7, #16]
 800bb78:	7812      	ldrb	r2, [r2, #0]
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d228      	bcs.n	800bbd0 <USBH_MSC_Process+0x588>
        MSC_Handle->current_lun = MSC_Handle->lun;
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800bb90:	4619      	mov	r1, r3
 800bb92:	693a      	ldr	r2, [r7, #16]
 800bb94:	2334      	movs	r3, #52	@ 0x34
 800bb96:	fb01 f303 	mul.w	r3, r1, r3
 800bb9a:	4413      	add	r3, r2
 800bb9c:	3391      	adds	r3, #145	@ 0x91
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d106      	bne.n	800bbb2 <USBH_MSC_Process+0x56a>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bbaa:	2102      	movs	r1, #2
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	4798      	blx	r3
 800bbb0:	e005      	b.n	800bbbe <USBH_MSC_Process+0x576>
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bbb8:	2106      	movs	r1, #6
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	4798      	blx	r3
        MSC_Handle->lun++;
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	b29a      	uxth	r2, r3
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
      break;
 800bbce:	e00b      	b.n	800bbe8 <USBH_MSC_Process+0x5a0>
        MSC_Handle->lun = 0U;
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
        MSC_Handle->state = MSC_IDLE;
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	731a      	strb	r2, [r3, #12]
      break;
 800bbde:	e003      	b.n	800bbe8 <USBH_MSC_Process+0x5a0>
      error = USBH_OK;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	75fb      	strb	r3, [r7, #23]
      break;
 800bbe4:	e000      	b.n	800bbe8 <USBH_MSC_Process+0x5a0>
      break;
 800bbe6:	bf00      	nop
  }
  return error;
 800bbe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3718      	adds	r7, #24
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop

0800bbf4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	370c      	adds	r7, #12
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr

0800bc0a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b088      	sub	sp, #32
 800bc0e:	af02      	add	r7, sp, #8
 800bc10:	6078      	str	r0, [r7, #4]
 800bc12:	460b      	mov	r3, r1
 800bc14:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bc1c:	69db      	ldr	r3, [r3, #28]
 800bc1e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800bc20:	2301      	movs	r3, #1
 800bc22:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800bc24:	2301      	movs	r3, #1
 800bc26:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800bc28:	78fb      	ldrb	r3, [r7, #3]
 800bc2a:	693a      	ldr	r2, [r7, #16]
 800bc2c:	2134      	movs	r1, #52	@ 0x34
 800bc2e:	fb01 f303 	mul.w	r3, r1, r3
 800bc32:	4413      	add	r3, r2
 800bc34:	3390      	adds	r3, #144	@ 0x90
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	2b07      	cmp	r3, #7
 800bc3a:	d03c      	beq.n	800bcb6 <USBH_MSC_RdWrProcess+0xac>
 800bc3c:	2b07      	cmp	r3, #7
 800bc3e:	f300 80a8 	bgt.w	800bd92 <USBH_MSC_RdWrProcess+0x188>
 800bc42:	2b05      	cmp	r3, #5
 800bc44:	d06c      	beq.n	800bd20 <USBH_MSC_RdWrProcess+0x116>
 800bc46:	2b06      	cmp	r3, #6
 800bc48:	f040 80a3 	bne.w	800bd92 <USBH_MSC_RdWrProcess+0x188>
  {
    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800bc4c:	78f9      	ldrb	r1, [r7, #3]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	9300      	str	r3, [sp, #0]
 800bc52:	2300      	movs	r3, #0
 800bc54:	2200      	movs	r2, #0
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 fea7 	bl	800c9aa <USBH_MSC_SCSI_Read>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800bc60:	7bfb      	ldrb	r3, [r7, #15]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d10b      	bne.n	800bc7e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800bc66:	78fb      	ldrb	r3, [r7, #3]
 800bc68:	693a      	ldr	r2, [r7, #16]
 800bc6a:	2134      	movs	r1, #52	@ 0x34
 800bc6c:	fb01 f303 	mul.w	r3, r1, r3
 800bc70:	4413      	add	r3, r2
 800bc72:	3390      	adds	r3, #144	@ 0x90
 800bc74:	2201      	movs	r2, #1
 800bc76:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bc7c:	e08b      	b.n	800bd96 <USBH_MSC_RdWrProcess+0x18c>
      else if (scsi_status == USBH_FAIL)
 800bc7e:	7bfb      	ldrb	r3, [r7, #15]
 800bc80:	2b02      	cmp	r3, #2
 800bc82:	d109      	bne.n	800bc98 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800bc84:	78fb      	ldrb	r3, [r7, #3]
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	2134      	movs	r1, #52	@ 0x34
 800bc8a:	fb01 f303 	mul.w	r3, r1, r3
 800bc8e:	4413      	add	r3, r2
 800bc90:	3390      	adds	r3, #144	@ 0x90
 800bc92:	2205      	movs	r2, #5
 800bc94:	701a      	strb	r2, [r3, #0]
      break;
 800bc96:	e07e      	b.n	800bd96 <USBH_MSC_RdWrProcess+0x18c>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
 800bc9a:	2b04      	cmp	r3, #4
 800bc9c:	d17b      	bne.n	800bd96 <USBH_MSC_RdWrProcess+0x18c>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800bc9e:	78fb      	ldrb	r3, [r7, #3]
 800bca0:	693a      	ldr	r2, [r7, #16]
 800bca2:	2134      	movs	r1, #52	@ 0x34
 800bca4:	fb01 f303 	mul.w	r3, r1, r3
 800bca8:	4413      	add	r3, r2
 800bcaa:	3390      	adds	r3, #144	@ 0x90
 800bcac:	2208      	movs	r2, #8
 800bcae:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bcb0:	2302      	movs	r3, #2
 800bcb2:	75fb      	strb	r3, [r7, #23]
      break;
 800bcb4:	e06f      	b.n	800bd96 <USBH_MSC_RdWrProcess+0x18c>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800bcb6:	78f9      	ldrb	r1, [r7, #3]
 800bcb8:	2300      	movs	r3, #0
 800bcba:	9300      	str	r3, [sp, #0]
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 fe02 	bl	800c8ca <USBH_MSC_SCSI_Write>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800bcca:	7bfb      	ldrb	r3, [r7, #15]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10b      	bne.n	800bce8 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800bcd0:	78fb      	ldrb	r3, [r7, #3]
 800bcd2:	693a      	ldr	r2, [r7, #16]
 800bcd4:	2134      	movs	r1, #52	@ 0x34
 800bcd6:	fb01 f303 	mul.w	r3, r1, r3
 800bcda:	4413      	add	r3, r2
 800bcdc:	3390      	adds	r3, #144	@ 0x90
 800bcde:	2201      	movs	r2, #1
 800bce0:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800bce2:	2300      	movs	r3, #0
 800bce4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bce6:	e058      	b.n	800bd9a <USBH_MSC_RdWrProcess+0x190>
      else if (scsi_status == USBH_FAIL)
 800bce8:	7bfb      	ldrb	r3, [r7, #15]
 800bcea:	2b02      	cmp	r3, #2
 800bcec:	d109      	bne.n	800bd02 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800bcee:	78fb      	ldrb	r3, [r7, #3]
 800bcf0:	693a      	ldr	r2, [r7, #16]
 800bcf2:	2134      	movs	r1, #52	@ 0x34
 800bcf4:	fb01 f303 	mul.w	r3, r1, r3
 800bcf8:	4413      	add	r3, r2
 800bcfa:	3390      	adds	r3, #144	@ 0x90
 800bcfc:	2205      	movs	r2, #5
 800bcfe:	701a      	strb	r2, [r3, #0]
      break;
 800bd00:	e04b      	b.n	800bd9a <USBH_MSC_RdWrProcess+0x190>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bd02:	7bfb      	ldrb	r3, [r7, #15]
 800bd04:	2b04      	cmp	r3, #4
 800bd06:	d148      	bne.n	800bd9a <USBH_MSC_RdWrProcess+0x190>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800bd08:	78fb      	ldrb	r3, [r7, #3]
 800bd0a:	693a      	ldr	r2, [r7, #16]
 800bd0c:	2134      	movs	r1, #52	@ 0x34
 800bd0e:	fb01 f303 	mul.w	r3, r1, r3
 800bd12:	4413      	add	r3, r2
 800bd14:	3390      	adds	r3, #144	@ 0x90
 800bd16:	2208      	movs	r2, #8
 800bd18:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bd1a:	2302      	movs	r3, #2
 800bd1c:	75fb      	strb	r3, [r7, #23]
      break;
 800bd1e:	e03c      	b.n	800bd9a <USBH_MSC_RdWrProcess+0x190>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800bd20:	78fb      	ldrb	r3, [r7, #3]
 800bd22:	2234      	movs	r2, #52	@ 0x34
 800bd24:	fb02 f303 	mul.w	r3, r2, r3
 800bd28:	3398      	adds	r3, #152	@ 0x98
 800bd2a:	693a      	ldr	r2, [r7, #16]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	1d1a      	adds	r2, r3, #4
 800bd30:	78fb      	ldrb	r3, [r7, #3]
 800bd32:	4619      	mov	r1, r3
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 fd49 	bl	800c7cc <USBH_MSC_SCSI_RequestSense>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800bd3e:	7bfb      	ldrb	r3, [r7, #15]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d114      	bne.n	800bd6e <USBH_MSC_RdWrProcess+0x164>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800bd44:	78fb      	ldrb	r3, [r7, #3]
 800bd46:	693a      	ldr	r2, [r7, #16]
 800bd48:	2134      	movs	r1, #52	@ 0x34
 800bd4a:	fb01 f303 	mul.w	r3, r1, r3
 800bd4e:	4413      	add	r3, r2
 800bd50:	3390      	adds	r3, #144	@ 0x90
 800bd52:	2201      	movs	r2, #1
 800bd54:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800bd56:	78fb      	ldrb	r3, [r7, #3]
 800bd58:	693a      	ldr	r2, [r7, #16]
 800bd5a:	2134      	movs	r1, #52	@ 0x34
 800bd5c:	fb01 f303 	mul.w	r3, r1, r3
 800bd60:	4413      	add	r3, r2
 800bd62:	3391      	adds	r3, #145	@ 0x91
 800bd64:	2202      	movs	r2, #2
 800bd66:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800bd68:	2302      	movs	r3, #2
 800bd6a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bd6c:	e017      	b.n	800bd9e <USBH_MSC_RdWrProcess+0x194>
      else if (scsi_status == USBH_FAIL)
 800bd6e:	7bfb      	ldrb	r3, [r7, #15]
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	d014      	beq.n	800bd9e <USBH_MSC_RdWrProcess+0x194>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bd74:	7bfb      	ldrb	r3, [r7, #15]
 800bd76:	2b04      	cmp	r3, #4
 800bd78:	d111      	bne.n	800bd9e <USBH_MSC_RdWrProcess+0x194>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800bd7a:	78fb      	ldrb	r3, [r7, #3]
 800bd7c:	693a      	ldr	r2, [r7, #16]
 800bd7e:	2134      	movs	r1, #52	@ 0x34
 800bd80:	fb01 f303 	mul.w	r3, r1, r3
 800bd84:	4413      	add	r3, r2
 800bd86:	3390      	adds	r3, #144	@ 0x90
 800bd88:	2208      	movs	r2, #8
 800bd8a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bd8c:	2302      	movs	r3, #2
 800bd8e:	75fb      	strb	r3, [r7, #23]
      break;
 800bd90:	e005      	b.n	800bd9e <USBH_MSC_RdWrProcess+0x194>

    default:
      break;
 800bd92:	bf00      	nop
 800bd94:	e004      	b.n	800bda0 <USBH_MSC_RdWrProcess+0x196>
      break;
 800bd96:	bf00      	nop
 800bd98:	e002      	b.n	800bda0 <USBH_MSC_RdWrProcess+0x196>
      break;
 800bd9a:	bf00      	nop
 800bd9c:	e000      	b.n	800bda0 <USBH_MSC_RdWrProcess+0x196>
      break;
 800bd9e:	bf00      	nop

  }
  return error;
 800bda0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3718      	adds	r7, #24
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b085      	sub	sp, #20
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bdbc:	69db      	ldr	r3, [r3, #28]
 800bdbe:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800bdc0:	78fb      	ldrb	r3, [r7, #3]
 800bdc2:	b29a      	uxth	r2, r3
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	2b0b      	cmp	r3, #11
 800bdd2:	d10c      	bne.n	800bdee <USBH_MSC_UnitIsReady+0x44>
 800bdd4:	78fb      	ldrb	r3, [r7, #3]
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	2134      	movs	r1, #52	@ 0x34
 800bdda:	fb01 f303 	mul.w	r3, r1, r3
 800bdde:	4413      	add	r3, r2
 800bde0:	3391      	adds	r3, #145	@ 0x91
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d102      	bne.n	800bdee <USBH_MSC_UnitIsReady+0x44>
  {
    res = 1U;
 800bde8:	2301      	movs	r3, #1
 800bdea:	73fb      	strb	r3, [r7, #15]
 800bdec:	e001      	b.n	800bdf2 <USBH_MSC_UnitIsReady+0x48>
  }
  else
  {
    res = 0U;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800bdf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3714      	adds	r7, #20
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b086      	sub	sp, #24
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	460b      	mov	r3, r1
 800be0a:	607a      	str	r2, [r7, #4]
 800be0c:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800be14:	69db      	ldr	r3, [r3, #28]
 800be16:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800be18:	7afb      	ldrb	r3, [r7, #11]
 800be1a:	b29a      	uxth	r2, r3
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if (phost->gState == HOST_CLASS)
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	b2db      	uxtb	r3, r3
 800be28:	2b0b      	cmp	r3, #11
 800be2a:	d10d      	bne.n	800be48 <USBH_MSC_GetLUNInfo+0x48>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800be2c:	7afb      	ldrb	r3, [r7, #11]
 800be2e:	2234      	movs	r2, #52	@ 0x34
 800be30:	fb02 f303 	mul.w	r3, r2, r3
 800be34:	3390      	adds	r3, #144	@ 0x90
 800be36:	697a      	ldr	r2, [r7, #20]
 800be38:	4413      	add	r3, r2
 800be3a:	2234      	movs	r2, #52	@ 0x34
 800be3c:	4619      	mov	r1, r3
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f006 fa66 	bl	8012310 <memcpy>
    return USBH_OK;
 800be44:	2300      	movs	r3, #0
 800be46:	e000      	b.n	800be4a <USBH_MSC_GetLUNInfo+0x4a>
  }
  else
  {
    return USBH_FAIL;
 800be48:	2302      	movs	r3, #2
  }
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3718      	adds	r7, #24
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b088      	sub	sp, #32
 800be56:	af02      	add	r7, sp, #8
 800be58:	60f8      	str	r0, [r7, #12]
 800be5a:	607a      	str	r2, [r7, #4]
 800be5c:	603b      	str	r3, [r7, #0]
 800be5e:	460b      	mov	r3, r1
 800be60:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800be68:	69db      	ldr	r3, [r3, #28]
 800be6a:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800be6c:	7afb      	ldrb	r3, [r7, #11]
 800be6e:	b29a      	uxth	r2, r3
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00e      	beq.n	800bea0 <USBH_MSC_Read+0x4e>
      (phost->gState != HOST_CLASS) ||
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800be88:	2b0b      	cmp	r3, #11
 800be8a:	d109      	bne.n	800bea0 <USBH_MSC_Read+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800be8c:	7afb      	ldrb	r3, [r7, #11]
 800be8e:	697a      	ldr	r2, [r7, #20]
 800be90:	2134      	movs	r1, #52	@ 0x34
 800be92:	fb01 f303 	mul.w	r3, r1, r3
 800be96:	4413      	add	r3, r2
 800be98:	3390      	adds	r3, #144	@ 0x90
 800be9a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d001      	beq.n	800bea4 <USBH_MSC_Read+0x52>
  {
    return  USBH_FAIL;
 800bea0:	2302      	movs	r3, #2
 800bea2:	e032      	b.n	800bf0a <USBH_MSC_Read+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_READ;
 800bea4:	7afb      	ldrb	r3, [r7, #11]
 800bea6:	697a      	ldr	r2, [r7, #20]
 800bea8:	2134      	movs	r1, #52	@ 0x34
 800beaa:	fb01 f303 	mul.w	r3, r1, r3
 800beae:	4413      	add	r3, r2
 800beb0:	3390      	adds	r3, #144	@ 0x90
 800beb2:	2206      	movs	r2, #6
 800beb4:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800beb6:	7af9      	ldrb	r1, [r7, #11]
 800beb8:	6a3b      	ldr	r3, [r7, #32]
 800beba:	9300      	str	r3, [sp, #0]
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f000 fd72 	bl	800c9aa <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800becc:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bece:	e013      	b.n	800bef8 <USBH_MSC_Read+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	1ad2      	subs	r2, r2, r3
 800beda:	6a3b      	ldr	r3, [r7, #32]
 800bedc:	f242 7110 	movw	r1, #10000	@ 0x2710
 800bee0:	fb01 f303 	mul.w	r3, r1, r3
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d805      	bhi.n	800bef4 <USBH_MSC_Read+0xa2>
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d101      	bne.n	800bef8 <USBH_MSC_Read+0xa6>
    {
      return USBH_FAIL;
 800bef4:	2302      	movs	r3, #2
 800bef6:	e008      	b.n	800bf0a <USBH_MSC_Read+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bef8:	7afb      	ldrb	r3, [r7, #11]
 800befa:	4619      	mov	r1, r3
 800befc:	68f8      	ldr	r0, [r7, #12]
 800befe:	f7ff fe84 	bl	800bc0a <USBH_MSC_RdWrProcess>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d0e3      	beq.n	800bed0 <USBH_MSC_Read+0x7e>
    }
  }

  return USBH_OK;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3718      	adds	r7, #24
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b088      	sub	sp, #32
 800bf16:	af02      	add	r7, sp, #8
 800bf18:	60f8      	str	r0, [r7, #12]
 800bf1a:	607a      	str	r2, [r7, #4]
 800bf1c:	603b      	str	r3, [r7, #0]
 800bf1e:	460b      	mov	r3, r1
 800bf20:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf28:	69db      	ldr	r3, [r3, #28]
 800bf2a:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800bf2c:	7afb      	ldrb	r3, [r7, #11]
 800bf2e:	b29a      	uxth	r2, r3
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d00e      	beq.n	800bf60 <USBH_MSC_Write+0x4e>
      (phost->gState != HOST_CLASS) ||
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800bf48:	2b0b      	cmp	r3, #11
 800bf4a:	d109      	bne.n	800bf60 <USBH_MSC_Write+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800bf4c:	7afb      	ldrb	r3, [r7, #11]
 800bf4e:	697a      	ldr	r2, [r7, #20]
 800bf50:	2134      	movs	r1, #52	@ 0x34
 800bf52:	fb01 f303 	mul.w	r3, r1, r3
 800bf56:	4413      	add	r3, r2
 800bf58:	3390      	adds	r3, #144	@ 0x90
 800bf5a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d001      	beq.n	800bf64 <USBH_MSC_Write+0x52>
  {
    return  USBH_FAIL;
 800bf60:	2302      	movs	r3, #2
 800bf62:	e032      	b.n	800bfca <USBH_MSC_Write+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_WRITE;
 800bf64:	7afb      	ldrb	r3, [r7, #11]
 800bf66:	697a      	ldr	r2, [r7, #20]
 800bf68:	2134      	movs	r1, #52	@ 0x34
 800bf6a:	fb01 f303 	mul.w	r3, r1, r3
 800bf6e:	4413      	add	r3, r2
 800bf70:	3390      	adds	r3, #144	@ 0x90
 800bf72:	2207      	movs	r2, #7
 800bf74:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800bf76:	7af9      	ldrb	r1, [r7, #11]
 800bf78:	6a3b      	ldr	r3, [r7, #32]
 800bf7a:	9300      	str	r3, [sp, #0]
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	f000 fca2 	bl	800c8ca <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bf8c:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bf8e:	e013      	b.n	800bfb8 <USBH_MSC_Write+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	1ad2      	subs	r2, r2, r3
 800bf9a:	6a3b      	ldr	r3, [r7, #32]
 800bf9c:	f242 7110 	movw	r1, #10000	@ 0x2710
 800bfa0:	fb01 f303 	mul.w	r3, r1, r3
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d805      	bhi.n	800bfb4 <USBH_MSC_Write+0xa2>
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d101      	bne.n	800bfb8 <USBH_MSC_Write+0xa6>
    {
      return USBH_FAIL;
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	e008      	b.n	800bfca <USBH_MSC_Write+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bfb8:	7afb      	ldrb	r3, [r7, #11]
 800bfba:	4619      	mov	r1, r3
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f7ff fe24 	bl	800bc0a <USBH_MSC_RdWrProcess>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d0e3      	beq.n	800bf90 <USBH_MSC_Write+0x7e>
    }
  }

  return USBH_OK;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3718      	adds	r7, #24
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b082      	sub	sp, #8
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2221      	movs	r2, #33	@ 0x21
 800bfde:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	22ff      	movs	r2, #255	@ 0xff
 800bfe4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800bff8:	2200      	movs	r2, #0
 800bffa:	2100      	movs	r1, #0
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f001 ff44 	bl	800de8a <USBH_CtlReq>
 800c002:	4603      	mov	r3, r0
}
 800c004:	4618      	mov	r0, r3
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	22a1      	movs	r2, #161	@ 0xa1
 800c01a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	22fe      	movs	r2, #254	@ 0xfe
 800c020:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2201      	movs	r2, #1
 800c032:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800c034:	2201      	movs	r2, #1
 800c036:	6839      	ldr	r1, [r7, #0]
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f001 ff26 	bl	800de8a <USBH_CtlReq>
 800c03e:	4603      	mov	r3, r0
}
 800c040:	4618      	mov	r0, r3
 800c042:	3708      	adds	r7, #8
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800c048:	b480      	push	{r7}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c056:	69db      	ldr	r3, [r3, #28]
 800c058:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	4a09      	ldr	r2, [pc, #36]	@ (800c084 <USBH_MSC_BOT_Init+0x3c>)
 800c05e:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	4a09      	ldr	r2, [pc, #36]	@ (800c088 <USBH_MSC_BOT_Init+0x40>)
 800c064:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2201      	movs	r2, #1
 800c06a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2201      	movs	r2, #1
 800c072:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 800c076:	2300      	movs	r3, #0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3714      	adds	r7, #20
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr
 800c084:	43425355 	.word	0x43425355
 800c088:	20304050 	.word	0x20304050

0800c08c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b088      	sub	sp, #32
 800c090:	af02      	add	r7, sp, #8
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	460b      	mov	r3, r1
 800c096:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800c098:	2301      	movs	r3, #1
 800c09a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800c09c:	2301      	movs	r3, #1
 800c09e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c0ae:	69db      	ldr	r3, [r3, #28]
 800c0b0:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	2b0a      	cmp	r3, #10
 800c0c0:	f200 819e 	bhi.w	800c400 <USBH_MSC_BOT_Process+0x374>
 800c0c4:	a201      	add	r2, pc, #4	@ (adr r2, 800c0cc <USBH_MSC_BOT_Process+0x40>)
 800c0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ca:	bf00      	nop
 800c0cc:	0800c0f9 	.word	0x0800c0f9
 800c0d0:	0800c121 	.word	0x0800c121
 800c0d4:	0800c18b 	.word	0x0800c18b
 800c0d8:	0800c1a9 	.word	0x0800c1a9
 800c0dc:	0800c22d 	.word	0x0800c22d
 800c0e0:	0800c24f 	.word	0x0800c24f
 800c0e4:	0800c2e7 	.word	0x0800c2e7
 800c0e8:	0800c303 	.word	0x0800c303
 800c0ec:	0800c355 	.word	0x0800c355
 800c0f0:	0800c385 	.word	0x0800c385
 800c0f4:	0800c3e7 	.word	0x0800c3e7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	78fa      	ldrb	r2, [r7, #3]
 800c0fc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	2202      	movs	r2, #2
 800c104:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	795b      	ldrb	r3, [r3, #5]
 800c112:	2201      	movs	r2, #1
 800c114:	9200      	str	r2, [sp, #0]
 800c116:	221f      	movs	r2, #31
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f002 f8c4 	bl	800e2a6 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800c11e:	e17e      	b.n	800c41e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	795b      	ldrb	r3, [r3, #5]
 800c124:	4619      	mov	r1, r3
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f005 feda 	bl	8011ee0 <USBH_LL_GetURBState>
 800c12c:	4603      	mov	r3, r0
 800c12e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c130:	7d3b      	ldrb	r3, [r7, #20]
 800c132:	2b01      	cmp	r3, #1
 800c134:	d118      	bne.n	800c168 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00f      	beq.n	800c15e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800c144:	b25b      	sxtb	r3, r3
 800c146:	2b00      	cmp	r3, #0
 800c148:	da04      	bge.n	800c154 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	2203      	movs	r2, #3
 800c14e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c152:	e157      	b.n	800c404 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	2205      	movs	r2, #5
 800c158:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800c15c:	e152      	b.n	800c404 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	2207      	movs	r2, #7
 800c162:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800c166:	e14d      	b.n	800c404 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c168:	7d3b      	ldrb	r3, [r7, #20]
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d104      	bne.n	800c178 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	2201      	movs	r2, #1
 800c172:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800c176:	e145      	b.n	800c404 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800c178:	7d3b      	ldrb	r3, [r7, #20]
 800c17a:	2b05      	cmp	r3, #5
 800c17c:	f040 8142 	bne.w	800c404 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_ERROR_OUT;
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	220a      	movs	r2, #10
 800c184:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800c188:	e13c      	b.n	800c404 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	895a      	ldrh	r2, [r3, #10]
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	791b      	ldrb	r3, [r3, #4]
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f002 f8a9 	bl	800e2f0 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	2204      	movs	r2, #4
 800c1a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 800c1a6:	e13a      	b.n	800c41e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	791b      	ldrb	r3, [r3, #4]
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f005 fe96 	bl	8011ee0 <USBH_LL_GetURBState>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c1b8:	7d3b      	ldrb	r3, [r7, #20]
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d12d      	bne.n	800c21a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1c2:	693a      	ldr	r2, [r7, #16]
 800c1c4:	8952      	ldrh	r2, [r2, #10]
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d910      	bls.n	800c1ec <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c1d0:	693a      	ldr	r2, [r7, #16]
 800c1d2:	8952      	ldrh	r2, [r2, #10]
 800c1d4:	441a      	add	r2, r3
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1e0:	693a      	ldr	r2, [r7, #16]
 800c1e2:	8952      	ldrh	r2, [r2, #10]
 800c1e4:	1a9a      	subs	r2, r3, r2
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c1ea:	e002      	b.n	800c1f2 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d00a      	beq.n	800c210 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	895a      	ldrh	r2, [r3, #10]
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	791b      	ldrb	r3, [r3, #4]
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f002 f871 	bl	800e2f0 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800c20e:	e0fb      	b.n	800c408 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	2207      	movs	r2, #7
 800c214:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800c218:	e0f6      	b.n	800c408 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800c21a:	7d3b      	ldrb	r3, [r7, #20]
 800c21c:	2b05      	cmp	r3, #5
 800c21e:	f040 80f3 	bne.w	800c408 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	2209      	movs	r2, #9
 800c226:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800c22a:	e0ed      	b.n	800c408 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	891a      	ldrh	r2, [r3, #8]
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	795b      	ldrb	r3, [r3, #5]
 800c23a:	2001      	movs	r0, #1
 800c23c:	9000      	str	r0, [sp, #0]
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f002 f831 	bl	800e2a6 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	2206      	movs	r2, #6
 800c248:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800c24c:	e0e7      	b.n	800c41e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	795b      	ldrb	r3, [r3, #5]
 800c252:	4619      	mov	r1, r3
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f005 fe43 	bl	8011ee0 <USBH_LL_GetURBState>
 800c25a:	4603      	mov	r3, r0
 800c25c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c25e:	7d3b      	ldrb	r3, [r7, #20]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d12f      	bne.n	800c2c4 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c268:	693a      	ldr	r2, [r7, #16]
 800c26a:	8912      	ldrh	r2, [r2, #8]
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d910      	bls.n	800c292 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c276:	693a      	ldr	r2, [r7, #16]
 800c278:	8912      	ldrh	r2, [r2, #8]
 800c27a:	441a      	add	r2, r3
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c286:	693a      	ldr	r2, [r7, #16]
 800c288:	8912      	ldrh	r2, [r2, #8]
 800c28a:	1a9a      	subs	r2, r3, r2
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c290:	e002      	b.n	800c298 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	2200      	movs	r2, #0
 800c296:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00c      	beq.n	800c2ba <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	891a      	ldrh	r2, [r3, #8]
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	795b      	ldrb	r3, [r3, #5]
 800c2ae:	2001      	movs	r0, #1
 800c2b0:	9000      	str	r0, [sp, #0]
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f001 fff7 	bl	800e2a6 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800c2b8:	e0a8      	b.n	800c40c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	2207      	movs	r2, #7
 800c2be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800c2c2:	e0a3      	b.n	800c40c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c2c4:	7d3b      	ldrb	r3, [r7, #20]
 800c2c6:	2b02      	cmp	r3, #2
 800c2c8:	d104      	bne.n	800c2d4 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state = BOT_DATA_OUT;
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	2205      	movs	r2, #5
 800c2ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800c2d2:	e09b      	b.n	800c40c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800c2d4:	7d3b      	ldrb	r3, [r7, #20]
 800c2d6:	2b05      	cmp	r3, #5
 800c2d8:	f040 8098 	bne.w	800c40c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state = BOT_ERROR_OUT;
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	220a      	movs	r2, #10
 800c2e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800c2e4:	e092      	b.n	800c40c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	791b      	ldrb	r3, [r3, #4]
 800c2f0:	220d      	movs	r2, #13
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f001 fffc 	bl	800e2f0 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_RECEIVE_CSW_WAIT;
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	2208      	movs	r2, #8
 800c2fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800c300:	e08d      	b.n	800c41e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	791b      	ldrb	r3, [r3, #4]
 800c306:	4619      	mov	r1, r3
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f005 fde9 	bl	8011ee0 <USBH_LL_GetURBState>
 800c30e:	4603      	mov	r3, r0
 800c310:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800c312:	7d3b      	ldrb	r3, [r7, #20]
 800c314:	2b01      	cmp	r3, #1
 800c316:	d115      	bne.n	800c344 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	2201      	movs	r2, #1
 800c31c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	2201      	movs	r2, #1
 800c324:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 f8a9 	bl	800c480 <USBH_MSC_DecodeCSW>
 800c32e:	4603      	mov	r3, r0
 800c330:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800c332:	7d7b      	ldrb	r3, [r7, #21]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d102      	bne.n	800c33e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800c338:	2300      	movs	r3, #0
 800c33a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800c33c:	e068      	b.n	800c410 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800c33e:	2302      	movs	r3, #2
 800c340:	75fb      	strb	r3, [r7, #23]
      break;
 800c342:	e065      	b.n	800c410 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800c344:	7d3b      	ldrb	r3, [r7, #20]
 800c346:	2b05      	cmp	r3, #5
 800c348:	d162      	bne.n	800c410 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	2209      	movs	r2, #9
 800c34e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800c352:	e05d      	b.n	800c410 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800c354:	78fb      	ldrb	r3, [r7, #3]
 800c356:	2200      	movs	r2, #0
 800c358:	4619      	mov	r1, r3
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 f864 	bl	800c428 <USBH_MSC_BOT_Abort>
 800c360:	4603      	mov	r3, r0
 800c362:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c364:	7dbb      	ldrb	r3, [r7, #22]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d104      	bne.n	800c374 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	2207      	movs	r2, #7
 800c36e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800c372:	e04f      	b.n	800c414 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800c374:	7dbb      	ldrb	r3, [r7, #22]
 800c376:	2b04      	cmp	r3, #4
 800c378:	d14c      	bne.n	800c414 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	220b      	movs	r2, #11
 800c37e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800c382:	e047      	b.n	800c414 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800c384:	78fb      	ldrb	r3, [r7, #3]
 800c386:	2201      	movs	r2, #1
 800c388:	4619      	mov	r1, r3
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 f84c 	bl	800c428 <USBH_MSC_BOT_Abort>
 800c390:	4603      	mov	r3, r0
 800c392:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c394:	7dbb      	ldrb	r3, [r7, #22]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d11d      	bne.n	800c3d6 <USBH_MSC_BOT_Process+0x34a>
      {
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	795b      	ldrb	r3, [r3, #5]
 800c39e:	4619      	mov	r1, r3
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f005 fdfa 	bl	8011f9a <USBH_LL_GetToggle>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	7959      	ldrb	r1, [r3, #5]
 800c3ae:	7bfb      	ldrb	r3, [r7, #15]
 800c3b0:	f1c3 0301 	rsb	r3, r3, #1
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f005 fdbb 	bl	8011f34 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	791b      	ldrb	r3, [r3, #4]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f005 fdb4 	bl	8011f34 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	2209      	movs	r2, #9
 800c3d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800c3d4:	e020      	b.n	800c418 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800c3d6:	7dbb      	ldrb	r3, [r7, #22]
 800c3d8:	2b04      	cmp	r3, #4
 800c3da:	d11d      	bne.n	800c418 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	220b      	movs	r2, #11
 800c3e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800c3e4:	e018      	b.n	800c418 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7ff fdf3 	bl	800bfd2 <USBH_MSC_BOT_REQ_Reset>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800c3f0:	7dfb      	ldrb	r3, [r7, #23]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d112      	bne.n	800c41c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 800c3fe:	e00d      	b.n	800c41c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800c400:	bf00      	nop
 800c402:	e00c      	b.n	800c41e <USBH_MSC_BOT_Process+0x392>
      break;
 800c404:	bf00      	nop
 800c406:	e00a      	b.n	800c41e <USBH_MSC_BOT_Process+0x392>
      break;
 800c408:	bf00      	nop
 800c40a:	e008      	b.n	800c41e <USBH_MSC_BOT_Process+0x392>
      break;
 800c40c:	bf00      	nop
 800c40e:	e006      	b.n	800c41e <USBH_MSC_BOT_Process+0x392>
      break;
 800c410:	bf00      	nop
 800c412:	e004      	b.n	800c41e <USBH_MSC_BOT_Process+0x392>
      break;
 800c414:	bf00      	nop
 800c416:	e002      	b.n	800c41e <USBH_MSC_BOT_Process+0x392>
      break;
 800c418:	bf00      	nop
 800c41a:	e000      	b.n	800c41e <USBH_MSC_BOT_Process+0x392>
      break;
 800c41c:	bf00      	nop
  }
  return status;
 800c41e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3718      	adds	r7, #24
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	460b      	mov	r3, r1
 800c432:	70fb      	strb	r3, [r7, #3]
 800c434:	4613      	mov	r3, r2
 800c436:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800c438:	2302      	movs	r3, #2
 800c43a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c442:	69db      	ldr	r3, [r3, #28]
 800c444:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800c446:	78bb      	ldrb	r3, [r7, #2]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d002      	beq.n	800c452 <USBH_MSC_BOT_Abort+0x2a>
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d009      	beq.n	800c464 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800c450:	e011      	b.n	800c476 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	79db      	ldrb	r3, [r3, #7]
 800c456:	4619      	mov	r1, r3
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f001 f9e1 	bl	800d820 <USBH_ClrFeature>
 800c45e:	4603      	mov	r3, r0
 800c460:	73fb      	strb	r3, [r7, #15]
      break;
 800c462:	e008      	b.n	800c476 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	799b      	ldrb	r3, [r3, #6]
 800c468:	4619      	mov	r1, r3
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f001 f9d8 	bl	800d820 <USBH_ClrFeature>
 800c470:	4603      	mov	r3, r0
 800c472:	73fb      	strb	r3, [r7, #15]
      break;
 800c474:	bf00      	nop
  }
  return status;
 800c476:	7bfb      	ldrb	r3, [r7, #15]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3710      	adds	r7, #16
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c48e:	69db      	ldr	r3, [r3, #28]
 800c490:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800c492:	2301      	movs	r3, #1
 800c494:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	791b      	ldrb	r3, [r3, #4]
 800c49a:	4619      	mov	r1, r3
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f005 fc8d 	bl	8011dbc <USBH_LL_GetLastXferSize>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b0d      	cmp	r3, #13
 800c4a6:	d002      	beq.n	800c4ae <USBH_MSC_DecodeCSW+0x2e>
    (9) Ho > Dn (Host expects to send data to the device,
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/

    status = BOT_CSW_PHASE_ERROR;
 800c4a8:	2302      	movs	r3, #2
 800c4aa:	73fb      	strb	r3, [r7, #15]
 800c4ac:	e024      	b.n	800c4f8 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c4b2:	4a14      	ldr	r2, [pc, #80]	@ (800c504 <USBH_MSC_DecodeCSW+0x84>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d11d      	bne.n	800c4f4 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d119      	bne.n	800c4f8 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d102      	bne.n	800c4d4 <USBH_MSC_DecodeCSW+0x54>
          Device intends to send data to the host)
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_CMD_PASSED;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	73fb      	strb	r3, [r7, #15]
 800c4d2:	e011      	b.n	800c4f8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d102      	bne.n	800c4e4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	73fb      	strb	r3, [r7, #15]
 800c4e2:	e009      	b.n	800c4f8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c4ea:	2b02      	cmp	r3, #2
 800c4ec:	d104      	bne.n	800c4f8 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800c4ee:	2302      	movs	r3, #2
 800c4f0:	73fb      	strb	r3, [r7, #15]
 800c4f2:	e001      	b.n	800c4f8 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800c4f4:	2302      	movs	r3, #2
 800c4f6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800c4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	53425355 	.word	0x53425355

0800c508 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	460b      	mov	r3, r1
 800c512:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef error = USBH_FAIL;
 800c514:	2302      	movs	r3, #2
 800c516:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c51e:	69db      	ldr	r3, [r3, #28]
 800c520:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d002      	beq.n	800c532 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	d021      	beq.n	800c574 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c530:	e028      	b.n	800c584 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	2200      	movs	r2, #0
 800c536:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	220a      	movs	r2, #10
 800c544:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	3363      	adds	r3, #99	@ 0x63
 800c54c:	2210      	movs	r2, #16
 800c54e:	2100      	movs	r1, #0
 800c550:	4618      	mov	r0, r3
 800c552:	f005 fe67 	bl	8012224 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_TEST_UNIT_READY;
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	2200      	movs	r2, #0
 800c55a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	2201      	movs	r2, #1
 800c562:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	2202      	movs	r2, #2
 800c56a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 800c56e:	2301      	movs	r3, #1
 800c570:	73fb      	strb	r3, [r7, #15]
      break;
 800c572:	e007      	b.n	800c584 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c574:	78fb      	ldrb	r3, [r7, #3]
 800c576:	4619      	mov	r1, r3
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7ff fd87 	bl	800c08c <USBH_MSC_BOT_Process>
 800c57e:	4603      	mov	r3, r0
 800c580:	73fb      	strb	r3, [r7, #15]
      break;
 800c582:	bf00      	nop
  }

  return error;
 800c584:	7bfb      	ldrb	r3, [r7, #15]
}
 800c586:	4618      	mov	r0, r3
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800c58e:	b580      	push	{r7, lr}
 800c590:	b086      	sub	sp, #24
 800c592:	af00      	add	r7, sp, #0
 800c594:	60f8      	str	r0, [r7, #12]
 800c596:	460b      	mov	r3, r1
 800c598:	607a      	str	r2, [r7, #4]
 800c59a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_BUSY;
 800c59c:	2301      	movs	r3, #1
 800c59e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c5a6:	69db      	ldr	r3, [r3, #28]
 800c5a8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d002      	beq.n	800c5ba <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800c5b4:	2b02      	cmp	r3, #2
 800c5b6:	d027      	beq.n	800c608 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800c5b8:	e05e      	b.n	800c678 <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	2208      	movs	r2, #8
 800c5be:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	2280      	movs	r2, #128	@ 0x80
 800c5c4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	220a      	movs	r2, #10
 800c5cc:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	3363      	adds	r3, #99	@ 0x63
 800c5d4:	2210      	movs	r2, #16
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f005 fe23 	bl	8012224 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	2225      	movs	r2, #37	@ 0x25
 800c5e2:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	2201      	movs	r2, #1
 800c5ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	2202      	movs	r2, #2
 800c5f2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	f103 0210 	add.w	r2, r3, #16
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800c602:	2301      	movs	r3, #1
 800c604:	75fb      	strb	r3, [r7, #23]
      break;
 800c606:	e037      	b.n	800c678 <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c608:	7afb      	ldrb	r3, [r7, #11]
 800c60a:	4619      	mov	r1, r3
 800c60c:	68f8      	ldr	r0, [r7, #12]
 800c60e:	f7ff fd3d 	bl	800c08c <USBH_MSC_BOT_Process>
 800c612:	4603      	mov	r3, r0
 800c614:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c616:	7dfb      	ldrb	r3, [r7, #23]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d12c      	bne.n	800c676 <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c622:	3303      	adds	r3, #3
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	461a      	mov	r2, r3
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c62e:	3302      	adds	r3, #2
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	021b      	lsls	r3, r3, #8
 800c634:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c63c:	3301      	adds	r3, #1
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c642:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	061b      	lsls	r3, r3, #24
 800c64e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c65a:	3307      	adds	r3, #7
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	461a      	mov	r2, r3
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c666:	3306      	adds	r3, #6
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	021b      	lsls	r3, r3, #8
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	4313      	orrs	r3, r2
 800c670:	b29a      	uxth	r2, r3
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	809a      	strh	r2, [r3, #4]
      break;
 800c676:	bf00      	nop
  }

  return error;
 800c678:	7dfb      	ldrb	r3, [r7, #23]
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3718      	adds	r7, #24
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800c682:	b580      	push	{r7, lr}
 800c684:	b086      	sub	sp, #24
 800c686:	af00      	add	r7, sp, #0
 800c688:	60f8      	str	r0, [r7, #12]
 800c68a:	460b      	mov	r3, r1
 800c68c:	607a      	str	r2, [r7, #4]
 800c68e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800c690:	2302      	movs	r3, #2
 800c692:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c69a:	69db      	ldr	r3, [r3, #28]
 800c69c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d002      	beq.n	800c6ae <USBH_MSC_SCSI_Inquiry+0x2c>
 800c6a8:	2b02      	cmp	r3, #2
 800c6aa:	d03d      	beq.n	800c728 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800c6ac:	e089      	b.n	800c7c2 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	2224      	movs	r2, #36	@ 0x24
 800c6b2:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	2280      	movs	r2, #128	@ 0x80
 800c6b8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	220a      	movs	r2, #10
 800c6c0:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	3363      	adds	r3, #99	@ 0x63
 800c6c8:	220a      	movs	r2, #10
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f005 fda9 	bl	8012224 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_INQUIRY;
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	2212      	movs	r2, #18
 800c6d6:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 800c6da:	7afb      	ldrb	r3, [r7, #11]
 800c6dc:	015b      	lsls	r3, r3, #5
 800c6de:	b2da      	uxtb	r2, r3
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = 0x24U;
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	2224      	movs	r2, #36	@ 0x24
 800c6fa:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	2200      	movs	r2, #0
 800c702:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	2201      	movs	r2, #1
 800c70a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	2202      	movs	r2, #2
 800c712:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	f103 0210 	add.w	r2, r3, #16
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800c722:	2301      	movs	r3, #1
 800c724:	75fb      	strb	r3, [r7, #23]
      break;
 800c726:	e04c      	b.n	800c7c2 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c728:	7afb      	ldrb	r3, [r7, #11]
 800c72a:	4619      	mov	r1, r3
 800c72c:	68f8      	ldr	r0, [r7, #12]
 800c72e:	f7ff fcad 	bl	800c08c <USBH_MSC_BOT_Process>
 800c732:	4603      	mov	r3, r0
 800c734:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c736:	7dfb      	ldrb	r3, [r7, #23]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d141      	bne.n	800c7c0 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800c73c:	2222      	movs	r2, #34	@ 0x22
 800c73e:	2100      	movs	r1, #0
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f005 fd6f 	bl	8012224 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	f003 031f 	and.w	r3, r3, #31
 800c752:	b2da      	uxtb	r2, r3
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	095b      	lsrs	r3, r3, #5
 800c762:	b2da      	uxtb	r2, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c76e:	3301      	adds	r3, #1
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	b25b      	sxtb	r3, r3
 800c774:	2b00      	cmp	r3, #0
 800c776:	da03      	bge.n	800c780 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	709a      	strb	r2, [r3, #2]
 800c77e:	e002      	b.n	800c786 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	1cd8      	adds	r0, r3, #3
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c790:	3308      	adds	r3, #8
 800c792:	2208      	movs	r2, #8
 800c794:	4619      	mov	r1, r3
 800c796:	f005 fdbb 	bl	8012310 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f103 000c 	add.w	r0, r3, #12
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7a6:	3310      	adds	r3, #16
 800c7a8:	2210      	movs	r2, #16
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	f005 fdb0 	bl	8012310 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	331d      	adds	r3, #29
 800c7b4:	693a      	ldr	r2, [r7, #16]
 800c7b6:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800c7ba:	3220      	adds	r2, #32
 800c7bc:	6812      	ldr	r2, [r2, #0]
 800c7be:	601a      	str	r2, [r3, #0]
      break;
 800c7c0:	bf00      	nop
  }

  return error;
 800c7c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3718      	adds	r7, #24
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b086      	sub	sp, #24
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	607a      	str	r2, [r7, #4]
 800c7d8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800c7da:	2302      	movs	r3, #2
 800c7dc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c7e4:	69db      	ldr	r3, [r3, #28]
 800c7e6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d002      	beq.n	800c7f8 <USBH_MSC_SCSI_RequestSense+0x2c>
 800c7f2:	2b02      	cmp	r3, #2
 800c7f4:	d03d      	beq.n	800c872 <USBH_MSC_SCSI_RequestSense+0xa6>

      }
      break;

    default:
      break;
 800c7f6:	e063      	b.n	800c8c0 <USBH_MSC_SCSI_RequestSense+0xf4>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	220e      	movs	r2, #14
 800c7fc:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	2280      	movs	r2, #128	@ 0x80
 800c802:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	220a      	movs	r2, #10
 800c80a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	3363      	adds	r3, #99	@ 0x63
 800c812:	2210      	movs	r2, #16
 800c814:	2100      	movs	r1, #0
 800c816:	4618      	mov	r0, r3
 800c818:	f005 fd04 	bl	8012224 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_REQUEST_SENSE;
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	2203      	movs	r2, #3
 800c820:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 800c824:	7afb      	ldrb	r3, [r7, #11]
 800c826:	015b      	lsls	r3, r3, #5
 800c828:	b2da      	uxtb	r2, r3
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	2200      	movs	r2, #0
 800c834:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	2200      	movs	r2, #0
 800c83c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = DATA_LEN_REQUEST_SENSE;
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	220e      	movs	r2, #14
 800c844:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	2201      	movs	r2, #1
 800c854:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	2202      	movs	r2, #2
 800c85c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	f103 0210 	add.w	r2, r3, #16
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800c86c:	2301      	movs	r3, #1
 800c86e:	75fb      	strb	r3, [r7, #23]
      break;
 800c870:	e026      	b.n	800c8c0 <USBH_MSC_SCSI_RequestSense+0xf4>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c872:	7afb      	ldrb	r3, [r7, #11]
 800c874:	4619      	mov	r1, r3
 800c876:	68f8      	ldr	r0, [r7, #12]
 800c878:	f7ff fc08 	bl	800c08c <USBH_MSC_BOT_Process>
 800c87c:	4603      	mov	r3, r0
 800c87e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c880:	7dfb      	ldrb	r3, [r7, #23]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d11b      	bne.n	800c8be <USBH_MSC_SCSI_RequestSense+0xf2>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c88c:	3302      	adds	r3, #2
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	f003 030f 	and.w	r3, r3, #15
 800c894:	b2da      	uxtb	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c8a0:	7b1a      	ldrb	r2, [r3, #12]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c8ac:	7b5a      	ldrb	r2, [r3, #13]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	709a      	strb	r2, [r3, #2]
        if (sense_data->asc == SCSI_ASC_MEDIUM_NOT_PRESENT)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	785b      	ldrb	r3, [r3, #1]
 800c8b6:	2b3a      	cmp	r3, #58	@ 0x3a
 800c8b8:	d101      	bne.n	800c8be <USBH_MSC_SCSI_RequestSense+0xf2>
          error = USBH_UNRECOVERED_ERROR;
 800c8ba:	2304      	movs	r3, #4
 800c8bc:	75fb      	strb	r3, [r7, #23]
      break;
 800c8be:	bf00      	nop
  }

  return error;
 800c8c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3718      	adds	r7, #24
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b086      	sub	sp, #24
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	60f8      	str	r0, [r7, #12]
 800c8d2:	607a      	str	r2, [r7, #4]
 800c8d4:	603b      	str	r3, [r7, #0]
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800c8da:	2302      	movs	r3, #2
 800c8dc:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c8e4:	69db      	ldr	r3, [r3, #28]
 800c8e6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d002      	beq.n	800c8f8 <USBH_MSC_SCSI_Write+0x2e>
 800c8f2:	2b02      	cmp	r3, #2
 800c8f4:	d04c      	beq.n	800c990 <USBH_MSC_SCSI_Write+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c8f6:	e053      	b.n	800c9a0 <USBH_MSC_SCSI_Write+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 800c8f8:	7afb      	ldrb	r3, [r7, #11]
 800c8fa:	693a      	ldr	r2, [r7, #16]
 800c8fc:	2134      	movs	r1, #52	@ 0x34
 800c8fe:	fb01 f303 	mul.w	r3, r1, r3
 800c902:	4413      	add	r3, r2
 800c904:	3398      	adds	r3, #152	@ 0x98
 800c906:	881b      	ldrh	r3, [r3, #0]
 800c908:	461a      	mov	r2, r3
 800c90a:	6a3b      	ldr	r3, [r7, #32]
 800c90c:	fb03 f202 	mul.w	r2, r3, r2
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	2200      	movs	r2, #0
 800c918:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	220a      	movs	r2, #10
 800c920:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	3363      	adds	r3, #99	@ 0x63
 800c928:	2210      	movs	r2, #16
 800c92a:	2100      	movs	r1, #0
 800c92c:	4618      	mov	r0, r3
 800c92e:	f005 fc79 	bl	8012224 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_WRITE10;
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	222a      	movs	r2, #42	@ 0x2a
 800c936:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 800c93a:	79fa      	ldrb	r2, [r7, #7]
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 800c942:	79ba      	ldrb	r2, [r7, #6]
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 800c94a:	797a      	ldrb	r2, [r7, #5]
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 800c952:	1d3b      	adds	r3, r7, #4
 800c954:	781a      	ldrb	r2, [r3, #0]
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 800c95c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 800c966:	f107 0320 	add.w	r3, r7, #32
 800c96a:	781a      	ldrb	r2, [r3, #0]
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	2201      	movs	r2, #1
 800c976:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	2202      	movs	r2, #2
 800c97e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	683a      	ldr	r2, [r7, #0]
 800c986:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800c98a:	2301      	movs	r3, #1
 800c98c:	75fb      	strb	r3, [r7, #23]
      break;
 800c98e:	e007      	b.n	800c9a0 <USBH_MSC_SCSI_Write+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c990:	7afb      	ldrb	r3, [r7, #11]
 800c992:	4619      	mov	r1, r3
 800c994:	68f8      	ldr	r0, [r7, #12]
 800c996:	f7ff fb79 	bl	800c08c <USBH_MSC_BOT_Process>
 800c99a:	4603      	mov	r3, r0
 800c99c:	75fb      	strb	r3, [r7, #23]
      break;
 800c99e:	bf00      	nop
  }

  return error;
 800c9a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3718      	adds	r7, #24
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}

0800c9aa <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800c9aa:	b580      	push	{r7, lr}
 800c9ac:	b086      	sub	sp, #24
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	60f8      	str	r0, [r7, #12]
 800c9b2:	607a      	str	r2, [r7, #4]
 800c9b4:	603b      	str	r3, [r7, #0]
 800c9b6:	460b      	mov	r3, r1
 800c9b8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800c9ba:	2302      	movs	r3, #2
 800c9bc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c9c4:	69db      	ldr	r3, [r3, #28]
 800c9c6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d002      	beq.n	800c9d8 <USBH_MSC_SCSI_Read+0x2e>
 800c9d2:	2b02      	cmp	r3, #2
 800c9d4:	d04c      	beq.n	800ca70 <USBH_MSC_SCSI_Read+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c9d6:	e053      	b.n	800ca80 <USBH_MSC_SCSI_Read+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 800c9d8:	7afb      	ldrb	r3, [r7, #11]
 800c9da:	693a      	ldr	r2, [r7, #16]
 800c9dc:	2134      	movs	r1, #52	@ 0x34
 800c9de:	fb01 f303 	mul.w	r3, r1, r3
 800c9e2:	4413      	add	r3, r2
 800c9e4:	3398      	adds	r3, #152	@ 0x98
 800c9e6:	881b      	ldrh	r3, [r3, #0]
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	6a3b      	ldr	r3, [r7, #32]
 800c9ec:	fb03 f202 	mul.w	r2, r3, r2
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	2280      	movs	r2, #128	@ 0x80
 800c9f8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	220a      	movs	r2, #10
 800ca00:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	3363      	adds	r3, #99	@ 0x63
 800ca08:	2210      	movs	r2, #16
 800ca0a:	2100      	movs	r1, #0
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f005 fc09 	bl	8012224 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_READ10;
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	2228      	movs	r2, #40	@ 0x28
 800ca16:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 800ca1a:	79fa      	ldrb	r2, [r7, #7]
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 800ca22:	79ba      	ldrb	r2, [r7, #6]
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 800ca2a:	797a      	ldrb	r2, [r7, #5]
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 800ca32:	1d3b      	adds	r3, r7, #4
 800ca34:	781a      	ldrb	r2, [r3, #0]
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 800ca3c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 800ca46:	f107 0320 	add.w	r3, r7, #32
 800ca4a:	781a      	ldrb	r2, [r3, #0]
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	2201      	movs	r2, #1
 800ca56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	2202      	movs	r2, #2
 800ca5e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	683a      	ldr	r2, [r7, #0]
 800ca66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	75fb      	strb	r3, [r7, #23]
      break;
 800ca6e:	e007      	b.n	800ca80 <USBH_MSC_SCSI_Read+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ca70:	7afb      	ldrb	r3, [r7, #11]
 800ca72:	4619      	mov	r1, r3
 800ca74:	68f8      	ldr	r0, [r7, #12]
 800ca76:	f7ff fb09 	bl	800c08c <USBH_MSC_BOT_Process>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	75fb      	strb	r3, [r7, #23]
      break;
 800ca7e:	bf00      	nop
  }

  return error;
 800ca80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3718      	adds	r7, #24
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b084      	sub	sp, #16
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	60f8      	str	r0, [r7, #12]
 800ca92:	60b9      	str	r1, [r7, #8]
 800ca94:	4613      	mov	r3, r2
 800ca96:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d101      	bne.n	800caa2 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ca9e:	2302      	movs	r3, #2
 800caa0:	e029      	b.n	800caf6 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	79fa      	ldrb	r2, [r7, #7]
 800caa6:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2200      	movs	r2, #0
 800caae:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2200      	movs	r2, #0
 800cab6:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800caba:	68f8      	ldr	r0, [r7, #12]
 800cabc:	f000 f81f 	bl	800cafe <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2200      	movs	r2, #0
 800cac4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2200      	movs	r2, #0
 800cacc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2200      	movs	r2, #0
 800cad4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2200      	movs	r2, #0
 800cadc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d003      	beq.n	800caee <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	68ba      	ldr	r2, [r7, #8]
 800caea:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800caee:	68f8      	ldr	r0, [r7, #12]
 800caf0:	f005 f8b0 	bl	8011c54 <USBH_LL_Init>

  return USBH_OK;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800cafe:	b580      	push	{r7, lr}
 800cb00:	b084      	sub	sp, #16
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800cb06:	2300      	movs	r3, #0
 800cb08:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	60fb      	str	r3, [r7, #12]
 800cb0e:	e009      	b.n	800cb24 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	33e0      	adds	r3, #224	@ 0xe0
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	4413      	add	r3, r2
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	3301      	adds	r3, #1
 800cb22:	60fb      	str	r3, [r7, #12]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2b0f      	cmp	r3, #15
 800cb28:	d9f2      	bls.n	800cb10 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	60fb      	str	r3, [r7, #12]
 800cb2e:	e009      	b.n	800cb44 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	4413      	add	r3, r2
 800cb36:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	3301      	adds	r3, #1
 800cb42:	60fb      	str	r3, [r7, #12]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb4a:	d3f1      	bcc.n	800cb30 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2200      	movs	r2, #0
 800cb56:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2200      	movs	r2, #0
 800cb62:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2240      	movs	r2, #64	@ 0x40
 800cb70:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2200      	movs	r2, #0
 800cb76:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2201      	movs	r2, #1
 800cb84:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	331c      	adds	r3, #28
 800cb9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cba0:	2100      	movs	r1, #0
 800cba2:	4618      	mov	r0, r3
 800cba4:	f005 fb3e 	bl	8012224 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cbae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cbb2:	2100      	movs	r1, #0
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f005 fb35 	bl	8012224 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800cbc0:	2212      	movs	r2, #18
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f005 fb2d 	bl	8012224 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800cbd0:	223e      	movs	r2, #62	@ 0x3e
 800cbd2:	2100      	movs	r1, #0
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f005 fb25 	bl	8012224 <memset>

  return USBH_OK;
 800cbda:	2300      	movs	r3, #0
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3710      	adds	r7, #16
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b085      	sub	sp, #20
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d016      	beq.n	800cc26 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d10e      	bne.n	800cc20 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cc08:	1c59      	adds	r1, r3, #1
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	33de      	adds	r3, #222	@ 0xde
 800cc14:	6839      	ldr	r1, [r7, #0]
 800cc16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	73fb      	strb	r3, [r7, #15]
 800cc1e:	e004      	b.n	800cc2a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800cc20:	2302      	movs	r3, #2
 800cc22:	73fb      	strb	r3, [r7, #15]
 800cc24:	e001      	b.n	800cc2a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800cc26:	2302      	movs	r3, #2
 800cc28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cc2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3714      	adds	r7, #20
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr

0800cc38 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	460b      	mov	r3, r1
 800cc42:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800cc44:	2300      	movs	r3, #0
 800cc46:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800cc4e:	78fa      	ldrb	r2, [r7, #3]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d204      	bcs.n	800cc5e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	78fa      	ldrb	r2, [r7, #3]
 800cc58:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800cc5c:	e001      	b.n	800cc62 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800cc5e:	2302      	movs	r3, #2
 800cc60:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cc62:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3714      	adds	r7, #20
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr

0800cc70 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b087      	sub	sp, #28
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	4608      	mov	r0, r1
 800cc7a:	4611      	mov	r1, r2
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	4603      	mov	r3, r0
 800cc80:	70fb      	strb	r3, [r7, #3]
 800cc82:	460b      	mov	r3, r1
 800cc84:	70bb      	strb	r3, [r7, #2]
 800cc86:	4613      	mov	r3, r2
 800cc88:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800cc98:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cc9a:	e025      	b.n	800cce8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800cc9c:	7dfb      	ldrb	r3, [r7, #23]
 800cc9e:	221a      	movs	r2, #26
 800cca0:	fb02 f303 	mul.w	r3, r2, r3
 800cca4:	3308      	adds	r3, #8
 800cca6:	68fa      	ldr	r2, [r7, #12]
 800cca8:	4413      	add	r3, r2
 800ccaa:	3302      	adds	r3, #2
 800ccac:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	795b      	ldrb	r3, [r3, #5]
 800ccb2:	78fa      	ldrb	r2, [r7, #3]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d002      	beq.n	800ccbe <USBH_FindInterface+0x4e>
 800ccb8:	78fb      	ldrb	r3, [r7, #3]
 800ccba:	2bff      	cmp	r3, #255	@ 0xff
 800ccbc:	d111      	bne.n	800cce2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ccc2:	78ba      	ldrb	r2, [r7, #2]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d002      	beq.n	800ccce <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ccc8:	78bb      	ldrb	r3, [r7, #2]
 800ccca:	2bff      	cmp	r3, #255	@ 0xff
 800cccc:	d109      	bne.n	800cce2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ccd2:	787a      	ldrb	r2, [r7, #1]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d002      	beq.n	800ccde <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ccd8:	787b      	ldrb	r3, [r7, #1]
 800ccda:	2bff      	cmp	r3, #255	@ 0xff
 800ccdc:	d101      	bne.n	800cce2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ccde:	7dfb      	ldrb	r3, [r7, #23]
 800cce0:	e006      	b.n	800ccf0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cce2:	7dfb      	ldrb	r3, [r7, #23]
 800cce4:	3301      	adds	r3, #1
 800cce6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cce8:	7dfb      	ldrb	r3, [r7, #23]
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d9d6      	bls.n	800cc9c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ccee:	23ff      	movs	r3, #255	@ 0xff
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	371c      	adds	r7, #28
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f004 ffe1 	bl	8011ccc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800cd0a:	2101      	movs	r1, #1
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f005 f8fa 	bl	8011f06 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cd12:	2300      	movs	r3, #0
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3708      	adds	r7, #8
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b088      	sub	sp, #32
 800cd20:	af04      	add	r7, sp, #16
 800cd22:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cd24:	2302      	movs	r3, #2
 800cd26:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800cd32:	b2db      	uxtb	r3, r3
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d102      	bne.n	800cd3e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2203      	movs	r2, #3
 800cd3c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	2b0b      	cmp	r3, #11
 800cd46:	f200 81bb 	bhi.w	800d0c0 <USBH_Process+0x3a4>
 800cd4a:	a201      	add	r2, pc, #4	@ (adr r2, 800cd50 <USBH_Process+0x34>)
 800cd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd50:	0800cd81 	.word	0x0800cd81
 800cd54:	0800cdb3 	.word	0x0800cdb3
 800cd58:	0800ce1b 	.word	0x0800ce1b
 800cd5c:	0800d05b 	.word	0x0800d05b
 800cd60:	0800d0c1 	.word	0x0800d0c1
 800cd64:	0800cebb 	.word	0x0800cebb
 800cd68:	0800d001 	.word	0x0800d001
 800cd6c:	0800cef1 	.word	0x0800cef1
 800cd70:	0800cf11 	.word	0x0800cf11
 800cd74:	0800cf2f 	.word	0x0800cf2f
 800cd78:	0800cf73 	.word	0x0800cf73
 800cd7c:	0800d043 	.word	0x0800d043
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	f000 819b 	beq.w	800d0c4 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2201      	movs	r2, #1
 800cd92:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800cd94:	20c8      	movs	r0, #200	@ 0xc8
 800cd96:	f005 f933 	bl	8012000 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f004 fff3 	bl	8011d86 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cdb0:	e188      	b.n	800d0c4 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d107      	bne.n	800cdcc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2202      	movs	r2, #2
 800cdc8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cdca:	e18a      	b.n	800d0e2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800cdd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cdd6:	d914      	bls.n	800ce02 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800cdde:	3301      	adds	r3, #1
 800cde0:	b2da      	uxtb	r2, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800cdee:	2b03      	cmp	r3, #3
 800cdf0:	d903      	bls.n	800cdfa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	220d      	movs	r2, #13
 800cdf6:	701a      	strb	r2, [r3, #0]
      break;
 800cdf8:	e173      	b.n	800d0e2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	701a      	strb	r2, [r3, #0]
      break;
 800ce00:	e16f      	b.n	800d0e2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ce08:	f103 020a 	add.w	r2, r3, #10
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800ce12:	200a      	movs	r0, #10
 800ce14:	f005 f8f4 	bl	8012000 <USBH_Delay>
      break;
 800ce18:	e163      	b.n	800d0e2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d005      	beq.n	800ce30 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ce2a:	2104      	movs	r1, #4
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ce30:	2064      	movs	r0, #100	@ 0x64
 800ce32:	f005 f8e5 	bl	8012000 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f004 ff7e 	bl	8011d38 <USBH_LL_GetSpeed>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	461a      	mov	r2, r3
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2205      	movs	r2, #5
 800ce4a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f001 fa9b 	bl	800e38a <USBH_AllocPipe>
 800ce54:	4603      	mov	r3, r0
 800ce56:	461a      	mov	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ce5c:	2180      	movs	r1, #128	@ 0x80
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f001 fa93 	bl	800e38a <USBH_AllocPipe>
 800ce64:	4603      	mov	r3, r0
 800ce66:	461a      	mov	r2, r3
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	7919      	ldrb	r1, [r3, #4]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ce80:	9202      	str	r2, [sp, #8]
 800ce82:	2200      	movs	r2, #0
 800ce84:	9201      	str	r2, [sp, #4]
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2280      	movs	r2, #128	@ 0x80
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f001 fa4d 	bl	800e32c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	7959      	ldrb	r1, [r3, #5]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cea6:	9202      	str	r2, [sp, #8]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	9201      	str	r2, [sp, #4]
 800ceac:	9300      	str	r3, [sp, #0]
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f001 fa3a 	bl	800e32c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ceb8:	e113      	b.n	800d0e2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f000 f916 	bl	800d0ec <USBH_HandleEnum>
 800cec0:	4603      	mov	r3, r0
 800cec2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cec4:	7bbb      	ldrb	r3, [r7, #14]
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f040 80fd 	bne.w	800d0c8 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2200      	movs	r2, #0
 800ced2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d103      	bne.n	800cee8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2208      	movs	r2, #8
 800cee4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cee6:	e0ef      	b.n	800d0c8 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2207      	movs	r2, #7
 800ceec:	701a      	strb	r2, [r3, #0]
      break;
 800ceee:	e0eb      	b.n	800d0c8 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	f000 80e8 	beq.w	800d0cc <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cf02:	2101      	movs	r1, #1
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2208      	movs	r2, #8
 800cf0c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800cf0e:	e0dd      	b.n	800d0cc <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800cf16:	4619      	mov	r1, r3
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f000 fc3a 	bl	800d792 <USBH_SetCfg>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	f040 80d5 	bne.w	800d0d0 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2209      	movs	r2, #9
 800cf2a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cf2c:	e0d0      	b.n	800d0d0 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800cf34:	f003 0320 	and.w	r3, r3, #32
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d016      	beq.n	800cf6a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800cf3c:	2101      	movs	r1, #1
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 fc4a 	bl	800d7d8 <USBH_SetFeature>
 800cf44:	4603      	mov	r3, r0
 800cf46:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cf48:	7bbb      	ldrb	r3, [r7, #14]
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d103      	bne.n	800cf58 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	220a      	movs	r2, #10
 800cf54:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cf56:	e0bd      	b.n	800d0d4 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800cf58:	7bbb      	ldrb	r3, [r7, #14]
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	2b03      	cmp	r3, #3
 800cf5e:	f040 80b9 	bne.w	800d0d4 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	220a      	movs	r2, #10
 800cf66:	701a      	strb	r2, [r3, #0]
      break;
 800cf68:	e0b4      	b.n	800d0d4 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	220a      	movs	r2, #10
 800cf6e:	701a      	strb	r2, [r3, #0]
      break;
 800cf70:	e0b0      	b.n	800d0d4 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	f000 80ad 	beq.w	800d0d8 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cf86:	2300      	movs	r3, #0
 800cf88:	73fb      	strb	r3, [r7, #15]
 800cf8a:	e016      	b.n	800cfba <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cf8c:	7bfa      	ldrb	r2, [r7, #15]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	32de      	adds	r2, #222	@ 0xde
 800cf92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf96:	791a      	ldrb	r2, [r3, #4]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d108      	bne.n	800cfb4 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800cfa2:	7bfa      	ldrb	r2, [r7, #15]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	32de      	adds	r2, #222	@ 0xde
 800cfa8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800cfb2:	e005      	b.n	800cfc0 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cfb4:	7bfb      	ldrb	r3, [r7, #15]
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	73fb      	strb	r3, [r7, #15]
 800cfba:	7bfb      	ldrb	r3, [r7, #15]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d0e5      	beq.n	800cf8c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d016      	beq.n	800cff8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cfd0:	689b      	ldr	r3, [r3, #8]
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	4798      	blx	r3
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d109      	bne.n	800cff0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2206      	movs	r2, #6
 800cfe0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cfe8:	2103      	movs	r1, #3
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cfee:	e073      	b.n	800d0d8 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	220d      	movs	r2, #13
 800cff4:	701a      	strb	r2, [r3, #0]
      break;
 800cff6:	e06f      	b.n	800d0d8 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	220d      	movs	r2, #13
 800cffc:	701a      	strb	r2, [r3, #0]
      break;
 800cffe:	e06b      	b.n	800d0d8 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d006:	2b00      	cmp	r3, #0
 800d008:	d017      	beq.n	800d03a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d010:	691b      	ldr	r3, [r3, #16]
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	4798      	blx	r3
 800d016:	4603      	mov	r3, r0
 800d018:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d01a:	7bbb      	ldrb	r3, [r7, #14]
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d103      	bne.n	800d02a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	220b      	movs	r2, #11
 800d026:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d028:	e058      	b.n	800d0dc <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800d02a:	7bbb      	ldrb	r3, [r7, #14]
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	2b02      	cmp	r3, #2
 800d030:	d154      	bne.n	800d0dc <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	220d      	movs	r2, #13
 800d036:	701a      	strb	r2, [r3, #0]
      break;
 800d038:	e050      	b.n	800d0dc <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	220d      	movs	r2, #13
 800d03e:	701a      	strb	r2, [r3, #0]
      break;
 800d040:	e04c      	b.n	800d0dc <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d049      	beq.n	800d0e0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d052:	695b      	ldr	r3, [r3, #20]
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	4798      	blx	r3
      }
      break;
 800d058:	e042      	b.n	800d0e0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f7ff fd4b 	bl	800cafe <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d009      	beq.n	800d086 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d078:	68db      	ldr	r3, [r3, #12]
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2200      	movs	r2, #0
 800d082:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d005      	beq.n	800d09c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d096:	2105      	movs	r1, #5
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d107      	bne.n	800d0b8 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f7ff fe23 	bl	800ccfc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d0b6:	e014      	b.n	800d0e2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f004 fe07 	bl	8011ccc <USBH_LL_Start>
      break;
 800d0be:	e010      	b.n	800d0e2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800d0c0:	bf00      	nop
 800d0c2:	e00e      	b.n	800d0e2 <USBH_Process+0x3c6>
      break;
 800d0c4:	bf00      	nop
 800d0c6:	e00c      	b.n	800d0e2 <USBH_Process+0x3c6>
      break;
 800d0c8:	bf00      	nop
 800d0ca:	e00a      	b.n	800d0e2 <USBH_Process+0x3c6>
    break;
 800d0cc:	bf00      	nop
 800d0ce:	e008      	b.n	800d0e2 <USBH_Process+0x3c6>
      break;
 800d0d0:	bf00      	nop
 800d0d2:	e006      	b.n	800d0e2 <USBH_Process+0x3c6>
      break;
 800d0d4:	bf00      	nop
 800d0d6:	e004      	b.n	800d0e2 <USBH_Process+0x3c6>
      break;
 800d0d8:	bf00      	nop
 800d0da:	e002      	b.n	800d0e2 <USBH_Process+0x3c6>
      break;
 800d0dc:	bf00      	nop
 800d0de:	e000      	b.n	800d0e2 <USBH_Process+0x3c6>
      break;
 800d0e0:	bf00      	nop
  }
  return USBH_OK;
 800d0e2:	2300      	movs	r3, #0
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3710      	adds	r7, #16
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b088      	sub	sp, #32
 800d0f0:	af04      	add	r7, sp, #16
 800d0f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	785b      	ldrb	r3, [r3, #1]
 800d100:	2b07      	cmp	r3, #7
 800d102:	f200 81bd 	bhi.w	800d480 <USBH_HandleEnum+0x394>
 800d106:	a201      	add	r2, pc, #4	@ (adr r2, 800d10c <USBH_HandleEnum+0x20>)
 800d108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d10c:	0800d12d 	.word	0x0800d12d
 800d110:	0800d1e7 	.word	0x0800d1e7
 800d114:	0800d251 	.word	0x0800d251
 800d118:	0800d2db 	.word	0x0800d2db
 800d11c:	0800d345 	.word	0x0800d345
 800d120:	0800d3b5 	.word	0x0800d3b5
 800d124:	0800d3fb 	.word	0x0800d3fb
 800d128:	0800d441 	.word	0x0800d441
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d12c:	2108      	movs	r1, #8
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 fa4c 	bl	800d5cc <USBH_Get_DevDesc>
 800d134:	4603      	mov	r3, r0
 800d136:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d138:	7bbb      	ldrb	r3, [r7, #14]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d12e      	bne.n	800d19c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	7919      	ldrb	r1, [r3, #4]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d162:	9202      	str	r2, [sp, #8]
 800d164:	2200      	movs	r2, #0
 800d166:	9201      	str	r2, [sp, #4]
 800d168:	9300      	str	r3, [sp, #0]
 800d16a:	4603      	mov	r3, r0
 800d16c:	2280      	movs	r2, #128	@ 0x80
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f001 f8dc 	bl	800e32c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	7959      	ldrb	r1, [r3, #5]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d188:	9202      	str	r2, [sp, #8]
 800d18a:	2200      	movs	r2, #0
 800d18c:	9201      	str	r2, [sp, #4]
 800d18e:	9300      	str	r3, [sp, #0]
 800d190:	4603      	mov	r3, r0
 800d192:	2200      	movs	r2, #0
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f001 f8c9 	bl	800e32c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d19a:	e173      	b.n	800d484 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d19c:	7bbb      	ldrb	r3, [r7, #14]
 800d19e:	2b03      	cmp	r3, #3
 800d1a0:	f040 8170 	bne.w	800d484 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	b2da      	uxtb	r2, r3
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d1ba:	2b03      	cmp	r3, #3
 800d1bc:	d903      	bls.n	800d1c6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	220d      	movs	r2, #13
 800d1c2:	701a      	strb	r2, [r3, #0]
      break;
 800d1c4:	e15e      	b.n	800d484 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	795b      	ldrb	r3, [r3, #5]
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f001 f8fd 	bl	800e3cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	791b      	ldrb	r3, [r3, #4]
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f001 f8f7 	bl	800e3cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	701a      	strb	r2, [r3, #0]
      break;
 800d1e4:	e14e      	b.n	800d484 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d1e6:	2112      	movs	r1, #18
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 f9ef 	bl	800d5cc <USBH_Get_DevDesc>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d1f2:	7bbb      	ldrb	r3, [r7, #14]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d103      	bne.n	800d200 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2202      	movs	r2, #2
 800d1fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d1fe:	e143      	b.n	800d488 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d200:	7bbb      	ldrb	r3, [r7, #14]
 800d202:	2b03      	cmp	r3, #3
 800d204:	f040 8140 	bne.w	800d488 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d20e:	3301      	adds	r3, #1
 800d210:	b2da      	uxtb	r2, r3
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d21e:	2b03      	cmp	r3, #3
 800d220:	d903      	bls.n	800d22a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	220d      	movs	r2, #13
 800d226:	701a      	strb	r2, [r3, #0]
      break;
 800d228:	e12e      	b.n	800d488 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	795b      	ldrb	r3, [r3, #5]
 800d22e:	4619      	mov	r1, r3
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f001 f8cb 	bl	800e3cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	791b      	ldrb	r3, [r3, #4]
 800d23a:	4619      	mov	r1, r3
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f001 f8c5 	bl	800e3cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2200      	movs	r2, #0
 800d246:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	701a      	strb	r2, [r3, #0]
      break;
 800d24e:	e11b      	b.n	800d488 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d250:	2101      	movs	r1, #1
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f000 fa79 	bl	800d74a <USBH_SetAddress>
 800d258:	4603      	mov	r3, r0
 800d25a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d25c:	7bbb      	ldrb	r3, [r7, #14]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d130      	bne.n	800d2c4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800d262:	2002      	movs	r0, #2
 800d264:	f004 fecc 	bl	8012000 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2201      	movs	r2, #1
 800d26c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2203      	movs	r2, #3
 800d274:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	7919      	ldrb	r1, [r3, #4]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d28a:	9202      	str	r2, [sp, #8]
 800d28c:	2200      	movs	r2, #0
 800d28e:	9201      	str	r2, [sp, #4]
 800d290:	9300      	str	r3, [sp, #0]
 800d292:	4603      	mov	r3, r0
 800d294:	2280      	movs	r2, #128	@ 0x80
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f001 f848 	bl	800e32c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	7959      	ldrb	r1, [r3, #5]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d2b0:	9202      	str	r2, [sp, #8]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	9201      	str	r2, [sp, #4]
 800d2b6:	9300      	str	r3, [sp, #0]
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f001 f835 	bl	800e32c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d2c2:	e0e3      	b.n	800d48c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d2c4:	7bbb      	ldrb	r3, [r7, #14]
 800d2c6:	2b03      	cmp	r3, #3
 800d2c8:	f040 80e0 	bne.w	800d48c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	220d      	movs	r2, #13
 800d2d0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	705a      	strb	r2, [r3, #1]
      break;
 800d2d8:	e0d8      	b.n	800d48c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d2da:	2109      	movs	r1, #9
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 f9a1 	bl	800d624 <USBH_Get_CfgDesc>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d2e6:	7bbb      	ldrb	r3, [r7, #14]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d103      	bne.n	800d2f4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2204      	movs	r2, #4
 800d2f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d2f2:	e0cd      	b.n	800d490 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d2f4:	7bbb      	ldrb	r3, [r7, #14]
 800d2f6:	2b03      	cmp	r3, #3
 800d2f8:	f040 80ca 	bne.w	800d490 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d302:	3301      	adds	r3, #1
 800d304:	b2da      	uxtb	r2, r3
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d312:	2b03      	cmp	r3, #3
 800d314:	d903      	bls.n	800d31e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	220d      	movs	r2, #13
 800d31a:	701a      	strb	r2, [r3, #0]
      break;
 800d31c:	e0b8      	b.n	800d490 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	795b      	ldrb	r3, [r3, #5]
 800d322:	4619      	mov	r1, r3
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f001 f851 	bl	800e3cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	791b      	ldrb	r3, [r3, #4]
 800d32e:	4619      	mov	r1, r3
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f001 f84b 	bl	800e3cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2200      	movs	r2, #0
 800d33a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	701a      	strb	r2, [r3, #0]
      break;
 800d342:	e0a5      	b.n	800d490 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800d34a:	4619      	mov	r1, r3
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 f969 	bl	800d624 <USBH_Get_CfgDesc>
 800d352:	4603      	mov	r3, r0
 800d354:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d356:	7bbb      	ldrb	r3, [r7, #14]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d103      	bne.n	800d364 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2205      	movs	r2, #5
 800d360:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d362:	e097      	b.n	800d494 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d364:	7bbb      	ldrb	r3, [r7, #14]
 800d366:	2b03      	cmp	r3, #3
 800d368:	f040 8094 	bne.w	800d494 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d372:	3301      	adds	r3, #1
 800d374:	b2da      	uxtb	r2, r3
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d382:	2b03      	cmp	r3, #3
 800d384:	d903      	bls.n	800d38e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	220d      	movs	r2, #13
 800d38a:	701a      	strb	r2, [r3, #0]
      break;
 800d38c:	e082      	b.n	800d494 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	795b      	ldrb	r3, [r3, #5]
 800d392:	4619      	mov	r1, r3
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f001 f819 	bl	800e3cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	791b      	ldrb	r3, [r3, #4]
 800d39e:	4619      	mov	r1, r3
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f001 f813 	bl	800e3cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	701a      	strb	r2, [r3, #0]
      break;
 800d3b2:	e06f      	b.n	800d494 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d019      	beq.n	800d3f2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d3ca:	23ff      	movs	r3, #255	@ 0xff
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 f953 	bl	800d678 <USBH_Get_StringDesc>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d3d6:	7bbb      	ldrb	r3, [r7, #14]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d103      	bne.n	800d3e4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2206      	movs	r2, #6
 800d3e0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d3e2:	e059      	b.n	800d498 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d3e4:	7bbb      	ldrb	r3, [r7, #14]
 800d3e6:	2b03      	cmp	r3, #3
 800d3e8:	d156      	bne.n	800d498 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2206      	movs	r2, #6
 800d3ee:	705a      	strb	r2, [r3, #1]
      break;
 800d3f0:	e052      	b.n	800d498 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2206      	movs	r2, #6
 800d3f6:	705a      	strb	r2, [r3, #1]
      break;
 800d3f8:	e04e      	b.n	800d498 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800d400:	2b00      	cmp	r3, #0
 800d402:	d019      	beq.n	800d438 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d410:	23ff      	movs	r3, #255	@ 0xff
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f000 f930 	bl	800d678 <USBH_Get_StringDesc>
 800d418:	4603      	mov	r3, r0
 800d41a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d41c:	7bbb      	ldrb	r3, [r7, #14]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d103      	bne.n	800d42a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2207      	movs	r2, #7
 800d426:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d428:	e038      	b.n	800d49c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d42a:	7bbb      	ldrb	r3, [r7, #14]
 800d42c:	2b03      	cmp	r3, #3
 800d42e:	d135      	bne.n	800d49c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2207      	movs	r2, #7
 800d434:	705a      	strb	r2, [r3, #1]
      break;
 800d436:	e031      	b.n	800d49c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2207      	movs	r2, #7
 800d43c:	705a      	strb	r2, [r3, #1]
      break;
 800d43e:	e02d      	b.n	800d49c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800d446:	2b00      	cmp	r3, #0
 800d448:	d017      	beq.n	800d47a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d456:	23ff      	movs	r3, #255	@ 0xff
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 f90d 	bl	800d678 <USBH_Get_StringDesc>
 800d45e:	4603      	mov	r3, r0
 800d460:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d462:	7bbb      	ldrb	r3, [r7, #14]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d102      	bne.n	800d46e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d468:	2300      	movs	r3, #0
 800d46a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d46c:	e018      	b.n	800d4a0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d46e:	7bbb      	ldrb	r3, [r7, #14]
 800d470:	2b03      	cmp	r3, #3
 800d472:	d115      	bne.n	800d4a0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800d474:	2300      	movs	r3, #0
 800d476:	73fb      	strb	r3, [r7, #15]
      break;
 800d478:	e012      	b.n	800d4a0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800d47a:	2300      	movs	r3, #0
 800d47c:	73fb      	strb	r3, [r7, #15]
      break;
 800d47e:	e00f      	b.n	800d4a0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800d480:	bf00      	nop
 800d482:	e00e      	b.n	800d4a2 <USBH_HandleEnum+0x3b6>
      break;
 800d484:	bf00      	nop
 800d486:	e00c      	b.n	800d4a2 <USBH_HandleEnum+0x3b6>
      break;
 800d488:	bf00      	nop
 800d48a:	e00a      	b.n	800d4a2 <USBH_HandleEnum+0x3b6>
      break;
 800d48c:	bf00      	nop
 800d48e:	e008      	b.n	800d4a2 <USBH_HandleEnum+0x3b6>
      break;
 800d490:	bf00      	nop
 800d492:	e006      	b.n	800d4a2 <USBH_HandleEnum+0x3b6>
      break;
 800d494:	bf00      	nop
 800d496:	e004      	b.n	800d4a2 <USBH_HandleEnum+0x3b6>
      break;
 800d498:	bf00      	nop
 800d49a:	e002      	b.n	800d4a2 <USBH_HandleEnum+0x3b6>
      break;
 800d49c:	bf00      	nop
 800d49e:	e000      	b.n	800d4a2 <USBH_HandleEnum+0x3b6>
      break;
 800d4a0:	bf00      	nop
  }
  return Status;
 800d4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	683a      	ldr	r2, [r7, #0]
 800d4ba:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800d4be:	bf00      	nop
 800d4c0:	370c      	adds	r7, #12
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr

0800d4ca <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d4ca:	b580      	push	{r7, lr}
 800d4cc:	b082      	sub	sp, #8
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d4d8:	1c5a      	adds	r2, r3, #1
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f000 f804 	bl	800d4ee <USBH_HandleSof>
}
 800d4e6:	bf00      	nop
 800d4e8:	3708      	adds	r7, #8
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}

0800d4ee <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	b082      	sub	sp, #8
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	2b0b      	cmp	r3, #11
 800d4fe:	d10a      	bne.n	800d516 <USBH_HandleSof+0x28>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d506:	2b00      	cmp	r3, #0
 800d508:	d005      	beq.n	800d516 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d510:	699b      	ldr	r3, [r3, #24]
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	4798      	blx	r3
  }
}
 800d516:	bf00      	nop
 800d518:	3708      	adds	r7, #8
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d51e:	b480      	push	{r7}
 800d520:	b083      	sub	sp, #12
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2201      	movs	r2, #1
 800d52a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d52e:	bf00      	nop
}
 800d530:	370c      	adds	r7, #12
 800d532:	46bd      	mov	sp, r7
 800d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d538:	4770      	bx	lr

0800d53a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d53a:	b480      	push	{r7}
 800d53c:	b083      	sub	sp, #12
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800d54a:	bf00      	nop
}
 800d54c:	370c      	adds	r7, #12
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr

0800d556 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d556:	b480      	push	{r7}
 800d558:	b083      	sub	sp, #12
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2201      	movs	r2, #1
 800d562:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2200      	movs	r2, #0
 800d56a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2200      	movs	r2, #0
 800d572:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d576:	2300      	movs	r3, #0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	370c      	adds	r7, #12
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2201      	movs	r2, #1
 800d590:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2200      	movs	r2, #0
 800d598:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f004 fbac 	bl	8011d02 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	791b      	ldrb	r3, [r3, #4]
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 ff0b 	bl	800e3cc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	795b      	ldrb	r3, [r3, #5]
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f000 ff05 	bl	800e3cc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b086      	sub	sp, #24
 800d5d0:	af02      	add	r7, sp, #8
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800d5d8:	887b      	ldrh	r3, [r7, #2]
 800d5da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5de:	d901      	bls.n	800d5e4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d5e0:	2303      	movs	r3, #3
 800d5e2:	e01b      	b.n	800d61c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d5ea:	887b      	ldrh	r3, [r7, #2]
 800d5ec:	9300      	str	r3, [sp, #0]
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d5f4:	2100      	movs	r1, #0
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 f872 	bl	800d6e0 <USBH_GetDescriptor>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800d600:	7bfb      	ldrb	r3, [r7, #15]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d109      	bne.n	800d61a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d60c:	887a      	ldrh	r2, [r7, #2]
 800d60e:	4619      	mov	r1, r3
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f000 f929 	bl	800d868 <USBH_ParseDevDesc>
 800d616:	4603      	mov	r3, r0
 800d618:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3710      	adds	r7, #16
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b086      	sub	sp, #24
 800d628:	af02      	add	r7, sp, #8
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	460b      	mov	r3, r1
 800d62e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	331c      	adds	r3, #28
 800d634:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800d636:	887b      	ldrh	r3, [r7, #2]
 800d638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d63c:	d901      	bls.n	800d642 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d63e:	2303      	movs	r3, #3
 800d640:	e016      	b.n	800d670 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d642:	887b      	ldrh	r3, [r7, #2]
 800d644:	9300      	str	r3, [sp, #0]
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d64c:	2100      	movs	r1, #0
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 f846 	bl	800d6e0 <USBH_GetDescriptor>
 800d654:	4603      	mov	r3, r0
 800d656:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d658:	7bfb      	ldrb	r3, [r7, #15]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d107      	bne.n	800d66e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d65e:	887b      	ldrh	r3, [r7, #2]
 800d660:	461a      	mov	r2, r3
 800d662:	68b9      	ldr	r1, [r7, #8]
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 f9af 	bl	800d9c8 <USBH_ParseCfgDesc>
 800d66a:	4603      	mov	r3, r0
 800d66c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d670:	4618      	mov	r0, r3
 800d672:	3710      	adds	r7, #16
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b088      	sub	sp, #32
 800d67c:	af02      	add	r7, sp, #8
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	607a      	str	r2, [r7, #4]
 800d682:	461a      	mov	r2, r3
 800d684:	460b      	mov	r3, r1
 800d686:	72fb      	strb	r3, [r7, #11]
 800d688:	4613      	mov	r3, r2
 800d68a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800d68c:	893b      	ldrh	r3, [r7, #8]
 800d68e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d692:	d802      	bhi.n	800d69a <USBH_Get_StringDesc+0x22>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d101      	bne.n	800d69e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d69a:	2303      	movs	r3, #3
 800d69c:	e01c      	b.n	800d6d8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800d69e:	7afb      	ldrb	r3, [r7, #11]
 800d6a0:	b29b      	uxth	r3, r3
 800d6a2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800d6a6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d6ae:	893b      	ldrh	r3, [r7, #8]
 800d6b0:	9300      	str	r3, [sp, #0]
 800d6b2:	460b      	mov	r3, r1
 800d6b4:	2100      	movs	r1, #0
 800d6b6:	68f8      	ldr	r0, [r7, #12]
 800d6b8:	f000 f812 	bl	800d6e0 <USBH_GetDescriptor>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d6c0:	7dfb      	ldrb	r3, [r7, #23]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d107      	bne.n	800d6d6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d6cc:	893a      	ldrh	r2, [r7, #8]
 800d6ce:	6879      	ldr	r1, [r7, #4]
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f000 fb8d 	bl	800ddf0 <USBH_ParseStringDesc>
  }

  return status;
 800d6d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3718      	adds	r7, #24
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	60f8      	str	r0, [r7, #12]
 800d6e8:	607b      	str	r3, [r7, #4]
 800d6ea:	460b      	mov	r3, r1
 800d6ec:	72fb      	strb	r3, [r7, #11]
 800d6ee:	4613      	mov	r3, r2
 800d6f0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	789b      	ldrb	r3, [r3, #2]
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d11c      	bne.n	800d734 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d6fa:	7afb      	ldrb	r3, [r7, #11]
 800d6fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d700:	b2da      	uxtb	r2, r3
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2206      	movs	r2, #6
 800d70a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	893a      	ldrh	r2, [r7, #8]
 800d710:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d712:	893b      	ldrh	r3, [r7, #8]
 800d714:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d718:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d71c:	d104      	bne.n	800d728 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f240 4209 	movw	r2, #1033	@ 0x409
 800d724:	829a      	strh	r2, [r3, #20]
 800d726:	e002      	b.n	800d72e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2200      	movs	r2, #0
 800d72c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	8b3a      	ldrh	r2, [r7, #24]
 800d732:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d734:	8b3b      	ldrh	r3, [r7, #24]
 800d736:	461a      	mov	r2, r3
 800d738:	6879      	ldr	r1, [r7, #4]
 800d73a:	68f8      	ldr	r0, [r7, #12]
 800d73c:	f000 fba5 	bl	800de8a <USBH_CtlReq>
 800d740:	4603      	mov	r3, r0
}
 800d742:	4618      	mov	r0, r3
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b082      	sub	sp, #8
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
 800d752:	460b      	mov	r3, r1
 800d754:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	789b      	ldrb	r3, [r3, #2]
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d10f      	bne.n	800d77e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2205      	movs	r2, #5
 800d768:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d76a:	78fb      	ldrb	r3, [r7, #3]
 800d76c:	b29a      	uxth	r2, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2200      	movs	r2, #0
 800d776:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2200      	movs	r2, #0
 800d77c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d77e:	2200      	movs	r2, #0
 800d780:	2100      	movs	r1, #0
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 fb81 	bl	800de8a <USBH_CtlReq>
 800d788:	4603      	mov	r3, r0
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3708      	adds	r7, #8
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}

0800d792 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d792:	b580      	push	{r7, lr}
 800d794:	b082      	sub	sp, #8
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
 800d79a:	460b      	mov	r3, r1
 800d79c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	789b      	ldrb	r3, [r3, #2]
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d10e      	bne.n	800d7c4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2209      	movs	r2, #9
 800d7b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	887a      	ldrh	r2, [r7, #2]
 800d7b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	2100      	movs	r1, #0
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f000 fb5e 	bl	800de8a <USBH_CtlReq>
 800d7ce:	4603      	mov	r3, r0
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3708      	adds	r7, #8
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	460b      	mov	r3, r1
 800d7e2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	789b      	ldrb	r3, [r3, #2]
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d10f      	bne.n	800d80c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2203      	movs	r2, #3
 800d7f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d7f8:	78fb      	ldrb	r3, [r7, #3]
 800d7fa:	b29a      	uxth	r2, r3
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2200      	movs	r2, #0
 800d804:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2200      	movs	r2, #0
 800d80a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d80c:	2200      	movs	r2, #0
 800d80e:	2100      	movs	r1, #0
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 fb3a 	bl	800de8a <USBH_CtlReq>
 800d816:	4603      	mov	r3, r0
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3708      	adds	r7, #8
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	460b      	mov	r3, r1
 800d82a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	789b      	ldrb	r3, [r3, #2]
 800d830:	2b01      	cmp	r3, #1
 800d832:	d10f      	bne.n	800d854 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2202      	movs	r2, #2
 800d838:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2201      	movs	r2, #1
 800d83e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2200      	movs	r2, #0
 800d844:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d846:	78fb      	ldrb	r3, [r7, #3]
 800d848:	b29a      	uxth	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2200      	movs	r2, #0
 800d852:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d854:	2200      	movs	r2, #0
 800d856:	2100      	movs	r1, #0
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 fb16 	bl	800de8a <USBH_CtlReq>
 800d85e:	4603      	mov	r3, r0
}
 800d860:	4618      	mov	r0, r3
 800d862:	3708      	adds	r7, #8
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d868:	b480      	push	{r7}
 800d86a:	b087      	sub	sp, #28
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	60f8      	str	r0, [r7, #12]
 800d870:	60b9      	str	r1, [r7, #8]
 800d872:	4613      	mov	r3, r2
 800d874:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800d87c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800d87e:	2300      	movs	r3, #0
 800d880:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d101      	bne.n	800d88c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800d888:	2302      	movs	r3, #2
 800d88a:	e094      	b.n	800d9b6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	781a      	ldrb	r2, [r3, #0]
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	785a      	ldrb	r2, [r3, #1]
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	3302      	adds	r3, #2
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	3303      	adds	r3, #3
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	021b      	lsls	r3, r3, #8
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	b29a      	uxth	r2, r3
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	791a      	ldrb	r2, [r3, #4]
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	795a      	ldrb	r2, [r3, #5]
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	799a      	ldrb	r2, [r3, #6]
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	79da      	ldrb	r2, [r3, #7]
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d004      	beq.n	800d8ea <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d11b      	bne.n	800d922 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	79db      	ldrb	r3, [r3, #7]
 800d8ee:	2b20      	cmp	r3, #32
 800d8f0:	dc0f      	bgt.n	800d912 <USBH_ParseDevDesc+0xaa>
 800d8f2:	2b08      	cmp	r3, #8
 800d8f4:	db0f      	blt.n	800d916 <USBH_ParseDevDesc+0xae>
 800d8f6:	3b08      	subs	r3, #8
 800d8f8:	4a32      	ldr	r2, [pc, #200]	@ (800d9c4 <USBH_ParseDevDesc+0x15c>)
 800d8fa:	fa22 f303 	lsr.w	r3, r2, r3
 800d8fe:	f003 0301 	and.w	r3, r3, #1
 800d902:	2b00      	cmp	r3, #0
 800d904:	bf14      	ite	ne
 800d906:	2301      	movne	r3, #1
 800d908:	2300      	moveq	r3, #0
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d106      	bne.n	800d91e <USBH_ParseDevDesc+0xb6>
 800d910:	e001      	b.n	800d916 <USBH_ParseDevDesc+0xae>
 800d912:	2b40      	cmp	r3, #64	@ 0x40
 800d914:	d003      	beq.n	800d91e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	2208      	movs	r2, #8
 800d91a:	71da      	strb	r2, [r3, #7]
        break;
 800d91c:	e000      	b.n	800d920 <USBH_ParseDevDesc+0xb8>
        break;
 800d91e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800d920:	e00e      	b.n	800d940 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d928:	2b02      	cmp	r3, #2
 800d92a:	d107      	bne.n	800d93c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	79db      	ldrb	r3, [r3, #7]
 800d930:	2b08      	cmp	r3, #8
 800d932:	d005      	beq.n	800d940 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	2208      	movs	r2, #8
 800d938:	71da      	strb	r2, [r3, #7]
 800d93a:	e001      	b.n	800d940 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d93c:	2303      	movs	r3, #3
 800d93e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800d940:	88fb      	ldrh	r3, [r7, #6]
 800d942:	2b08      	cmp	r3, #8
 800d944:	d936      	bls.n	800d9b4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	3308      	adds	r3, #8
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	461a      	mov	r2, r3
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	3309      	adds	r3, #9
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	021b      	lsls	r3, r3, #8
 800d956:	b29b      	uxth	r3, r3
 800d958:	4313      	orrs	r3, r2
 800d95a:	b29a      	uxth	r2, r3
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	330a      	adds	r3, #10
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	461a      	mov	r2, r3
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	330b      	adds	r3, #11
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	021b      	lsls	r3, r3, #8
 800d970:	b29b      	uxth	r3, r3
 800d972:	4313      	orrs	r3, r2
 800d974:	b29a      	uxth	r2, r3
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	330c      	adds	r3, #12
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	461a      	mov	r2, r3
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	330d      	adds	r3, #13
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	021b      	lsls	r3, r3, #8
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	4313      	orrs	r3, r2
 800d98e:	b29a      	uxth	r2, r3
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	7b9a      	ldrb	r2, [r3, #14]
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	7bda      	ldrb	r2, [r3, #15]
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	7c1a      	ldrb	r2, [r3, #16]
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	7c5a      	ldrb	r2, [r3, #17]
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800d9b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	371c      	adds	r7, #28
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr
 800d9c2:	bf00      	nop
 800d9c4:	01000101 	.word	0x01000101

0800d9c8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b08c      	sub	sp, #48	@ 0x30
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	60f8      	str	r0, [r7, #12]
 800d9d0:	60b9      	str	r1, [r7, #8]
 800d9d2:	4613      	mov	r3, r2
 800d9d4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800d9dc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d101      	bne.n	800d9fa <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800d9f6:	2302      	movs	r3, #2
 800d9f8:	e0da      	b.n	800dbb0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800d9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	2b09      	cmp	r3, #9
 800da04:	d002      	beq.n	800da0c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800da06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da08:	2209      	movs	r2, #9
 800da0a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	781a      	ldrb	r2, [r3, #0]
 800da10:	6a3b      	ldr	r3, [r7, #32]
 800da12:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	785a      	ldrb	r2, [r3, #1]
 800da18:	6a3b      	ldr	r3, [r7, #32]
 800da1a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	3302      	adds	r3, #2
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	461a      	mov	r2, r3
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	3303      	adds	r3, #3
 800da28:	781b      	ldrb	r3, [r3, #0]
 800da2a:	021b      	lsls	r3, r3, #8
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	4313      	orrs	r3, r2
 800da30:	b29b      	uxth	r3, r3
 800da32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da36:	bf28      	it	cs
 800da38:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	6a3b      	ldr	r3, [r7, #32]
 800da40:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	791a      	ldrb	r2, [r3, #4]
 800da46:	6a3b      	ldr	r3, [r7, #32]
 800da48:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	795a      	ldrb	r2, [r3, #5]
 800da4e:	6a3b      	ldr	r3, [r7, #32]
 800da50:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	799a      	ldrb	r2, [r3, #6]
 800da56:	6a3b      	ldr	r3, [r7, #32]
 800da58:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	79da      	ldrb	r2, [r3, #7]
 800da5e:	6a3b      	ldr	r3, [r7, #32]
 800da60:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	7a1a      	ldrb	r2, [r3, #8]
 800da66:	6a3b      	ldr	r3, [r7, #32]
 800da68:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800da6a:	88fb      	ldrh	r3, [r7, #6]
 800da6c:	2b09      	cmp	r3, #9
 800da6e:	f240 809d 	bls.w	800dbac <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800da72:	2309      	movs	r3, #9
 800da74:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800da76:	2300      	movs	r3, #0
 800da78:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800da7a:	e081      	b.n	800db80 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800da7c:	f107 0316 	add.w	r3, r7, #22
 800da80:	4619      	mov	r1, r3
 800da82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da84:	f000 f9e7 	bl	800de56 <USBH_GetNextDesc>
 800da88:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800da8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da8c:	785b      	ldrb	r3, [r3, #1]
 800da8e:	2b04      	cmp	r3, #4
 800da90:	d176      	bne.n	800db80 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800da92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	2b09      	cmp	r3, #9
 800da98:	d002      	beq.n	800daa0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800da9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da9c:	2209      	movs	r2, #9
 800da9e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800daa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800daa4:	221a      	movs	r2, #26
 800daa6:	fb02 f303 	mul.w	r3, r2, r3
 800daaa:	3308      	adds	r3, #8
 800daac:	6a3a      	ldr	r2, [r7, #32]
 800daae:	4413      	add	r3, r2
 800dab0:	3302      	adds	r3, #2
 800dab2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800dab4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dab6:	69f8      	ldr	r0, [r7, #28]
 800dab8:	f000 f87e 	bl	800dbb8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800dabc:	2300      	movs	r3, #0
 800dabe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800dac2:	2300      	movs	r3, #0
 800dac4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800dac6:	e043      	b.n	800db50 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800dac8:	f107 0316 	add.w	r3, r7, #22
 800dacc:	4619      	mov	r1, r3
 800dace:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dad0:	f000 f9c1 	bl	800de56 <USBH_GetNextDesc>
 800dad4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad8:	785b      	ldrb	r3, [r3, #1]
 800dada:	2b05      	cmp	r3, #5
 800dadc:	d138      	bne.n	800db50 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800dade:	69fb      	ldr	r3, [r7, #28]
 800dae0:	795b      	ldrb	r3, [r3, #5]
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d113      	bne.n	800db0e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800daea:	2b02      	cmp	r3, #2
 800daec:	d003      	beq.n	800daf6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800daee:	69fb      	ldr	r3, [r7, #28]
 800daf0:	799b      	ldrb	r3, [r3, #6]
 800daf2:	2b03      	cmp	r3, #3
 800daf4:	d10b      	bne.n	800db0e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800daf6:	69fb      	ldr	r3, [r7, #28]
 800daf8:	79db      	ldrb	r3, [r3, #7]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d10b      	bne.n	800db16 <USBH_ParseCfgDesc+0x14e>
 800dafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	2b09      	cmp	r3, #9
 800db04:	d007      	beq.n	800db16 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800db06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db08:	2209      	movs	r2, #9
 800db0a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800db0c:	e003      	b.n	800db16 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800db0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db10:	2207      	movs	r2, #7
 800db12:	701a      	strb	r2, [r3, #0]
 800db14:	e000      	b.n	800db18 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800db16:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800db18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db1c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800db20:	3201      	adds	r2, #1
 800db22:	00d2      	lsls	r2, r2, #3
 800db24:	211a      	movs	r1, #26
 800db26:	fb01 f303 	mul.w	r3, r1, r3
 800db2a:	4413      	add	r3, r2
 800db2c:	3308      	adds	r3, #8
 800db2e:	6a3a      	ldr	r2, [r7, #32]
 800db30:	4413      	add	r3, r2
 800db32:	3304      	adds	r3, #4
 800db34:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800db36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db38:	69b9      	ldr	r1, [r7, #24]
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f000 f870 	bl	800dc20 <USBH_ParseEPDesc>
 800db40:	4603      	mov	r3, r0
 800db42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800db46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800db4a:	3301      	adds	r3, #1
 800db4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	791b      	ldrb	r3, [r3, #4]
 800db54:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800db58:	429a      	cmp	r2, r3
 800db5a:	d204      	bcs.n	800db66 <USBH_ParseCfgDesc+0x19e>
 800db5c:	6a3b      	ldr	r3, [r7, #32]
 800db5e:	885a      	ldrh	r2, [r3, #2]
 800db60:	8afb      	ldrh	r3, [r7, #22]
 800db62:	429a      	cmp	r2, r3
 800db64:	d8b0      	bhi.n	800dac8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800db66:	69fb      	ldr	r3, [r7, #28]
 800db68:	791b      	ldrb	r3, [r3, #4]
 800db6a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800db6e:	429a      	cmp	r2, r3
 800db70:	d201      	bcs.n	800db76 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800db72:	2303      	movs	r3, #3
 800db74:	e01c      	b.n	800dbb0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800db76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db7a:	3301      	adds	r3, #1
 800db7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800db80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db84:	2b01      	cmp	r3, #1
 800db86:	d805      	bhi.n	800db94 <USBH_ParseCfgDesc+0x1cc>
 800db88:	6a3b      	ldr	r3, [r7, #32]
 800db8a:	885a      	ldrh	r2, [r3, #2]
 800db8c:	8afb      	ldrh	r3, [r7, #22]
 800db8e:	429a      	cmp	r2, r3
 800db90:	f63f af74 	bhi.w	800da7c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800db94:	6a3b      	ldr	r3, [r7, #32]
 800db96:	791b      	ldrb	r3, [r3, #4]
 800db98:	2b02      	cmp	r3, #2
 800db9a:	bf28      	it	cs
 800db9c:	2302      	movcs	r3, #2
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d201      	bcs.n	800dbac <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800dba8:	2303      	movs	r3, #3
 800dbaa:	e001      	b.n	800dbb0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800dbac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3730      	adds	r7, #48	@ 0x30
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b083      	sub	sp, #12
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	781a      	ldrb	r2, [r3, #0]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	785a      	ldrb	r2, [r3, #1]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	789a      	ldrb	r2, [r3, #2]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	78da      	ldrb	r2, [r3, #3]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	3304      	adds	r3, #4
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	2b02      	cmp	r3, #2
 800dbea:	bf28      	it	cs
 800dbec:	2302      	movcs	r3, #2
 800dbee:	b2da      	uxtb	r2, r3
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	795a      	ldrb	r2, [r3, #5]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	799a      	ldrb	r2, [r3, #6]
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	79da      	ldrb	r2, [r3, #7]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	7a1a      	ldrb	r2, [r3, #8]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	721a      	strb	r2, [r3, #8]
}
 800dc14:	bf00      	nop
 800dc16:	370c      	adds	r7, #12
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b087      	sub	sp, #28
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	781a      	ldrb	r2, [r3, #0]
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	785a      	ldrb	r2, [r3, #1]
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	789a      	ldrb	r2, [r3, #2]
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	78da      	ldrb	r2, [r3, #3]
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	3304      	adds	r3, #4
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	461a      	mov	r2, r3
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	3305      	adds	r3, #5
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	021b      	lsls	r3, r3, #8
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	4313      	orrs	r3, r2
 800dc64:	b29a      	uxth	r2, r3
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	799a      	ldrb	r2, [r3, #6]
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	889b      	ldrh	r3, [r3, #4]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d009      	beq.n	800dc8e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800dc7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc82:	d804      	bhi.n	800dc8e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800dc88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc8c:	d901      	bls.n	800dc92 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800dc8e:	2303      	movs	r3, #3
 800dc90:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d136      	bne.n	800dd0a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	78db      	ldrb	r3, [r3, #3]
 800dca0:	f003 0303 	and.w	r3, r3, #3
 800dca4:	2b02      	cmp	r3, #2
 800dca6:	d108      	bne.n	800dcba <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	889b      	ldrh	r3, [r3, #4]
 800dcac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dcb0:	f240 8097 	bls.w	800dde2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dcb4:	2303      	movs	r3, #3
 800dcb6:	75fb      	strb	r3, [r7, #23]
 800dcb8:	e093      	b.n	800dde2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	78db      	ldrb	r3, [r3, #3]
 800dcbe:	f003 0303 	and.w	r3, r3, #3
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d107      	bne.n	800dcd6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	889b      	ldrh	r3, [r3, #4]
 800dcca:	2b40      	cmp	r3, #64	@ 0x40
 800dccc:	f240 8089 	bls.w	800dde2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dcd0:	2303      	movs	r3, #3
 800dcd2:	75fb      	strb	r3, [r7, #23]
 800dcd4:	e085      	b.n	800dde2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	78db      	ldrb	r3, [r3, #3]
 800dcda:	f003 0303 	and.w	r3, r3, #3
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d005      	beq.n	800dcee <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	78db      	ldrb	r3, [r3, #3]
 800dce6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800dcea:	2b03      	cmp	r3, #3
 800dcec:	d10a      	bne.n	800dd04 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	799b      	ldrb	r3, [r3, #6]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d003      	beq.n	800dcfe <USBH_ParseEPDesc+0xde>
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	799b      	ldrb	r3, [r3, #6]
 800dcfa:	2b10      	cmp	r3, #16
 800dcfc:	d970      	bls.n	800dde0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800dcfe:	2303      	movs	r3, #3
 800dd00:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dd02:	e06d      	b.n	800dde0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800dd04:	2303      	movs	r3, #3
 800dd06:	75fb      	strb	r3, [r7, #23]
 800dd08:	e06b      	b.n	800dde2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dd10:	2b01      	cmp	r3, #1
 800dd12:	d13c      	bne.n	800dd8e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	78db      	ldrb	r3, [r3, #3]
 800dd18:	f003 0303 	and.w	r3, r3, #3
 800dd1c:	2b02      	cmp	r3, #2
 800dd1e:	d005      	beq.n	800dd2c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	78db      	ldrb	r3, [r3, #3]
 800dd24:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d106      	bne.n	800dd3a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	889b      	ldrh	r3, [r3, #4]
 800dd30:	2b40      	cmp	r3, #64	@ 0x40
 800dd32:	d956      	bls.n	800dde2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dd34:	2303      	movs	r3, #3
 800dd36:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dd38:	e053      	b.n	800dde2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	78db      	ldrb	r3, [r3, #3]
 800dd3e:	f003 0303 	and.w	r3, r3, #3
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d10e      	bne.n	800dd64 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	799b      	ldrb	r3, [r3, #6]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d007      	beq.n	800dd5e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800dd52:	2b10      	cmp	r3, #16
 800dd54:	d803      	bhi.n	800dd5e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800dd5a:	2b40      	cmp	r3, #64	@ 0x40
 800dd5c:	d941      	bls.n	800dde2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dd5e:	2303      	movs	r3, #3
 800dd60:	75fb      	strb	r3, [r7, #23]
 800dd62:	e03e      	b.n	800dde2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	78db      	ldrb	r3, [r3, #3]
 800dd68:	f003 0303 	and.w	r3, r3, #3
 800dd6c:	2b03      	cmp	r3, #3
 800dd6e:	d10b      	bne.n	800dd88 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	799b      	ldrb	r3, [r3, #6]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d004      	beq.n	800dd82 <USBH_ParseEPDesc+0x162>
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	889b      	ldrh	r3, [r3, #4]
 800dd7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd80:	d32f      	bcc.n	800dde2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dd82:	2303      	movs	r3, #3
 800dd84:	75fb      	strb	r3, [r7, #23]
 800dd86:	e02c      	b.n	800dde2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800dd88:	2303      	movs	r3, #3
 800dd8a:	75fb      	strb	r3, [r7, #23]
 800dd8c:	e029      	b.n	800dde2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dd94:	2b02      	cmp	r3, #2
 800dd96:	d120      	bne.n	800ddda <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	78db      	ldrb	r3, [r3, #3]
 800dd9c:	f003 0303 	and.w	r3, r3, #3
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d106      	bne.n	800ddb2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	889b      	ldrh	r3, [r3, #4]
 800dda8:	2b08      	cmp	r3, #8
 800ddaa:	d01a      	beq.n	800dde2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ddac:	2303      	movs	r3, #3
 800ddae:	75fb      	strb	r3, [r7, #23]
 800ddb0:	e017      	b.n	800dde2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	78db      	ldrb	r3, [r3, #3]
 800ddb6:	f003 0303 	and.w	r3, r3, #3
 800ddba:	2b03      	cmp	r3, #3
 800ddbc:	d10a      	bne.n	800ddd4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	799b      	ldrb	r3, [r3, #6]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d003      	beq.n	800ddce <USBH_ParseEPDesc+0x1ae>
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	889b      	ldrh	r3, [r3, #4]
 800ddca:	2b08      	cmp	r3, #8
 800ddcc:	d909      	bls.n	800dde2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ddce:	2303      	movs	r3, #3
 800ddd0:	75fb      	strb	r3, [r7, #23]
 800ddd2:	e006      	b.n	800dde2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ddd4:	2303      	movs	r3, #3
 800ddd6:	75fb      	strb	r3, [r7, #23]
 800ddd8:	e003      	b.n	800dde2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ddda:	2303      	movs	r3, #3
 800dddc:	75fb      	strb	r3, [r7, #23]
 800ddde:	e000      	b.n	800dde2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dde0:	bf00      	nop
  }

  return status;
 800dde2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	371c      	adds	r7, #28
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr

0800ddf0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b087      	sub	sp, #28
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	60b9      	str	r1, [r7, #8]
 800ddfa:	4613      	mov	r3, r2
 800ddfc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	3301      	adds	r3, #1
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	2b03      	cmp	r3, #3
 800de06:	d120      	bne.n	800de4a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	781b      	ldrb	r3, [r3, #0]
 800de0c:	1e9a      	subs	r2, r3, #2
 800de0e:	88fb      	ldrh	r3, [r7, #6]
 800de10:	4293      	cmp	r3, r2
 800de12:	bf28      	it	cs
 800de14:	4613      	movcs	r3, r2
 800de16:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	3302      	adds	r3, #2
 800de1c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800de1e:	2300      	movs	r3, #0
 800de20:	82fb      	strh	r3, [r7, #22]
 800de22:	e00b      	b.n	800de3c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800de24:	8afb      	ldrh	r3, [r7, #22]
 800de26:	68fa      	ldr	r2, [r7, #12]
 800de28:	4413      	add	r3, r2
 800de2a:	781a      	ldrb	r2, [r3, #0]
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	3301      	adds	r3, #1
 800de34:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800de36:	8afb      	ldrh	r3, [r7, #22]
 800de38:	3302      	adds	r3, #2
 800de3a:	82fb      	strh	r3, [r7, #22]
 800de3c:	8afa      	ldrh	r2, [r7, #22]
 800de3e:	8abb      	ldrh	r3, [r7, #20]
 800de40:	429a      	cmp	r2, r3
 800de42:	d3ef      	bcc.n	800de24 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	2200      	movs	r2, #0
 800de48:	701a      	strb	r2, [r3, #0]
  }
}
 800de4a:	bf00      	nop
 800de4c:	371c      	adds	r7, #28
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr

0800de56 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800de56:	b480      	push	{r7}
 800de58:	b085      	sub	sp, #20
 800de5a:	af00      	add	r7, sp, #0
 800de5c:	6078      	str	r0, [r7, #4]
 800de5e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	881b      	ldrh	r3, [r3, #0]
 800de64:	687a      	ldr	r2, [r7, #4]
 800de66:	7812      	ldrb	r2, [r2, #0]
 800de68:	4413      	add	r3, r2
 800de6a:	b29a      	uxth	r2, r3
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4413      	add	r3, r2
 800de7a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800de7c:	68fb      	ldr	r3, [r7, #12]
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3714      	adds	r7, #20
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr

0800de8a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800de8a:	b580      	push	{r7, lr}
 800de8c:	b086      	sub	sp, #24
 800de8e:	af00      	add	r7, sp, #0
 800de90:	60f8      	str	r0, [r7, #12]
 800de92:	60b9      	str	r1, [r7, #8]
 800de94:	4613      	mov	r3, r2
 800de96:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800de98:	2301      	movs	r3, #1
 800de9a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	789b      	ldrb	r3, [r3, #2]
 800dea0:	2b01      	cmp	r3, #1
 800dea2:	d002      	beq.n	800deaa <USBH_CtlReq+0x20>
 800dea4:	2b02      	cmp	r3, #2
 800dea6:	d00f      	beq.n	800dec8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800dea8:	e027      	b.n	800defa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	68ba      	ldr	r2, [r7, #8]
 800deae:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	88fa      	ldrh	r2, [r7, #6]
 800deb4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2201      	movs	r2, #1
 800deba:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2202      	movs	r2, #2
 800dec0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800dec2:	2301      	movs	r3, #1
 800dec4:	75fb      	strb	r3, [r7, #23]
      break;
 800dec6:	e018      	b.n	800defa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800dec8:	68f8      	ldr	r0, [r7, #12]
 800deca:	f000 f81b 	bl	800df04 <USBH_HandleControl>
 800dece:	4603      	mov	r3, r0
 800ded0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ded2:	7dfb      	ldrb	r3, [r7, #23]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d002      	beq.n	800dede <USBH_CtlReq+0x54>
 800ded8:	7dfb      	ldrb	r3, [r7, #23]
 800deda:	2b03      	cmp	r3, #3
 800dedc:	d106      	bne.n	800deec <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2201      	movs	r2, #1
 800dee2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2200      	movs	r2, #0
 800dee8:	761a      	strb	r2, [r3, #24]
      break;
 800deea:	e005      	b.n	800def8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800deec:	7dfb      	ldrb	r3, [r7, #23]
 800deee:	2b02      	cmp	r3, #2
 800def0:	d102      	bne.n	800def8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2201      	movs	r2, #1
 800def6:	709a      	strb	r2, [r3, #2]
      break;
 800def8:	bf00      	nop
  }
  return status;
 800defa:	7dfb      	ldrb	r3, [r7, #23]
}
 800defc:	4618      	mov	r0, r3
 800defe:	3718      	adds	r7, #24
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b086      	sub	sp, #24
 800df08:	af02      	add	r7, sp, #8
 800df0a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800df0c:	2301      	movs	r3, #1
 800df0e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800df10:	2300      	movs	r3, #0
 800df12:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	7e1b      	ldrb	r3, [r3, #24]
 800df18:	3b01      	subs	r3, #1
 800df1a:	2b0a      	cmp	r3, #10
 800df1c:	f200 8156 	bhi.w	800e1cc <USBH_HandleControl+0x2c8>
 800df20:	a201      	add	r2, pc, #4	@ (adr r2, 800df28 <USBH_HandleControl+0x24>)
 800df22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df26:	bf00      	nop
 800df28:	0800df55 	.word	0x0800df55
 800df2c:	0800df6f 	.word	0x0800df6f
 800df30:	0800dfd9 	.word	0x0800dfd9
 800df34:	0800dfff 	.word	0x0800dfff
 800df38:	0800e037 	.word	0x0800e037
 800df3c:	0800e061 	.word	0x0800e061
 800df40:	0800e0b3 	.word	0x0800e0b3
 800df44:	0800e0d5 	.word	0x0800e0d5
 800df48:	0800e111 	.word	0x0800e111
 800df4c:	0800e137 	.word	0x0800e137
 800df50:	0800e175 	.word	0x0800e175
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f103 0110 	add.w	r1, r3, #16
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	795b      	ldrb	r3, [r3, #5]
 800df5e:	461a      	mov	r2, r3
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f000 f943 	bl	800e1ec <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2202      	movs	r2, #2
 800df6a:	761a      	strb	r2, [r3, #24]
      break;
 800df6c:	e139      	b.n	800e1e2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	795b      	ldrb	r3, [r3, #5]
 800df72:	4619      	mov	r1, r3
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f003 ffb3 	bl	8011ee0 <USBH_LL_GetURBState>
 800df7a:	4603      	mov	r3, r0
 800df7c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800df7e:	7bbb      	ldrb	r3, [r7, #14]
 800df80:	2b01      	cmp	r3, #1
 800df82:	d11e      	bne.n	800dfc2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	7c1b      	ldrb	r3, [r3, #16]
 800df88:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800df8c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	8adb      	ldrh	r3, [r3, #22]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d00a      	beq.n	800dfac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800df96:	7b7b      	ldrb	r3, [r7, #13]
 800df98:	2b80      	cmp	r3, #128	@ 0x80
 800df9a:	d103      	bne.n	800dfa4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2203      	movs	r2, #3
 800dfa0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dfa2:	e115      	b.n	800e1d0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2205      	movs	r2, #5
 800dfa8:	761a      	strb	r2, [r3, #24]
      break;
 800dfaa:	e111      	b.n	800e1d0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800dfac:	7b7b      	ldrb	r3, [r7, #13]
 800dfae:	2b80      	cmp	r3, #128	@ 0x80
 800dfb0:	d103      	bne.n	800dfba <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2209      	movs	r2, #9
 800dfb6:	761a      	strb	r2, [r3, #24]
      break;
 800dfb8:	e10a      	b.n	800e1d0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2207      	movs	r2, #7
 800dfbe:	761a      	strb	r2, [r3, #24]
      break;
 800dfc0:	e106      	b.n	800e1d0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800dfc2:	7bbb      	ldrb	r3, [r7, #14]
 800dfc4:	2b04      	cmp	r3, #4
 800dfc6:	d003      	beq.n	800dfd0 <USBH_HandleControl+0xcc>
 800dfc8:	7bbb      	ldrb	r3, [r7, #14]
 800dfca:	2b02      	cmp	r3, #2
 800dfcc:	f040 8100 	bne.w	800e1d0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	220b      	movs	r2, #11
 800dfd4:	761a      	strb	r2, [r3, #24]
      break;
 800dfd6:	e0fb      	b.n	800e1d0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800dfde:	b29a      	uxth	r2, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6899      	ldr	r1, [r3, #8]
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	899a      	ldrh	r2, [r3, #12]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	791b      	ldrb	r3, [r3, #4]
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f000 f93a 	bl	800e26a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2204      	movs	r2, #4
 800dffa:	761a      	strb	r2, [r3, #24]
      break;
 800dffc:	e0f1      	b.n	800e1e2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	791b      	ldrb	r3, [r3, #4]
 800e002:	4619      	mov	r1, r3
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f003 ff6b 	bl	8011ee0 <USBH_LL_GetURBState>
 800e00a:	4603      	mov	r3, r0
 800e00c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e00e:	7bbb      	ldrb	r3, [r7, #14]
 800e010:	2b01      	cmp	r3, #1
 800e012:	d102      	bne.n	800e01a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2209      	movs	r2, #9
 800e018:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e01a:	7bbb      	ldrb	r3, [r7, #14]
 800e01c:	2b05      	cmp	r3, #5
 800e01e:	d102      	bne.n	800e026 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e020:	2303      	movs	r3, #3
 800e022:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e024:	e0d6      	b.n	800e1d4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800e026:	7bbb      	ldrb	r3, [r7, #14]
 800e028:	2b04      	cmp	r3, #4
 800e02a:	f040 80d3 	bne.w	800e1d4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	220b      	movs	r2, #11
 800e032:	761a      	strb	r2, [r3, #24]
      break;
 800e034:	e0ce      	b.n	800e1d4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6899      	ldr	r1, [r3, #8]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	899a      	ldrh	r2, [r3, #12]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	795b      	ldrb	r3, [r3, #5]
 800e042:	2001      	movs	r0, #1
 800e044:	9000      	str	r0, [sp, #0]
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f000 f8ea 	bl	800e220 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e052:	b29a      	uxth	r2, r3
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2206      	movs	r2, #6
 800e05c:	761a      	strb	r2, [r3, #24]
      break;
 800e05e:	e0c0      	b.n	800e1e2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	795b      	ldrb	r3, [r3, #5]
 800e064:	4619      	mov	r1, r3
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f003 ff3a 	bl	8011ee0 <USBH_LL_GetURBState>
 800e06c:	4603      	mov	r3, r0
 800e06e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e070:	7bbb      	ldrb	r3, [r7, #14]
 800e072:	2b01      	cmp	r3, #1
 800e074:	d103      	bne.n	800e07e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2207      	movs	r2, #7
 800e07a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e07c:	e0ac      	b.n	800e1d8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800e07e:	7bbb      	ldrb	r3, [r7, #14]
 800e080:	2b05      	cmp	r3, #5
 800e082:	d105      	bne.n	800e090 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	220c      	movs	r2, #12
 800e088:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e08a:	2303      	movs	r3, #3
 800e08c:	73fb      	strb	r3, [r7, #15]
      break;
 800e08e:	e0a3      	b.n	800e1d8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e090:	7bbb      	ldrb	r3, [r7, #14]
 800e092:	2b02      	cmp	r3, #2
 800e094:	d103      	bne.n	800e09e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2205      	movs	r2, #5
 800e09a:	761a      	strb	r2, [r3, #24]
      break;
 800e09c:	e09c      	b.n	800e1d8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800e09e:	7bbb      	ldrb	r3, [r7, #14]
 800e0a0:	2b04      	cmp	r3, #4
 800e0a2:	f040 8099 	bne.w	800e1d8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	220b      	movs	r2, #11
 800e0aa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e0ac:	2302      	movs	r3, #2
 800e0ae:	73fb      	strb	r3, [r7, #15]
      break;
 800e0b0:	e092      	b.n	800e1d8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	791b      	ldrb	r3, [r3, #4]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	2100      	movs	r1, #0
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 f8d5 	bl	800e26a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e0c6:	b29a      	uxth	r2, r3
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2208      	movs	r2, #8
 800e0d0:	761a      	strb	r2, [r3, #24]

      break;
 800e0d2:	e086      	b.n	800e1e2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	791b      	ldrb	r3, [r3, #4]
 800e0d8:	4619      	mov	r1, r3
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f003 ff00 	bl	8011ee0 <USBH_LL_GetURBState>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e0e4:	7bbb      	ldrb	r3, [r7, #14]
 800e0e6:	2b01      	cmp	r3, #1
 800e0e8:	d105      	bne.n	800e0f6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	220d      	movs	r2, #13
 800e0ee:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e0f4:	e072      	b.n	800e1dc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800e0f6:	7bbb      	ldrb	r3, [r7, #14]
 800e0f8:	2b04      	cmp	r3, #4
 800e0fa:	d103      	bne.n	800e104 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	220b      	movs	r2, #11
 800e100:	761a      	strb	r2, [r3, #24]
      break;
 800e102:	e06b      	b.n	800e1dc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800e104:	7bbb      	ldrb	r3, [r7, #14]
 800e106:	2b05      	cmp	r3, #5
 800e108:	d168      	bne.n	800e1dc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800e10a:	2303      	movs	r3, #3
 800e10c:	73fb      	strb	r3, [r7, #15]
      break;
 800e10e:	e065      	b.n	800e1dc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	795b      	ldrb	r3, [r3, #5]
 800e114:	2201      	movs	r2, #1
 800e116:	9200      	str	r2, [sp, #0]
 800e118:	2200      	movs	r2, #0
 800e11a:	2100      	movs	r1, #0
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f000 f87f 	bl	800e220 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e128:	b29a      	uxth	r2, r3
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	220a      	movs	r2, #10
 800e132:	761a      	strb	r2, [r3, #24]
      break;
 800e134:	e055      	b.n	800e1e2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	795b      	ldrb	r3, [r3, #5]
 800e13a:	4619      	mov	r1, r3
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f003 fecf 	bl	8011ee0 <USBH_LL_GetURBState>
 800e142:	4603      	mov	r3, r0
 800e144:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e146:	7bbb      	ldrb	r3, [r7, #14]
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d105      	bne.n	800e158 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e14c:	2300      	movs	r3, #0
 800e14e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	220d      	movs	r2, #13
 800e154:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e156:	e043      	b.n	800e1e0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e158:	7bbb      	ldrb	r3, [r7, #14]
 800e15a:	2b02      	cmp	r3, #2
 800e15c:	d103      	bne.n	800e166 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2209      	movs	r2, #9
 800e162:	761a      	strb	r2, [r3, #24]
      break;
 800e164:	e03c      	b.n	800e1e0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e166:	7bbb      	ldrb	r3, [r7, #14]
 800e168:	2b04      	cmp	r3, #4
 800e16a:	d139      	bne.n	800e1e0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	220b      	movs	r2, #11
 800e170:	761a      	strb	r2, [r3, #24]
      break;
 800e172:	e035      	b.n	800e1e0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	7e5b      	ldrb	r3, [r3, #25]
 800e178:	3301      	adds	r3, #1
 800e17a:	b2da      	uxtb	r2, r3
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	765a      	strb	r2, [r3, #25]
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	7e5b      	ldrb	r3, [r3, #25]
 800e184:	2b02      	cmp	r3, #2
 800e186:	d806      	bhi.n	800e196 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2201      	movs	r2, #1
 800e18c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2201      	movs	r2, #1
 800e192:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e194:	e025      	b.n	800e1e2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e19c:	2106      	movs	r1, #6
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	795b      	ldrb	r3, [r3, #5]
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 f90c 	bl	800e3cc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	791b      	ldrb	r3, [r3, #4]
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f000 f906 	bl	800e3cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e1c6:	2302      	movs	r3, #2
 800e1c8:	73fb      	strb	r3, [r7, #15]
      break;
 800e1ca:	e00a      	b.n	800e1e2 <USBH_HandleControl+0x2de>

    default:
      break;
 800e1cc:	bf00      	nop
 800e1ce:	e008      	b.n	800e1e2 <USBH_HandleControl+0x2de>
      break;
 800e1d0:	bf00      	nop
 800e1d2:	e006      	b.n	800e1e2 <USBH_HandleControl+0x2de>
      break;
 800e1d4:	bf00      	nop
 800e1d6:	e004      	b.n	800e1e2 <USBH_HandleControl+0x2de>
      break;
 800e1d8:	bf00      	nop
 800e1da:	e002      	b.n	800e1e2 <USBH_HandleControl+0x2de>
      break;
 800e1dc:	bf00      	nop
 800e1de:	e000      	b.n	800e1e2 <USBH_HandleControl+0x2de>
      break;
 800e1e0:	bf00      	nop
  }

  return status;
 800e1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3710      	adds	r7, #16
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b088      	sub	sp, #32
 800e1f0:	af04      	add	r7, sp, #16
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	60b9      	str	r1, [r7, #8]
 800e1f6:	4613      	mov	r3, r2
 800e1f8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e1fa:	79f9      	ldrb	r1, [r7, #7]
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	9303      	str	r3, [sp, #12]
 800e200:	2308      	movs	r3, #8
 800e202:	9302      	str	r3, [sp, #8]
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	9301      	str	r3, [sp, #4]
 800e208:	2300      	movs	r3, #0
 800e20a:	9300      	str	r3, [sp, #0]
 800e20c:	2300      	movs	r3, #0
 800e20e:	2200      	movs	r2, #0
 800e210:	68f8      	ldr	r0, [r7, #12]
 800e212:	f003 fe34 	bl	8011e7e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e216:	2300      	movs	r3, #0
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3710      	adds	r7, #16
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b088      	sub	sp, #32
 800e224:	af04      	add	r7, sp, #16
 800e226:	60f8      	str	r0, [r7, #12]
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	4611      	mov	r1, r2
 800e22c:	461a      	mov	r2, r3
 800e22e:	460b      	mov	r3, r1
 800e230:	80fb      	strh	r3, [r7, #6]
 800e232:	4613      	mov	r3, r2
 800e234:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d001      	beq.n	800e244 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e240:	2300      	movs	r3, #0
 800e242:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e244:	7979      	ldrb	r1, [r7, #5]
 800e246:	7e3b      	ldrb	r3, [r7, #24]
 800e248:	9303      	str	r3, [sp, #12]
 800e24a:	88fb      	ldrh	r3, [r7, #6]
 800e24c:	9302      	str	r3, [sp, #8]
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	9301      	str	r3, [sp, #4]
 800e252:	2301      	movs	r3, #1
 800e254:	9300      	str	r3, [sp, #0]
 800e256:	2300      	movs	r3, #0
 800e258:	2200      	movs	r2, #0
 800e25a:	68f8      	ldr	r0, [r7, #12]
 800e25c:	f003 fe0f 	bl	8011e7e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e260:	2300      	movs	r3, #0
}
 800e262:	4618      	mov	r0, r3
 800e264:	3710      	adds	r7, #16
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}

0800e26a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e26a:	b580      	push	{r7, lr}
 800e26c:	b088      	sub	sp, #32
 800e26e:	af04      	add	r7, sp, #16
 800e270:	60f8      	str	r0, [r7, #12]
 800e272:	60b9      	str	r1, [r7, #8]
 800e274:	4611      	mov	r1, r2
 800e276:	461a      	mov	r2, r3
 800e278:	460b      	mov	r3, r1
 800e27a:	80fb      	strh	r3, [r7, #6]
 800e27c:	4613      	mov	r3, r2
 800e27e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e280:	7979      	ldrb	r1, [r7, #5]
 800e282:	2300      	movs	r3, #0
 800e284:	9303      	str	r3, [sp, #12]
 800e286:	88fb      	ldrh	r3, [r7, #6]
 800e288:	9302      	str	r3, [sp, #8]
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	9301      	str	r3, [sp, #4]
 800e28e:	2301      	movs	r3, #1
 800e290:	9300      	str	r3, [sp, #0]
 800e292:	2300      	movs	r3, #0
 800e294:	2201      	movs	r2, #1
 800e296:	68f8      	ldr	r0, [r7, #12]
 800e298:	f003 fdf1 	bl	8011e7e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e29c:	2300      	movs	r3, #0

}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3710      	adds	r7, #16
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}

0800e2a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e2a6:	b580      	push	{r7, lr}
 800e2a8:	b088      	sub	sp, #32
 800e2aa:	af04      	add	r7, sp, #16
 800e2ac:	60f8      	str	r0, [r7, #12]
 800e2ae:	60b9      	str	r1, [r7, #8]
 800e2b0:	4611      	mov	r1, r2
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	80fb      	strh	r3, [r7, #6]
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d001      	beq.n	800e2ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e2ca:	7979      	ldrb	r1, [r7, #5]
 800e2cc:	7e3b      	ldrb	r3, [r7, #24]
 800e2ce:	9303      	str	r3, [sp, #12]
 800e2d0:	88fb      	ldrh	r3, [r7, #6]
 800e2d2:	9302      	str	r3, [sp, #8]
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	9301      	str	r3, [sp, #4]
 800e2d8:	2301      	movs	r3, #1
 800e2da:	9300      	str	r3, [sp, #0]
 800e2dc:	2302      	movs	r3, #2
 800e2de:	2200      	movs	r2, #0
 800e2e0:	68f8      	ldr	r0, [r7, #12]
 800e2e2:	f003 fdcc 	bl	8011e7e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e2e6:	2300      	movs	r3, #0
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3710      	adds	r7, #16
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}

0800e2f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b088      	sub	sp, #32
 800e2f4:	af04      	add	r7, sp, #16
 800e2f6:	60f8      	str	r0, [r7, #12]
 800e2f8:	60b9      	str	r1, [r7, #8]
 800e2fa:	4611      	mov	r1, r2
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	460b      	mov	r3, r1
 800e300:	80fb      	strh	r3, [r7, #6]
 800e302:	4613      	mov	r3, r2
 800e304:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e306:	7979      	ldrb	r1, [r7, #5]
 800e308:	2300      	movs	r3, #0
 800e30a:	9303      	str	r3, [sp, #12]
 800e30c:	88fb      	ldrh	r3, [r7, #6]
 800e30e:	9302      	str	r3, [sp, #8]
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	9301      	str	r3, [sp, #4]
 800e314:	2301      	movs	r3, #1
 800e316:	9300      	str	r3, [sp, #0]
 800e318:	2302      	movs	r3, #2
 800e31a:	2201      	movs	r2, #1
 800e31c:	68f8      	ldr	r0, [r7, #12]
 800e31e:	f003 fdae 	bl	8011e7e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e322:	2300      	movs	r3, #0
}
 800e324:	4618      	mov	r0, r3
 800e326:	3710      	adds	r7, #16
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b086      	sub	sp, #24
 800e330:	af04      	add	r7, sp, #16
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	4608      	mov	r0, r1
 800e336:	4611      	mov	r1, r2
 800e338:	461a      	mov	r2, r3
 800e33a:	4603      	mov	r3, r0
 800e33c:	70fb      	strb	r3, [r7, #3]
 800e33e:	460b      	mov	r3, r1
 800e340:	70bb      	strb	r3, [r7, #2]
 800e342:	4613      	mov	r3, r2
 800e344:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e346:	7878      	ldrb	r0, [r7, #1]
 800e348:	78ba      	ldrb	r2, [r7, #2]
 800e34a:	78f9      	ldrb	r1, [r7, #3]
 800e34c:	8b3b      	ldrh	r3, [r7, #24]
 800e34e:	9302      	str	r3, [sp, #8]
 800e350:	7d3b      	ldrb	r3, [r7, #20]
 800e352:	9301      	str	r3, [sp, #4]
 800e354:	7c3b      	ldrb	r3, [r7, #16]
 800e356:	9300      	str	r3, [sp, #0]
 800e358:	4603      	mov	r3, r0
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f003 fd41 	bl	8011de2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e360:	2300      	movs	r3, #0
}
 800e362:	4618      	mov	r0, r3
 800e364:	3708      	adds	r7, #8
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}

0800e36a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e36a:	b580      	push	{r7, lr}
 800e36c:	b082      	sub	sp, #8
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6078      	str	r0, [r7, #4]
 800e372:	460b      	mov	r3, r1
 800e374:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e376:	78fb      	ldrb	r3, [r7, #3]
 800e378:	4619      	mov	r1, r3
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f003 fd60 	bl	8011e40 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	3708      	adds	r7, #8
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}

0800e38a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e38a:	b580      	push	{r7, lr}
 800e38c:	b084      	sub	sp, #16
 800e38e:	af00      	add	r7, sp, #0
 800e390:	6078      	str	r0, [r7, #4]
 800e392:	460b      	mov	r3, r1
 800e394:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 f836 	bl	800e408 <USBH_GetFreePipe>
 800e39c:	4603      	mov	r3, r0
 800e39e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e3a0:	89fb      	ldrh	r3, [r7, #14]
 800e3a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d00a      	beq.n	800e3c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e3aa:	78fa      	ldrb	r2, [r7, #3]
 800e3ac:	89fb      	ldrh	r3, [r7, #14]
 800e3ae:	f003 030f 	and.w	r3, r3, #15
 800e3b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e3b6:	6879      	ldr	r1, [r7, #4]
 800e3b8:	33e0      	adds	r3, #224	@ 0xe0
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	440b      	add	r3, r1
 800e3be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e3c0:	89fb      	ldrh	r3, [r7, #14]
 800e3c2:	b2db      	uxtb	r3, r3
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3710      	adds	r7, #16
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	b083      	sub	sp, #12
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	460b      	mov	r3, r1
 800e3d6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e3d8:	78fb      	ldrb	r3, [r7, #3]
 800e3da:	2b0f      	cmp	r3, #15
 800e3dc:	d80d      	bhi.n	800e3fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e3de:	78fb      	ldrb	r3, [r7, #3]
 800e3e0:	687a      	ldr	r2, [r7, #4]
 800e3e2:	33e0      	adds	r3, #224	@ 0xe0
 800e3e4:	009b      	lsls	r3, r3, #2
 800e3e6:	4413      	add	r3, r2
 800e3e8:	685a      	ldr	r2, [r3, #4]
 800e3ea:	78fb      	ldrb	r3, [r7, #3]
 800e3ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e3f0:	6879      	ldr	r1, [r7, #4]
 800e3f2:	33e0      	adds	r3, #224	@ 0xe0
 800e3f4:	009b      	lsls	r3, r3, #2
 800e3f6:	440b      	add	r3, r1
 800e3f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e3fa:	2300      	movs	r3, #0
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	370c      	adds	r7, #12
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr

0800e408 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e408:	b480      	push	{r7}
 800e40a:	b085      	sub	sp, #20
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e410:	2300      	movs	r3, #0
 800e412:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e414:	2300      	movs	r3, #0
 800e416:	73fb      	strb	r3, [r7, #15]
 800e418:	e00f      	b.n	800e43a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e41a:	7bfb      	ldrb	r3, [r7, #15]
 800e41c:	687a      	ldr	r2, [r7, #4]
 800e41e:	33e0      	adds	r3, #224	@ 0xe0
 800e420:	009b      	lsls	r3, r3, #2
 800e422:	4413      	add	r3, r2
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d102      	bne.n	800e434 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e42e:	7bfb      	ldrb	r3, [r7, #15]
 800e430:	b29b      	uxth	r3, r3
 800e432:	e007      	b.n	800e444 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e434:	7bfb      	ldrb	r3, [r7, #15]
 800e436:	3301      	adds	r3, #1
 800e438:	73fb      	strb	r3, [r7, #15]
 800e43a:	7bfb      	ldrb	r3, [r7, #15]
 800e43c:	2b0f      	cmp	r3, #15
 800e43e:	d9ec      	bls.n	800e41a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e440:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800e444:	4618      	mov	r0, r3
 800e446:	3714      	adds	r7, #20
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	4603      	mov	r3, r0
 800e458:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e45a:	79fb      	ldrb	r3, [r7, #7]
 800e45c:	4a08      	ldr	r2, [pc, #32]	@ (800e480 <disk_status+0x30>)
 800e45e:	009b      	lsls	r3, r3, #2
 800e460:	4413      	add	r3, r2
 800e462:	685b      	ldr	r3, [r3, #4]
 800e464:	685b      	ldr	r3, [r3, #4]
 800e466:	79fa      	ldrb	r2, [r7, #7]
 800e468:	4905      	ldr	r1, [pc, #20]	@ (800e480 <disk_status+0x30>)
 800e46a:	440a      	add	r2, r1
 800e46c:	7a12      	ldrb	r2, [r2, #8]
 800e46e:	4610      	mov	r0, r2
 800e470:	4798      	blx	r3
 800e472:	4603      	mov	r3, r0
 800e474:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e476:	7bfb      	ldrb	r3, [r7, #15]
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3710      	adds	r7, #16
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}
 800e480:	20002268 	.word	0x20002268

0800e484 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
 800e48a:	4603      	mov	r3, r0
 800e48c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e48e:	2300      	movs	r3, #0
 800e490:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e492:	79fb      	ldrb	r3, [r7, #7]
 800e494:	4a0e      	ldr	r2, [pc, #56]	@ (800e4d0 <disk_initialize+0x4c>)
 800e496:	5cd3      	ldrb	r3, [r2, r3]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d114      	bne.n	800e4c6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e49c:	79fb      	ldrb	r3, [r7, #7]
 800e49e:	4a0c      	ldr	r2, [pc, #48]	@ (800e4d0 <disk_initialize+0x4c>)
 800e4a0:	009b      	lsls	r3, r3, #2
 800e4a2:	4413      	add	r3, r2
 800e4a4:	685b      	ldr	r3, [r3, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	79fa      	ldrb	r2, [r7, #7]
 800e4aa:	4909      	ldr	r1, [pc, #36]	@ (800e4d0 <disk_initialize+0x4c>)
 800e4ac:	440a      	add	r2, r1
 800e4ae:	7a12      	ldrb	r2, [r2, #8]
 800e4b0:	4610      	mov	r0, r2
 800e4b2:	4798      	blx	r3
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800e4b8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d103      	bne.n	800e4c6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800e4be:	79fb      	ldrb	r3, [r7, #7]
 800e4c0:	4a03      	ldr	r2, [pc, #12]	@ (800e4d0 <disk_initialize+0x4c>)
 800e4c2:	2101      	movs	r1, #1
 800e4c4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800e4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3710      	adds	r7, #16
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}
 800e4d0:	20002268 	.word	0x20002268

0800e4d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e4d4:	b590      	push	{r4, r7, lr}
 800e4d6:	b087      	sub	sp, #28
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	60b9      	str	r1, [r7, #8]
 800e4dc:	607a      	str	r2, [r7, #4]
 800e4de:	603b      	str	r3, [r7, #0]
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e4e4:	7bfb      	ldrb	r3, [r7, #15]
 800e4e6:	4a0a      	ldr	r2, [pc, #40]	@ (800e510 <disk_read+0x3c>)
 800e4e8:	009b      	lsls	r3, r3, #2
 800e4ea:	4413      	add	r3, r2
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	689c      	ldr	r4, [r3, #8]
 800e4f0:	7bfb      	ldrb	r3, [r7, #15]
 800e4f2:	4a07      	ldr	r2, [pc, #28]	@ (800e510 <disk_read+0x3c>)
 800e4f4:	4413      	add	r3, r2
 800e4f6:	7a18      	ldrb	r0, [r3, #8]
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	68b9      	ldr	r1, [r7, #8]
 800e4fe:	47a0      	blx	r4
 800e500:	4603      	mov	r3, r0
 800e502:	75fb      	strb	r3, [r7, #23]
  return res;
 800e504:	7dfb      	ldrb	r3, [r7, #23]
}
 800e506:	4618      	mov	r0, r3
 800e508:	371c      	adds	r7, #28
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd90      	pop	{r4, r7, pc}
 800e50e:	bf00      	nop
 800e510:	20002268 	.word	0x20002268

0800e514 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e514:	b590      	push	{r4, r7, lr}
 800e516:	b087      	sub	sp, #28
 800e518:	af00      	add	r7, sp, #0
 800e51a:	60b9      	str	r1, [r7, #8]
 800e51c:	607a      	str	r2, [r7, #4]
 800e51e:	603b      	str	r3, [r7, #0]
 800e520:	4603      	mov	r3, r0
 800e522:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e524:	7bfb      	ldrb	r3, [r7, #15]
 800e526:	4a0a      	ldr	r2, [pc, #40]	@ (800e550 <disk_write+0x3c>)
 800e528:	009b      	lsls	r3, r3, #2
 800e52a:	4413      	add	r3, r2
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	68dc      	ldr	r4, [r3, #12]
 800e530:	7bfb      	ldrb	r3, [r7, #15]
 800e532:	4a07      	ldr	r2, [pc, #28]	@ (800e550 <disk_write+0x3c>)
 800e534:	4413      	add	r3, r2
 800e536:	7a18      	ldrb	r0, [r3, #8]
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	687a      	ldr	r2, [r7, #4]
 800e53c:	68b9      	ldr	r1, [r7, #8]
 800e53e:	47a0      	blx	r4
 800e540:	4603      	mov	r3, r0
 800e542:	75fb      	strb	r3, [r7, #23]
  return res;
 800e544:	7dfb      	ldrb	r3, [r7, #23]
}
 800e546:	4618      	mov	r0, r3
 800e548:	371c      	adds	r7, #28
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd90      	pop	{r4, r7, pc}
 800e54e:	bf00      	nop
 800e550:	20002268 	.word	0x20002268

0800e554 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b084      	sub	sp, #16
 800e558:	af00      	add	r7, sp, #0
 800e55a:	4603      	mov	r3, r0
 800e55c:	603a      	str	r2, [r7, #0]
 800e55e:	71fb      	strb	r3, [r7, #7]
 800e560:	460b      	mov	r3, r1
 800e562:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e564:	79fb      	ldrb	r3, [r7, #7]
 800e566:	4a09      	ldr	r2, [pc, #36]	@ (800e58c <disk_ioctl+0x38>)
 800e568:	009b      	lsls	r3, r3, #2
 800e56a:	4413      	add	r3, r2
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	691b      	ldr	r3, [r3, #16]
 800e570:	79fa      	ldrb	r2, [r7, #7]
 800e572:	4906      	ldr	r1, [pc, #24]	@ (800e58c <disk_ioctl+0x38>)
 800e574:	440a      	add	r2, r1
 800e576:	7a10      	ldrb	r0, [r2, #8]
 800e578:	79b9      	ldrb	r1, [r7, #6]
 800e57a:	683a      	ldr	r2, [r7, #0]
 800e57c:	4798      	blx	r3
 800e57e:	4603      	mov	r3, r0
 800e580:	73fb      	strb	r3, [r7, #15]
  return res;
 800e582:	7bfb      	ldrb	r3, [r7, #15]
}
 800e584:	4618      	mov	r0, r3
 800e586:	3710      	adds	r7, #16
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	20002268 	.word	0x20002268

0800e590 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e590:	b480      	push	{r7}
 800e592:	b085      	sub	sp, #20
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	3301      	adds	r3, #1
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e5a0:	89fb      	ldrh	r3, [r7, #14]
 800e5a2:	021b      	lsls	r3, r3, #8
 800e5a4:	b21a      	sxth	r2, r3
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	b21b      	sxth	r3, r3
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	b21b      	sxth	r3, r3
 800e5b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e5b2:	89fb      	ldrh	r3, [r7, #14]
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3714      	adds	r7, #20
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr

0800e5c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b085      	sub	sp, #20
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	3303      	adds	r3, #3
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	021b      	lsls	r3, r3, #8
 800e5d4:	687a      	ldr	r2, [r7, #4]
 800e5d6:	3202      	adds	r2, #2
 800e5d8:	7812      	ldrb	r2, [r2, #0]
 800e5da:	4313      	orrs	r3, r2
 800e5dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	021b      	lsls	r3, r3, #8
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	3201      	adds	r2, #1
 800e5e6:	7812      	ldrb	r2, [r2, #0]
 800e5e8:	4313      	orrs	r3, r2
 800e5ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	021b      	lsls	r3, r3, #8
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	7812      	ldrb	r2, [r2, #0]
 800e5f4:	4313      	orrs	r3, r2
 800e5f6:	60fb      	str	r3, [r7, #12]
	return rv;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3714      	adds	r7, #20
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr

0800e606 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e606:	b480      	push	{r7}
 800e608:	b083      	sub	sp, #12
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	6078      	str	r0, [r7, #4]
 800e60e:	460b      	mov	r3, r1
 800e610:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	1c5a      	adds	r2, r3, #1
 800e616:	607a      	str	r2, [r7, #4]
 800e618:	887a      	ldrh	r2, [r7, #2]
 800e61a:	b2d2      	uxtb	r2, r2
 800e61c:	701a      	strb	r2, [r3, #0]
 800e61e:	887b      	ldrh	r3, [r7, #2]
 800e620:	0a1b      	lsrs	r3, r3, #8
 800e622:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	1c5a      	adds	r2, r3, #1
 800e628:	607a      	str	r2, [r7, #4]
 800e62a:	887a      	ldrh	r2, [r7, #2]
 800e62c:	b2d2      	uxtb	r2, r2
 800e62e:	701a      	strb	r2, [r3, #0]
}
 800e630:	bf00      	nop
 800e632:	370c      	adds	r7, #12
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr

0800e63c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e63c:	b480      	push	{r7}
 800e63e:	b083      	sub	sp, #12
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	1c5a      	adds	r2, r3, #1
 800e64a:	607a      	str	r2, [r7, #4]
 800e64c:	683a      	ldr	r2, [r7, #0]
 800e64e:	b2d2      	uxtb	r2, r2
 800e650:	701a      	strb	r2, [r3, #0]
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	0a1b      	lsrs	r3, r3, #8
 800e656:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	1c5a      	adds	r2, r3, #1
 800e65c:	607a      	str	r2, [r7, #4]
 800e65e:	683a      	ldr	r2, [r7, #0]
 800e660:	b2d2      	uxtb	r2, r2
 800e662:	701a      	strb	r2, [r3, #0]
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	0a1b      	lsrs	r3, r3, #8
 800e668:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	1c5a      	adds	r2, r3, #1
 800e66e:	607a      	str	r2, [r7, #4]
 800e670:	683a      	ldr	r2, [r7, #0]
 800e672:	b2d2      	uxtb	r2, r2
 800e674:	701a      	strb	r2, [r3, #0]
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	0a1b      	lsrs	r3, r3, #8
 800e67a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	1c5a      	adds	r2, r3, #1
 800e680:	607a      	str	r2, [r7, #4]
 800e682:	683a      	ldr	r2, [r7, #0]
 800e684:	b2d2      	uxtb	r2, r2
 800e686:	701a      	strb	r2, [r3, #0]
}
 800e688:	bf00      	nop
 800e68a:	370c      	adds	r7, #12
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr

0800e694 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e694:	b480      	push	{r7}
 800e696:	b087      	sub	sp, #28
 800e698:	af00      	add	r7, sp, #0
 800e69a:	60f8      	str	r0, [r7, #12]
 800e69c:	60b9      	str	r1, [r7, #8]
 800e69e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d00d      	beq.n	800e6ca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e6ae:	693a      	ldr	r2, [r7, #16]
 800e6b0:	1c53      	adds	r3, r2, #1
 800e6b2:	613b      	str	r3, [r7, #16]
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	1c59      	adds	r1, r3, #1
 800e6b8:	6179      	str	r1, [r7, #20]
 800e6ba:	7812      	ldrb	r2, [r2, #0]
 800e6bc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	3b01      	subs	r3, #1
 800e6c2:	607b      	str	r3, [r7, #4]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d1f1      	bne.n	800e6ae <mem_cpy+0x1a>
	}
}
 800e6ca:	bf00      	nop
 800e6cc:	371c      	adds	r7, #28
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d4:	4770      	bx	lr

0800e6d6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e6d6:	b480      	push	{r7}
 800e6d8:	b087      	sub	sp, #28
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	60f8      	str	r0, [r7, #12]
 800e6de:	60b9      	str	r1, [r7, #8]
 800e6e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	1c5a      	adds	r2, r3, #1
 800e6ea:	617a      	str	r2, [r7, #20]
 800e6ec:	68ba      	ldr	r2, [r7, #8]
 800e6ee:	b2d2      	uxtb	r2, r2
 800e6f0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	3b01      	subs	r3, #1
 800e6f6:	607b      	str	r3, [r7, #4]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d1f3      	bne.n	800e6e6 <mem_set+0x10>
}
 800e6fe:	bf00      	nop
 800e700:	bf00      	nop
 800e702:	371c      	adds	r7, #28
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e70c:	b480      	push	{r7}
 800e70e:	b089      	sub	sp, #36	@ 0x24
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	61fb      	str	r3, [r7, #28]
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e720:	2300      	movs	r3, #0
 800e722:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e724:	69fb      	ldr	r3, [r7, #28]
 800e726:	1c5a      	adds	r2, r3, #1
 800e728:	61fa      	str	r2, [r7, #28]
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	4619      	mov	r1, r3
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	1c5a      	adds	r2, r3, #1
 800e732:	61ba      	str	r2, [r7, #24]
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	1acb      	subs	r3, r1, r3
 800e738:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	3b01      	subs	r3, #1
 800e73e:	607b      	str	r3, [r7, #4]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d002      	beq.n	800e74c <mem_cmp+0x40>
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d0eb      	beq.n	800e724 <mem_cmp+0x18>

	return r;
 800e74c:	697b      	ldr	r3, [r7, #20]
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3724      	adds	r7, #36	@ 0x24
 800e752:	46bd      	mov	sp, r7
 800e754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e758:	4770      	bx	lr

0800e75a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e75a:	b480      	push	{r7}
 800e75c:	b083      	sub	sp, #12
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
 800e762:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e764:	e002      	b.n	800e76c <chk_chr+0x12>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	3301      	adds	r3, #1
 800e76a:	607b      	str	r3, [r7, #4]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d005      	beq.n	800e780 <chk_chr+0x26>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	461a      	mov	r2, r3
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d1f2      	bne.n	800e766 <chk_chr+0xc>
	return *str;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	781b      	ldrb	r3, [r3, #0]
}
 800e784:	4618      	mov	r0, r3
 800e786:	370c      	adds	r7, #12
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr

0800e790 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e790:	b480      	push	{r7}
 800e792:	b085      	sub	sp, #20
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e79a:	2300      	movs	r3, #0
 800e79c:	60bb      	str	r3, [r7, #8]
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	60fb      	str	r3, [r7, #12]
 800e7a2:	e029      	b.n	800e7f8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e7a4:	4a27      	ldr	r2, [pc, #156]	@ (800e844 <chk_lock+0xb4>)
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	011b      	lsls	r3, r3, #4
 800e7aa:	4413      	add	r3, r2
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d01d      	beq.n	800e7ee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e7b2:	4a24      	ldr	r2, [pc, #144]	@ (800e844 <chk_lock+0xb4>)
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	011b      	lsls	r3, r3, #4
 800e7b8:	4413      	add	r3, r2
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d116      	bne.n	800e7f2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e7c4:	4a1f      	ldr	r2, [pc, #124]	@ (800e844 <chk_lock+0xb4>)
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	011b      	lsls	r3, r3, #4
 800e7ca:	4413      	add	r3, r2
 800e7cc:	3304      	adds	r3, #4
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d10c      	bne.n	800e7f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e7d8:	4a1a      	ldr	r2, [pc, #104]	@ (800e844 <chk_lock+0xb4>)
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	011b      	lsls	r3, r3, #4
 800e7de:	4413      	add	r3, r2
 800e7e0:	3308      	adds	r3, #8
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d102      	bne.n	800e7f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e7ec:	e007      	b.n	800e7fe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	3301      	adds	r3, #1
 800e7f6:	60fb      	str	r3, [r7, #12]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2b01      	cmp	r3, #1
 800e7fc:	d9d2      	bls.n	800e7a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2b02      	cmp	r3, #2
 800e802:	d109      	bne.n	800e818 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d102      	bne.n	800e810 <chk_lock+0x80>
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	2b02      	cmp	r3, #2
 800e80e:	d101      	bne.n	800e814 <chk_lock+0x84>
 800e810:	2300      	movs	r3, #0
 800e812:	e010      	b.n	800e836 <chk_lock+0xa6>
 800e814:	2312      	movs	r3, #18
 800e816:	e00e      	b.n	800e836 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d108      	bne.n	800e830 <chk_lock+0xa0>
 800e81e:	4a09      	ldr	r2, [pc, #36]	@ (800e844 <chk_lock+0xb4>)
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	011b      	lsls	r3, r3, #4
 800e824:	4413      	add	r3, r2
 800e826:	330c      	adds	r3, #12
 800e828:	881b      	ldrh	r3, [r3, #0]
 800e82a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e82e:	d101      	bne.n	800e834 <chk_lock+0xa4>
 800e830:	2310      	movs	r3, #16
 800e832:	e000      	b.n	800e836 <chk_lock+0xa6>
 800e834:	2300      	movs	r3, #0
}
 800e836:	4618      	mov	r0, r3
 800e838:	3714      	adds	r7, #20
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr
 800e842:	bf00      	nop
 800e844:	20002048 	.word	0x20002048

0800e848 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e848:	b480      	push	{r7}
 800e84a:	b083      	sub	sp, #12
 800e84c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e84e:	2300      	movs	r3, #0
 800e850:	607b      	str	r3, [r7, #4]
 800e852:	e002      	b.n	800e85a <enq_lock+0x12>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	3301      	adds	r3, #1
 800e858:	607b      	str	r3, [r7, #4]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2b01      	cmp	r3, #1
 800e85e:	d806      	bhi.n	800e86e <enq_lock+0x26>
 800e860:	4a09      	ldr	r2, [pc, #36]	@ (800e888 <enq_lock+0x40>)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	011b      	lsls	r3, r3, #4
 800e866:	4413      	add	r3, r2
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d1f2      	bne.n	800e854 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2b02      	cmp	r3, #2
 800e872:	bf14      	ite	ne
 800e874:	2301      	movne	r3, #1
 800e876:	2300      	moveq	r3, #0
 800e878:	b2db      	uxtb	r3, r3
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	370c      	adds	r7, #12
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop
 800e888:	20002048 	.word	0x20002048

0800e88c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b085      	sub	sp, #20
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e896:	2300      	movs	r3, #0
 800e898:	60fb      	str	r3, [r7, #12]
 800e89a:	e01f      	b.n	800e8dc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e89c:	4a41      	ldr	r2, [pc, #260]	@ (800e9a4 <inc_lock+0x118>)
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	011b      	lsls	r3, r3, #4
 800e8a2:	4413      	add	r3, r2
 800e8a4:	681a      	ldr	r2, [r3, #0]
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d113      	bne.n	800e8d6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e8ae:	4a3d      	ldr	r2, [pc, #244]	@ (800e9a4 <inc_lock+0x118>)
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	011b      	lsls	r3, r3, #4
 800e8b4:	4413      	add	r3, r2
 800e8b6:	3304      	adds	r3, #4
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d109      	bne.n	800e8d6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e8c2:	4a38      	ldr	r2, [pc, #224]	@ (800e9a4 <inc_lock+0x118>)
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	011b      	lsls	r3, r3, #4
 800e8c8:	4413      	add	r3, r2
 800e8ca:	3308      	adds	r3, #8
 800e8cc:	681a      	ldr	r2, [r3, #0]
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d006      	beq.n	800e8e4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	60fb      	str	r3, [r7, #12]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2b01      	cmp	r3, #1
 800e8e0:	d9dc      	bls.n	800e89c <inc_lock+0x10>
 800e8e2:	e000      	b.n	800e8e6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e8e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2b02      	cmp	r3, #2
 800e8ea:	d132      	bne.n	800e952 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	60fb      	str	r3, [r7, #12]
 800e8f0:	e002      	b.n	800e8f8 <inc_lock+0x6c>
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	60fb      	str	r3, [r7, #12]
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	2b01      	cmp	r3, #1
 800e8fc:	d806      	bhi.n	800e90c <inc_lock+0x80>
 800e8fe:	4a29      	ldr	r2, [pc, #164]	@ (800e9a4 <inc_lock+0x118>)
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	011b      	lsls	r3, r3, #4
 800e904:	4413      	add	r3, r2
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d1f2      	bne.n	800e8f2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2b02      	cmp	r3, #2
 800e910:	d101      	bne.n	800e916 <inc_lock+0x8a>
 800e912:	2300      	movs	r3, #0
 800e914:	e040      	b.n	800e998 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	4922      	ldr	r1, [pc, #136]	@ (800e9a4 <inc_lock+0x118>)
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	011b      	lsls	r3, r3, #4
 800e920:	440b      	add	r3, r1
 800e922:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	689a      	ldr	r2, [r3, #8]
 800e928:	491e      	ldr	r1, [pc, #120]	@ (800e9a4 <inc_lock+0x118>)
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	011b      	lsls	r3, r3, #4
 800e92e:	440b      	add	r3, r1
 800e930:	3304      	adds	r3, #4
 800e932:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	695a      	ldr	r2, [r3, #20]
 800e938:	491a      	ldr	r1, [pc, #104]	@ (800e9a4 <inc_lock+0x118>)
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	011b      	lsls	r3, r3, #4
 800e93e:	440b      	add	r3, r1
 800e940:	3308      	adds	r3, #8
 800e942:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e944:	4a17      	ldr	r2, [pc, #92]	@ (800e9a4 <inc_lock+0x118>)
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	011b      	lsls	r3, r3, #4
 800e94a:	4413      	add	r3, r2
 800e94c:	330c      	adds	r3, #12
 800e94e:	2200      	movs	r2, #0
 800e950:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d009      	beq.n	800e96c <inc_lock+0xe0>
 800e958:	4a12      	ldr	r2, [pc, #72]	@ (800e9a4 <inc_lock+0x118>)
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	011b      	lsls	r3, r3, #4
 800e95e:	4413      	add	r3, r2
 800e960:	330c      	adds	r3, #12
 800e962:	881b      	ldrh	r3, [r3, #0]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d001      	beq.n	800e96c <inc_lock+0xe0>
 800e968:	2300      	movs	r3, #0
 800e96a:	e015      	b.n	800e998 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d108      	bne.n	800e984 <inc_lock+0xf8>
 800e972:	4a0c      	ldr	r2, [pc, #48]	@ (800e9a4 <inc_lock+0x118>)
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	011b      	lsls	r3, r3, #4
 800e978:	4413      	add	r3, r2
 800e97a:	330c      	adds	r3, #12
 800e97c:	881b      	ldrh	r3, [r3, #0]
 800e97e:	3301      	adds	r3, #1
 800e980:	b29a      	uxth	r2, r3
 800e982:	e001      	b.n	800e988 <inc_lock+0xfc>
 800e984:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e988:	4906      	ldr	r1, [pc, #24]	@ (800e9a4 <inc_lock+0x118>)
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	011b      	lsls	r3, r3, #4
 800e98e:	440b      	add	r3, r1
 800e990:	330c      	adds	r3, #12
 800e992:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	3301      	adds	r3, #1
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3714      	adds	r7, #20
 800e99c:	46bd      	mov	sp, r7
 800e99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a2:	4770      	bx	lr
 800e9a4:	20002048 	.word	0x20002048

0800e9a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b085      	sub	sp, #20
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	3b01      	subs	r3, #1
 800e9b4:	607b      	str	r3, [r7, #4]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d825      	bhi.n	800ea08 <dec_lock+0x60>
		n = Files[i].ctr;
 800e9bc:	4a17      	ldr	r2, [pc, #92]	@ (800ea1c <dec_lock+0x74>)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	011b      	lsls	r3, r3, #4
 800e9c2:	4413      	add	r3, r2
 800e9c4:	330c      	adds	r3, #12
 800e9c6:	881b      	ldrh	r3, [r3, #0]
 800e9c8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e9ca:	89fb      	ldrh	r3, [r7, #14]
 800e9cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e9d0:	d101      	bne.n	800e9d6 <dec_lock+0x2e>
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e9d6:	89fb      	ldrh	r3, [r7, #14]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d002      	beq.n	800e9e2 <dec_lock+0x3a>
 800e9dc:	89fb      	ldrh	r3, [r7, #14]
 800e9de:	3b01      	subs	r3, #1
 800e9e0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e9e2:	4a0e      	ldr	r2, [pc, #56]	@ (800ea1c <dec_lock+0x74>)
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	011b      	lsls	r3, r3, #4
 800e9e8:	4413      	add	r3, r2
 800e9ea:	330c      	adds	r3, #12
 800e9ec:	89fa      	ldrh	r2, [r7, #14]
 800e9ee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e9f0:	89fb      	ldrh	r3, [r7, #14]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d105      	bne.n	800ea02 <dec_lock+0x5a>
 800e9f6:	4a09      	ldr	r2, [pc, #36]	@ (800ea1c <dec_lock+0x74>)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	011b      	lsls	r3, r3, #4
 800e9fc:	4413      	add	r3, r2
 800e9fe:	2200      	movs	r2, #0
 800ea00:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ea02:	2300      	movs	r3, #0
 800ea04:	737b      	strb	r3, [r7, #13]
 800ea06:	e001      	b.n	800ea0c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ea08:	2302      	movs	r3, #2
 800ea0a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ea0c:	7b7b      	ldrb	r3, [r7, #13]
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3714      	adds	r7, #20
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr
 800ea1a:	bf00      	nop
 800ea1c:	20002048 	.word	0x20002048

0800ea20 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b085      	sub	sp, #20
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ea28:	2300      	movs	r3, #0
 800ea2a:	60fb      	str	r3, [r7, #12]
 800ea2c:	e010      	b.n	800ea50 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ea2e:	4a0d      	ldr	r2, [pc, #52]	@ (800ea64 <clear_lock+0x44>)
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	011b      	lsls	r3, r3, #4
 800ea34:	4413      	add	r3, r2
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d105      	bne.n	800ea4a <clear_lock+0x2a>
 800ea3e:	4a09      	ldr	r2, [pc, #36]	@ (800ea64 <clear_lock+0x44>)
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	011b      	lsls	r3, r3, #4
 800ea44:	4413      	add	r3, r2
 800ea46:	2200      	movs	r2, #0
 800ea48:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	3301      	adds	r3, #1
 800ea4e:	60fb      	str	r3, [r7, #12]
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2b01      	cmp	r3, #1
 800ea54:	d9eb      	bls.n	800ea2e <clear_lock+0xe>
	}
}
 800ea56:	bf00      	nop
 800ea58:	bf00      	nop
 800ea5a:	3714      	adds	r7, #20
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea62:	4770      	bx	lr
 800ea64:	20002048 	.word	0x20002048

0800ea68 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b086      	sub	sp, #24
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ea70:	2300      	movs	r3, #0
 800ea72:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	78db      	ldrb	r3, [r3, #3]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d034      	beq.n	800eae6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea80:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	7858      	ldrb	r0, [r3, #1]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	697a      	ldr	r2, [r7, #20]
 800ea90:	f7ff fd40 	bl	800e514 <disk_write>
 800ea94:	4603      	mov	r3, r0
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d002      	beq.n	800eaa0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	73fb      	strb	r3, [r7, #15]
 800ea9e:	e022      	b.n	800eae6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaaa:	697a      	ldr	r2, [r7, #20]
 800eaac:	1ad2      	subs	r2, r2, r3
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	69db      	ldr	r3, [r3, #28]
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d217      	bcs.n	800eae6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	789b      	ldrb	r3, [r3, #2]
 800eaba:	613b      	str	r3, [r7, #16]
 800eabc:	e010      	b.n	800eae0 <sync_window+0x78>
					wsect += fs->fsize;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	69db      	ldr	r3, [r3, #28]
 800eac2:	697a      	ldr	r2, [r7, #20]
 800eac4:	4413      	add	r3, r2
 800eac6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	7858      	ldrb	r0, [r3, #1]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ead2:	2301      	movs	r3, #1
 800ead4:	697a      	ldr	r2, [r7, #20]
 800ead6:	f7ff fd1d 	bl	800e514 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	3b01      	subs	r3, #1
 800eade:	613b      	str	r3, [r7, #16]
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d8eb      	bhi.n	800eabe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800eae6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3718      	adds	r7, #24
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800eafa:	2300      	movs	r3, #0
 800eafc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb02:	683a      	ldr	r2, [r7, #0]
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d01b      	beq.n	800eb40 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f7ff ffad 	bl	800ea68 <sync_window>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800eb12:	7bfb      	ldrb	r3, [r7, #15]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d113      	bne.n	800eb40 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	7858      	ldrb	r0, [r3, #1]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800eb22:	2301      	movs	r3, #1
 800eb24:	683a      	ldr	r2, [r7, #0]
 800eb26:	f7ff fcd5 	bl	800e4d4 <disk_read>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d004      	beq.n	800eb3a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800eb30:	f04f 33ff 	mov.w	r3, #4294967295
 800eb34:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800eb36:	2301      	movs	r3, #1
 800eb38:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	683a      	ldr	r2, [r7, #0]
 800eb3e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800eb40:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3710      	adds	r7, #16
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
	...

0800eb4c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b084      	sub	sp, #16
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7ff ff87 	bl	800ea68 <sync_window>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eb5e:	7bfb      	ldrb	r3, [r7, #15]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d158      	bne.n	800ec16 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	781b      	ldrb	r3, [r3, #0]
 800eb68:	2b03      	cmp	r3, #3
 800eb6a:	d148      	bne.n	800ebfe <sync_fs+0xb2>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	791b      	ldrb	r3, [r3, #4]
 800eb70:	2b01      	cmp	r3, #1
 800eb72:	d144      	bne.n	800ebfe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	3334      	adds	r3, #52	@ 0x34
 800eb78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb7c:	2100      	movs	r1, #0
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7ff fda9 	bl	800e6d6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	3334      	adds	r3, #52	@ 0x34
 800eb88:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800eb8c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7ff fd38 	bl	800e606 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	3334      	adds	r3, #52	@ 0x34
 800eb9a:	4921      	ldr	r1, [pc, #132]	@ (800ec20 <sync_fs+0xd4>)
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7ff fd4d 	bl	800e63c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	3334      	adds	r3, #52	@ 0x34
 800eba6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ebaa:	491e      	ldr	r1, [pc, #120]	@ (800ec24 <sync_fs+0xd8>)
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7ff fd45 	bl	800e63c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	3334      	adds	r3, #52	@ 0x34
 800ebb6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	695b      	ldr	r3, [r3, #20]
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	4610      	mov	r0, r2
 800ebc2:	f7ff fd3b 	bl	800e63c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	3334      	adds	r3, #52	@ 0x34
 800ebca:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	691b      	ldr	r3, [r3, #16]
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	4610      	mov	r0, r2
 800ebd6:	f7ff fd31 	bl	800e63c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6a1b      	ldr	r3, [r3, #32]
 800ebde:	1c5a      	adds	r2, r3, #1
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	7858      	ldrb	r0, [r3, #1]
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	f7ff fc8e 	bl	800e514 <disk_write>
			fs->fsi_flag = 0;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	785b      	ldrb	r3, [r3, #1]
 800ec02:	2200      	movs	r2, #0
 800ec04:	2100      	movs	r1, #0
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7ff fca4 	bl	800e554 <disk_ioctl>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d001      	beq.n	800ec16 <sync_fs+0xca>
 800ec12:	2301      	movs	r3, #1
 800ec14:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ec16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3710      	adds	r7, #16
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	41615252 	.word	0x41615252
 800ec24:	61417272 	.word	0x61417272

0800ec28 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	3b02      	subs	r3, #2
 800ec36:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	699b      	ldr	r3, [r3, #24]
 800ec3c:	3b02      	subs	r3, #2
 800ec3e:	683a      	ldr	r2, [r7, #0]
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d301      	bcc.n	800ec48 <clust2sect+0x20>
 800ec44:	2300      	movs	r3, #0
 800ec46:	e008      	b.n	800ec5a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	895b      	ldrh	r3, [r3, #10]
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	fb03 f202 	mul.w	r2, r3, r2
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec58:	4413      	add	r3, r2
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	370c      	adds	r7, #12
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec64:	4770      	bx	lr

0800ec66 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ec66:	b580      	push	{r7, lr}
 800ec68:	b086      	sub	sp, #24
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	6078      	str	r0, [r7, #4]
 800ec6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d904      	bls.n	800ec86 <get_fat+0x20>
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	699b      	ldr	r3, [r3, #24]
 800ec80:	683a      	ldr	r2, [r7, #0]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d302      	bcc.n	800ec8c <get_fat+0x26>
		val = 1;	/* Internal error */
 800ec86:	2301      	movs	r3, #1
 800ec88:	617b      	str	r3, [r7, #20]
 800ec8a:	e08e      	b.n	800edaa <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ec8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec90:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	2b03      	cmp	r3, #3
 800ec98:	d061      	beq.n	800ed5e <get_fat+0xf8>
 800ec9a:	2b03      	cmp	r3, #3
 800ec9c:	dc7b      	bgt.n	800ed96 <get_fat+0x130>
 800ec9e:	2b01      	cmp	r3, #1
 800eca0:	d002      	beq.n	800eca8 <get_fat+0x42>
 800eca2:	2b02      	cmp	r3, #2
 800eca4:	d041      	beq.n	800ed2a <get_fat+0xc4>
 800eca6:	e076      	b.n	800ed96 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	60fb      	str	r3, [r7, #12]
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	085b      	lsrs	r3, r3, #1
 800ecb0:	68fa      	ldr	r2, [r7, #12]
 800ecb2:	4413      	add	r3, r2
 800ecb4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	0a5b      	lsrs	r3, r3, #9
 800ecbe:	4413      	add	r3, r2
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	6938      	ldr	r0, [r7, #16]
 800ecc4:	f7ff ff14 	bl	800eaf0 <move_window>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d166      	bne.n	800ed9c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	1c5a      	adds	r2, r3, #1
 800ecd2:	60fa      	str	r2, [r7, #12]
 800ecd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecd8:	693a      	ldr	r2, [r7, #16]
 800ecda:	4413      	add	r3, r2
 800ecdc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ece0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	0a5b      	lsrs	r3, r3, #9
 800ecea:	4413      	add	r3, r2
 800ecec:	4619      	mov	r1, r3
 800ecee:	6938      	ldr	r0, [r7, #16]
 800ecf0:	f7ff fefe 	bl	800eaf0 <move_window>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d152      	bne.n	800eda0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed00:	693a      	ldr	r2, [r7, #16]
 800ed02:	4413      	add	r3, r2
 800ed04:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ed08:	021b      	lsls	r3, r3, #8
 800ed0a:	68ba      	ldr	r2, [r7, #8]
 800ed0c:	4313      	orrs	r3, r2
 800ed0e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	f003 0301 	and.w	r3, r3, #1
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d002      	beq.n	800ed20 <get_fat+0xba>
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	091b      	lsrs	r3, r3, #4
 800ed1e:	e002      	b.n	800ed26 <get_fat+0xc0>
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ed26:	617b      	str	r3, [r7, #20]
			break;
 800ed28:	e03f      	b.n	800edaa <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	0a1b      	lsrs	r3, r3, #8
 800ed32:	4413      	add	r3, r2
 800ed34:	4619      	mov	r1, r3
 800ed36:	6938      	ldr	r0, [r7, #16]
 800ed38:	f7ff feda 	bl	800eaf0 <move_window>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d130      	bne.n	800eda4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	005b      	lsls	r3, r3, #1
 800ed4c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ed50:	4413      	add	r3, r2
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7ff fc1c 	bl	800e590 <ld_word>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	617b      	str	r3, [r7, #20]
			break;
 800ed5c:	e025      	b.n	800edaa <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	09db      	lsrs	r3, r3, #7
 800ed66:	4413      	add	r3, r2
 800ed68:	4619      	mov	r1, r3
 800ed6a:	6938      	ldr	r0, [r7, #16]
 800ed6c:	f7ff fec0 	bl	800eaf0 <move_window>
 800ed70:	4603      	mov	r3, r0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d118      	bne.n	800eda8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	009b      	lsls	r3, r3, #2
 800ed80:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ed84:	4413      	add	r3, r2
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7ff fc1a 	bl	800e5c0 <ld_dword>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ed92:	617b      	str	r3, [r7, #20]
			break;
 800ed94:	e009      	b.n	800edaa <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ed96:	2301      	movs	r3, #1
 800ed98:	617b      	str	r3, [r7, #20]
 800ed9a:	e006      	b.n	800edaa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed9c:	bf00      	nop
 800ed9e:	e004      	b.n	800edaa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eda0:	bf00      	nop
 800eda2:	e002      	b.n	800edaa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eda4:	bf00      	nop
 800eda6:	e000      	b.n	800edaa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eda8:	bf00      	nop
		}
	}

	return val;
 800edaa:	697b      	ldr	r3, [r7, #20]
}
 800edac:	4618      	mov	r0, r3
 800edae:	3718      	adds	r7, #24
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}

0800edb4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800edb4:	b590      	push	{r4, r7, lr}
 800edb6:	b089      	sub	sp, #36	@ 0x24
 800edb8:	af00      	add	r7, sp, #0
 800edba:	60f8      	str	r0, [r7, #12]
 800edbc:	60b9      	str	r1, [r7, #8]
 800edbe:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800edc0:	2302      	movs	r3, #2
 800edc2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	f240 80d9 	bls.w	800ef7e <put_fat+0x1ca>
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	699b      	ldr	r3, [r3, #24]
 800edd0:	68ba      	ldr	r2, [r7, #8]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	f080 80d3 	bcs.w	800ef7e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	2b03      	cmp	r3, #3
 800edde:	f000 8096 	beq.w	800ef0e <put_fat+0x15a>
 800ede2:	2b03      	cmp	r3, #3
 800ede4:	f300 80cb 	bgt.w	800ef7e <put_fat+0x1ca>
 800ede8:	2b01      	cmp	r3, #1
 800edea:	d002      	beq.n	800edf2 <put_fat+0x3e>
 800edec:	2b02      	cmp	r3, #2
 800edee:	d06e      	beq.n	800eece <put_fat+0x11a>
 800edf0:	e0c5      	b.n	800ef7e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	61bb      	str	r3, [r7, #24]
 800edf6:	69bb      	ldr	r3, [r7, #24]
 800edf8:	085b      	lsrs	r3, r3, #1
 800edfa:	69ba      	ldr	r2, [r7, #24]
 800edfc:	4413      	add	r3, r2
 800edfe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee04:	69bb      	ldr	r3, [r7, #24]
 800ee06:	0a5b      	lsrs	r3, r3, #9
 800ee08:	4413      	add	r3, r2
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	68f8      	ldr	r0, [r7, #12]
 800ee0e:	f7ff fe6f 	bl	800eaf0 <move_window>
 800ee12:	4603      	mov	r3, r0
 800ee14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee16:	7ffb      	ldrb	r3, [r7, #31]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	f040 80a9 	bne.w	800ef70 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ee24:	69bb      	ldr	r3, [r7, #24]
 800ee26:	1c59      	adds	r1, r3, #1
 800ee28:	61b9      	str	r1, [r7, #24]
 800ee2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee2e:	4413      	add	r3, r2
 800ee30:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	f003 0301 	and.w	r3, r3, #1
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d00d      	beq.n	800ee58 <put_fat+0xa4>
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	b25b      	sxtb	r3, r3
 800ee42:	f003 030f 	and.w	r3, r3, #15
 800ee46:	b25a      	sxtb	r2, r3
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	b2db      	uxtb	r3, r3
 800ee4c:	011b      	lsls	r3, r3, #4
 800ee4e:	b25b      	sxtb	r3, r3
 800ee50:	4313      	orrs	r3, r2
 800ee52:	b25b      	sxtb	r3, r3
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	e001      	b.n	800ee5c <put_fat+0xa8>
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	b2db      	uxtb	r3, r3
 800ee5c:	697a      	ldr	r2, [r7, #20]
 800ee5e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2201      	movs	r2, #1
 800ee64:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee6a:	69bb      	ldr	r3, [r7, #24]
 800ee6c:	0a5b      	lsrs	r3, r3, #9
 800ee6e:	4413      	add	r3, r2
 800ee70:	4619      	mov	r1, r3
 800ee72:	68f8      	ldr	r0, [r7, #12]
 800ee74:	f7ff fe3c 	bl	800eaf0 <move_window>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee7c:	7ffb      	ldrb	r3, [r7, #31]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d178      	bne.n	800ef74 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ee88:	69bb      	ldr	r3, [r7, #24]
 800ee8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee8e:	4413      	add	r3, r2
 800ee90:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	f003 0301 	and.w	r3, r3, #1
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d003      	beq.n	800eea4 <put_fat+0xf0>
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	091b      	lsrs	r3, r3, #4
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	e00e      	b.n	800eec2 <put_fat+0x10e>
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	b25b      	sxtb	r3, r3
 800eeaa:	f023 030f 	bic.w	r3, r3, #15
 800eeae:	b25a      	sxtb	r2, r3
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	0a1b      	lsrs	r3, r3, #8
 800eeb4:	b25b      	sxtb	r3, r3
 800eeb6:	f003 030f 	and.w	r3, r3, #15
 800eeba:	b25b      	sxtb	r3, r3
 800eebc:	4313      	orrs	r3, r2
 800eebe:	b25b      	sxtb	r3, r3
 800eec0:	b2db      	uxtb	r3, r3
 800eec2:	697a      	ldr	r2, [r7, #20]
 800eec4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2201      	movs	r2, #1
 800eeca:	70da      	strb	r2, [r3, #3]
			break;
 800eecc:	e057      	b.n	800ef7e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	0a1b      	lsrs	r3, r3, #8
 800eed6:	4413      	add	r3, r2
 800eed8:	4619      	mov	r1, r3
 800eeda:	68f8      	ldr	r0, [r7, #12]
 800eedc:	f7ff fe08 	bl	800eaf0 <move_window>
 800eee0:	4603      	mov	r3, r0
 800eee2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eee4:	7ffb      	ldrb	r3, [r7, #31]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d146      	bne.n	800ef78 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	005b      	lsls	r3, r3, #1
 800eef4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800eef8:	4413      	add	r3, r2
 800eefa:	687a      	ldr	r2, [r7, #4]
 800eefc:	b292      	uxth	r2, r2
 800eefe:	4611      	mov	r1, r2
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7ff fb80 	bl	800e606 <st_word>
			fs->wflag = 1;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2201      	movs	r2, #1
 800ef0a:	70da      	strb	r2, [r3, #3]
			break;
 800ef0c:	e037      	b.n	800ef7e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	09db      	lsrs	r3, r3, #7
 800ef16:	4413      	add	r3, r2
 800ef18:	4619      	mov	r1, r3
 800ef1a:	68f8      	ldr	r0, [r7, #12]
 800ef1c:	f7ff fde8 	bl	800eaf0 <move_window>
 800ef20:	4603      	mov	r3, r0
 800ef22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ef24:	7ffb      	ldrb	r3, [r7, #31]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d128      	bne.n	800ef7c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	009b      	lsls	r3, r3, #2
 800ef3a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ef3e:	4413      	add	r3, r2
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7ff fb3d 	bl	800e5c0 <ld_dword>
 800ef46:	4603      	mov	r3, r0
 800ef48:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ef4c:	4323      	orrs	r3, r4
 800ef4e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	009b      	lsls	r3, r3, #2
 800ef5a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ef5e:	4413      	add	r3, r2
 800ef60:	6879      	ldr	r1, [r7, #4]
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7ff fb6a 	bl	800e63c <st_dword>
			fs->wflag = 1;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	2201      	movs	r2, #1
 800ef6c:	70da      	strb	r2, [r3, #3]
			break;
 800ef6e:	e006      	b.n	800ef7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ef70:	bf00      	nop
 800ef72:	e004      	b.n	800ef7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ef74:	bf00      	nop
 800ef76:	e002      	b.n	800ef7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ef78:	bf00      	nop
 800ef7a:	e000      	b.n	800ef7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ef7c:	bf00      	nop
		}
	}
	return res;
 800ef7e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3724      	adds	r7, #36	@ 0x24
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd90      	pop	{r4, r7, pc}

0800ef88 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b088      	sub	sp, #32
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	60f8      	str	r0, [r7, #12]
 800ef90:	60b9      	str	r1, [r7, #8]
 800ef92:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ef94:	2300      	movs	r3, #0
 800ef96:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	2b01      	cmp	r3, #1
 800efa2:	d904      	bls.n	800efae <remove_chain+0x26>
 800efa4:	69bb      	ldr	r3, [r7, #24]
 800efa6:	699b      	ldr	r3, [r3, #24]
 800efa8:	68ba      	ldr	r2, [r7, #8]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d301      	bcc.n	800efb2 <remove_chain+0x2a>
 800efae:	2302      	movs	r3, #2
 800efb0:	e04b      	b.n	800f04a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d00c      	beq.n	800efd2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800efb8:	f04f 32ff 	mov.w	r2, #4294967295
 800efbc:	6879      	ldr	r1, [r7, #4]
 800efbe:	69b8      	ldr	r0, [r7, #24]
 800efc0:	f7ff fef8 	bl	800edb4 <put_fat>
 800efc4:	4603      	mov	r3, r0
 800efc6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800efc8:	7ffb      	ldrb	r3, [r7, #31]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d001      	beq.n	800efd2 <remove_chain+0x4a>
 800efce:	7ffb      	ldrb	r3, [r7, #31]
 800efd0:	e03b      	b.n	800f04a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800efd2:	68b9      	ldr	r1, [r7, #8]
 800efd4:	68f8      	ldr	r0, [r7, #12]
 800efd6:	f7ff fe46 	bl	800ec66 <get_fat>
 800efda:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d031      	beq.n	800f046 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d101      	bne.n	800efec <remove_chain+0x64>
 800efe8:	2302      	movs	r3, #2
 800efea:	e02e      	b.n	800f04a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eff2:	d101      	bne.n	800eff8 <remove_chain+0x70>
 800eff4:	2301      	movs	r3, #1
 800eff6:	e028      	b.n	800f04a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800eff8:	2200      	movs	r2, #0
 800effa:	68b9      	ldr	r1, [r7, #8]
 800effc:	69b8      	ldr	r0, [r7, #24]
 800effe:	f7ff fed9 	bl	800edb4 <put_fat>
 800f002:	4603      	mov	r3, r0
 800f004:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f006:	7ffb      	ldrb	r3, [r7, #31]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d001      	beq.n	800f010 <remove_chain+0x88>
 800f00c:	7ffb      	ldrb	r3, [r7, #31]
 800f00e:	e01c      	b.n	800f04a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f010:	69bb      	ldr	r3, [r7, #24]
 800f012:	695a      	ldr	r2, [r3, #20]
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	699b      	ldr	r3, [r3, #24]
 800f018:	3b02      	subs	r3, #2
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d20b      	bcs.n	800f036 <remove_chain+0xae>
			fs->free_clst++;
 800f01e:	69bb      	ldr	r3, [r7, #24]
 800f020:	695b      	ldr	r3, [r3, #20]
 800f022:	1c5a      	adds	r2, r3, #1
 800f024:	69bb      	ldr	r3, [r7, #24]
 800f026:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f028:	69bb      	ldr	r3, [r7, #24]
 800f02a:	791b      	ldrb	r3, [r3, #4]
 800f02c:	f043 0301 	orr.w	r3, r3, #1
 800f030:	b2da      	uxtb	r2, r3
 800f032:	69bb      	ldr	r3, [r7, #24]
 800f034:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f03a:	69bb      	ldr	r3, [r7, #24]
 800f03c:	699b      	ldr	r3, [r3, #24]
 800f03e:	68ba      	ldr	r2, [r7, #8]
 800f040:	429a      	cmp	r2, r3
 800f042:	d3c6      	bcc.n	800efd2 <remove_chain+0x4a>
 800f044:	e000      	b.n	800f048 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f046:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f048:	2300      	movs	r3, #0
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	3720      	adds	r7, #32
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}

0800f052 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f052:	b580      	push	{r7, lr}
 800f054:	b088      	sub	sp, #32
 800f056:	af00      	add	r7, sp, #0
 800f058:	6078      	str	r0, [r7, #4]
 800f05a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d10d      	bne.n	800f084 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	691b      	ldr	r3, [r3, #16]
 800f06c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d004      	beq.n	800f07e <create_chain+0x2c>
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	699b      	ldr	r3, [r3, #24]
 800f078:	69ba      	ldr	r2, [r7, #24]
 800f07a:	429a      	cmp	r2, r3
 800f07c:	d31b      	bcc.n	800f0b6 <create_chain+0x64>
 800f07e:	2301      	movs	r3, #1
 800f080:	61bb      	str	r3, [r7, #24]
 800f082:	e018      	b.n	800f0b6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f084:	6839      	ldr	r1, [r7, #0]
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f7ff fded 	bl	800ec66 <get_fat>
 800f08c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	2b01      	cmp	r3, #1
 800f092:	d801      	bhi.n	800f098 <create_chain+0x46>
 800f094:	2301      	movs	r3, #1
 800f096:	e070      	b.n	800f17a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f09e:	d101      	bne.n	800f0a4 <create_chain+0x52>
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	e06a      	b.n	800f17a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	699b      	ldr	r3, [r3, #24]
 800f0a8:	68fa      	ldr	r2, [r7, #12]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d201      	bcs.n	800f0b2 <create_chain+0x60>
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	e063      	b.n	800f17a <create_chain+0x128>
		scl = clst;
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f0b6:	69bb      	ldr	r3, [r7, #24]
 800f0b8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f0ba:	69fb      	ldr	r3, [r7, #28]
 800f0bc:	3301      	adds	r3, #1
 800f0be:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	699b      	ldr	r3, [r3, #24]
 800f0c4:	69fa      	ldr	r2, [r7, #28]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d307      	bcc.n	800f0da <create_chain+0x88>
				ncl = 2;
 800f0ca:	2302      	movs	r3, #2
 800f0cc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f0ce:	69fa      	ldr	r2, [r7, #28]
 800f0d0:	69bb      	ldr	r3, [r7, #24]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d901      	bls.n	800f0da <create_chain+0x88>
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	e04f      	b.n	800f17a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f0da:	69f9      	ldr	r1, [r7, #28]
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f7ff fdc2 	bl	800ec66 <get_fat>
 800f0e2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d00e      	beq.n	800f108 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2b01      	cmp	r3, #1
 800f0ee:	d003      	beq.n	800f0f8 <create_chain+0xa6>
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0f6:	d101      	bne.n	800f0fc <create_chain+0xaa>
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	e03e      	b.n	800f17a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f0fc:	69fa      	ldr	r2, [r7, #28]
 800f0fe:	69bb      	ldr	r3, [r7, #24]
 800f100:	429a      	cmp	r2, r3
 800f102:	d1da      	bne.n	800f0ba <create_chain+0x68>
 800f104:	2300      	movs	r3, #0
 800f106:	e038      	b.n	800f17a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f108:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f10a:	f04f 32ff 	mov.w	r2, #4294967295
 800f10e:	69f9      	ldr	r1, [r7, #28]
 800f110:	6938      	ldr	r0, [r7, #16]
 800f112:	f7ff fe4f 	bl	800edb4 <put_fat>
 800f116:	4603      	mov	r3, r0
 800f118:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f11a:	7dfb      	ldrb	r3, [r7, #23]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d109      	bne.n	800f134 <create_chain+0xe2>
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d006      	beq.n	800f134 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f126:	69fa      	ldr	r2, [r7, #28]
 800f128:	6839      	ldr	r1, [r7, #0]
 800f12a:	6938      	ldr	r0, [r7, #16]
 800f12c:	f7ff fe42 	bl	800edb4 <put_fat>
 800f130:	4603      	mov	r3, r0
 800f132:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f134:	7dfb      	ldrb	r3, [r7, #23]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d116      	bne.n	800f168 <create_chain+0x116>
		fs->last_clst = ncl;
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	69fa      	ldr	r2, [r7, #28]
 800f13e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	695a      	ldr	r2, [r3, #20]
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	699b      	ldr	r3, [r3, #24]
 800f148:	3b02      	subs	r3, #2
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d804      	bhi.n	800f158 <create_chain+0x106>
 800f14e:	693b      	ldr	r3, [r7, #16]
 800f150:	695b      	ldr	r3, [r3, #20]
 800f152:	1e5a      	subs	r2, r3, #1
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f158:	693b      	ldr	r3, [r7, #16]
 800f15a:	791b      	ldrb	r3, [r3, #4]
 800f15c:	f043 0301 	orr.w	r3, r3, #1
 800f160:	b2da      	uxtb	r2, r3
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	711a      	strb	r2, [r3, #4]
 800f166:	e007      	b.n	800f178 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f168:	7dfb      	ldrb	r3, [r7, #23]
 800f16a:	2b01      	cmp	r3, #1
 800f16c:	d102      	bne.n	800f174 <create_chain+0x122>
 800f16e:	f04f 33ff 	mov.w	r3, #4294967295
 800f172:	e000      	b.n	800f176 <create_chain+0x124>
 800f174:	2301      	movs	r3, #1
 800f176:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f178:	69fb      	ldr	r3, [r7, #28]
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3720      	adds	r7, #32
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}

0800f182 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f182:	b480      	push	{r7}
 800f184:	b087      	sub	sp, #28
 800f186:	af00      	add	r7, sp, #0
 800f188:	6078      	str	r0, [r7, #4]
 800f18a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f196:	3304      	adds	r3, #4
 800f198:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	0a5b      	lsrs	r3, r3, #9
 800f19e:	68fa      	ldr	r2, [r7, #12]
 800f1a0:	8952      	ldrh	r2, [r2, #10]
 800f1a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f1a6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	1d1a      	adds	r2, r3, #4
 800f1ac:	613a      	str	r2, [r7, #16]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d101      	bne.n	800f1bc <clmt_clust+0x3a>
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	e010      	b.n	800f1de <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f1bc:	697a      	ldr	r2, [r7, #20]
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d307      	bcc.n	800f1d4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f1c4:	697a      	ldr	r2, [r7, #20]
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	1ad3      	subs	r3, r2, r3
 800f1ca:	617b      	str	r3, [r7, #20]
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	3304      	adds	r3, #4
 800f1d0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f1d2:	e7e9      	b.n	800f1a8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f1d4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	681a      	ldr	r2, [r3, #0]
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	4413      	add	r3, r2
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	371c      	adds	r7, #28
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr

0800f1ea <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f1ea:	b580      	push	{r7, lr}
 800f1ec:	b086      	sub	sp, #24
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
 800f1f2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f200:	d204      	bcs.n	800f20c <dir_sdi+0x22>
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	f003 031f 	and.w	r3, r3, #31
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d001      	beq.n	800f210 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f20c:	2302      	movs	r3, #2
 800f20e:	e063      	b.n	800f2d8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	683a      	ldr	r2, [r7, #0]
 800f214:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	689b      	ldr	r3, [r3, #8]
 800f21a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d106      	bne.n	800f230 <dir_sdi+0x46>
 800f222:	693b      	ldr	r3, [r7, #16]
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	2b02      	cmp	r3, #2
 800f228:	d902      	bls.n	800f230 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f22e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d10c      	bne.n	800f250 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	095b      	lsrs	r3, r3, #5
 800f23a:	693a      	ldr	r2, [r7, #16]
 800f23c:	8912      	ldrh	r2, [r2, #8]
 800f23e:	4293      	cmp	r3, r2
 800f240:	d301      	bcc.n	800f246 <dir_sdi+0x5c>
 800f242:	2302      	movs	r3, #2
 800f244:	e048      	b.n	800f2d8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	61da      	str	r2, [r3, #28]
 800f24e:	e029      	b.n	800f2a4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	895b      	ldrh	r3, [r3, #10]
 800f254:	025b      	lsls	r3, r3, #9
 800f256:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f258:	e019      	b.n	800f28e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6979      	ldr	r1, [r7, #20]
 800f25e:	4618      	mov	r0, r3
 800f260:	f7ff fd01 	bl	800ec66 <get_fat>
 800f264:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f26c:	d101      	bne.n	800f272 <dir_sdi+0x88>
 800f26e:	2301      	movs	r3, #1
 800f270:	e032      	b.n	800f2d8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	2b01      	cmp	r3, #1
 800f276:	d904      	bls.n	800f282 <dir_sdi+0x98>
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	699b      	ldr	r3, [r3, #24]
 800f27c:	697a      	ldr	r2, [r7, #20]
 800f27e:	429a      	cmp	r2, r3
 800f280:	d301      	bcc.n	800f286 <dir_sdi+0x9c>
 800f282:	2302      	movs	r3, #2
 800f284:	e028      	b.n	800f2d8 <dir_sdi+0xee>
			ofs -= csz;
 800f286:	683a      	ldr	r2, [r7, #0]
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	1ad3      	subs	r3, r2, r3
 800f28c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f28e:	683a      	ldr	r2, [r7, #0]
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	429a      	cmp	r2, r3
 800f294:	d2e1      	bcs.n	800f25a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f296:	6979      	ldr	r1, [r7, #20]
 800f298:	6938      	ldr	r0, [r7, #16]
 800f29a:	f7ff fcc5 	bl	800ec28 <clust2sect>
 800f29e:	4602      	mov	r2, r0
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	697a      	ldr	r2, [r7, #20]
 800f2a8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	69db      	ldr	r3, [r3, #28]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d101      	bne.n	800f2b6 <dir_sdi+0xcc>
 800f2b2:	2302      	movs	r3, #2
 800f2b4:	e010      	b.n	800f2d8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	69da      	ldr	r2, [r3, #28]
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	0a5b      	lsrs	r3, r3, #9
 800f2be:	441a      	add	r2, r3
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2d0:	441a      	add	r2, r3
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f2d6:	2300      	movs	r3, #0
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3718      	adds	r7, #24
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}

0800f2e0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b086      	sub	sp, #24
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	695b      	ldr	r3, [r3, #20]
 800f2f4:	3320      	adds	r3, #32
 800f2f6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	69db      	ldr	r3, [r3, #28]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d003      	beq.n	800f308 <dir_next+0x28>
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f306:	d301      	bcc.n	800f30c <dir_next+0x2c>
 800f308:	2304      	movs	r3, #4
 800f30a:	e0aa      	b.n	800f462 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f312:	2b00      	cmp	r3, #0
 800f314:	f040 8098 	bne.w	800f448 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	69db      	ldr	r3, [r3, #28]
 800f31c:	1c5a      	adds	r2, r3, #1
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	699b      	ldr	r3, [r3, #24]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d10b      	bne.n	800f342 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	095b      	lsrs	r3, r3, #5
 800f32e:	68fa      	ldr	r2, [r7, #12]
 800f330:	8912      	ldrh	r2, [r2, #8]
 800f332:	4293      	cmp	r3, r2
 800f334:	f0c0 8088 	bcc.w	800f448 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2200      	movs	r2, #0
 800f33c:	61da      	str	r2, [r3, #28]
 800f33e:	2304      	movs	r3, #4
 800f340:	e08f      	b.n	800f462 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	0a5b      	lsrs	r3, r3, #9
 800f346:	68fa      	ldr	r2, [r7, #12]
 800f348:	8952      	ldrh	r2, [r2, #10]
 800f34a:	3a01      	subs	r2, #1
 800f34c:	4013      	ands	r3, r2
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d17a      	bne.n	800f448 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f352:	687a      	ldr	r2, [r7, #4]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	699b      	ldr	r3, [r3, #24]
 800f358:	4619      	mov	r1, r3
 800f35a:	4610      	mov	r0, r2
 800f35c:	f7ff fc83 	bl	800ec66 <get_fat>
 800f360:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	2b01      	cmp	r3, #1
 800f366:	d801      	bhi.n	800f36c <dir_next+0x8c>
 800f368:	2302      	movs	r3, #2
 800f36a:	e07a      	b.n	800f462 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f372:	d101      	bne.n	800f378 <dir_next+0x98>
 800f374:	2301      	movs	r3, #1
 800f376:	e074      	b.n	800f462 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	699b      	ldr	r3, [r3, #24]
 800f37c:	697a      	ldr	r2, [r7, #20]
 800f37e:	429a      	cmp	r2, r3
 800f380:	d358      	bcc.n	800f434 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d104      	bne.n	800f392 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2200      	movs	r2, #0
 800f38c:	61da      	str	r2, [r3, #28]
 800f38e:	2304      	movs	r3, #4
 800f390:	e067      	b.n	800f462 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f392:	687a      	ldr	r2, [r7, #4]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	699b      	ldr	r3, [r3, #24]
 800f398:	4619      	mov	r1, r3
 800f39a:	4610      	mov	r0, r2
 800f39c:	f7ff fe59 	bl	800f052 <create_chain>
 800f3a0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d101      	bne.n	800f3ac <dir_next+0xcc>
 800f3a8:	2307      	movs	r3, #7
 800f3aa:	e05a      	b.n	800f462 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	2b01      	cmp	r3, #1
 800f3b0:	d101      	bne.n	800f3b6 <dir_next+0xd6>
 800f3b2:	2302      	movs	r3, #2
 800f3b4:	e055      	b.n	800f462 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3bc:	d101      	bne.n	800f3c2 <dir_next+0xe2>
 800f3be:	2301      	movs	r3, #1
 800f3c0:	e04f      	b.n	800f462 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f3c2:	68f8      	ldr	r0, [r7, #12]
 800f3c4:	f7ff fb50 	bl	800ea68 <sync_window>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d001      	beq.n	800f3d2 <dir_next+0xf2>
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	e047      	b.n	800f462 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	3334      	adds	r3, #52	@ 0x34
 800f3d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f3da:	2100      	movs	r1, #0
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7ff f97a 	bl	800e6d6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	613b      	str	r3, [r7, #16]
 800f3e6:	6979      	ldr	r1, [r7, #20]
 800f3e8:	68f8      	ldr	r0, [r7, #12]
 800f3ea:	f7ff fc1d 	bl	800ec28 <clust2sect>
 800f3ee:	4602      	mov	r2, r0
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	631a      	str	r2, [r3, #48]	@ 0x30
 800f3f4:	e012      	b.n	800f41c <dir_next+0x13c>
						fs->wflag = 1;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2201      	movs	r2, #1
 800f3fa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f3fc:	68f8      	ldr	r0, [r7, #12]
 800f3fe:	f7ff fb33 	bl	800ea68 <sync_window>
 800f402:	4603      	mov	r3, r0
 800f404:	2b00      	cmp	r3, #0
 800f406:	d001      	beq.n	800f40c <dir_next+0x12c>
 800f408:	2301      	movs	r3, #1
 800f40a:	e02a      	b.n	800f462 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f40c:	693b      	ldr	r3, [r7, #16]
 800f40e:	3301      	adds	r3, #1
 800f410:	613b      	str	r3, [r7, #16]
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f416:	1c5a      	adds	r2, r3, #1
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	631a      	str	r2, [r3, #48]	@ 0x30
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	895b      	ldrh	r3, [r3, #10]
 800f420:	461a      	mov	r2, r3
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	4293      	cmp	r3, r2
 800f426:	d3e6      	bcc.n	800f3f6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f42c:	693b      	ldr	r3, [r7, #16]
 800f42e:	1ad2      	subs	r2, r2, r3
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	697a      	ldr	r2, [r7, #20]
 800f438:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f43a:	6979      	ldr	r1, [r7, #20]
 800f43c:	68f8      	ldr	r0, [r7, #12]
 800f43e:	f7ff fbf3 	bl	800ec28 <clust2sect>
 800f442:	4602      	mov	r2, r0
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	68ba      	ldr	r2, [r7, #8]
 800f44c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f45a:	441a      	add	r2, r3
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f460:	2300      	movs	r3, #0
}
 800f462:	4618      	mov	r0, r3
 800f464:	3718      	adds	r7, #24
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}

0800f46a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f46a:	b580      	push	{r7, lr}
 800f46c:	b086      	sub	sp, #24
 800f46e:	af00      	add	r7, sp, #0
 800f470:	6078      	str	r0, [r7, #4]
 800f472:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f47a:	2100      	movs	r1, #0
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f7ff feb4 	bl	800f1ea <dir_sdi>
 800f482:	4603      	mov	r3, r0
 800f484:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f486:	7dfb      	ldrb	r3, [r7, #23]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d12b      	bne.n	800f4e4 <dir_alloc+0x7a>
		n = 0;
 800f48c:	2300      	movs	r3, #0
 800f48e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	69db      	ldr	r3, [r3, #28]
 800f494:	4619      	mov	r1, r3
 800f496:	68f8      	ldr	r0, [r7, #12]
 800f498:	f7ff fb2a 	bl	800eaf0 <move_window>
 800f49c:	4603      	mov	r3, r0
 800f49e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f4a0:	7dfb      	ldrb	r3, [r7, #23]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d11d      	bne.n	800f4e2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6a1b      	ldr	r3, [r3, #32]
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	2be5      	cmp	r3, #229	@ 0xe5
 800f4ae:	d004      	beq.n	800f4ba <dir_alloc+0x50>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6a1b      	ldr	r3, [r3, #32]
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d107      	bne.n	800f4ca <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	3301      	adds	r3, #1
 800f4be:	613b      	str	r3, [r7, #16]
 800f4c0:	693a      	ldr	r2, [r7, #16]
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d102      	bne.n	800f4ce <dir_alloc+0x64>
 800f4c8:	e00c      	b.n	800f4e4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f4ce:	2101      	movs	r1, #1
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f7ff ff05 	bl	800f2e0 <dir_next>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f4da:	7dfb      	ldrb	r3, [r7, #23]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d0d7      	beq.n	800f490 <dir_alloc+0x26>
 800f4e0:	e000      	b.n	800f4e4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f4e2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f4e4:	7dfb      	ldrb	r3, [r7, #23]
 800f4e6:	2b04      	cmp	r3, #4
 800f4e8:	d101      	bne.n	800f4ee <dir_alloc+0x84>
 800f4ea:	2307      	movs	r3, #7
 800f4ec:	75fb      	strb	r3, [r7, #23]
	return res;
 800f4ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3718      	adds	r7, #24
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}

0800f4f8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b084      	sub	sp, #16
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	331a      	adds	r3, #26
 800f506:	4618      	mov	r0, r3
 800f508:	f7ff f842 	bl	800e590 <ld_word>
 800f50c:	4603      	mov	r3, r0
 800f50e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	2b03      	cmp	r3, #3
 800f516:	d109      	bne.n	800f52c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	3314      	adds	r3, #20
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7ff f837 	bl	800e590 <ld_word>
 800f522:	4603      	mov	r3, r0
 800f524:	041b      	lsls	r3, r3, #16
 800f526:	68fa      	ldr	r2, [r7, #12]
 800f528:	4313      	orrs	r3, r2
 800f52a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f52c:	68fb      	ldr	r3, [r7, #12]
}
 800f52e:	4618      	mov	r0, r3
 800f530:	3710      	adds	r7, #16
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}

0800f536 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f536:	b580      	push	{r7, lr}
 800f538:	b084      	sub	sp, #16
 800f53a:	af00      	add	r7, sp, #0
 800f53c:	60f8      	str	r0, [r7, #12]
 800f53e:	60b9      	str	r1, [r7, #8]
 800f540:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	331a      	adds	r3, #26
 800f546:	687a      	ldr	r2, [r7, #4]
 800f548:	b292      	uxth	r2, r2
 800f54a:	4611      	mov	r1, r2
 800f54c:	4618      	mov	r0, r3
 800f54e:	f7ff f85a 	bl	800e606 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	2b03      	cmp	r3, #3
 800f558:	d109      	bne.n	800f56e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	f103 0214 	add.w	r2, r3, #20
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	0c1b      	lsrs	r3, r3, #16
 800f564:	b29b      	uxth	r3, r3
 800f566:	4619      	mov	r1, r3
 800f568:	4610      	mov	r0, r2
 800f56a:	f7ff f84c 	bl	800e606 <st_word>
	}
}
 800f56e:	bf00      	nop
 800f570:	3710      	adds	r7, #16
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
	...

0800f578 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800f578:	b590      	push	{r4, r7, lr}
 800f57a:	b087      	sub	sp, #28
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	331a      	adds	r3, #26
 800f586:	4618      	mov	r0, r3
 800f588:	f7ff f802 	bl	800e590 <ld_word>
 800f58c:	4603      	mov	r3, r0
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d001      	beq.n	800f596 <cmp_lfn+0x1e>
 800f592:	2300      	movs	r3, #0
 800f594:	e059      	b.n	800f64a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f59e:	1e5a      	subs	r2, r3, #1
 800f5a0:	4613      	mov	r3, r2
 800f5a2:	005b      	lsls	r3, r3, #1
 800f5a4:	4413      	add	r3, r2
 800f5a6:	009b      	lsls	r3, r3, #2
 800f5a8:	4413      	add	r3, r2
 800f5aa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	81fb      	strh	r3, [r7, #14]
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	613b      	str	r3, [r7, #16]
 800f5b4:	e033      	b.n	800f61e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f5b6:	4a27      	ldr	r2, [pc, #156]	@ (800f654 <cmp_lfn+0xdc>)
 800f5b8:	693b      	ldr	r3, [r7, #16]
 800f5ba:	4413      	add	r3, r2
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	461a      	mov	r2, r3
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	4413      	add	r3, r2
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f7fe ffe3 	bl	800e590 <ld_word>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f5ce:	89fb      	ldrh	r3, [r7, #14]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d01a      	beq.n	800f60a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	2bfe      	cmp	r3, #254	@ 0xfe
 800f5d8:	d812      	bhi.n	800f600 <cmp_lfn+0x88>
 800f5da:	89bb      	ldrh	r3, [r7, #12]
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f002 f99b 	bl	8011918 <ff_wtoupper>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	461c      	mov	r4, r3
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	1c5a      	adds	r2, r3, #1
 800f5ea:	617a      	str	r2, [r7, #20]
 800f5ec:	005b      	lsls	r3, r3, #1
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	4413      	add	r3, r2
 800f5f2:	881b      	ldrh	r3, [r3, #0]
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f002 f98f 	bl	8011918 <ff_wtoupper>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	429c      	cmp	r4, r3
 800f5fe:	d001      	beq.n	800f604 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800f600:	2300      	movs	r3, #0
 800f602:	e022      	b.n	800f64a <cmp_lfn+0xd2>
			}
			wc = uc;
 800f604:	89bb      	ldrh	r3, [r7, #12]
 800f606:	81fb      	strh	r3, [r7, #14]
 800f608:	e006      	b.n	800f618 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f60a:	89bb      	ldrh	r3, [r7, #12]
 800f60c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f610:	4293      	cmp	r3, r2
 800f612:	d001      	beq.n	800f618 <cmp_lfn+0xa0>
 800f614:	2300      	movs	r3, #0
 800f616:	e018      	b.n	800f64a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	3301      	adds	r3, #1
 800f61c:	613b      	str	r3, [r7, #16]
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	2b0c      	cmp	r3, #12
 800f622:	d9c8      	bls.n	800f5b6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d00b      	beq.n	800f648 <cmp_lfn+0xd0>
 800f630:	89fb      	ldrh	r3, [r7, #14]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d008      	beq.n	800f648 <cmp_lfn+0xd0>
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	005b      	lsls	r3, r3, #1
 800f63a:	687a      	ldr	r2, [r7, #4]
 800f63c:	4413      	add	r3, r2
 800f63e:	881b      	ldrh	r3, [r3, #0]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d001      	beq.n	800f648 <cmp_lfn+0xd0>
 800f644:	2300      	movs	r3, #0
 800f646:	e000      	b.n	800f64a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800f648:	2301      	movs	r3, #1
}
 800f64a:	4618      	mov	r0, r3
 800f64c:	371c      	adds	r7, #28
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd90      	pop	{r4, r7, pc}
 800f652:	bf00      	nop
 800f654:	080176c4 	.word	0x080176c4

0800f658 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b086      	sub	sp, #24
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	331a      	adds	r3, #26
 800f666:	4618      	mov	r0, r3
 800f668:	f7fe ff92 	bl	800e590 <ld_word>
 800f66c:	4603      	mov	r3, r0
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d001      	beq.n	800f676 <pick_lfn+0x1e>
 800f672:	2300      	movs	r3, #0
 800f674:	e04d      	b.n	800f712 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	781b      	ldrb	r3, [r3, #0]
 800f67a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f67e:	1e5a      	subs	r2, r3, #1
 800f680:	4613      	mov	r3, r2
 800f682:	005b      	lsls	r3, r3, #1
 800f684:	4413      	add	r3, r2
 800f686:	009b      	lsls	r3, r3, #2
 800f688:	4413      	add	r3, r2
 800f68a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f68c:	2301      	movs	r3, #1
 800f68e:	81fb      	strh	r3, [r7, #14]
 800f690:	2300      	movs	r3, #0
 800f692:	613b      	str	r3, [r7, #16]
 800f694:	e028      	b.n	800f6e8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f696:	4a21      	ldr	r2, [pc, #132]	@ (800f71c <pick_lfn+0xc4>)
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	4413      	add	r3, r2
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	461a      	mov	r2, r3
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	4413      	add	r3, r2
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f7fe ff73 	bl	800e590 <ld_word>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f6ae:	89fb      	ldrh	r3, [r7, #14]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d00f      	beq.n	800f6d4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	2bfe      	cmp	r3, #254	@ 0xfe
 800f6b8:	d901      	bls.n	800f6be <pick_lfn+0x66>
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	e029      	b.n	800f712 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f6be:	89bb      	ldrh	r3, [r7, #12]
 800f6c0:	81fb      	strh	r3, [r7, #14]
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	1c5a      	adds	r2, r3, #1
 800f6c6:	617a      	str	r2, [r7, #20]
 800f6c8:	005b      	lsls	r3, r3, #1
 800f6ca:	687a      	ldr	r2, [r7, #4]
 800f6cc:	4413      	add	r3, r2
 800f6ce:	89fa      	ldrh	r2, [r7, #14]
 800f6d0:	801a      	strh	r2, [r3, #0]
 800f6d2:	e006      	b.n	800f6e2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f6d4:	89bb      	ldrh	r3, [r7, #12]
 800f6d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d001      	beq.n	800f6e2 <pick_lfn+0x8a>
 800f6de:	2300      	movs	r3, #0
 800f6e0:	e017      	b.n	800f712 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	613b      	str	r3, [r7, #16]
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	2b0c      	cmp	r3, #12
 800f6ec:	d9d3      	bls.n	800f696 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	781b      	ldrb	r3, [r3, #0]
 800f6f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d00a      	beq.n	800f710 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	2bfe      	cmp	r3, #254	@ 0xfe
 800f6fe:	d901      	bls.n	800f704 <pick_lfn+0xac>
 800f700:	2300      	movs	r3, #0
 800f702:	e006      	b.n	800f712 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	005b      	lsls	r3, r3, #1
 800f708:	687a      	ldr	r2, [r7, #4]
 800f70a:	4413      	add	r3, r2
 800f70c:	2200      	movs	r2, #0
 800f70e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800f710:	2301      	movs	r3, #1
}
 800f712:	4618      	mov	r0, r3
 800f714:	3718      	adds	r7, #24
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}
 800f71a:	bf00      	nop
 800f71c:	080176c4 	.word	0x080176c4

0800f720 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b088      	sub	sp, #32
 800f724:	af00      	add	r7, sp, #0
 800f726:	60f8      	str	r0, [r7, #12]
 800f728:	60b9      	str	r1, [r7, #8]
 800f72a:	4611      	mov	r1, r2
 800f72c:	461a      	mov	r2, r3
 800f72e:	460b      	mov	r3, r1
 800f730:	71fb      	strb	r3, [r7, #7]
 800f732:	4613      	mov	r3, r2
 800f734:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	330d      	adds	r3, #13
 800f73a:	79ba      	ldrb	r2, [r7, #6]
 800f73c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	330b      	adds	r3, #11
 800f742:	220f      	movs	r2, #15
 800f744:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	330c      	adds	r3, #12
 800f74a:	2200      	movs	r2, #0
 800f74c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	331a      	adds	r3, #26
 800f752:	2100      	movs	r1, #0
 800f754:	4618      	mov	r0, r3
 800f756:	f7fe ff56 	bl	800e606 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f75a:	79fb      	ldrb	r3, [r7, #7]
 800f75c:	1e5a      	subs	r2, r3, #1
 800f75e:	4613      	mov	r3, r2
 800f760:	005b      	lsls	r3, r3, #1
 800f762:	4413      	add	r3, r2
 800f764:	009b      	lsls	r3, r3, #2
 800f766:	4413      	add	r3, r2
 800f768:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f76a:	2300      	movs	r3, #0
 800f76c:	82fb      	strh	r3, [r7, #22]
 800f76e:	2300      	movs	r3, #0
 800f770:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f772:	8afb      	ldrh	r3, [r7, #22]
 800f774:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f778:	4293      	cmp	r3, r2
 800f77a:	d007      	beq.n	800f78c <put_lfn+0x6c>
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	1c5a      	adds	r2, r3, #1
 800f780:	61fa      	str	r2, [r7, #28]
 800f782:	005b      	lsls	r3, r3, #1
 800f784:	68fa      	ldr	r2, [r7, #12]
 800f786:	4413      	add	r3, r2
 800f788:	881b      	ldrh	r3, [r3, #0]
 800f78a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f78c:	4a17      	ldr	r2, [pc, #92]	@ (800f7ec <put_lfn+0xcc>)
 800f78e:	69bb      	ldr	r3, [r7, #24]
 800f790:	4413      	add	r3, r2
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	461a      	mov	r2, r3
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	4413      	add	r3, r2
 800f79a:	8afa      	ldrh	r2, [r7, #22]
 800f79c:	4611      	mov	r1, r2
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7fe ff31 	bl	800e606 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f7a4:	8afb      	ldrh	r3, [r7, #22]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d102      	bne.n	800f7b0 <put_lfn+0x90>
 800f7aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f7ae:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f7b0:	69bb      	ldr	r3, [r7, #24]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	61bb      	str	r3, [r7, #24]
 800f7b6:	69bb      	ldr	r3, [r7, #24]
 800f7b8:	2b0c      	cmp	r3, #12
 800f7ba:	d9da      	bls.n	800f772 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f7bc:	8afb      	ldrh	r3, [r7, #22]
 800f7be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d006      	beq.n	800f7d4 <put_lfn+0xb4>
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	005b      	lsls	r3, r3, #1
 800f7ca:	68fa      	ldr	r2, [r7, #12]
 800f7cc:	4413      	add	r3, r2
 800f7ce:	881b      	ldrh	r3, [r3, #0]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d103      	bne.n	800f7dc <put_lfn+0xbc>
 800f7d4:	79fb      	ldrb	r3, [r7, #7]
 800f7d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7da:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	79fa      	ldrb	r2, [r7, #7]
 800f7e0:	701a      	strb	r2, [r3, #0]
}
 800f7e2:	bf00      	nop
 800f7e4:	3720      	adds	r7, #32
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	080176c4 	.word	0x080176c4

0800f7f0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b08c      	sub	sp, #48	@ 0x30
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	60f8      	str	r0, [r7, #12]
 800f7f8:	60b9      	str	r1, [r7, #8]
 800f7fa:	607a      	str	r2, [r7, #4]
 800f7fc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f7fe:	220b      	movs	r2, #11
 800f800:	68b9      	ldr	r1, [r7, #8]
 800f802:	68f8      	ldr	r0, [r7, #12]
 800f804:	f7fe ff46 	bl	800e694 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	2b05      	cmp	r3, #5
 800f80c:	d92b      	bls.n	800f866 <gen_numname+0x76>
		sr = seq;
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f812:	e022      	b.n	800f85a <gen_numname+0x6a>
			wc = *lfn++;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	1c9a      	adds	r2, r3, #2
 800f818:	607a      	str	r2, [r7, #4]
 800f81a:	881b      	ldrh	r3, [r3, #0]
 800f81c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800f81e:	2300      	movs	r3, #0
 800f820:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f822:	e017      	b.n	800f854 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f824:	69fb      	ldr	r3, [r7, #28]
 800f826:	005a      	lsls	r2, r3, #1
 800f828:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f82a:	f003 0301 	and.w	r3, r3, #1
 800f82e:	4413      	add	r3, r2
 800f830:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f832:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f834:	085b      	lsrs	r3, r3, #1
 800f836:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f838:	69fb      	ldr	r3, [r7, #28]
 800f83a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d005      	beq.n	800f84e <gen_numname+0x5e>
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800f848:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800f84c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f850:	3301      	adds	r3, #1
 800f852:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f856:	2b0f      	cmp	r3, #15
 800f858:	d9e4      	bls.n	800f824 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	881b      	ldrh	r3, [r3, #0]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d1d8      	bne.n	800f814 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f862:	69fb      	ldr	r3, [r7, #28]
 800f864:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f866:	2307      	movs	r3, #7
 800f868:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	b2db      	uxtb	r3, r3
 800f86e:	f003 030f 	and.w	r3, r3, #15
 800f872:	b2db      	uxtb	r3, r3
 800f874:	3330      	adds	r3, #48	@ 0x30
 800f876:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800f87a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f87e:	2b39      	cmp	r3, #57	@ 0x39
 800f880:	d904      	bls.n	800f88c <gen_numname+0x9c>
 800f882:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f886:	3307      	adds	r3, #7
 800f888:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800f88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f88e:	1e5a      	subs	r2, r3, #1
 800f890:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f892:	3330      	adds	r3, #48	@ 0x30
 800f894:	443b      	add	r3, r7
 800f896:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800f89a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	091b      	lsrs	r3, r3, #4
 800f8a2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d1df      	bne.n	800f86a <gen_numname+0x7a>
	ns[i] = '~';
 800f8aa:	f107 0214 	add.w	r2, r7, #20
 800f8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8b0:	4413      	add	r3, r2
 800f8b2:	227e      	movs	r2, #126	@ 0x7e
 800f8b4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800f8ba:	e002      	b.n	800f8c2 <gen_numname+0xd2>
 800f8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8be:	3301      	adds	r3, #1
 800f8c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800f8c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d205      	bcs.n	800f8d6 <gen_numname+0xe6>
 800f8ca:	68fa      	ldr	r2, [r7, #12]
 800f8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8ce:	4413      	add	r3, r2
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	2b20      	cmp	r3, #32
 800f8d4:	d1f2      	bne.n	800f8bc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f8d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8d8:	2b07      	cmp	r3, #7
 800f8da:	d807      	bhi.n	800f8ec <gen_numname+0xfc>
 800f8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8de:	1c5a      	adds	r2, r3, #1
 800f8e0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f8e2:	3330      	adds	r3, #48	@ 0x30
 800f8e4:	443b      	add	r3, r7
 800f8e6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f8ea:	e000      	b.n	800f8ee <gen_numname+0xfe>
 800f8ec:	2120      	movs	r1, #32
 800f8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f0:	1c5a      	adds	r2, r3, #1
 800f8f2:	627a      	str	r2, [r7, #36]	@ 0x24
 800f8f4:	68fa      	ldr	r2, [r7, #12]
 800f8f6:	4413      	add	r3, r2
 800f8f8:	460a      	mov	r2, r1
 800f8fa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8fe:	2b07      	cmp	r3, #7
 800f900:	d9e9      	bls.n	800f8d6 <gen_numname+0xe6>
}
 800f902:	bf00      	nop
 800f904:	bf00      	nop
 800f906:	3730      	adds	r7, #48	@ 0x30
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}

0800f90c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b085      	sub	sp, #20
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f914:	2300      	movs	r3, #0
 800f916:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f918:	230b      	movs	r3, #11
 800f91a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f91c:	7bfb      	ldrb	r3, [r7, #15]
 800f91e:	b2da      	uxtb	r2, r3
 800f920:	0852      	lsrs	r2, r2, #1
 800f922:	01db      	lsls	r3, r3, #7
 800f924:	4313      	orrs	r3, r2
 800f926:	b2da      	uxtb	r2, r3
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	1c59      	adds	r1, r3, #1
 800f92c:	6079      	str	r1, [r7, #4]
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	4413      	add	r3, r2
 800f932:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	3b01      	subs	r3, #1
 800f938:	60bb      	str	r3, [r7, #8]
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d1ed      	bne.n	800f91c <sum_sfn+0x10>
	return sum;
 800f940:	7bfb      	ldrb	r3, [r7, #15]
}
 800f942:	4618      	mov	r0, r3
 800f944:	3714      	adds	r7, #20
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr

0800f94e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f94e:	b580      	push	{r7, lr}
 800f950:	b086      	sub	sp, #24
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
 800f956:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f958:	2304      	movs	r3, #4
 800f95a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800f962:	23ff      	movs	r3, #255	@ 0xff
 800f964:	757b      	strb	r3, [r7, #21]
 800f966:	23ff      	movs	r3, #255	@ 0xff
 800f968:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800f96a:	e081      	b.n	800fa70 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	69db      	ldr	r3, [r3, #28]
 800f970:	4619      	mov	r1, r3
 800f972:	6938      	ldr	r0, [r7, #16]
 800f974:	f7ff f8bc 	bl	800eaf0 <move_window>
 800f978:	4603      	mov	r3, r0
 800f97a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f97c:	7dfb      	ldrb	r3, [r7, #23]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d17c      	bne.n	800fa7c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6a1b      	ldr	r3, [r3, #32]
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800f98a:	7dbb      	ldrb	r3, [r7, #22]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d102      	bne.n	800f996 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f990:	2304      	movs	r3, #4
 800f992:	75fb      	strb	r3, [r7, #23]
 800f994:	e077      	b.n	800fa86 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6a1b      	ldr	r3, [r3, #32]
 800f99a:	330b      	adds	r3, #11
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f9a2:	73fb      	strb	r3, [r7, #15]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	7bfa      	ldrb	r2, [r7, #15]
 800f9a8:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f9aa:	7dbb      	ldrb	r3, [r7, #22]
 800f9ac:	2be5      	cmp	r3, #229	@ 0xe5
 800f9ae:	d00e      	beq.n	800f9ce <dir_read+0x80>
 800f9b0:	7dbb      	ldrb	r3, [r7, #22]
 800f9b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9b4:	d00b      	beq.n	800f9ce <dir_read+0x80>
 800f9b6:	7bfb      	ldrb	r3, [r7, #15]
 800f9b8:	f023 0320 	bic.w	r3, r3, #32
 800f9bc:	2b08      	cmp	r3, #8
 800f9be:	bf0c      	ite	eq
 800f9c0:	2301      	moveq	r3, #1
 800f9c2:	2300      	movne	r3, #0
 800f9c4:	b2db      	uxtb	r3, r3
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	d002      	beq.n	800f9d4 <dir_read+0x86>
				ord = 0xFF;
 800f9ce:	23ff      	movs	r3, #255	@ 0xff
 800f9d0:	757b      	strb	r3, [r7, #21]
 800f9d2:	e044      	b.n	800fa5e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f9d4:	7bfb      	ldrb	r3, [r7, #15]
 800f9d6:	2b0f      	cmp	r3, #15
 800f9d8:	d12f      	bne.n	800fa3a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f9da:	7dbb      	ldrb	r3, [r7, #22]
 800f9dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d00d      	beq.n	800fa00 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6a1b      	ldr	r3, [r3, #32]
 800f9e8:	7b5b      	ldrb	r3, [r3, #13]
 800f9ea:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800f9ec:	7dbb      	ldrb	r3, [r7, #22]
 800f9ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f9f2:	75bb      	strb	r3, [r7, #22]
 800f9f4:	7dbb      	ldrb	r3, [r7, #22]
 800f9f6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	695a      	ldr	r2, [r3, #20]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800fa00:	7dba      	ldrb	r2, [r7, #22]
 800fa02:	7d7b      	ldrb	r3, [r7, #21]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d115      	bne.n	800fa34 <dir_read+0xe6>
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6a1b      	ldr	r3, [r3, #32]
 800fa0c:	330d      	adds	r3, #13
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	7d3a      	ldrb	r2, [r7, #20]
 800fa12:	429a      	cmp	r2, r3
 800fa14:	d10e      	bne.n	800fa34 <dir_read+0xe6>
 800fa16:	693b      	ldr	r3, [r7, #16]
 800fa18:	68da      	ldr	r2, [r3, #12]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6a1b      	ldr	r3, [r3, #32]
 800fa1e:	4619      	mov	r1, r3
 800fa20:	4610      	mov	r0, r2
 800fa22:	f7ff fe19 	bl	800f658 <pick_lfn>
 800fa26:	4603      	mov	r3, r0
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d003      	beq.n	800fa34 <dir_read+0xe6>
 800fa2c:	7d7b      	ldrb	r3, [r7, #21]
 800fa2e:	3b01      	subs	r3, #1
 800fa30:	b2db      	uxtb	r3, r3
 800fa32:	e000      	b.n	800fa36 <dir_read+0xe8>
 800fa34:	23ff      	movs	r3, #255	@ 0xff
 800fa36:	757b      	strb	r3, [r7, #21]
 800fa38:	e011      	b.n	800fa5e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800fa3a:	7d7b      	ldrb	r3, [r7, #21]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d109      	bne.n	800fa54 <dir_read+0x106>
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6a1b      	ldr	r3, [r3, #32]
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7ff ff61 	bl	800f90c <sum_sfn>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	7d3b      	ldrb	r3, [r7, #20]
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d015      	beq.n	800fa80 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f04f 32ff 	mov.w	r2, #4294967295
 800fa5a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800fa5c:	e010      	b.n	800fa80 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800fa5e:	2100      	movs	r1, #0
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f7ff fc3d 	bl	800f2e0 <dir_next>
 800fa66:	4603      	mov	r3, r0
 800fa68:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fa6a:	7dfb      	ldrb	r3, [r7, #23]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d109      	bne.n	800fa84 <dir_read+0x136>
	while (dp->sect) {
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	69db      	ldr	r3, [r3, #28]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	f47f af79 	bne.w	800f96c <dir_read+0x1e>
 800fa7a:	e004      	b.n	800fa86 <dir_read+0x138>
		if (res != FR_OK) break;
 800fa7c:	bf00      	nop
 800fa7e:	e002      	b.n	800fa86 <dir_read+0x138>
					break;
 800fa80:	bf00      	nop
 800fa82:	e000      	b.n	800fa86 <dir_read+0x138>
		if (res != FR_OK) break;
 800fa84:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800fa86:	7dfb      	ldrb	r3, [r7, #23]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d002      	beq.n	800fa92 <dir_read+0x144>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	61da      	str	r2, [r3, #28]
	return res;
 800fa92:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3718      	adds	r7, #24
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b086      	sub	sp, #24
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800faaa:	2100      	movs	r1, #0
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f7ff fb9c 	bl	800f1ea <dir_sdi>
 800fab2:	4603      	mov	r3, r0
 800fab4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fab6:	7dfb      	ldrb	r3, [r7, #23]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d001      	beq.n	800fac0 <dir_find+0x24>
 800fabc:	7dfb      	ldrb	r3, [r7, #23]
 800fabe:	e0a9      	b.n	800fc14 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fac0:	23ff      	movs	r3, #255	@ 0xff
 800fac2:	753b      	strb	r3, [r7, #20]
 800fac4:	7d3b      	ldrb	r3, [r7, #20]
 800fac6:	757b      	strb	r3, [r7, #21]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f04f 32ff 	mov.w	r2, #4294967295
 800face:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	69db      	ldr	r3, [r3, #28]
 800fad4:	4619      	mov	r1, r3
 800fad6:	6938      	ldr	r0, [r7, #16]
 800fad8:	f7ff f80a 	bl	800eaf0 <move_window>
 800fadc:	4603      	mov	r3, r0
 800fade:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fae0:	7dfb      	ldrb	r3, [r7, #23]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	f040 8090 	bne.w	800fc08 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6a1b      	ldr	r3, [r3, #32]
 800faec:	781b      	ldrb	r3, [r3, #0]
 800faee:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800faf0:	7dbb      	ldrb	r3, [r7, #22]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d102      	bne.n	800fafc <dir_find+0x60>
 800faf6:	2304      	movs	r3, #4
 800faf8:	75fb      	strb	r3, [r7, #23]
 800fafa:	e08a      	b.n	800fc12 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	6a1b      	ldr	r3, [r3, #32]
 800fb00:	330b      	adds	r3, #11
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fb08:	73fb      	strb	r3, [r7, #15]
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	7bfa      	ldrb	r2, [r7, #15]
 800fb0e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800fb10:	7dbb      	ldrb	r3, [r7, #22]
 800fb12:	2be5      	cmp	r3, #229	@ 0xe5
 800fb14:	d007      	beq.n	800fb26 <dir_find+0x8a>
 800fb16:	7bfb      	ldrb	r3, [r7, #15]
 800fb18:	f003 0308 	and.w	r3, r3, #8
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d009      	beq.n	800fb34 <dir_find+0x98>
 800fb20:	7bfb      	ldrb	r3, [r7, #15]
 800fb22:	2b0f      	cmp	r3, #15
 800fb24:	d006      	beq.n	800fb34 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fb26:	23ff      	movs	r3, #255	@ 0xff
 800fb28:	757b      	strb	r3, [r7, #21]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f04f 32ff 	mov.w	r2, #4294967295
 800fb30:	631a      	str	r2, [r3, #48]	@ 0x30
 800fb32:	e05e      	b.n	800fbf2 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800fb34:	7bfb      	ldrb	r3, [r7, #15]
 800fb36:	2b0f      	cmp	r3, #15
 800fb38:	d136      	bne.n	800fba8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800fb40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d154      	bne.n	800fbf2 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800fb48:	7dbb      	ldrb	r3, [r7, #22]
 800fb4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d00d      	beq.n	800fb6e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6a1b      	ldr	r3, [r3, #32]
 800fb56:	7b5b      	ldrb	r3, [r3, #13]
 800fb58:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800fb5a:	7dbb      	ldrb	r3, [r7, #22]
 800fb5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb60:	75bb      	strb	r3, [r7, #22]
 800fb62:	7dbb      	ldrb	r3, [r7, #22]
 800fb64:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	695a      	ldr	r2, [r3, #20]
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800fb6e:	7dba      	ldrb	r2, [r7, #22]
 800fb70:	7d7b      	ldrb	r3, [r7, #21]
 800fb72:	429a      	cmp	r2, r3
 800fb74:	d115      	bne.n	800fba2 <dir_find+0x106>
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6a1b      	ldr	r3, [r3, #32]
 800fb7a:	330d      	adds	r3, #13
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	7d3a      	ldrb	r2, [r7, #20]
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d10e      	bne.n	800fba2 <dir_find+0x106>
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	68da      	ldr	r2, [r3, #12]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	6a1b      	ldr	r3, [r3, #32]
 800fb8c:	4619      	mov	r1, r3
 800fb8e:	4610      	mov	r0, r2
 800fb90:	f7ff fcf2 	bl	800f578 <cmp_lfn>
 800fb94:	4603      	mov	r3, r0
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d003      	beq.n	800fba2 <dir_find+0x106>
 800fb9a:	7d7b      	ldrb	r3, [r7, #21]
 800fb9c:	3b01      	subs	r3, #1
 800fb9e:	b2db      	uxtb	r3, r3
 800fba0:	e000      	b.n	800fba4 <dir_find+0x108>
 800fba2:	23ff      	movs	r3, #255	@ 0xff
 800fba4:	757b      	strb	r3, [r7, #21]
 800fba6:	e024      	b.n	800fbf2 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fba8:	7d7b      	ldrb	r3, [r7, #21]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d109      	bne.n	800fbc2 <dir_find+0x126>
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6a1b      	ldr	r3, [r3, #32]
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7ff feaa 	bl	800f90c <sum_sfn>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	461a      	mov	r2, r3
 800fbbc:	7d3b      	ldrb	r3, [r7, #20]
 800fbbe:	4293      	cmp	r3, r2
 800fbc0:	d024      	beq.n	800fc0c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800fbc8:	f003 0301 	and.w	r3, r3, #1
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d10a      	bne.n	800fbe6 <dir_find+0x14a>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6a18      	ldr	r0, [r3, #32]
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	3324      	adds	r3, #36	@ 0x24
 800fbd8:	220b      	movs	r2, #11
 800fbda:	4619      	mov	r1, r3
 800fbdc:	f7fe fd96 	bl	800e70c <mem_cmp>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d014      	beq.n	800fc10 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fbe6:	23ff      	movs	r3, #255	@ 0xff
 800fbe8:	757b      	strb	r3, [r7, #21]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f04f 32ff 	mov.w	r2, #4294967295
 800fbf0:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fbf2:	2100      	movs	r1, #0
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f7ff fb73 	bl	800f2e0 <dir_next>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fbfe:	7dfb      	ldrb	r3, [r7, #23]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	f43f af65 	beq.w	800fad0 <dir_find+0x34>
 800fc06:	e004      	b.n	800fc12 <dir_find+0x176>
		if (res != FR_OK) break;
 800fc08:	bf00      	nop
 800fc0a:	e002      	b.n	800fc12 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fc0c:	bf00      	nop
 800fc0e:	e000      	b.n	800fc12 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800fc10:	bf00      	nop

	return res;
 800fc12:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3718      	adds	r7, #24
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}

0800fc1c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b08c      	sub	sp, #48	@ 0x30
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800fc30:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d001      	beq.n	800fc3c <dir_register+0x20>
 800fc38:	2306      	movs	r3, #6
 800fc3a:	e0e0      	b.n	800fdfe <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800fc40:	e002      	b.n	800fc48 <dir_register+0x2c>
 800fc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc44:	3301      	adds	r3, #1
 800fc46:	627b      	str	r3, [r7, #36]	@ 0x24
 800fc48:	69fb      	ldr	r3, [r7, #28]
 800fc4a:	68da      	ldr	r2, [r3, #12]
 800fc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc4e:	005b      	lsls	r3, r3, #1
 800fc50:	4413      	add	r3, r2
 800fc52:	881b      	ldrh	r3, [r3, #0]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d1f4      	bne.n	800fc42 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800fc5e:	f107 030c 	add.w	r3, r7, #12
 800fc62:	220c      	movs	r2, #12
 800fc64:	4618      	mov	r0, r3
 800fc66:	f7fe fd15 	bl	800e694 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800fc6a:	7dfb      	ldrb	r3, [r7, #23]
 800fc6c:	f003 0301 	and.w	r3, r3, #1
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d032      	beq.n	800fcda <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2240      	movs	r2, #64	@ 0x40
 800fc78:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fc80:	e016      	b.n	800fcb0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	68da      	ldr	r2, [r3, #12]
 800fc8c:	f107 010c 	add.w	r1, r7, #12
 800fc90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc92:	f7ff fdad 	bl	800f7f0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f7ff ff00 	bl	800fa9c <dir_find>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800fca2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d106      	bne.n	800fcb8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800fcaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcac:	3301      	adds	r3, #1
 800fcae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fcb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcb2:	2b63      	cmp	r3, #99	@ 0x63
 800fcb4:	d9e5      	bls.n	800fc82 <dir_register+0x66>
 800fcb6:	e000      	b.n	800fcba <dir_register+0x9e>
			if (res != FR_OK) break;
 800fcb8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800fcba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcbc:	2b64      	cmp	r3, #100	@ 0x64
 800fcbe:	d101      	bne.n	800fcc4 <dir_register+0xa8>
 800fcc0:	2307      	movs	r3, #7
 800fcc2:	e09c      	b.n	800fdfe <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800fcc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fcc8:	2b04      	cmp	r3, #4
 800fcca:	d002      	beq.n	800fcd2 <dir_register+0xb6>
 800fccc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fcd0:	e095      	b.n	800fdfe <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800fcd2:	7dfa      	ldrb	r2, [r7, #23]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800fcda:	7dfb      	ldrb	r3, [r7, #23]
 800fcdc:	f003 0302 	and.w	r3, r3, #2
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d007      	beq.n	800fcf4 <dir_register+0xd8>
 800fce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fce6:	330c      	adds	r3, #12
 800fce8:	4a47      	ldr	r2, [pc, #284]	@ (800fe08 <dir_register+0x1ec>)
 800fcea:	fba2 2303 	umull	r2, r3, r2, r3
 800fcee:	089b      	lsrs	r3, r3, #2
 800fcf0:	3301      	adds	r3, #1
 800fcf2:	e000      	b.n	800fcf6 <dir_register+0xda>
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800fcf8:	6a39      	ldr	r1, [r7, #32]
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f7ff fbb5 	bl	800f46a <dir_alloc>
 800fd00:	4603      	mov	r3, r0
 800fd02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800fd06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d148      	bne.n	800fda0 <dir_register+0x184>
 800fd0e:	6a3b      	ldr	r3, [r7, #32]
 800fd10:	3b01      	subs	r3, #1
 800fd12:	623b      	str	r3, [r7, #32]
 800fd14:	6a3b      	ldr	r3, [r7, #32]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d042      	beq.n	800fda0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	695a      	ldr	r2, [r3, #20]
 800fd1e:	6a3b      	ldr	r3, [r7, #32]
 800fd20:	015b      	lsls	r3, r3, #5
 800fd22:	1ad3      	subs	r3, r2, r3
 800fd24:	4619      	mov	r1, r3
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f7ff fa5f 	bl	800f1ea <dir_sdi>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800fd32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d132      	bne.n	800fda0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	3324      	adds	r3, #36	@ 0x24
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7ff fde4 	bl	800f90c <sum_sfn>
 800fd44:	4603      	mov	r3, r0
 800fd46:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	69db      	ldr	r3, [r3, #28]
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	69f8      	ldr	r0, [r7, #28]
 800fd50:	f7fe fece 	bl	800eaf0 <move_window>
 800fd54:	4603      	mov	r3, r0
 800fd56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800fd5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d11d      	bne.n	800fd9e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800fd62:	69fb      	ldr	r3, [r7, #28]
 800fd64:	68d8      	ldr	r0, [r3, #12]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6a19      	ldr	r1, [r3, #32]
 800fd6a:	6a3b      	ldr	r3, [r7, #32]
 800fd6c:	b2da      	uxtb	r2, r3
 800fd6e:	7efb      	ldrb	r3, [r7, #27]
 800fd70:	f7ff fcd6 	bl	800f720 <put_lfn>
				fs->wflag = 1;
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	2201      	movs	r2, #1
 800fd78:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800fd7a:	2100      	movs	r1, #0
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f7ff faaf 	bl	800f2e0 <dir_next>
 800fd82:	4603      	mov	r3, r0
 800fd84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800fd88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d107      	bne.n	800fda0 <dir_register+0x184>
 800fd90:	6a3b      	ldr	r3, [r7, #32]
 800fd92:	3b01      	subs	r3, #1
 800fd94:	623b      	str	r3, [r7, #32]
 800fd96:	6a3b      	ldr	r3, [r7, #32]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d1d5      	bne.n	800fd48 <dir_register+0x12c>
 800fd9c:	e000      	b.n	800fda0 <dir_register+0x184>
				if (res != FR_OK) break;
 800fd9e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fda0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d128      	bne.n	800fdfa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	69db      	ldr	r3, [r3, #28]
 800fdac:	4619      	mov	r1, r3
 800fdae:	69f8      	ldr	r0, [r7, #28]
 800fdb0:	f7fe fe9e 	bl	800eaf0 <move_window>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800fdba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d11b      	bne.n	800fdfa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6a1b      	ldr	r3, [r3, #32]
 800fdc6:	2220      	movs	r2, #32
 800fdc8:	2100      	movs	r1, #0
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f7fe fc83 	bl	800e6d6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6a18      	ldr	r0, [r3, #32]
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	3324      	adds	r3, #36	@ 0x24
 800fdd8:	220b      	movs	r2, #11
 800fdda:	4619      	mov	r1, r3
 800fddc:	f7fe fc5a 	bl	800e694 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6a1b      	ldr	r3, [r3, #32]
 800fdea:	330c      	adds	r3, #12
 800fdec:	f002 0218 	and.w	r2, r2, #24
 800fdf0:	b2d2      	uxtb	r2, r2
 800fdf2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800fdf4:	69fb      	ldr	r3, [r7, #28]
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fdfa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3730      	adds	r7, #48	@ 0x30
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
 800fe06:	bf00      	nop
 800fe08:	4ec4ec4f 	.word	0x4ec4ec4f

0800fe0c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b088      	sub	sp, #32
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	2200      	movs	r2, #0
 800fe20:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	69db      	ldr	r3, [r3, #28]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	f000 80ca 	beq.w	800ffc0 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe34:	d032      	beq.n	800fe9c <get_fileinfo+0x90>
			i = j = 0;
 800fe36:	2300      	movs	r3, #0
 800fe38:	61bb      	str	r3, [r7, #24]
 800fe3a:	69bb      	ldr	r3, [r7, #24]
 800fe3c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800fe3e:	e01b      	b.n	800fe78 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800fe40:	89fb      	ldrh	r3, [r7, #14]
 800fe42:	2100      	movs	r1, #0
 800fe44:	4618      	mov	r0, r3
 800fe46:	f001 fd2b 	bl	80118a0 <ff_convert>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800fe4e:	89fb      	ldrh	r3, [r7, #14]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d102      	bne.n	800fe5a <get_fileinfo+0x4e>
 800fe54:	2300      	movs	r3, #0
 800fe56:	61fb      	str	r3, [r7, #28]
 800fe58:	e01a      	b.n	800fe90 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800fe5a:	69fb      	ldr	r3, [r7, #28]
 800fe5c:	2bfe      	cmp	r3, #254	@ 0xfe
 800fe5e:	d902      	bls.n	800fe66 <get_fileinfo+0x5a>
 800fe60:	2300      	movs	r3, #0
 800fe62:	61fb      	str	r3, [r7, #28]
 800fe64:	e014      	b.n	800fe90 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800fe66:	69fb      	ldr	r3, [r7, #28]
 800fe68:	1c5a      	adds	r2, r3, #1
 800fe6a:	61fa      	str	r2, [r7, #28]
 800fe6c:	89fa      	ldrh	r2, [r7, #14]
 800fe6e:	b2d1      	uxtb	r1, r2
 800fe70:	683a      	ldr	r2, [r7, #0]
 800fe72:	4413      	add	r3, r2
 800fe74:	460a      	mov	r2, r1
 800fe76:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	68da      	ldr	r2, [r3, #12]
 800fe7c:	69bb      	ldr	r3, [r7, #24]
 800fe7e:	1c59      	adds	r1, r3, #1
 800fe80:	61b9      	str	r1, [r7, #24]
 800fe82:	005b      	lsls	r3, r3, #1
 800fe84:	4413      	add	r3, r2
 800fe86:	881b      	ldrh	r3, [r3, #0]
 800fe88:	81fb      	strh	r3, [r7, #14]
 800fe8a:	89fb      	ldrh	r3, [r7, #14]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d1d7      	bne.n	800fe40 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800fe90:	683a      	ldr	r2, [r7, #0]
 800fe92:	69fb      	ldr	r3, [r7, #28]
 800fe94:	4413      	add	r3, r2
 800fe96:	3316      	adds	r3, #22
 800fe98:	2200      	movs	r2, #0
 800fe9a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	61bb      	str	r3, [r7, #24]
 800fea0:	69bb      	ldr	r3, [r7, #24]
 800fea2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800fea4:	683a      	ldr	r2, [r7, #0]
 800fea6:	69fb      	ldr	r3, [r7, #28]
 800fea8:	4413      	add	r3, r2
 800feaa:	3316      	adds	r3, #22
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800feb0:	e04d      	b.n	800ff4e <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6a1a      	ldr	r2, [r3, #32]
 800feb6:	69fb      	ldr	r3, [r7, #28]
 800feb8:	1c59      	adds	r1, r3, #1
 800feba:	61f9      	str	r1, [r7, #28]
 800febc:	4413      	add	r3, r2
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800fec2:	7dfb      	ldrb	r3, [r7, #23]
 800fec4:	2b20      	cmp	r3, #32
 800fec6:	d041      	beq.n	800ff4c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800fec8:	7dfb      	ldrb	r3, [r7, #23]
 800feca:	2b05      	cmp	r3, #5
 800fecc:	d101      	bne.n	800fed2 <get_fileinfo+0xc6>
 800fece:	23e5      	movs	r3, #229	@ 0xe5
 800fed0:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800fed2:	69fb      	ldr	r3, [r7, #28]
 800fed4:	2b09      	cmp	r3, #9
 800fed6:	d10f      	bne.n	800fef8 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800fed8:	89bb      	ldrh	r3, [r7, #12]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d105      	bne.n	800feea <get_fileinfo+0xde>
 800fede:	683a      	ldr	r2, [r7, #0]
 800fee0:	69bb      	ldr	r3, [r7, #24]
 800fee2:	4413      	add	r3, r2
 800fee4:	3316      	adds	r3, #22
 800fee6:	222e      	movs	r2, #46	@ 0x2e
 800fee8:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800feea:	69bb      	ldr	r3, [r7, #24]
 800feec:	1c5a      	adds	r2, r3, #1
 800feee:	61ba      	str	r2, [r7, #24]
 800fef0:	683a      	ldr	r2, [r7, #0]
 800fef2:	4413      	add	r3, r2
 800fef4:	222e      	movs	r2, #46	@ 0x2e
 800fef6:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800fef8:	683a      	ldr	r2, [r7, #0]
 800fefa:	69bb      	ldr	r3, [r7, #24]
 800fefc:	4413      	add	r3, r2
 800fefe:	3309      	adds	r3, #9
 800ff00:	7dfa      	ldrb	r2, [r7, #23]
 800ff02:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800ff04:	89bb      	ldrh	r3, [r7, #12]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d11c      	bne.n	800ff44 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800ff0a:	7dfb      	ldrb	r3, [r7, #23]
 800ff0c:	2b40      	cmp	r3, #64	@ 0x40
 800ff0e:	d913      	bls.n	800ff38 <get_fileinfo+0x12c>
 800ff10:	7dfb      	ldrb	r3, [r7, #23]
 800ff12:	2b5a      	cmp	r3, #90	@ 0x5a
 800ff14:	d810      	bhi.n	800ff38 <get_fileinfo+0x12c>
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6a1b      	ldr	r3, [r3, #32]
 800ff1a:	330c      	adds	r3, #12
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	461a      	mov	r2, r3
 800ff20:	69fb      	ldr	r3, [r7, #28]
 800ff22:	2b08      	cmp	r3, #8
 800ff24:	d901      	bls.n	800ff2a <get_fileinfo+0x11e>
 800ff26:	2310      	movs	r3, #16
 800ff28:	e000      	b.n	800ff2c <get_fileinfo+0x120>
 800ff2a:	2308      	movs	r3, #8
 800ff2c:	4013      	ands	r3, r2
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d002      	beq.n	800ff38 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800ff32:	7dfb      	ldrb	r3, [r7, #23]
 800ff34:	3320      	adds	r3, #32
 800ff36:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800ff38:	683a      	ldr	r2, [r7, #0]
 800ff3a:	69bb      	ldr	r3, [r7, #24]
 800ff3c:	4413      	add	r3, r2
 800ff3e:	3316      	adds	r3, #22
 800ff40:	7dfa      	ldrb	r2, [r7, #23]
 800ff42:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800ff44:	69bb      	ldr	r3, [r7, #24]
 800ff46:	3301      	adds	r3, #1
 800ff48:	61bb      	str	r3, [r7, #24]
 800ff4a:	e000      	b.n	800ff4e <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800ff4c:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800ff4e:	69fb      	ldr	r3, [r7, #28]
 800ff50:	2b0a      	cmp	r3, #10
 800ff52:	d9ae      	bls.n	800feb2 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800ff54:	89bb      	ldrh	r3, [r7, #12]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d10d      	bne.n	800ff76 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800ff5a:	683a      	ldr	r2, [r7, #0]
 800ff5c:	69bb      	ldr	r3, [r7, #24]
 800ff5e:	4413      	add	r3, r2
 800ff60:	3316      	adds	r3, #22
 800ff62:	2200      	movs	r2, #0
 800ff64:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6a1b      	ldr	r3, [r3, #32]
 800ff6a:	330c      	adds	r3, #12
 800ff6c:	781b      	ldrb	r3, [r3, #0]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d101      	bne.n	800ff76 <get_fileinfo+0x16a>
 800ff72:	2300      	movs	r3, #0
 800ff74:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800ff76:	683a      	ldr	r2, [r7, #0]
 800ff78:	69bb      	ldr	r3, [r7, #24]
 800ff7a:	4413      	add	r3, r2
 800ff7c:	3309      	adds	r3, #9
 800ff7e:	2200      	movs	r2, #0
 800ff80:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6a1b      	ldr	r3, [r3, #32]
 800ff86:	7ada      	ldrb	r2, [r3, #11]
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6a1b      	ldr	r3, [r3, #32]
 800ff90:	331c      	adds	r3, #28
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7fe fb14 	bl	800e5c0 <ld_dword>
 800ff98:	4602      	mov	r2, r0
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6a1b      	ldr	r3, [r3, #32]
 800ffa2:	3316      	adds	r3, #22
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7fe fb0b 	bl	800e5c0 <ld_dword>
 800ffaa:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	b29a      	uxth	r2, r3
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	80da      	strh	r2, [r3, #6]
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	0c1b      	lsrs	r3, r3, #16
 800ffb8:	b29a      	uxth	r2, r3
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	809a      	strh	r2, [r3, #4]
 800ffbe:	e000      	b.n	800ffc2 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ffc0:	bf00      	nop
}
 800ffc2:	3720      	adds	r7, #32
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b08a      	sub	sp, #40	@ 0x28
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	613b      	str	r3, [r7, #16]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	68db      	ldr	r3, [r3, #12]
 800ffde:	60fb      	str	r3, [r7, #12]
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	617b      	str	r3, [r7, #20]
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ffe8:	69bb      	ldr	r3, [r7, #24]
 800ffea:	1c5a      	adds	r2, r3, #1
 800ffec:	61ba      	str	r2, [r7, #24]
 800ffee:	693a      	ldr	r2, [r7, #16]
 800fff0:	4413      	add	r3, r2
 800fff2:	781b      	ldrb	r3, [r3, #0]
 800fff4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800fff6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fff8:	2b1f      	cmp	r3, #31
 800fffa:	d940      	bls.n	801007e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800fffc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fffe:	2b2f      	cmp	r3, #47	@ 0x2f
 8010000:	d006      	beq.n	8010010 <create_name+0x48>
 8010002:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010004:	2b5c      	cmp	r3, #92	@ 0x5c
 8010006:	d110      	bne.n	801002a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010008:	e002      	b.n	8010010 <create_name+0x48>
 801000a:	69bb      	ldr	r3, [r7, #24]
 801000c:	3301      	adds	r3, #1
 801000e:	61bb      	str	r3, [r7, #24]
 8010010:	693a      	ldr	r2, [r7, #16]
 8010012:	69bb      	ldr	r3, [r7, #24]
 8010014:	4413      	add	r3, r2
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	2b2f      	cmp	r3, #47	@ 0x2f
 801001a:	d0f6      	beq.n	801000a <create_name+0x42>
 801001c:	693a      	ldr	r2, [r7, #16]
 801001e:	69bb      	ldr	r3, [r7, #24]
 8010020:	4413      	add	r3, r2
 8010022:	781b      	ldrb	r3, [r3, #0]
 8010024:	2b5c      	cmp	r3, #92	@ 0x5c
 8010026:	d0f0      	beq.n	801000a <create_name+0x42>
			break;
 8010028:	e02a      	b.n	8010080 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	2bfe      	cmp	r3, #254	@ 0xfe
 801002e:	d901      	bls.n	8010034 <create_name+0x6c>
 8010030:	2306      	movs	r3, #6
 8010032:	e17d      	b.n	8010330 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8010034:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010036:	b2db      	uxtb	r3, r3
 8010038:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801003a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801003c:	2101      	movs	r1, #1
 801003e:	4618      	mov	r0, r3
 8010040:	f001 fc2e 	bl	80118a0 <ff_convert>
 8010044:	4603      	mov	r3, r0
 8010046:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8010048:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801004a:	2b00      	cmp	r3, #0
 801004c:	d101      	bne.n	8010052 <create_name+0x8a>
 801004e:	2306      	movs	r3, #6
 8010050:	e16e      	b.n	8010330 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010052:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010054:	2b7f      	cmp	r3, #127	@ 0x7f
 8010056:	d809      	bhi.n	801006c <create_name+0xa4>
 8010058:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801005a:	4619      	mov	r1, r3
 801005c:	488d      	ldr	r0, [pc, #564]	@ (8010294 <create_name+0x2cc>)
 801005e:	f7fe fb7c 	bl	800e75a <chk_chr>
 8010062:	4603      	mov	r3, r0
 8010064:	2b00      	cmp	r3, #0
 8010066:	d001      	beq.n	801006c <create_name+0xa4>
 8010068:	2306      	movs	r3, #6
 801006a:	e161      	b.n	8010330 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	1c5a      	adds	r2, r3, #1
 8010070:	617a      	str	r2, [r7, #20]
 8010072:	005b      	lsls	r3, r3, #1
 8010074:	68fa      	ldr	r2, [r7, #12]
 8010076:	4413      	add	r3, r2
 8010078:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801007a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801007c:	e7b4      	b.n	800ffe8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801007e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010080:	693a      	ldr	r2, [r7, #16]
 8010082:	69bb      	ldr	r3, [r7, #24]
 8010084:	441a      	add	r2, r3
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801008a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801008c:	2b1f      	cmp	r3, #31
 801008e:	d801      	bhi.n	8010094 <create_name+0xcc>
 8010090:	2304      	movs	r3, #4
 8010092:	e000      	b.n	8010096 <create_name+0xce>
 8010094:	2300      	movs	r3, #0
 8010096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801009a:	e011      	b.n	80100c0 <create_name+0xf8>
		w = lfn[di - 1];
 801009c:	697b      	ldr	r3, [r7, #20]
 801009e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80100a2:	3b01      	subs	r3, #1
 80100a4:	005b      	lsls	r3, r3, #1
 80100a6:	68fa      	ldr	r2, [r7, #12]
 80100a8:	4413      	add	r3, r2
 80100aa:	881b      	ldrh	r3, [r3, #0]
 80100ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80100ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80100b0:	2b20      	cmp	r3, #32
 80100b2:	d002      	beq.n	80100ba <create_name+0xf2>
 80100b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80100b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80100b8:	d106      	bne.n	80100c8 <create_name+0x100>
		di--;
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	3b01      	subs	r3, #1
 80100be:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d1ea      	bne.n	801009c <create_name+0xd4>
 80100c6:	e000      	b.n	80100ca <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80100c8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	005b      	lsls	r3, r3, #1
 80100ce:	68fa      	ldr	r2, [r7, #12]
 80100d0:	4413      	add	r3, r2
 80100d2:	2200      	movs	r2, #0
 80100d4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d101      	bne.n	80100e0 <create_name+0x118>
 80100dc:	2306      	movs	r3, #6
 80100de:	e127      	b.n	8010330 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	3324      	adds	r3, #36	@ 0x24
 80100e4:	220b      	movs	r2, #11
 80100e6:	2120      	movs	r1, #32
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7fe faf4 	bl	800e6d6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80100ee:	2300      	movs	r3, #0
 80100f0:	61bb      	str	r3, [r7, #24]
 80100f2:	e002      	b.n	80100fa <create_name+0x132>
 80100f4:	69bb      	ldr	r3, [r7, #24]
 80100f6:	3301      	adds	r3, #1
 80100f8:	61bb      	str	r3, [r7, #24]
 80100fa:	69bb      	ldr	r3, [r7, #24]
 80100fc:	005b      	lsls	r3, r3, #1
 80100fe:	68fa      	ldr	r2, [r7, #12]
 8010100:	4413      	add	r3, r2
 8010102:	881b      	ldrh	r3, [r3, #0]
 8010104:	2b20      	cmp	r3, #32
 8010106:	d0f5      	beq.n	80100f4 <create_name+0x12c>
 8010108:	69bb      	ldr	r3, [r7, #24]
 801010a:	005b      	lsls	r3, r3, #1
 801010c:	68fa      	ldr	r2, [r7, #12]
 801010e:	4413      	add	r3, r2
 8010110:	881b      	ldrh	r3, [r3, #0]
 8010112:	2b2e      	cmp	r3, #46	@ 0x2e
 8010114:	d0ee      	beq.n	80100f4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8010116:	69bb      	ldr	r3, [r7, #24]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d009      	beq.n	8010130 <create_name+0x168>
 801011c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010120:	f043 0303 	orr.w	r3, r3, #3
 8010124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8010128:	e002      	b.n	8010130 <create_name+0x168>
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	3b01      	subs	r3, #1
 801012e:	617b      	str	r3, [r7, #20]
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d009      	beq.n	801014a <create_name+0x182>
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801013c:	3b01      	subs	r3, #1
 801013e:	005b      	lsls	r3, r3, #1
 8010140:	68fa      	ldr	r2, [r7, #12]
 8010142:	4413      	add	r3, r2
 8010144:	881b      	ldrh	r3, [r3, #0]
 8010146:	2b2e      	cmp	r3, #46	@ 0x2e
 8010148:	d1ef      	bne.n	801012a <create_name+0x162>

	i = b = 0; ni = 8;
 801014a:	2300      	movs	r3, #0
 801014c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010150:	2300      	movs	r3, #0
 8010152:	623b      	str	r3, [r7, #32]
 8010154:	2308      	movs	r3, #8
 8010156:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8010158:	69bb      	ldr	r3, [r7, #24]
 801015a:	1c5a      	adds	r2, r3, #1
 801015c:	61ba      	str	r2, [r7, #24]
 801015e:	005b      	lsls	r3, r3, #1
 8010160:	68fa      	ldr	r2, [r7, #12]
 8010162:	4413      	add	r3, r2
 8010164:	881b      	ldrh	r3, [r3, #0]
 8010166:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8010168:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801016a:	2b00      	cmp	r3, #0
 801016c:	f000 8090 	beq.w	8010290 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8010170:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010172:	2b20      	cmp	r3, #32
 8010174:	d006      	beq.n	8010184 <create_name+0x1bc>
 8010176:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010178:	2b2e      	cmp	r3, #46	@ 0x2e
 801017a:	d10a      	bne.n	8010192 <create_name+0x1ca>
 801017c:	69ba      	ldr	r2, [r7, #24]
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	429a      	cmp	r2, r3
 8010182:	d006      	beq.n	8010192 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8010184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010188:	f043 0303 	orr.w	r3, r3, #3
 801018c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010190:	e07d      	b.n	801028e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8010192:	6a3a      	ldr	r2, [r7, #32]
 8010194:	69fb      	ldr	r3, [r7, #28]
 8010196:	429a      	cmp	r2, r3
 8010198:	d203      	bcs.n	80101a2 <create_name+0x1da>
 801019a:	69ba      	ldr	r2, [r7, #24]
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	429a      	cmp	r2, r3
 80101a0:	d123      	bne.n	80101ea <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80101a2:	69fb      	ldr	r3, [r7, #28]
 80101a4:	2b0b      	cmp	r3, #11
 80101a6:	d106      	bne.n	80101b6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80101a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80101ac:	f043 0303 	orr.w	r3, r3, #3
 80101b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80101b4:	e075      	b.n	80102a2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80101b6:	69ba      	ldr	r2, [r7, #24]
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d005      	beq.n	80101ca <create_name+0x202>
 80101be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80101c2:	f043 0303 	orr.w	r3, r3, #3
 80101c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80101ca:	69ba      	ldr	r2, [r7, #24]
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d866      	bhi.n	80102a0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	61bb      	str	r3, [r7, #24]
 80101d6:	2308      	movs	r3, #8
 80101d8:	623b      	str	r3, [r7, #32]
 80101da:	230b      	movs	r3, #11
 80101dc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80101de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80101e2:	009b      	lsls	r3, r3, #2
 80101e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80101e8:	e051      	b.n	801028e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80101ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80101ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80101ee:	d914      	bls.n	801021a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80101f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80101f2:	2100      	movs	r1, #0
 80101f4:	4618      	mov	r0, r3
 80101f6:	f001 fb53 	bl	80118a0 <ff_convert>
 80101fa:	4603      	mov	r3, r0
 80101fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80101fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010200:	2b00      	cmp	r3, #0
 8010202:	d004      	beq.n	801020e <create_name+0x246>
 8010204:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010206:	3b80      	subs	r3, #128	@ 0x80
 8010208:	4a23      	ldr	r2, [pc, #140]	@ (8010298 <create_name+0x2d0>)
 801020a:	5cd3      	ldrb	r3, [r2, r3]
 801020c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801020e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010212:	f043 0302 	orr.w	r3, r3, #2
 8010216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801021a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801021c:	2b00      	cmp	r3, #0
 801021e:	d007      	beq.n	8010230 <create_name+0x268>
 8010220:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010222:	4619      	mov	r1, r3
 8010224:	481d      	ldr	r0, [pc, #116]	@ (801029c <create_name+0x2d4>)
 8010226:	f7fe fa98 	bl	800e75a <chk_chr>
 801022a:	4603      	mov	r3, r0
 801022c:	2b00      	cmp	r3, #0
 801022e:	d008      	beq.n	8010242 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010230:	235f      	movs	r3, #95	@ 0x5f
 8010232:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8010234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010238:	f043 0303 	orr.w	r3, r3, #3
 801023c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010240:	e01b      	b.n	801027a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8010242:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010244:	2b40      	cmp	r3, #64	@ 0x40
 8010246:	d909      	bls.n	801025c <create_name+0x294>
 8010248:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801024a:	2b5a      	cmp	r3, #90	@ 0x5a
 801024c:	d806      	bhi.n	801025c <create_name+0x294>
					b |= 2;
 801024e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010252:	f043 0302 	orr.w	r3, r3, #2
 8010256:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801025a:	e00e      	b.n	801027a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801025c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801025e:	2b60      	cmp	r3, #96	@ 0x60
 8010260:	d90b      	bls.n	801027a <create_name+0x2b2>
 8010262:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010264:	2b7a      	cmp	r3, #122	@ 0x7a
 8010266:	d808      	bhi.n	801027a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8010268:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801026c:	f043 0301 	orr.w	r3, r3, #1
 8010270:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010274:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010276:	3b20      	subs	r3, #32
 8010278:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801027a:	6a3b      	ldr	r3, [r7, #32]
 801027c:	1c5a      	adds	r2, r3, #1
 801027e:	623a      	str	r2, [r7, #32]
 8010280:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010282:	b2d1      	uxtb	r1, r2
 8010284:	687a      	ldr	r2, [r7, #4]
 8010286:	4413      	add	r3, r2
 8010288:	460a      	mov	r2, r1
 801028a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801028e:	e763      	b.n	8010158 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8010290:	bf00      	nop
 8010292:	e006      	b.n	80102a2 <create_name+0x2da>
 8010294:	0801240c 	.word	0x0801240c
 8010298:	08017644 	.word	0x08017644
 801029c:	08012418 	.word	0x08012418
			if (si > di) break;			/* No extension */
 80102a0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80102a8:	2be5      	cmp	r3, #229	@ 0xe5
 80102aa:	d103      	bne.n	80102b4 <create_name+0x2ec>
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2205      	movs	r2, #5
 80102b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	2b08      	cmp	r3, #8
 80102b8:	d104      	bne.n	80102c4 <create_name+0x2fc>
 80102ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80102be:	009b      	lsls	r3, r3, #2
 80102c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80102c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80102c8:	f003 030c 	and.w	r3, r3, #12
 80102cc:	2b0c      	cmp	r3, #12
 80102ce:	d005      	beq.n	80102dc <create_name+0x314>
 80102d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80102d4:	f003 0303 	and.w	r3, r3, #3
 80102d8:	2b03      	cmp	r3, #3
 80102da:	d105      	bne.n	80102e8 <create_name+0x320>
 80102dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80102e0:	f043 0302 	orr.w	r3, r3, #2
 80102e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80102e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80102ec:	f003 0302 	and.w	r3, r3, #2
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d117      	bne.n	8010324 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80102f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80102f8:	f003 0303 	and.w	r3, r3, #3
 80102fc:	2b01      	cmp	r3, #1
 80102fe:	d105      	bne.n	801030c <create_name+0x344>
 8010300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010304:	f043 0310 	orr.w	r3, r3, #16
 8010308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801030c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010310:	f003 030c 	and.w	r3, r3, #12
 8010314:	2b04      	cmp	r3, #4
 8010316:	d105      	bne.n	8010324 <create_name+0x35c>
 8010318:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801031c:	f043 0308 	orr.w	r3, r3, #8
 8010320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801032a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801032e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8010330:	4618      	mov	r0, r3
 8010332:	3728      	adds	r7, #40	@ 0x28
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}

08010338 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b086      	sub	sp, #24
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801034c:	e002      	b.n	8010354 <follow_path+0x1c>
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	3301      	adds	r3, #1
 8010352:	603b      	str	r3, [r7, #0]
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	781b      	ldrb	r3, [r3, #0]
 8010358:	2b2f      	cmp	r3, #47	@ 0x2f
 801035a:	d0f8      	beq.n	801034e <follow_path+0x16>
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	2b5c      	cmp	r3, #92	@ 0x5c
 8010362:	d0f4      	beq.n	801034e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	2200      	movs	r2, #0
 8010368:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	2b1f      	cmp	r3, #31
 8010370:	d80a      	bhi.n	8010388 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2280      	movs	r2, #128	@ 0x80
 8010376:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801037a:	2100      	movs	r1, #0
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f7fe ff34 	bl	800f1ea <dir_sdi>
 8010382:	4603      	mov	r3, r0
 8010384:	75fb      	strb	r3, [r7, #23]
 8010386:	e043      	b.n	8010410 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010388:	463b      	mov	r3, r7
 801038a:	4619      	mov	r1, r3
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f7ff fe1b 	bl	800ffc8 <create_name>
 8010392:	4603      	mov	r3, r0
 8010394:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010396:	7dfb      	ldrb	r3, [r7, #23]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d134      	bne.n	8010406 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f7ff fb7d 	bl	800fa9c <dir_find>
 80103a2:	4603      	mov	r3, r0
 80103a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80103ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80103ae:	7dfb      	ldrb	r3, [r7, #23]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d00a      	beq.n	80103ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80103b4:	7dfb      	ldrb	r3, [r7, #23]
 80103b6:	2b04      	cmp	r3, #4
 80103b8:	d127      	bne.n	801040a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80103ba:	7afb      	ldrb	r3, [r7, #11]
 80103bc:	f003 0304 	and.w	r3, r3, #4
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d122      	bne.n	801040a <follow_path+0xd2>
 80103c4:	2305      	movs	r3, #5
 80103c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80103c8:	e01f      	b.n	801040a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80103ca:	7afb      	ldrb	r3, [r7, #11]
 80103cc:	f003 0304 	and.w	r3, r3, #4
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d11c      	bne.n	801040e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	799b      	ldrb	r3, [r3, #6]
 80103d8:	f003 0310 	and.w	r3, r3, #16
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d102      	bne.n	80103e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80103e0:	2305      	movs	r3, #5
 80103e2:	75fb      	strb	r3, [r7, #23]
 80103e4:	e014      	b.n	8010410 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	695b      	ldr	r3, [r3, #20]
 80103f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103f4:	4413      	add	r3, r2
 80103f6:	4619      	mov	r1, r3
 80103f8:	68f8      	ldr	r0, [r7, #12]
 80103fa:	f7ff f87d 	bl	800f4f8 <ld_clust>
 80103fe:	4602      	mov	r2, r0
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010404:	e7c0      	b.n	8010388 <follow_path+0x50>
			if (res != FR_OK) break;
 8010406:	bf00      	nop
 8010408:	e002      	b.n	8010410 <follow_path+0xd8>
				break;
 801040a:	bf00      	nop
 801040c:	e000      	b.n	8010410 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801040e:	bf00      	nop
			}
		}
	}

	return res;
 8010410:	7dfb      	ldrb	r3, [r7, #23]
}
 8010412:	4618      	mov	r0, r3
 8010414:	3718      	adds	r7, #24
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}

0801041a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801041a:	b480      	push	{r7}
 801041c:	b087      	sub	sp, #28
 801041e:	af00      	add	r7, sp, #0
 8010420:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010422:	f04f 33ff 	mov.w	r3, #4294967295
 8010426:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d031      	beq.n	8010494 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	617b      	str	r3, [r7, #20]
 8010436:	e002      	b.n	801043e <get_ldnumber+0x24>
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	3301      	adds	r3, #1
 801043c:	617b      	str	r3, [r7, #20]
 801043e:	697b      	ldr	r3, [r7, #20]
 8010440:	781b      	ldrb	r3, [r3, #0]
 8010442:	2b1f      	cmp	r3, #31
 8010444:	d903      	bls.n	801044e <get_ldnumber+0x34>
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	781b      	ldrb	r3, [r3, #0]
 801044a:	2b3a      	cmp	r3, #58	@ 0x3a
 801044c:	d1f4      	bne.n	8010438 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801044e:	697b      	ldr	r3, [r7, #20]
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	2b3a      	cmp	r3, #58	@ 0x3a
 8010454:	d11c      	bne.n	8010490 <get_ldnumber+0x76>
			tp = *path;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	1c5a      	adds	r2, r3, #1
 8010460:	60fa      	str	r2, [r7, #12]
 8010462:	781b      	ldrb	r3, [r3, #0]
 8010464:	3b30      	subs	r3, #48	@ 0x30
 8010466:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	2b09      	cmp	r3, #9
 801046c:	d80e      	bhi.n	801048c <get_ldnumber+0x72>
 801046e:	68fa      	ldr	r2, [r7, #12]
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	429a      	cmp	r2, r3
 8010474:	d10a      	bne.n	801048c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d107      	bne.n	801048c <get_ldnumber+0x72>
					vol = (int)i;
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	3301      	adds	r3, #1
 8010484:	617b      	str	r3, [r7, #20]
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	697a      	ldr	r2, [r7, #20]
 801048a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	e002      	b.n	8010496 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010490:	2300      	movs	r3, #0
 8010492:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010494:	693b      	ldr	r3, [r7, #16]
}
 8010496:	4618      	mov	r0, r3
 8010498:	371c      	adds	r7, #28
 801049a:	46bd      	mov	sp, r7
 801049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a0:	4770      	bx	lr
	...

080104a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b082      	sub	sp, #8
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2200      	movs	r2, #0
 80104b2:	70da      	strb	r2, [r3, #3]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f04f 32ff 	mov.w	r2, #4294967295
 80104ba:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80104bc:	6839      	ldr	r1, [r7, #0]
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f7fe fb16 	bl	800eaf0 <move_window>
 80104c4:	4603      	mov	r3, r0
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d001      	beq.n	80104ce <check_fs+0x2a>
 80104ca:	2304      	movs	r3, #4
 80104cc:	e038      	b.n	8010540 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	3334      	adds	r3, #52	@ 0x34
 80104d2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7fe f85a 	bl	800e590 <ld_word>
 80104dc:	4603      	mov	r3, r0
 80104de:	461a      	mov	r2, r3
 80104e0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d001      	beq.n	80104ec <check_fs+0x48>
 80104e8:	2303      	movs	r3, #3
 80104ea:	e029      	b.n	8010540 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80104f2:	2be9      	cmp	r3, #233	@ 0xe9
 80104f4:	d009      	beq.n	801050a <check_fs+0x66>
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80104fc:	2beb      	cmp	r3, #235	@ 0xeb
 80104fe:	d11e      	bne.n	801053e <check_fs+0x9a>
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8010506:	2b90      	cmp	r3, #144	@ 0x90
 8010508:	d119      	bne.n	801053e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	3334      	adds	r3, #52	@ 0x34
 801050e:	3336      	adds	r3, #54	@ 0x36
 8010510:	4618      	mov	r0, r3
 8010512:	f7fe f855 	bl	800e5c0 <ld_dword>
 8010516:	4603      	mov	r3, r0
 8010518:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801051c:	4a0a      	ldr	r2, [pc, #40]	@ (8010548 <check_fs+0xa4>)
 801051e:	4293      	cmp	r3, r2
 8010520:	d101      	bne.n	8010526 <check_fs+0x82>
 8010522:	2300      	movs	r3, #0
 8010524:	e00c      	b.n	8010540 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	3334      	adds	r3, #52	@ 0x34
 801052a:	3352      	adds	r3, #82	@ 0x52
 801052c:	4618      	mov	r0, r3
 801052e:	f7fe f847 	bl	800e5c0 <ld_dword>
 8010532:	4603      	mov	r3, r0
 8010534:	4a05      	ldr	r2, [pc, #20]	@ (801054c <check_fs+0xa8>)
 8010536:	4293      	cmp	r3, r2
 8010538:	d101      	bne.n	801053e <check_fs+0x9a>
 801053a:	2300      	movs	r3, #0
 801053c:	e000      	b.n	8010540 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801053e:	2302      	movs	r3, #2
}
 8010540:	4618      	mov	r0, r3
 8010542:	3708      	adds	r7, #8
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}
 8010548:	00544146 	.word	0x00544146
 801054c:	33544146 	.word	0x33544146

08010550 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b096      	sub	sp, #88	@ 0x58
 8010554:	af00      	add	r7, sp, #0
 8010556:	60f8      	str	r0, [r7, #12]
 8010558:	60b9      	str	r1, [r7, #8]
 801055a:	4613      	mov	r3, r2
 801055c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	2200      	movs	r2, #0
 8010562:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010564:	68f8      	ldr	r0, [r7, #12]
 8010566:	f7ff ff58 	bl	801041a <get_ldnumber>
 801056a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801056c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801056e:	2b00      	cmp	r3, #0
 8010570:	da01      	bge.n	8010576 <find_volume+0x26>
 8010572:	230b      	movs	r3, #11
 8010574:	e230      	b.n	80109d8 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010576:	4aa1      	ldr	r2, [pc, #644]	@ (80107fc <find_volume+0x2ac>)
 8010578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801057a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801057e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010582:	2b00      	cmp	r3, #0
 8010584:	d101      	bne.n	801058a <find_volume+0x3a>
 8010586:	230c      	movs	r3, #12
 8010588:	e226      	b.n	80109d8 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801058e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010590:	79fb      	ldrb	r3, [r7, #7]
 8010592:	f023 0301 	bic.w	r3, r3, #1
 8010596:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d01a      	beq.n	80105d6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80105a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105a2:	785b      	ldrb	r3, [r3, #1]
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7fd ff53 	bl	800e450 <disk_status>
 80105aa:	4603      	mov	r3, r0
 80105ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80105b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80105b4:	f003 0301 	and.w	r3, r3, #1
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d10c      	bne.n	80105d6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80105bc:	79fb      	ldrb	r3, [r7, #7]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d007      	beq.n	80105d2 <find_volume+0x82>
 80105c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80105c6:	f003 0304 	and.w	r3, r3, #4
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d001      	beq.n	80105d2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80105ce:	230a      	movs	r3, #10
 80105d0:	e202      	b.n	80109d8 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 80105d2:	2300      	movs	r3, #0
 80105d4:	e200      	b.n	80109d8 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80105d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105d8:	2200      	movs	r2, #0
 80105da:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80105dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105de:	b2da      	uxtb	r2, r3
 80105e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105e2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80105e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105e6:	785b      	ldrb	r3, [r3, #1]
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7fd ff4b 	bl	800e484 <disk_initialize>
 80105ee:	4603      	mov	r3, r0
 80105f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80105f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80105f8:	f003 0301 	and.w	r3, r3, #1
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d001      	beq.n	8010604 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010600:	2303      	movs	r3, #3
 8010602:	e1e9      	b.n	80109d8 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010604:	79fb      	ldrb	r3, [r7, #7]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d007      	beq.n	801061a <find_volume+0xca>
 801060a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801060e:	f003 0304 	and.w	r3, r3, #4
 8010612:	2b00      	cmp	r3, #0
 8010614:	d001      	beq.n	801061a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010616:	230a      	movs	r3, #10
 8010618:	e1de      	b.n	80109d8 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801061a:	2300      	movs	r3, #0
 801061c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801061e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010620:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010622:	f7ff ff3f 	bl	80104a4 <check_fs>
 8010626:	4603      	mov	r3, r0
 8010628:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801062c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010630:	2b02      	cmp	r3, #2
 8010632:	d149      	bne.n	80106c8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010634:	2300      	movs	r3, #0
 8010636:	643b      	str	r3, [r7, #64]	@ 0x40
 8010638:	e01e      	b.n	8010678 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801063a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801063c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010642:	011b      	lsls	r3, r3, #4
 8010644:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010648:	4413      	add	r3, r2
 801064a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801064c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801064e:	3304      	adds	r3, #4
 8010650:	781b      	ldrb	r3, [r3, #0]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d006      	beq.n	8010664 <find_volume+0x114>
 8010656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010658:	3308      	adds	r3, #8
 801065a:	4618      	mov	r0, r3
 801065c:	f7fd ffb0 	bl	800e5c0 <ld_dword>
 8010660:	4602      	mov	r2, r0
 8010662:	e000      	b.n	8010666 <find_volume+0x116>
 8010664:	2200      	movs	r2, #0
 8010666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010668:	009b      	lsls	r3, r3, #2
 801066a:	3358      	adds	r3, #88	@ 0x58
 801066c:	443b      	add	r3, r7
 801066e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010674:	3301      	adds	r3, #1
 8010676:	643b      	str	r3, [r7, #64]	@ 0x40
 8010678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801067a:	2b03      	cmp	r3, #3
 801067c:	d9dd      	bls.n	801063a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801067e:	2300      	movs	r3, #0
 8010680:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8010682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010684:	2b00      	cmp	r3, #0
 8010686:	d002      	beq.n	801068e <find_volume+0x13e>
 8010688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801068a:	3b01      	subs	r3, #1
 801068c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801068e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010690:	009b      	lsls	r3, r3, #2
 8010692:	3358      	adds	r3, #88	@ 0x58
 8010694:	443b      	add	r3, r7
 8010696:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801069a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801069c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d005      	beq.n	80106ae <find_volume+0x15e>
 80106a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80106a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80106a6:	f7ff fefd 	bl	80104a4 <check_fs>
 80106aa:	4603      	mov	r3, r0
 80106ac:	e000      	b.n	80106b0 <find_volume+0x160>
 80106ae:	2303      	movs	r3, #3
 80106b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80106b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80106b8:	2b01      	cmp	r3, #1
 80106ba:	d905      	bls.n	80106c8 <find_volume+0x178>
 80106bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106be:	3301      	adds	r3, #1
 80106c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80106c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106c4:	2b03      	cmp	r3, #3
 80106c6:	d9e2      	bls.n	801068e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80106c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80106cc:	2b04      	cmp	r3, #4
 80106ce:	d101      	bne.n	80106d4 <find_volume+0x184>
 80106d0:	2301      	movs	r3, #1
 80106d2:	e181      	b.n	80109d8 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80106d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80106d8:	2b01      	cmp	r3, #1
 80106da:	d901      	bls.n	80106e0 <find_volume+0x190>
 80106dc:	230d      	movs	r3, #13
 80106de:	e17b      	b.n	80109d8 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80106e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106e2:	3334      	adds	r3, #52	@ 0x34
 80106e4:	330b      	adds	r3, #11
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7fd ff52 	bl	800e590 <ld_word>
 80106ec:	4603      	mov	r3, r0
 80106ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80106f2:	d001      	beq.n	80106f8 <find_volume+0x1a8>
 80106f4:	230d      	movs	r3, #13
 80106f6:	e16f      	b.n	80109d8 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80106f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106fa:	3334      	adds	r3, #52	@ 0x34
 80106fc:	3316      	adds	r3, #22
 80106fe:	4618      	mov	r0, r3
 8010700:	f7fd ff46 	bl	800e590 <ld_word>
 8010704:	4603      	mov	r3, r0
 8010706:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801070a:	2b00      	cmp	r3, #0
 801070c:	d106      	bne.n	801071c <find_volume+0x1cc>
 801070e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010710:	3334      	adds	r3, #52	@ 0x34
 8010712:	3324      	adds	r3, #36	@ 0x24
 8010714:	4618      	mov	r0, r3
 8010716:	f7fd ff53 	bl	800e5c0 <ld_dword>
 801071a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801071c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801071e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010720:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010724:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8010728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801072a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801072c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801072e:	789b      	ldrb	r3, [r3, #2]
 8010730:	2b01      	cmp	r3, #1
 8010732:	d005      	beq.n	8010740 <find_volume+0x1f0>
 8010734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010736:	789b      	ldrb	r3, [r3, #2]
 8010738:	2b02      	cmp	r3, #2
 801073a:	d001      	beq.n	8010740 <find_volume+0x1f0>
 801073c:	230d      	movs	r3, #13
 801073e:	e14b      	b.n	80109d8 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010742:	789b      	ldrb	r3, [r3, #2]
 8010744:	461a      	mov	r2, r3
 8010746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010748:	fb02 f303 	mul.w	r3, r2, r3
 801074c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801074e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010754:	461a      	mov	r2, r3
 8010756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010758:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801075a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801075c:	895b      	ldrh	r3, [r3, #10]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d008      	beq.n	8010774 <find_volume+0x224>
 8010762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010764:	895b      	ldrh	r3, [r3, #10]
 8010766:	461a      	mov	r2, r3
 8010768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801076a:	895b      	ldrh	r3, [r3, #10]
 801076c:	3b01      	subs	r3, #1
 801076e:	4013      	ands	r3, r2
 8010770:	2b00      	cmp	r3, #0
 8010772:	d001      	beq.n	8010778 <find_volume+0x228>
 8010774:	230d      	movs	r3, #13
 8010776:	e12f      	b.n	80109d8 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801077a:	3334      	adds	r3, #52	@ 0x34
 801077c:	3311      	adds	r3, #17
 801077e:	4618      	mov	r0, r3
 8010780:	f7fd ff06 	bl	800e590 <ld_word>
 8010784:	4603      	mov	r3, r0
 8010786:	461a      	mov	r2, r3
 8010788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801078a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801078c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801078e:	891b      	ldrh	r3, [r3, #8]
 8010790:	f003 030f 	and.w	r3, r3, #15
 8010794:	b29b      	uxth	r3, r3
 8010796:	2b00      	cmp	r3, #0
 8010798:	d001      	beq.n	801079e <find_volume+0x24e>
 801079a:	230d      	movs	r3, #13
 801079c:	e11c      	b.n	80109d8 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801079e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107a0:	3334      	adds	r3, #52	@ 0x34
 80107a2:	3313      	adds	r3, #19
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7fd fef3 	bl	800e590 <ld_word>
 80107aa:	4603      	mov	r3, r0
 80107ac:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80107ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d106      	bne.n	80107c2 <find_volume+0x272>
 80107b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107b6:	3334      	adds	r3, #52	@ 0x34
 80107b8:	3320      	adds	r3, #32
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7fd ff00 	bl	800e5c0 <ld_dword>
 80107c0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80107c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107c4:	3334      	adds	r3, #52	@ 0x34
 80107c6:	330e      	adds	r3, #14
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7fd fee1 	bl	800e590 <ld_word>
 80107ce:	4603      	mov	r3, r0
 80107d0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80107d2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d101      	bne.n	80107dc <find_volume+0x28c>
 80107d8:	230d      	movs	r3, #13
 80107da:	e0fd      	b.n	80109d8 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80107dc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80107de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107e0:	4413      	add	r3, r2
 80107e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80107e4:	8912      	ldrh	r2, [r2, #8]
 80107e6:	0912      	lsrs	r2, r2, #4
 80107e8:	b292      	uxth	r2, r2
 80107ea:	4413      	add	r3, r2
 80107ec:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80107ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80107f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d204      	bcs.n	8010800 <find_volume+0x2b0>
 80107f6:	230d      	movs	r3, #13
 80107f8:	e0ee      	b.n	80109d8 <find_volume+0x488>
 80107fa:	bf00      	nop
 80107fc:	20002040 	.word	0x20002040
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010800:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010804:	1ad3      	subs	r3, r2, r3
 8010806:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010808:	8952      	ldrh	r2, [r2, #10]
 801080a:	fbb3 f3f2 	udiv	r3, r3, r2
 801080e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010812:	2b00      	cmp	r3, #0
 8010814:	d101      	bne.n	801081a <find_volume+0x2ca>
 8010816:	230d      	movs	r3, #13
 8010818:	e0de      	b.n	80109d8 <find_volume+0x488>
		fmt = FS_FAT32;
 801081a:	2303      	movs	r3, #3
 801081c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010822:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010826:	4293      	cmp	r3, r2
 8010828:	d802      	bhi.n	8010830 <find_volume+0x2e0>
 801082a:	2302      	movs	r3, #2
 801082c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010832:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010836:	4293      	cmp	r3, r2
 8010838:	d802      	bhi.n	8010840 <find_volume+0x2f0>
 801083a:	2301      	movs	r3, #1
 801083c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010842:	1c9a      	adds	r2, r3, #2
 8010844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010846:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801084a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801084c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801084e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010850:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010852:	441a      	add	r2, r3
 8010854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010856:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010858:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801085a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801085c:	441a      	add	r2, r3
 801085e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010860:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8010862:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010866:	2b03      	cmp	r3, #3
 8010868:	d11e      	bne.n	80108a8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801086a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801086c:	3334      	adds	r3, #52	@ 0x34
 801086e:	332a      	adds	r3, #42	@ 0x2a
 8010870:	4618      	mov	r0, r3
 8010872:	f7fd fe8d 	bl	800e590 <ld_word>
 8010876:	4603      	mov	r3, r0
 8010878:	2b00      	cmp	r3, #0
 801087a:	d001      	beq.n	8010880 <find_volume+0x330>
 801087c:	230d      	movs	r3, #13
 801087e:	e0ab      	b.n	80109d8 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010882:	891b      	ldrh	r3, [r3, #8]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d001      	beq.n	801088c <find_volume+0x33c>
 8010888:	230d      	movs	r3, #13
 801088a:	e0a5      	b.n	80109d8 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801088c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801088e:	3334      	adds	r3, #52	@ 0x34
 8010890:	332c      	adds	r3, #44	@ 0x2c
 8010892:	4618      	mov	r0, r3
 8010894:	f7fd fe94 	bl	800e5c0 <ld_dword>
 8010898:	4602      	mov	r2, r0
 801089a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801089c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801089e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108a0:	699b      	ldr	r3, [r3, #24]
 80108a2:	009b      	lsls	r3, r3, #2
 80108a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80108a6:	e01f      	b.n	80108e8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80108a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108aa:	891b      	ldrh	r3, [r3, #8]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d101      	bne.n	80108b4 <find_volume+0x364>
 80108b0:	230d      	movs	r3, #13
 80108b2:	e091      	b.n	80109d8 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80108b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80108b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108ba:	441a      	add	r2, r3
 80108bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108be:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80108c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80108c4:	2b02      	cmp	r3, #2
 80108c6:	d103      	bne.n	80108d0 <find_volume+0x380>
 80108c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108ca:	699b      	ldr	r3, [r3, #24]
 80108cc:	005b      	lsls	r3, r3, #1
 80108ce:	e00a      	b.n	80108e6 <find_volume+0x396>
 80108d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108d2:	699a      	ldr	r2, [r3, #24]
 80108d4:	4613      	mov	r3, r2
 80108d6:	005b      	lsls	r3, r3, #1
 80108d8:	4413      	add	r3, r2
 80108da:	085a      	lsrs	r2, r3, #1
 80108dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108de:	699b      	ldr	r3, [r3, #24]
 80108e0:	f003 0301 	and.w	r3, r3, #1
 80108e4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80108e6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80108e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108ea:	69da      	ldr	r2, [r3, #28]
 80108ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80108ee:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80108f2:	0a5b      	lsrs	r3, r3, #9
 80108f4:	429a      	cmp	r2, r3
 80108f6:	d201      	bcs.n	80108fc <find_volume+0x3ac>
 80108f8:	230d      	movs	r3, #13
 80108fa:	e06d      	b.n	80109d8 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80108fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108fe:	f04f 32ff 	mov.w	r2, #4294967295
 8010902:	615a      	str	r2, [r3, #20]
 8010904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010906:	695a      	ldr	r2, [r3, #20]
 8010908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801090a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801090c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801090e:	2280      	movs	r2, #128	@ 0x80
 8010910:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010912:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010916:	2b03      	cmp	r3, #3
 8010918:	d149      	bne.n	80109ae <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801091a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801091c:	3334      	adds	r3, #52	@ 0x34
 801091e:	3330      	adds	r3, #48	@ 0x30
 8010920:	4618      	mov	r0, r3
 8010922:	f7fd fe35 	bl	800e590 <ld_word>
 8010926:	4603      	mov	r3, r0
 8010928:	2b01      	cmp	r3, #1
 801092a:	d140      	bne.n	80109ae <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801092c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801092e:	3301      	adds	r3, #1
 8010930:	4619      	mov	r1, r3
 8010932:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010934:	f7fe f8dc 	bl	800eaf0 <move_window>
 8010938:	4603      	mov	r3, r0
 801093a:	2b00      	cmp	r3, #0
 801093c:	d137      	bne.n	80109ae <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801093e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010940:	2200      	movs	r2, #0
 8010942:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010946:	3334      	adds	r3, #52	@ 0x34
 8010948:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801094c:	4618      	mov	r0, r3
 801094e:	f7fd fe1f 	bl	800e590 <ld_word>
 8010952:	4603      	mov	r3, r0
 8010954:	461a      	mov	r2, r3
 8010956:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801095a:	429a      	cmp	r2, r3
 801095c:	d127      	bne.n	80109ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801095e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010960:	3334      	adds	r3, #52	@ 0x34
 8010962:	4618      	mov	r0, r3
 8010964:	f7fd fe2c 	bl	800e5c0 <ld_dword>
 8010968:	4603      	mov	r3, r0
 801096a:	4a1d      	ldr	r2, [pc, #116]	@ (80109e0 <find_volume+0x490>)
 801096c:	4293      	cmp	r3, r2
 801096e:	d11e      	bne.n	80109ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010972:	3334      	adds	r3, #52	@ 0x34
 8010974:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010978:	4618      	mov	r0, r3
 801097a:	f7fd fe21 	bl	800e5c0 <ld_dword>
 801097e:	4603      	mov	r3, r0
 8010980:	4a18      	ldr	r2, [pc, #96]	@ (80109e4 <find_volume+0x494>)
 8010982:	4293      	cmp	r3, r2
 8010984:	d113      	bne.n	80109ae <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010988:	3334      	adds	r3, #52	@ 0x34
 801098a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801098e:	4618      	mov	r0, r3
 8010990:	f7fd fe16 	bl	800e5c0 <ld_dword>
 8010994:	4602      	mov	r2, r0
 8010996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010998:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801099a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801099c:	3334      	adds	r3, #52	@ 0x34
 801099e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80109a2:	4618      	mov	r0, r3
 80109a4:	f7fd fe0c 	bl	800e5c0 <ld_dword>
 80109a8:	4602      	mov	r2, r0
 80109aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109ac:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80109ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109b0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80109b4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80109b6:	4b0c      	ldr	r3, [pc, #48]	@ (80109e8 <find_volume+0x498>)
 80109b8:	881b      	ldrh	r3, [r3, #0]
 80109ba:	3301      	adds	r3, #1
 80109bc:	b29a      	uxth	r2, r3
 80109be:	4b0a      	ldr	r3, [pc, #40]	@ (80109e8 <find_volume+0x498>)
 80109c0:	801a      	strh	r2, [r3, #0]
 80109c2:	4b09      	ldr	r3, [pc, #36]	@ (80109e8 <find_volume+0x498>)
 80109c4:	881a      	ldrh	r2, [r3, #0]
 80109c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109c8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80109ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109cc:	4a07      	ldr	r2, [pc, #28]	@ (80109ec <find_volume+0x49c>)
 80109ce:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80109d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80109d2:	f7fe f825 	bl	800ea20 <clear_lock>
#endif
	return FR_OK;
 80109d6:	2300      	movs	r3, #0
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3758      	adds	r7, #88	@ 0x58
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}
 80109e0:	41615252 	.word	0x41615252
 80109e4:	61417272 	.word	0x61417272
 80109e8:	20002044 	.word	0x20002044
 80109ec:	20002068 	.word	0x20002068

080109f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b084      	sub	sp, #16
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
 80109f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80109fa:	2309      	movs	r3, #9
 80109fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d01c      	beq.n	8010a3e <validate+0x4e>
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d018      	beq.n	8010a3e <validate+0x4e>
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d013      	beq.n	8010a3e <validate+0x4e>
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	889a      	ldrh	r2, [r3, #4]
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	88db      	ldrh	r3, [r3, #6]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d10c      	bne.n	8010a3e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	785b      	ldrb	r3, [r3, #1]
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	f7fd fd10 	bl	800e450 <disk_status>
 8010a30:	4603      	mov	r3, r0
 8010a32:	f003 0301 	and.w	r3, r3, #1
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d101      	bne.n	8010a3e <validate+0x4e>
			res = FR_OK;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010a3e:	7bfb      	ldrb	r3, [r7, #15]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d102      	bne.n	8010a4a <validate+0x5a>
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	e000      	b.n	8010a4c <validate+0x5c>
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	683a      	ldr	r2, [r7, #0]
 8010a4e:	6013      	str	r3, [r2, #0]
	return res;
 8010a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a52:	4618      	mov	r0, r3
 8010a54:	3710      	adds	r7, #16
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}
	...

08010a5c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b088      	sub	sp, #32
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	60f8      	str	r0, [r7, #12]
 8010a64:	60b9      	str	r1, [r7, #8]
 8010a66:	4613      	mov	r3, r2
 8010a68:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010a6e:	f107 0310 	add.w	r3, r7, #16
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7ff fcd1 	bl	801041a <get_ldnumber>
 8010a78:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	da01      	bge.n	8010a84 <f_mount+0x28>
 8010a80:	230b      	movs	r3, #11
 8010a82:	e02b      	b.n	8010adc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010a84:	4a17      	ldr	r2, [pc, #92]	@ (8010ae4 <f_mount+0x88>)
 8010a86:	69fb      	ldr	r3, [r7, #28]
 8010a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a8c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010a8e:	69bb      	ldr	r3, [r7, #24]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d005      	beq.n	8010aa0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010a94:	69b8      	ldr	r0, [r7, #24]
 8010a96:	f7fd ffc3 	bl	800ea20 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010a9a:	69bb      	ldr	r3, [r7, #24]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d002      	beq.n	8010aac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010aac:	68fa      	ldr	r2, [r7, #12]
 8010aae:	490d      	ldr	r1, [pc, #52]	@ (8010ae4 <f_mount+0x88>)
 8010ab0:	69fb      	ldr	r3, [r7, #28]
 8010ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d002      	beq.n	8010ac2 <f_mount+0x66>
 8010abc:	79fb      	ldrb	r3, [r7, #7]
 8010abe:	2b01      	cmp	r3, #1
 8010ac0:	d001      	beq.n	8010ac6 <f_mount+0x6a>
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	e00a      	b.n	8010adc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010ac6:	f107 010c 	add.w	r1, r7, #12
 8010aca:	f107 0308 	add.w	r3, r7, #8
 8010ace:	2200      	movs	r2, #0
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f7ff fd3d 	bl	8010550 <find_volume>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3720      	adds	r7, #32
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	20002040 	.word	0x20002040

08010ae8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b09a      	sub	sp, #104	@ 0x68
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	60f8      	str	r0, [r7, #12]
 8010af0:	60b9      	str	r1, [r7, #8]
 8010af2:	4613      	mov	r3, r2
 8010af4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d101      	bne.n	8010b00 <f_open+0x18>
 8010afc:	2309      	movs	r3, #9
 8010afe:	e1a9      	b.n	8010e54 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010b00:	79fb      	ldrb	r3, [r7, #7]
 8010b02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010b06:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010b08:	79fa      	ldrb	r2, [r7, #7]
 8010b0a:	f107 0114 	add.w	r1, r7, #20
 8010b0e:	f107 0308 	add.w	r3, r7, #8
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7ff fd1c 	bl	8010550 <find_volume>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8010b1e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	f040 818d 	bne.w	8010e42 <f_open+0x35a>
		dj.obj.fs = fs;
 8010b28:	697b      	ldr	r3, [r7, #20]
 8010b2a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010b2c:	68ba      	ldr	r2, [r7, #8]
 8010b2e:	f107 0318 	add.w	r3, r7, #24
 8010b32:	4611      	mov	r1, r2
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7ff fbff 	bl	8010338 <follow_path>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010b40:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d118      	bne.n	8010b7a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010b48:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010b4c:	b25b      	sxtb	r3, r3
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	da03      	bge.n	8010b5a <f_open+0x72>
				res = FR_INVALID_NAME;
 8010b52:	2306      	movs	r3, #6
 8010b54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8010b58:	e00f      	b.n	8010b7a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010b5a:	79fb      	ldrb	r3, [r7, #7]
 8010b5c:	2b01      	cmp	r3, #1
 8010b5e:	bf8c      	ite	hi
 8010b60:	2301      	movhi	r3, #1
 8010b62:	2300      	movls	r3, #0
 8010b64:	b2db      	uxtb	r3, r3
 8010b66:	461a      	mov	r2, r3
 8010b68:	f107 0318 	add.w	r3, r7, #24
 8010b6c:	4611      	mov	r1, r2
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f7fd fe0e 	bl	800e790 <chk_lock>
 8010b74:	4603      	mov	r3, r0
 8010b76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010b7a:	79fb      	ldrb	r3, [r7, #7]
 8010b7c:	f003 031c 	and.w	r3, r3, #28
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d07f      	beq.n	8010c84 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8010b84:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d017      	beq.n	8010bbc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010b8c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010b90:	2b04      	cmp	r3, #4
 8010b92:	d10e      	bne.n	8010bb2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010b94:	f7fd fe58 	bl	800e848 <enq_lock>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d006      	beq.n	8010bac <f_open+0xc4>
 8010b9e:	f107 0318 	add.w	r3, r7, #24
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f7ff f83a 	bl	800fc1c <dir_register>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	e000      	b.n	8010bae <f_open+0xc6>
 8010bac:	2312      	movs	r3, #18
 8010bae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010bb2:	79fb      	ldrb	r3, [r7, #7]
 8010bb4:	f043 0308 	orr.w	r3, r3, #8
 8010bb8:	71fb      	strb	r3, [r7, #7]
 8010bba:	e010      	b.n	8010bde <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010bbc:	7fbb      	ldrb	r3, [r7, #30]
 8010bbe:	f003 0311 	and.w	r3, r3, #17
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d003      	beq.n	8010bce <f_open+0xe6>
					res = FR_DENIED;
 8010bc6:	2307      	movs	r3, #7
 8010bc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8010bcc:	e007      	b.n	8010bde <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010bce:	79fb      	ldrb	r3, [r7, #7]
 8010bd0:	f003 0304 	and.w	r3, r3, #4
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d002      	beq.n	8010bde <f_open+0xf6>
 8010bd8:	2308      	movs	r3, #8
 8010bda:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010bde:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d168      	bne.n	8010cb8 <f_open+0x1d0>
 8010be6:	79fb      	ldrb	r3, [r7, #7]
 8010be8:	f003 0308 	and.w	r3, r3, #8
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d063      	beq.n	8010cb8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8010bf0:	f7fa fa42 	bl	800b078 <get_fattime>
 8010bf4:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bf8:	330e      	adds	r3, #14
 8010bfa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7fd fd1d 	bl	800e63c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c04:	3316      	adds	r3, #22
 8010c06:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7fd fd17 	bl	800e63c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c10:	330b      	adds	r3, #11
 8010c12:	2220      	movs	r2, #32
 8010c14:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c1a:	4611      	mov	r1, r2
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7fe fc6b 	bl	800f4f8 <ld_clust>
 8010c22:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010c28:	2200      	movs	r2, #0
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7fe fc83 	bl	800f536 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c32:	331c      	adds	r3, #28
 8010c34:	2100      	movs	r1, #0
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7fd fd00 	bl	800e63c <st_dword>
					fs->wflag = 1;
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	2201      	movs	r2, #1
 8010c40:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d037      	beq.n	8010cb8 <f_open+0x1d0>
						dw = fs->winsect;
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c4c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8010c4e:	f107 0318 	add.w	r3, r7, #24
 8010c52:	2200      	movs	r2, #0
 8010c54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010c56:	4618      	mov	r0, r3
 8010c58:	f7fe f996 	bl	800ef88 <remove_chain>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8010c62:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d126      	bne.n	8010cb8 <f_open+0x1d0>
							res = move_window(fs, dw);
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f7fd ff3e 	bl	800eaf0 <move_window>
 8010c74:	4603      	mov	r3, r0
 8010c76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010c7e:	3a01      	subs	r2, #1
 8010c80:	611a      	str	r2, [r3, #16]
 8010c82:	e019      	b.n	8010cb8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010c84:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d115      	bne.n	8010cb8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010c8c:	7fbb      	ldrb	r3, [r7, #30]
 8010c8e:	f003 0310 	and.w	r3, r3, #16
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d003      	beq.n	8010c9e <f_open+0x1b6>
					res = FR_NO_FILE;
 8010c96:	2304      	movs	r3, #4
 8010c98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8010c9c:	e00c      	b.n	8010cb8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010c9e:	79fb      	ldrb	r3, [r7, #7]
 8010ca0:	f003 0302 	and.w	r3, r3, #2
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d007      	beq.n	8010cb8 <f_open+0x1d0>
 8010ca8:	7fbb      	ldrb	r3, [r7, #30]
 8010caa:	f003 0301 	and.w	r3, r3, #1
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d002      	beq.n	8010cb8 <f_open+0x1d0>
						res = FR_DENIED;
 8010cb2:	2307      	movs	r3, #7
 8010cb4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8010cb8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d126      	bne.n	8010d0e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010cc0:	79fb      	ldrb	r3, [r7, #7]
 8010cc2:	f003 0308 	and.w	r3, r3, #8
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d003      	beq.n	8010cd2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8010cca:	79fb      	ldrb	r3, [r7, #7]
 8010ccc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cd0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8010cda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010ce0:	79fb      	ldrb	r3, [r7, #7]
 8010ce2:	2b01      	cmp	r3, #1
 8010ce4:	bf8c      	ite	hi
 8010ce6:	2301      	movhi	r3, #1
 8010ce8:	2300      	movls	r3, #0
 8010cea:	b2db      	uxtb	r3, r3
 8010cec:	461a      	mov	r2, r3
 8010cee:	f107 0318 	add.w	r3, r7, #24
 8010cf2:	4611      	mov	r1, r2
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f7fd fdc9 	bl	800e88c <inc_lock>
 8010cfa:	4602      	mov	r2, r0
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	691b      	ldr	r3, [r3, #16]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d102      	bne.n	8010d0e <f_open+0x226>
 8010d08:	2302      	movs	r3, #2
 8010d0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010d0e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	f040 8095 	bne.w	8010e42 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010d1c:	4611      	mov	r1, r2
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f7fe fbea 	bl	800f4f8 <ld_clust>
 8010d24:	4602      	mov	r2, r0
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d2c:	331c      	adds	r3, #28
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7fd fc46 	bl	800e5c0 <ld_dword>
 8010d34:	4602      	mov	r2, r0
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010d40:	697a      	ldr	r2, [r7, #20]
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	88da      	ldrh	r2, [r3, #6]
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	79fa      	ldrb	r2, [r7, #7]
 8010d52:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	2200      	movs	r2, #0
 8010d58:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	2200      	movs	r2, #0
 8010d64:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	3330      	adds	r3, #48	@ 0x30
 8010d6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010d6e:	2100      	movs	r1, #0
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7fd fcb0 	bl	800e6d6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010d76:	79fb      	ldrb	r3, [r7, #7]
 8010d78:	f003 0320 	and.w	r3, r3, #32
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d060      	beq.n	8010e42 <f_open+0x35a>
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	68db      	ldr	r3, [r3, #12]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d05c      	beq.n	8010e42 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	68da      	ldr	r2, [r3, #12]
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	895b      	ldrh	r3, [r3, #10]
 8010d94:	025b      	lsls	r3, r3, #9
 8010d96:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	689b      	ldr	r3, [r3, #8]
 8010d9c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	68db      	ldr	r3, [r3, #12]
 8010da2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010da4:	e016      	b.n	8010dd4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7fd ff5b 	bl	800ec66 <get_fat>
 8010db0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8010db2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010db4:	2b01      	cmp	r3, #1
 8010db6:	d802      	bhi.n	8010dbe <f_open+0x2d6>
 8010db8:	2302      	movs	r3, #2
 8010dba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010dbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dc4:	d102      	bne.n	8010dcc <f_open+0x2e4>
 8010dc6:	2301      	movs	r3, #1
 8010dc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010dcc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010dce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010dd0:	1ad3      	subs	r3, r2, r3
 8010dd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010dd4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d103      	bne.n	8010de4 <f_open+0x2fc>
 8010ddc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010dde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d8e0      	bhi.n	8010da6 <f_open+0x2be>
				}
				fp->clust = clst;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010de8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010dea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d127      	bne.n	8010e42 <f_open+0x35a>
 8010df2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d022      	beq.n	8010e42 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7fd ff11 	bl	800ec28 <clust2sect>
 8010e06:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d103      	bne.n	8010e16 <f_open+0x32e>
						res = FR_INT_ERR;
 8010e0e:	2302      	movs	r3, #2
 8010e10:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8010e14:	e015      	b.n	8010e42 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010e16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010e18:	0a5a      	lsrs	r2, r3, #9
 8010e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e1c:	441a      	add	r2, r3
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	7858      	ldrb	r0, [r3, #1]
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	6a1a      	ldr	r2, [r3, #32]
 8010e30:	2301      	movs	r3, #1
 8010e32:	f7fd fb4f 	bl	800e4d4 <disk_read>
 8010e36:	4603      	mov	r3, r0
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d002      	beq.n	8010e42 <f_open+0x35a>
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010e42:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d002      	beq.n	8010e50 <f_open+0x368>
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010e50:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3768      	adds	r7, #104	@ 0x68
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}

08010e5c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b08e      	sub	sp, #56	@ 0x38
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	60f8      	str	r0, [r7, #12]
 8010e64:	60b9      	str	r1, [r7, #8]
 8010e66:	607a      	str	r2, [r7, #4]
 8010e68:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	2200      	movs	r2, #0
 8010e72:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	f107 0214 	add.w	r2, r7, #20
 8010e7a:	4611      	mov	r1, r2
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f7ff fdb7 	bl	80109f0 <validate>
 8010e82:	4603      	mov	r3, r0
 8010e84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010e88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d107      	bne.n	8010ea0 <f_read+0x44>
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	7d5b      	ldrb	r3, [r3, #21]
 8010e94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010e98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d002      	beq.n	8010ea6 <f_read+0x4a>
 8010ea0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010ea4:	e115      	b.n	80110d2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	7d1b      	ldrb	r3, [r3, #20]
 8010eaa:	f003 0301 	and.w	r3, r3, #1
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d101      	bne.n	8010eb6 <f_read+0x5a>
 8010eb2:	2307      	movs	r3, #7
 8010eb4:	e10d      	b.n	80110d2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	68da      	ldr	r2, [r3, #12]
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	699b      	ldr	r3, [r3, #24]
 8010ebe:	1ad3      	subs	r3, r2, r3
 8010ec0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010ec2:	687a      	ldr	r2, [r7, #4]
 8010ec4:	6a3b      	ldr	r3, [r7, #32]
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	f240 80fe 	bls.w	80110c8 <f_read+0x26c>
 8010ecc:	6a3b      	ldr	r3, [r7, #32]
 8010ece:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010ed0:	e0fa      	b.n	80110c8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	699b      	ldr	r3, [r3, #24]
 8010ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	f040 80c6 	bne.w	801106c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	699b      	ldr	r3, [r3, #24]
 8010ee4:	0a5b      	lsrs	r3, r3, #9
 8010ee6:	697a      	ldr	r2, [r7, #20]
 8010ee8:	8952      	ldrh	r2, [r2, #10]
 8010eea:	3a01      	subs	r2, #1
 8010eec:	4013      	ands	r3, r2
 8010eee:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010ef0:	69fb      	ldr	r3, [r7, #28]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d12f      	bne.n	8010f56 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	699b      	ldr	r3, [r3, #24]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d103      	bne.n	8010f06 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	689b      	ldr	r3, [r3, #8]
 8010f02:	633b      	str	r3, [r7, #48]	@ 0x30
 8010f04:	e013      	b.n	8010f2e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d007      	beq.n	8010f1e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	699b      	ldr	r3, [r3, #24]
 8010f12:	4619      	mov	r1, r3
 8010f14:	68f8      	ldr	r0, [r7, #12]
 8010f16:	f7fe f934 	bl	800f182 <clmt_clust>
 8010f1a:	6338      	str	r0, [r7, #48]	@ 0x30
 8010f1c:	e007      	b.n	8010f2e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010f1e:	68fa      	ldr	r2, [r7, #12]
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	69db      	ldr	r3, [r3, #28]
 8010f24:	4619      	mov	r1, r3
 8010f26:	4610      	mov	r0, r2
 8010f28:	f7fd fe9d 	bl	800ec66 <get_fat>
 8010f2c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f30:	2b01      	cmp	r3, #1
 8010f32:	d804      	bhi.n	8010f3e <f_read+0xe2>
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	2202      	movs	r2, #2
 8010f38:	755a      	strb	r2, [r3, #21]
 8010f3a:	2302      	movs	r3, #2
 8010f3c:	e0c9      	b.n	80110d2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f44:	d104      	bne.n	8010f50 <f_read+0xf4>
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	2201      	movs	r2, #1
 8010f4a:	755a      	strb	r2, [r3, #21]
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	e0c0      	b.n	80110d2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f54:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010f56:	697a      	ldr	r2, [r7, #20]
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	69db      	ldr	r3, [r3, #28]
 8010f5c:	4619      	mov	r1, r3
 8010f5e:	4610      	mov	r0, r2
 8010f60:	f7fd fe62 	bl	800ec28 <clust2sect>
 8010f64:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010f66:	69bb      	ldr	r3, [r7, #24]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d104      	bne.n	8010f76 <f_read+0x11a>
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	2202      	movs	r2, #2
 8010f70:	755a      	strb	r2, [r3, #21]
 8010f72:	2302      	movs	r3, #2
 8010f74:	e0ad      	b.n	80110d2 <f_read+0x276>
			sect += csect;
 8010f76:	69ba      	ldr	r2, [r7, #24]
 8010f78:	69fb      	ldr	r3, [r7, #28]
 8010f7a:	4413      	add	r3, r2
 8010f7c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	0a5b      	lsrs	r3, r3, #9
 8010f82:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d039      	beq.n	8010ffe <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010f8a:	69fa      	ldr	r2, [r7, #28]
 8010f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f8e:	4413      	add	r3, r2
 8010f90:	697a      	ldr	r2, [r7, #20]
 8010f92:	8952      	ldrh	r2, [r2, #10]
 8010f94:	4293      	cmp	r3, r2
 8010f96:	d905      	bls.n	8010fa4 <f_read+0x148>
					cc = fs->csize - csect;
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	895b      	ldrh	r3, [r3, #10]
 8010f9c:	461a      	mov	r2, r3
 8010f9e:	69fb      	ldr	r3, [r7, #28]
 8010fa0:	1ad3      	subs	r3, r2, r3
 8010fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	7858      	ldrb	r0, [r3, #1]
 8010fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010faa:	69ba      	ldr	r2, [r7, #24]
 8010fac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010fae:	f7fd fa91 	bl	800e4d4 <disk_read>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d004      	beq.n	8010fc2 <f_read+0x166>
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	2201      	movs	r2, #1
 8010fbc:	755a      	strb	r2, [r3, #21]
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	e087      	b.n	80110d2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	7d1b      	ldrb	r3, [r3, #20]
 8010fc6:	b25b      	sxtb	r3, r3
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	da14      	bge.n	8010ff6 <f_read+0x19a>
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	6a1a      	ldr	r2, [r3, #32]
 8010fd0:	69bb      	ldr	r3, [r7, #24]
 8010fd2:	1ad3      	subs	r3, r2, r3
 8010fd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d90d      	bls.n	8010ff6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	6a1a      	ldr	r2, [r3, #32]
 8010fde:	69bb      	ldr	r3, [r7, #24]
 8010fe0:	1ad3      	subs	r3, r2, r3
 8010fe2:	025b      	lsls	r3, r3, #9
 8010fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010fe6:	18d0      	adds	r0, r2, r3
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	3330      	adds	r3, #48	@ 0x30
 8010fec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010ff0:	4619      	mov	r1, r3
 8010ff2:	f7fd fb4f 	bl	800e694 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ff8:	025b      	lsls	r3, r3, #9
 8010ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8010ffc:	e050      	b.n	80110a0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	6a1b      	ldr	r3, [r3, #32]
 8011002:	69ba      	ldr	r2, [r7, #24]
 8011004:	429a      	cmp	r2, r3
 8011006:	d02e      	beq.n	8011066 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	7d1b      	ldrb	r3, [r3, #20]
 801100c:	b25b      	sxtb	r3, r3
 801100e:	2b00      	cmp	r3, #0
 8011010:	da18      	bge.n	8011044 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	7858      	ldrb	r0, [r3, #1]
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	6a1a      	ldr	r2, [r3, #32]
 8011020:	2301      	movs	r3, #1
 8011022:	f7fd fa77 	bl	800e514 <disk_write>
 8011026:	4603      	mov	r3, r0
 8011028:	2b00      	cmp	r3, #0
 801102a:	d004      	beq.n	8011036 <f_read+0x1da>
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	2201      	movs	r2, #1
 8011030:	755a      	strb	r2, [r3, #21]
 8011032:	2301      	movs	r3, #1
 8011034:	e04d      	b.n	80110d2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	7d1b      	ldrb	r3, [r3, #20]
 801103a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801103e:	b2da      	uxtb	r2, r3
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011044:	697b      	ldr	r3, [r7, #20]
 8011046:	7858      	ldrb	r0, [r3, #1]
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801104e:	2301      	movs	r3, #1
 8011050:	69ba      	ldr	r2, [r7, #24]
 8011052:	f7fd fa3f 	bl	800e4d4 <disk_read>
 8011056:	4603      	mov	r3, r0
 8011058:	2b00      	cmp	r3, #0
 801105a:	d004      	beq.n	8011066 <f_read+0x20a>
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	2201      	movs	r2, #1
 8011060:	755a      	strb	r2, [r3, #21]
 8011062:	2301      	movs	r3, #1
 8011064:	e035      	b.n	80110d2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	69ba      	ldr	r2, [r7, #24]
 801106a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	699b      	ldr	r3, [r3, #24]
 8011070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011074:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8011078:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801107a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	429a      	cmp	r2, r3
 8011080:	d901      	bls.n	8011086 <f_read+0x22a>
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	699b      	ldr	r3, [r3, #24]
 8011090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011094:	4413      	add	r3, r2
 8011096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011098:	4619      	mov	r1, r3
 801109a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801109c:	f7fd fafa 	bl	800e694 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80110a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110a4:	4413      	add	r3, r2
 80110a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	699a      	ldr	r2, [r3, #24]
 80110ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110ae:	441a      	add	r2, r3
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	619a      	str	r2, [r3, #24]
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110ba:	441a      	add	r2, r3
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	601a      	str	r2, [r3, #0]
 80110c0:	687a      	ldr	r2, [r7, #4]
 80110c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110c4:	1ad3      	subs	r3, r2, r3
 80110c6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	f47f af01 	bne.w	8010ed2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80110d0:	2300      	movs	r3, #0
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3738      	adds	r7, #56	@ 0x38
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}

080110da <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80110da:	b580      	push	{r7, lr}
 80110dc:	b086      	sub	sp, #24
 80110de:	af00      	add	r7, sp, #0
 80110e0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f107 0208 	add.w	r2, r7, #8
 80110e8:	4611      	mov	r1, r2
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7ff fc80 	bl	80109f0 <validate>
 80110f0:	4603      	mov	r3, r0
 80110f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80110f4:	7dfb      	ldrb	r3, [r7, #23]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d168      	bne.n	80111cc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	7d1b      	ldrb	r3, [r3, #20]
 80110fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011102:	2b00      	cmp	r3, #0
 8011104:	d062      	beq.n	80111cc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	7d1b      	ldrb	r3, [r3, #20]
 801110a:	b25b      	sxtb	r3, r3
 801110c:	2b00      	cmp	r3, #0
 801110e:	da15      	bge.n	801113c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	7858      	ldrb	r0, [r3, #1]
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6a1a      	ldr	r2, [r3, #32]
 801111e:	2301      	movs	r3, #1
 8011120:	f7fd f9f8 	bl	800e514 <disk_write>
 8011124:	4603      	mov	r3, r0
 8011126:	2b00      	cmp	r3, #0
 8011128:	d001      	beq.n	801112e <f_sync+0x54>
 801112a:	2301      	movs	r3, #1
 801112c:	e04f      	b.n	80111ce <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	7d1b      	ldrb	r3, [r3, #20]
 8011132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011136:	b2da      	uxtb	r2, r3
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801113c:	f7f9 ff9c 	bl	800b078 <get_fattime>
 8011140:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011142:	68ba      	ldr	r2, [r7, #8]
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011148:	4619      	mov	r1, r3
 801114a:	4610      	mov	r0, r2
 801114c:	f7fd fcd0 	bl	800eaf0 <move_window>
 8011150:	4603      	mov	r3, r0
 8011152:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011154:	7dfb      	ldrb	r3, [r7, #23]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d138      	bne.n	80111cc <f_sync+0xf2>
					dir = fp->dir_ptr;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801115e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	330b      	adds	r3, #11
 8011164:	781a      	ldrb	r2, [r3, #0]
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	330b      	adds	r3, #11
 801116a:	f042 0220 	orr.w	r2, r2, #32
 801116e:	b2d2      	uxtb	r2, r2
 8011170:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6818      	ldr	r0, [r3, #0]
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	689b      	ldr	r3, [r3, #8]
 801117a:	461a      	mov	r2, r3
 801117c:	68f9      	ldr	r1, [r7, #12]
 801117e:	f7fe f9da 	bl	800f536 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	f103 021c 	add.w	r2, r3, #28
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	68db      	ldr	r3, [r3, #12]
 801118c:	4619      	mov	r1, r3
 801118e:	4610      	mov	r0, r2
 8011190:	f7fd fa54 	bl	800e63c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	3316      	adds	r3, #22
 8011198:	6939      	ldr	r1, [r7, #16]
 801119a:	4618      	mov	r0, r3
 801119c:	f7fd fa4e 	bl	800e63c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	3312      	adds	r3, #18
 80111a4:	2100      	movs	r1, #0
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7fd fa2d 	bl	800e606 <st_word>
					fs->wflag = 1;
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	2201      	movs	r2, #1
 80111b0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80111b2:	68bb      	ldr	r3, [r7, #8]
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7fd fcc9 	bl	800eb4c <sync_fs>
 80111ba:	4603      	mov	r3, r0
 80111bc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	7d1b      	ldrb	r3, [r3, #20]
 80111c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80111c6:	b2da      	uxtb	r2, r3
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80111cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3718      	adds	r7, #24
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}

080111d6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80111d6:	b580      	push	{r7, lr}
 80111d8:	b084      	sub	sp, #16
 80111da:	af00      	add	r7, sp, #0
 80111dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f7ff ff7b 	bl	80110da <f_sync>
 80111e4:	4603      	mov	r3, r0
 80111e6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80111e8:	7bfb      	ldrb	r3, [r7, #15]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d118      	bne.n	8011220 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	f107 0208 	add.w	r2, r7, #8
 80111f4:	4611      	mov	r1, r2
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7ff fbfa 	bl	80109f0 <validate>
 80111fc:	4603      	mov	r3, r0
 80111fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011200:	7bfb      	ldrb	r3, [r7, #15]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d10c      	bne.n	8011220 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	691b      	ldr	r3, [r3, #16]
 801120a:	4618      	mov	r0, r3
 801120c:	f7fd fbcc 	bl	800e9a8 <dec_lock>
 8011210:	4603      	mov	r3, r0
 8011212:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011214:	7bfb      	ldrb	r3, [r7, #15]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d102      	bne.n	8011220 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2200      	movs	r2, #0
 801121e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011220:	7bfb      	ldrb	r3, [r7, #15]
}
 8011222:	4618      	mov	r0, r3
 8011224:	3710      	adds	r7, #16
 8011226:	46bd      	mov	sp, r7
 8011228:	bd80      	pop	{r7, pc}

0801122a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801122a:	b580      	push	{r7, lr}
 801122c:	b090      	sub	sp, #64	@ 0x40
 801122e:	af00      	add	r7, sp, #0
 8011230:	6078      	str	r0, [r7, #4]
 8011232:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f107 0208 	add.w	r2, r7, #8
 801123a:	4611      	mov	r1, r2
 801123c:	4618      	mov	r0, r3
 801123e:	f7ff fbd7 	bl	80109f0 <validate>
 8011242:	4603      	mov	r3, r0
 8011244:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011248:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801124c:	2b00      	cmp	r3, #0
 801124e:	d103      	bne.n	8011258 <f_lseek+0x2e>
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	7d5b      	ldrb	r3, [r3, #21]
 8011254:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011258:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801125c:	2b00      	cmp	r3, #0
 801125e:	d002      	beq.n	8011266 <f_lseek+0x3c>
 8011260:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011264:	e1e6      	b.n	8011634 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801126a:	2b00      	cmp	r3, #0
 801126c:	f000 80d1 	beq.w	8011412 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011276:	d15a      	bne.n	801132e <f_lseek+0x104>
			tbl = fp->cltbl;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801127c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011280:	1d1a      	adds	r2, r3, #4
 8011282:	627a      	str	r2, [r7, #36]	@ 0x24
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	617b      	str	r3, [r7, #20]
 8011288:	2302      	movs	r3, #2
 801128a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	689b      	ldr	r3, [r3, #8]
 8011290:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8011292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011294:	2b00      	cmp	r3, #0
 8011296:	d03a      	beq.n	801130e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801129a:	613b      	str	r3, [r7, #16]
 801129c:	2300      	movs	r3, #0
 801129e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80112a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112a2:	3302      	adds	r3, #2
 80112a4:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80112a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112a8:	60fb      	str	r3, [r7, #12]
 80112aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ac:	3301      	adds	r3, #1
 80112ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7fd fcd6 	bl	800ec66 <get_fat>
 80112ba:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80112bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112be:	2b01      	cmp	r3, #1
 80112c0:	d804      	bhi.n	80112cc <f_lseek+0xa2>
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	2202      	movs	r2, #2
 80112c6:	755a      	strb	r2, [r3, #21]
 80112c8:	2302      	movs	r3, #2
 80112ca:	e1b3      	b.n	8011634 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80112cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112d2:	d104      	bne.n	80112de <f_lseek+0xb4>
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2201      	movs	r2, #1
 80112d8:	755a      	strb	r2, [r3, #21]
 80112da:	2301      	movs	r3, #1
 80112dc:	e1aa      	b.n	8011634 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	3301      	adds	r3, #1
 80112e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d0de      	beq.n	80112a6 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80112e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	429a      	cmp	r2, r3
 80112ee:	d809      	bhi.n	8011304 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80112f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112f2:	1d1a      	adds	r2, r3, #4
 80112f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80112f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80112f8:	601a      	str	r2, [r3, #0]
 80112fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112fc:	1d1a      	adds	r2, r3, #4
 80112fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8011300:	693a      	ldr	r2, [r7, #16]
 8011302:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	699b      	ldr	r3, [r3, #24]
 8011308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801130a:	429a      	cmp	r2, r3
 801130c:	d3c4      	bcc.n	8011298 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011312:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011314:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011316:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011318:	697b      	ldr	r3, [r7, #20]
 801131a:	429a      	cmp	r2, r3
 801131c:	d803      	bhi.n	8011326 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801131e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011320:	2200      	movs	r2, #0
 8011322:	601a      	str	r2, [r3, #0]
 8011324:	e184      	b.n	8011630 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011326:	2311      	movs	r3, #17
 8011328:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801132c:	e180      	b.n	8011630 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	68db      	ldr	r3, [r3, #12]
 8011332:	683a      	ldr	r2, [r7, #0]
 8011334:	429a      	cmp	r2, r3
 8011336:	d902      	bls.n	801133e <f_lseek+0x114>
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	683a      	ldr	r2, [r7, #0]
 8011342:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	2b00      	cmp	r3, #0
 8011348:	f000 8172 	beq.w	8011630 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	3b01      	subs	r3, #1
 8011350:	4619      	mov	r1, r3
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	f7fd ff15 	bl	800f182 <clmt_clust>
 8011358:	4602      	mov	r2, r0
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801135e:	68ba      	ldr	r2, [r7, #8]
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	69db      	ldr	r3, [r3, #28]
 8011364:	4619      	mov	r1, r3
 8011366:	4610      	mov	r0, r2
 8011368:	f7fd fc5e 	bl	800ec28 <clust2sect>
 801136c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801136e:	69bb      	ldr	r3, [r7, #24]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d104      	bne.n	801137e <f_lseek+0x154>
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2202      	movs	r2, #2
 8011378:	755a      	strb	r2, [r3, #21]
 801137a:	2302      	movs	r3, #2
 801137c:	e15a      	b.n	8011634 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	3b01      	subs	r3, #1
 8011382:	0a5b      	lsrs	r3, r3, #9
 8011384:	68ba      	ldr	r2, [r7, #8]
 8011386:	8952      	ldrh	r2, [r2, #10]
 8011388:	3a01      	subs	r2, #1
 801138a:	4013      	ands	r3, r2
 801138c:	69ba      	ldr	r2, [r7, #24]
 801138e:	4413      	add	r3, r2
 8011390:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	699b      	ldr	r3, [r3, #24]
 8011396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801139a:	2b00      	cmp	r3, #0
 801139c:	f000 8148 	beq.w	8011630 <f_lseek+0x406>
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	6a1b      	ldr	r3, [r3, #32]
 80113a4:	69ba      	ldr	r2, [r7, #24]
 80113a6:	429a      	cmp	r2, r3
 80113a8:	f000 8142 	beq.w	8011630 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	7d1b      	ldrb	r3, [r3, #20]
 80113b0:	b25b      	sxtb	r3, r3
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	da18      	bge.n	80113e8 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	7858      	ldrb	r0, [r3, #1]
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6a1a      	ldr	r2, [r3, #32]
 80113c4:	2301      	movs	r3, #1
 80113c6:	f7fd f8a5 	bl	800e514 <disk_write>
 80113ca:	4603      	mov	r3, r0
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d004      	beq.n	80113da <f_lseek+0x1b0>
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2201      	movs	r2, #1
 80113d4:	755a      	strb	r2, [r3, #21]
 80113d6:	2301      	movs	r3, #1
 80113d8:	e12c      	b.n	8011634 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	7d1b      	ldrb	r3, [r3, #20]
 80113de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80113e2:	b2da      	uxtb	r2, r3
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	7858      	ldrb	r0, [r3, #1]
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80113f2:	2301      	movs	r3, #1
 80113f4:	69ba      	ldr	r2, [r7, #24]
 80113f6:	f7fd f86d 	bl	800e4d4 <disk_read>
 80113fa:	4603      	mov	r3, r0
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d004      	beq.n	801140a <f_lseek+0x1e0>
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2201      	movs	r2, #1
 8011404:	755a      	strb	r2, [r3, #21]
 8011406:	2301      	movs	r3, #1
 8011408:	e114      	b.n	8011634 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	69ba      	ldr	r2, [r7, #24]
 801140e:	621a      	str	r2, [r3, #32]
 8011410:	e10e      	b.n	8011630 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	68db      	ldr	r3, [r3, #12]
 8011416:	683a      	ldr	r2, [r7, #0]
 8011418:	429a      	cmp	r2, r3
 801141a:	d908      	bls.n	801142e <f_lseek+0x204>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	7d1b      	ldrb	r3, [r3, #20]
 8011420:	f003 0302 	and.w	r3, r3, #2
 8011424:	2b00      	cmp	r3, #0
 8011426:	d102      	bne.n	801142e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	68db      	ldr	r3, [r3, #12]
 801142c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	699b      	ldr	r3, [r3, #24]
 8011432:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011434:	2300      	movs	r3, #0
 8011436:	637b      	str	r3, [r7, #52]	@ 0x34
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801143c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	2b00      	cmp	r3, #0
 8011442:	f000 80a7 	beq.w	8011594 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	895b      	ldrh	r3, [r3, #10]
 801144a:	025b      	lsls	r3, r3, #9
 801144c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801144e:	6a3b      	ldr	r3, [r7, #32]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d01b      	beq.n	801148c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	1e5a      	subs	r2, r3, #1
 8011458:	69fb      	ldr	r3, [r7, #28]
 801145a:	fbb2 f2f3 	udiv	r2, r2, r3
 801145e:	6a3b      	ldr	r3, [r7, #32]
 8011460:	1e59      	subs	r1, r3, #1
 8011462:	69fb      	ldr	r3, [r7, #28]
 8011464:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011468:	429a      	cmp	r2, r3
 801146a:	d30f      	bcc.n	801148c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801146c:	6a3b      	ldr	r3, [r7, #32]
 801146e:	1e5a      	subs	r2, r3, #1
 8011470:	69fb      	ldr	r3, [r7, #28]
 8011472:	425b      	negs	r3, r3
 8011474:	401a      	ands	r2, r3
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	699b      	ldr	r3, [r3, #24]
 801147e:	683a      	ldr	r2, [r7, #0]
 8011480:	1ad3      	subs	r3, r2, r3
 8011482:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	69db      	ldr	r3, [r3, #28]
 8011488:	63bb      	str	r3, [r7, #56]	@ 0x38
 801148a:	e022      	b.n	80114d2 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	689b      	ldr	r3, [r3, #8]
 8011490:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011494:	2b00      	cmp	r3, #0
 8011496:	d119      	bne.n	80114cc <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2100      	movs	r1, #0
 801149c:	4618      	mov	r0, r3
 801149e:	f7fd fdd8 	bl	800f052 <create_chain>
 80114a2:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80114a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114a6:	2b01      	cmp	r3, #1
 80114a8:	d104      	bne.n	80114b4 <f_lseek+0x28a>
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2202      	movs	r2, #2
 80114ae:	755a      	strb	r2, [r3, #21]
 80114b0:	2302      	movs	r3, #2
 80114b2:	e0bf      	b.n	8011634 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80114b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114ba:	d104      	bne.n	80114c6 <f_lseek+0x29c>
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2201      	movs	r2, #1
 80114c0:	755a      	strb	r2, [r3, #21]
 80114c2:	2301      	movs	r3, #1
 80114c4:	e0b6      	b.n	8011634 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80114ca:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80114d0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80114d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d05d      	beq.n	8011594 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80114d8:	e03a      	b.n	8011550 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80114da:	683a      	ldr	r2, [r7, #0]
 80114dc:	69fb      	ldr	r3, [r7, #28]
 80114de:	1ad3      	subs	r3, r2, r3
 80114e0:	603b      	str	r3, [r7, #0]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	699a      	ldr	r2, [r3, #24]
 80114e6:	69fb      	ldr	r3, [r7, #28]
 80114e8:	441a      	add	r2, r3
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	7d1b      	ldrb	r3, [r3, #20]
 80114f2:	f003 0302 	and.w	r3, r3, #2
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d00b      	beq.n	8011512 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80114fe:	4618      	mov	r0, r3
 8011500:	f7fd fda7 	bl	800f052 <create_chain>
 8011504:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011508:	2b00      	cmp	r3, #0
 801150a:	d108      	bne.n	801151e <f_lseek+0x2f4>
							ofs = 0; break;
 801150c:	2300      	movs	r3, #0
 801150e:	603b      	str	r3, [r7, #0]
 8011510:	e022      	b.n	8011558 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011516:	4618      	mov	r0, r3
 8011518:	f7fd fba5 	bl	800ec66 <get_fat>
 801151c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801151e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011524:	d104      	bne.n	8011530 <f_lseek+0x306>
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2201      	movs	r2, #1
 801152a:	755a      	strb	r2, [r3, #21]
 801152c:	2301      	movs	r3, #1
 801152e:	e081      	b.n	8011634 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011532:	2b01      	cmp	r3, #1
 8011534:	d904      	bls.n	8011540 <f_lseek+0x316>
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	699b      	ldr	r3, [r3, #24]
 801153a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801153c:	429a      	cmp	r2, r3
 801153e:	d304      	bcc.n	801154a <f_lseek+0x320>
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	2202      	movs	r2, #2
 8011544:	755a      	strb	r2, [r3, #21]
 8011546:	2302      	movs	r3, #2
 8011548:	e074      	b.n	8011634 <f_lseek+0x40a>
					fp->clust = clst;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801154e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011550:	683a      	ldr	r2, [r7, #0]
 8011552:	69fb      	ldr	r3, [r7, #28]
 8011554:	429a      	cmp	r2, r3
 8011556:	d8c0      	bhi.n	80114da <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	699a      	ldr	r2, [r3, #24]
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	441a      	add	r2, r3
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801156a:	2b00      	cmp	r3, #0
 801156c:	d012      	beq.n	8011594 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011572:	4618      	mov	r0, r3
 8011574:	f7fd fb58 	bl	800ec28 <clust2sect>
 8011578:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801157a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801157c:	2b00      	cmp	r3, #0
 801157e:	d104      	bne.n	801158a <f_lseek+0x360>
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	2202      	movs	r2, #2
 8011584:	755a      	strb	r2, [r3, #21]
 8011586:	2302      	movs	r3, #2
 8011588:	e054      	b.n	8011634 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	0a5b      	lsrs	r3, r3, #9
 801158e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011590:	4413      	add	r3, r2
 8011592:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	699a      	ldr	r2, [r3, #24]
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	68db      	ldr	r3, [r3, #12]
 801159c:	429a      	cmp	r2, r3
 801159e:	d90a      	bls.n	80115b6 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	699a      	ldr	r2, [r3, #24]
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	7d1b      	ldrb	r3, [r3, #20]
 80115ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80115b0:	b2da      	uxtb	r2, r3
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	699b      	ldr	r3, [r3, #24]
 80115ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d036      	beq.n	8011630 <f_lseek+0x406>
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6a1b      	ldr	r3, [r3, #32]
 80115c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d031      	beq.n	8011630 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	7d1b      	ldrb	r3, [r3, #20]
 80115d0:	b25b      	sxtb	r3, r3
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	da18      	bge.n	8011608 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	7858      	ldrb	r0, [r3, #1]
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	6a1a      	ldr	r2, [r3, #32]
 80115e4:	2301      	movs	r3, #1
 80115e6:	f7fc ff95 	bl	800e514 <disk_write>
 80115ea:	4603      	mov	r3, r0
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d004      	beq.n	80115fa <f_lseek+0x3d0>
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	2201      	movs	r2, #1
 80115f4:	755a      	strb	r2, [r3, #21]
 80115f6:	2301      	movs	r3, #1
 80115f8:	e01c      	b.n	8011634 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	7d1b      	ldrb	r3, [r3, #20]
 80115fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011602:	b2da      	uxtb	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	7858      	ldrb	r0, [r3, #1]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011612:	2301      	movs	r3, #1
 8011614:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011616:	f7fc ff5d 	bl	800e4d4 <disk_read>
 801161a:	4603      	mov	r3, r0
 801161c:	2b00      	cmp	r3, #0
 801161e:	d004      	beq.n	801162a <f_lseek+0x400>
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	2201      	movs	r2, #1
 8011624:	755a      	strb	r2, [r3, #21]
 8011626:	2301      	movs	r3, #1
 8011628:	e004      	b.n	8011634 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801162e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011630:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8011634:	4618      	mov	r0, r3
 8011636:	3740      	adds	r7, #64	@ 0x40
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}

0801163c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b086      	sub	sp, #24
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d101      	bne.n	8011650 <f_opendir+0x14>
 801164c:	2309      	movs	r3, #9
 801164e:	e064      	b.n	801171a <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8011654:	f107 010c 	add.w	r1, r7, #12
 8011658:	463b      	mov	r3, r7
 801165a:	2200      	movs	r2, #0
 801165c:	4618      	mov	r0, r3
 801165e:	f7fe ff77 	bl	8010550 <find_volume>
 8011662:	4603      	mov	r3, r0
 8011664:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011666:	7dfb      	ldrb	r3, [r7, #23]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d14f      	bne.n	801170c <f_opendir+0xd0>
		obj->fs = fs;
 801166c:	68fa      	ldr	r2, [r7, #12]
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	4619      	mov	r1, r3
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	f7fe fe5e 	bl	8010338 <follow_path>
 801167c:	4603      	mov	r3, r0
 801167e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8011680:	7dfb      	ldrb	r3, [r7, #23]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d13d      	bne.n	8011702 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801168c:	b25b      	sxtb	r3, r3
 801168e:	2b00      	cmp	r3, #0
 8011690:	db12      	blt.n	80116b8 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8011692:	693b      	ldr	r3, [r7, #16]
 8011694:	799b      	ldrb	r3, [r3, #6]
 8011696:	f003 0310 	and.w	r3, r3, #16
 801169a:	2b00      	cmp	r3, #0
 801169c:	d00a      	beq.n	80116b4 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801169e:	68fa      	ldr	r2, [r7, #12]
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	6a1b      	ldr	r3, [r3, #32]
 80116a4:	4619      	mov	r1, r3
 80116a6:	4610      	mov	r0, r2
 80116a8:	f7fd ff26 	bl	800f4f8 <ld_clust>
 80116ac:	4602      	mov	r2, r0
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	609a      	str	r2, [r3, #8]
 80116b2:	e001      	b.n	80116b8 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80116b4:	2305      	movs	r3, #5
 80116b6:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80116b8:	7dfb      	ldrb	r3, [r7, #23]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d121      	bne.n	8011702 <f_opendir+0xc6>
				obj->id = fs->id;
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	88da      	ldrh	r2, [r3, #6]
 80116c2:	693b      	ldr	r3, [r7, #16]
 80116c4:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80116c6:	2100      	movs	r1, #0
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f7fd fd8e 	bl	800f1ea <dir_sdi>
 80116ce:	4603      	mov	r3, r0
 80116d0:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80116d2:	7dfb      	ldrb	r3, [r7, #23]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d114      	bne.n	8011702 <f_opendir+0xc6>
					if (obj->sclust) {
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	689b      	ldr	r3, [r3, #8]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d00d      	beq.n	80116fc <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80116e0:	2100      	movs	r1, #0
 80116e2:	6878      	ldr	r0, [r7, #4]
 80116e4:	f7fd f8d2 	bl	800e88c <inc_lock>
 80116e8:	4602      	mov	r2, r0
 80116ea:	693b      	ldr	r3, [r7, #16]
 80116ec:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80116ee:	693b      	ldr	r3, [r7, #16]
 80116f0:	691b      	ldr	r3, [r3, #16]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d105      	bne.n	8011702 <f_opendir+0xc6>
 80116f6:	2312      	movs	r3, #18
 80116f8:	75fb      	strb	r3, [r7, #23]
 80116fa:	e002      	b.n	8011702 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80116fc:	693b      	ldr	r3, [r7, #16]
 80116fe:	2200      	movs	r2, #0
 8011700:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011702:	7dfb      	ldrb	r3, [r7, #23]
 8011704:	2b04      	cmp	r3, #4
 8011706:	d101      	bne.n	801170c <f_opendir+0xd0>
 8011708:	2305      	movs	r3, #5
 801170a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801170c:	7dfb      	ldrb	r3, [r7, #23]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d002      	beq.n	8011718 <f_opendir+0xdc>
 8011712:	693b      	ldr	r3, [r7, #16]
 8011714:	2200      	movs	r2, #0
 8011716:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011718:	7dfb      	ldrb	r3, [r7, #23]
}
 801171a:	4618      	mov	r0, r3
 801171c:	3718      	adds	r7, #24
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}

08011722 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8011722:	b580      	push	{r7, lr}
 8011724:	b084      	sub	sp, #16
 8011726:	af00      	add	r7, sp, #0
 8011728:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f107 0208 	add.w	r2, r7, #8
 8011730:	4611      	mov	r1, r2
 8011732:	4618      	mov	r0, r3
 8011734:	f7ff f95c 	bl	80109f0 <validate>
 8011738:	4603      	mov	r3, r0
 801173a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801173c:	7bfb      	ldrb	r3, [r7, #15]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d110      	bne.n	8011764 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	691b      	ldr	r3, [r3, #16]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d006      	beq.n	8011758 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	691b      	ldr	r3, [r3, #16]
 801174e:	4618      	mov	r0, r3
 8011750:	f7fd f92a 	bl	800e9a8 <dec_lock>
 8011754:	4603      	mov	r3, r0
 8011756:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8011758:	7bfb      	ldrb	r3, [r7, #15]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d102      	bne.n	8011764 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	2200      	movs	r2, #0
 8011762:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8011764:	7bfb      	ldrb	r3, [r7, #15]
}
 8011766:	4618      	mov	r0, r3
 8011768:	3710      	adds	r7, #16
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}

0801176e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801176e:	b580      	push	{r7, lr}
 8011770:	b084      	sub	sp, #16
 8011772:	af00      	add	r7, sp, #0
 8011774:	6078      	str	r0, [r7, #4]
 8011776:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f107 0208 	add.w	r2, r7, #8
 801177e:	4611      	mov	r1, r2
 8011780:	4618      	mov	r0, r3
 8011782:	f7ff f935 	bl	80109f0 <validate>
 8011786:	4603      	mov	r3, r0
 8011788:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801178a:	7bfb      	ldrb	r3, [r7, #15]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d126      	bne.n	80117de <f_readdir+0x70>
		if (!fno) {
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d106      	bne.n	80117a4 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8011796:	2100      	movs	r1, #0
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f7fd fd26 	bl	800f1ea <dir_sdi>
 801179e:	4603      	mov	r3, r0
 80117a0:	73fb      	strb	r3, [r7, #15]
 80117a2:	e01c      	b.n	80117de <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80117a4:	2100      	movs	r1, #0
 80117a6:	6878      	ldr	r0, [r7, #4]
 80117a8:	f7fe f8d1 	bl	800f94e <dir_read>
 80117ac:	4603      	mov	r3, r0
 80117ae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80117b0:	7bfb      	ldrb	r3, [r7, #15]
 80117b2:	2b04      	cmp	r3, #4
 80117b4:	d101      	bne.n	80117ba <f_readdir+0x4c>
 80117b6:	2300      	movs	r3, #0
 80117b8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80117ba:	7bfb      	ldrb	r3, [r7, #15]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d10e      	bne.n	80117de <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80117c0:	6839      	ldr	r1, [r7, #0]
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f7fe fb22 	bl	800fe0c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80117c8:	2100      	movs	r1, #0
 80117ca:	6878      	ldr	r0, [r7, #4]
 80117cc:	f7fd fd88 	bl	800f2e0 <dir_next>
 80117d0:	4603      	mov	r3, r0
 80117d2:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80117d4:	7bfb      	ldrb	r3, [r7, #15]
 80117d6:	2b04      	cmp	r3, #4
 80117d8:	d101      	bne.n	80117de <f_readdir+0x70>
 80117da:	2300      	movs	r3, #0
 80117dc:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80117de:	7bfb      	ldrb	r3, [r7, #15]
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3710      	adds	r7, #16
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}

080117e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80117e8:	b480      	push	{r7}
 80117ea:	b087      	sub	sp, #28
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	60f8      	str	r0, [r7, #12]
 80117f0:	60b9      	str	r1, [r7, #8]
 80117f2:	4613      	mov	r3, r2
 80117f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80117f6:	2301      	movs	r3, #1
 80117f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80117fa:	2300      	movs	r3, #0
 80117fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80117fe:	4b1f      	ldr	r3, [pc, #124]	@ (801187c <FATFS_LinkDriverEx+0x94>)
 8011800:	7a5b      	ldrb	r3, [r3, #9]
 8011802:	b2db      	uxtb	r3, r3
 8011804:	2b00      	cmp	r3, #0
 8011806:	d131      	bne.n	801186c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011808:	4b1c      	ldr	r3, [pc, #112]	@ (801187c <FATFS_LinkDriverEx+0x94>)
 801180a:	7a5b      	ldrb	r3, [r3, #9]
 801180c:	b2db      	uxtb	r3, r3
 801180e:	461a      	mov	r2, r3
 8011810:	4b1a      	ldr	r3, [pc, #104]	@ (801187c <FATFS_LinkDriverEx+0x94>)
 8011812:	2100      	movs	r1, #0
 8011814:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011816:	4b19      	ldr	r3, [pc, #100]	@ (801187c <FATFS_LinkDriverEx+0x94>)
 8011818:	7a5b      	ldrb	r3, [r3, #9]
 801181a:	b2db      	uxtb	r3, r3
 801181c:	4a17      	ldr	r2, [pc, #92]	@ (801187c <FATFS_LinkDriverEx+0x94>)
 801181e:	009b      	lsls	r3, r3, #2
 8011820:	4413      	add	r3, r2
 8011822:	68fa      	ldr	r2, [r7, #12]
 8011824:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011826:	4b15      	ldr	r3, [pc, #84]	@ (801187c <FATFS_LinkDriverEx+0x94>)
 8011828:	7a5b      	ldrb	r3, [r3, #9]
 801182a:	b2db      	uxtb	r3, r3
 801182c:	461a      	mov	r2, r3
 801182e:	4b13      	ldr	r3, [pc, #76]	@ (801187c <FATFS_LinkDriverEx+0x94>)
 8011830:	4413      	add	r3, r2
 8011832:	79fa      	ldrb	r2, [r7, #7]
 8011834:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011836:	4b11      	ldr	r3, [pc, #68]	@ (801187c <FATFS_LinkDriverEx+0x94>)
 8011838:	7a5b      	ldrb	r3, [r3, #9]
 801183a:	b2db      	uxtb	r3, r3
 801183c:	1c5a      	adds	r2, r3, #1
 801183e:	b2d1      	uxtb	r1, r2
 8011840:	4a0e      	ldr	r2, [pc, #56]	@ (801187c <FATFS_LinkDriverEx+0x94>)
 8011842:	7251      	strb	r1, [r2, #9]
 8011844:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011846:	7dbb      	ldrb	r3, [r7, #22]
 8011848:	3330      	adds	r3, #48	@ 0x30
 801184a:	b2da      	uxtb	r2, r3
 801184c:	68bb      	ldr	r3, [r7, #8]
 801184e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011850:	68bb      	ldr	r3, [r7, #8]
 8011852:	3301      	adds	r3, #1
 8011854:	223a      	movs	r2, #58	@ 0x3a
 8011856:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	3302      	adds	r3, #2
 801185c:	222f      	movs	r2, #47	@ 0x2f
 801185e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	3303      	adds	r3, #3
 8011864:	2200      	movs	r2, #0
 8011866:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011868:	2300      	movs	r3, #0
 801186a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801186c:	7dfb      	ldrb	r3, [r7, #23]
}
 801186e:	4618      	mov	r0, r3
 8011870:	371c      	adds	r7, #28
 8011872:	46bd      	mov	sp, r7
 8011874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011878:	4770      	bx	lr
 801187a:	bf00      	nop
 801187c:	20002268 	.word	0x20002268

08011880 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b082      	sub	sp, #8
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
 8011888:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801188a:	2200      	movs	r2, #0
 801188c:	6839      	ldr	r1, [r7, #0]
 801188e:	6878      	ldr	r0, [r7, #4]
 8011890:	f7ff ffaa 	bl	80117e8 <FATFS_LinkDriverEx>
 8011894:	4603      	mov	r3, r0
}
 8011896:	4618      	mov	r0, r3
 8011898:	3708      	adds	r7, #8
 801189a:	46bd      	mov	sp, r7
 801189c:	bd80      	pop	{r7, pc}
	...

080118a0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80118a0:	b480      	push	{r7}
 80118a2:	b085      	sub	sp, #20
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	4603      	mov	r3, r0
 80118a8:	6039      	str	r1, [r7, #0]
 80118aa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80118ac:	88fb      	ldrh	r3, [r7, #6]
 80118ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80118b0:	d802      	bhi.n	80118b8 <ff_convert+0x18>
		c = chr;
 80118b2:	88fb      	ldrh	r3, [r7, #6]
 80118b4:	81fb      	strh	r3, [r7, #14]
 80118b6:	e025      	b.n	8011904 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d00b      	beq.n	80118d6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80118be:	88fb      	ldrh	r3, [r7, #6]
 80118c0:	2bff      	cmp	r3, #255	@ 0xff
 80118c2:	d805      	bhi.n	80118d0 <ff_convert+0x30>
 80118c4:	88fb      	ldrh	r3, [r7, #6]
 80118c6:	3b80      	subs	r3, #128	@ 0x80
 80118c8:	4a12      	ldr	r2, [pc, #72]	@ (8011914 <ff_convert+0x74>)
 80118ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118ce:	e000      	b.n	80118d2 <ff_convert+0x32>
 80118d0:	2300      	movs	r3, #0
 80118d2:	81fb      	strh	r3, [r7, #14]
 80118d4:	e016      	b.n	8011904 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80118d6:	2300      	movs	r3, #0
 80118d8:	81fb      	strh	r3, [r7, #14]
 80118da:	e009      	b.n	80118f0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80118dc:	89fb      	ldrh	r3, [r7, #14]
 80118de:	4a0d      	ldr	r2, [pc, #52]	@ (8011914 <ff_convert+0x74>)
 80118e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118e4:	88fa      	ldrh	r2, [r7, #6]
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d006      	beq.n	80118f8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80118ea:	89fb      	ldrh	r3, [r7, #14]
 80118ec:	3301      	adds	r3, #1
 80118ee:	81fb      	strh	r3, [r7, #14]
 80118f0:	89fb      	ldrh	r3, [r7, #14]
 80118f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80118f4:	d9f2      	bls.n	80118dc <ff_convert+0x3c>
 80118f6:	e000      	b.n	80118fa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80118f8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80118fa:	89fb      	ldrh	r3, [r7, #14]
 80118fc:	3380      	adds	r3, #128	@ 0x80
 80118fe:	b29b      	uxth	r3, r3
 8011900:	b2db      	uxtb	r3, r3
 8011902:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011904:	89fb      	ldrh	r3, [r7, #14]
}
 8011906:	4618      	mov	r0, r3
 8011908:	3714      	adds	r7, #20
 801190a:	46bd      	mov	sp, r7
 801190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011910:	4770      	bx	lr
 8011912:	bf00      	nop
 8011914:	080176d4 	.word	0x080176d4

08011918 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011918:	b480      	push	{r7}
 801191a:	b087      	sub	sp, #28
 801191c:	af00      	add	r7, sp, #0
 801191e:	4603      	mov	r3, r0
 8011920:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011922:	88fb      	ldrh	r3, [r7, #6]
 8011924:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011928:	d201      	bcs.n	801192e <ff_wtoupper+0x16>
 801192a:	4b3e      	ldr	r3, [pc, #248]	@ (8011a24 <ff_wtoupper+0x10c>)
 801192c:	e000      	b.n	8011930 <ff_wtoupper+0x18>
 801192e:	4b3e      	ldr	r3, [pc, #248]	@ (8011a28 <ff_wtoupper+0x110>)
 8011930:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	1c9a      	adds	r2, r3, #2
 8011936:	617a      	str	r2, [r7, #20]
 8011938:	881b      	ldrh	r3, [r3, #0]
 801193a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801193c:	8a7b      	ldrh	r3, [r7, #18]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d068      	beq.n	8011a14 <ff_wtoupper+0xfc>
 8011942:	88fa      	ldrh	r2, [r7, #6]
 8011944:	8a7b      	ldrh	r3, [r7, #18]
 8011946:	429a      	cmp	r2, r3
 8011948:	d364      	bcc.n	8011a14 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801194a:	697b      	ldr	r3, [r7, #20]
 801194c:	1c9a      	adds	r2, r3, #2
 801194e:	617a      	str	r2, [r7, #20]
 8011950:	881b      	ldrh	r3, [r3, #0]
 8011952:	823b      	strh	r3, [r7, #16]
 8011954:	8a3b      	ldrh	r3, [r7, #16]
 8011956:	0a1b      	lsrs	r3, r3, #8
 8011958:	81fb      	strh	r3, [r7, #14]
 801195a:	8a3b      	ldrh	r3, [r7, #16]
 801195c:	b2db      	uxtb	r3, r3
 801195e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011960:	88fa      	ldrh	r2, [r7, #6]
 8011962:	8a79      	ldrh	r1, [r7, #18]
 8011964:	8a3b      	ldrh	r3, [r7, #16]
 8011966:	440b      	add	r3, r1
 8011968:	429a      	cmp	r2, r3
 801196a:	da49      	bge.n	8011a00 <ff_wtoupper+0xe8>
			switch (cmd) {
 801196c:	89fb      	ldrh	r3, [r7, #14]
 801196e:	2b08      	cmp	r3, #8
 8011970:	d84f      	bhi.n	8011a12 <ff_wtoupper+0xfa>
 8011972:	a201      	add	r2, pc, #4	@ (adr r2, 8011978 <ff_wtoupper+0x60>)
 8011974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011978:	0801199d 	.word	0x0801199d
 801197c:	080119af 	.word	0x080119af
 8011980:	080119c5 	.word	0x080119c5
 8011984:	080119cd 	.word	0x080119cd
 8011988:	080119d5 	.word	0x080119d5
 801198c:	080119dd 	.word	0x080119dd
 8011990:	080119e5 	.word	0x080119e5
 8011994:	080119ed 	.word	0x080119ed
 8011998:	080119f5 	.word	0x080119f5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801199c:	88fa      	ldrh	r2, [r7, #6]
 801199e:	8a7b      	ldrh	r3, [r7, #18]
 80119a0:	1ad3      	subs	r3, r2, r3
 80119a2:	005b      	lsls	r3, r3, #1
 80119a4:	697a      	ldr	r2, [r7, #20]
 80119a6:	4413      	add	r3, r2
 80119a8:	881b      	ldrh	r3, [r3, #0]
 80119aa:	80fb      	strh	r3, [r7, #6]
 80119ac:	e027      	b.n	80119fe <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80119ae:	88fa      	ldrh	r2, [r7, #6]
 80119b0:	8a7b      	ldrh	r3, [r7, #18]
 80119b2:	1ad3      	subs	r3, r2, r3
 80119b4:	b29b      	uxth	r3, r3
 80119b6:	f003 0301 	and.w	r3, r3, #1
 80119ba:	b29b      	uxth	r3, r3
 80119bc:	88fa      	ldrh	r2, [r7, #6]
 80119be:	1ad3      	subs	r3, r2, r3
 80119c0:	80fb      	strh	r3, [r7, #6]
 80119c2:	e01c      	b.n	80119fe <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80119c4:	88fb      	ldrh	r3, [r7, #6]
 80119c6:	3b10      	subs	r3, #16
 80119c8:	80fb      	strh	r3, [r7, #6]
 80119ca:	e018      	b.n	80119fe <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80119cc:	88fb      	ldrh	r3, [r7, #6]
 80119ce:	3b20      	subs	r3, #32
 80119d0:	80fb      	strh	r3, [r7, #6]
 80119d2:	e014      	b.n	80119fe <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80119d4:	88fb      	ldrh	r3, [r7, #6]
 80119d6:	3b30      	subs	r3, #48	@ 0x30
 80119d8:	80fb      	strh	r3, [r7, #6]
 80119da:	e010      	b.n	80119fe <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80119dc:	88fb      	ldrh	r3, [r7, #6]
 80119de:	3b1a      	subs	r3, #26
 80119e0:	80fb      	strh	r3, [r7, #6]
 80119e2:	e00c      	b.n	80119fe <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80119e4:	88fb      	ldrh	r3, [r7, #6]
 80119e6:	3308      	adds	r3, #8
 80119e8:	80fb      	strh	r3, [r7, #6]
 80119ea:	e008      	b.n	80119fe <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80119ec:	88fb      	ldrh	r3, [r7, #6]
 80119ee:	3b50      	subs	r3, #80	@ 0x50
 80119f0:	80fb      	strh	r3, [r7, #6]
 80119f2:	e004      	b.n	80119fe <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80119f4:	88fb      	ldrh	r3, [r7, #6]
 80119f6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80119fa:	80fb      	strh	r3, [r7, #6]
 80119fc:	bf00      	nop
			}
			break;
 80119fe:	e008      	b.n	8011a12 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011a00:	89fb      	ldrh	r3, [r7, #14]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d195      	bne.n	8011932 <ff_wtoupper+0x1a>
 8011a06:	8a3b      	ldrh	r3, [r7, #16]
 8011a08:	005b      	lsls	r3, r3, #1
 8011a0a:	697a      	ldr	r2, [r7, #20]
 8011a0c:	4413      	add	r3, r2
 8011a0e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011a10:	e78f      	b.n	8011932 <ff_wtoupper+0x1a>
			break;
 8011a12:	bf00      	nop
	}

	return chr;
 8011a14:	88fb      	ldrh	r3, [r7, #6]
}
 8011a16:	4618      	mov	r0, r3
 8011a18:	371c      	adds	r7, #28
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a20:	4770      	bx	lr
 8011a22:	bf00      	nop
 8011a24:	080177d4 	.word	0x080177d4
 8011a28:	080179c8 	.word	0x080179c8

08011a2c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8011a30:	2201      	movs	r2, #1
 8011a32:	490e      	ldr	r1, [pc, #56]	@ (8011a6c <MX_USB_HOST_Init+0x40>)
 8011a34:	480e      	ldr	r0, [pc, #56]	@ (8011a70 <MX_USB_HOST_Init+0x44>)
 8011a36:	f7fb f828 	bl	800ca8a <USBH_Init>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d001      	beq.n	8011a44 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011a40:	f7f0 fc7c 	bl	800233c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8011a44:	490b      	ldr	r1, [pc, #44]	@ (8011a74 <MX_USB_HOST_Init+0x48>)
 8011a46:	480a      	ldr	r0, [pc, #40]	@ (8011a70 <MX_USB_HOST_Init+0x44>)
 8011a48:	f7fb f8cc 	bl	800cbe4 <USBH_RegisterClass>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d001      	beq.n	8011a56 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8011a52:	f7f0 fc73 	bl	800233c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8011a56:	4806      	ldr	r0, [pc, #24]	@ (8011a70 <MX_USB_HOST_Init+0x44>)
 8011a58:	f7fb f950 	bl	800ccfc <USBH_Start>
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d001      	beq.n	8011a66 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8011a62:	f7f0 fc6b 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8011a66:	bf00      	nop
 8011a68:	bd80      	pop	{r7, pc}
 8011a6a:	bf00      	nop
 8011a6c:	08011a8d 	.word	0x08011a8d
 8011a70:	20002274 	.word	0x20002274
 8011a74:	20000054 	.word	0x20000054

08011a78 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8011a7c:	4802      	ldr	r0, [pc, #8]	@ (8011a88 <MX_USB_HOST_Process+0x10>)
 8011a7e:	f7fb f94d 	bl	800cd1c <USBH_Process>
}
 8011a82:	bf00      	nop
 8011a84:	bd80      	pop	{r7, pc}
 8011a86:	bf00      	nop
 8011a88:	20002274 	.word	0x20002274

08011a8c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b083      	sub	sp, #12
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
 8011a94:	460b      	mov	r3, r1
 8011a96:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011a98:	78fb      	ldrb	r3, [r7, #3]
 8011a9a:	3b01      	subs	r3, #1
 8011a9c:	2b04      	cmp	r3, #4
 8011a9e:	d819      	bhi.n	8011ad4 <USBH_UserProcess+0x48>
 8011aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8011aa8 <USBH_UserProcess+0x1c>)
 8011aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aa6:	bf00      	nop
 8011aa8:	08011ad5 	.word	0x08011ad5
 8011aac:	08011ac5 	.word	0x08011ac5
 8011ab0:	08011ad5 	.word	0x08011ad5
 8011ab4:	08011acd 	.word	0x08011acd
 8011ab8:	08011abd 	.word	0x08011abd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011abc:	4b09      	ldr	r3, [pc, #36]	@ (8011ae4 <USBH_UserProcess+0x58>)
 8011abe:	2203      	movs	r2, #3
 8011ac0:	701a      	strb	r2, [r3, #0]
  break;
 8011ac2:	e008      	b.n	8011ad6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011ac4:	4b07      	ldr	r3, [pc, #28]	@ (8011ae4 <USBH_UserProcess+0x58>)
 8011ac6:	2202      	movs	r2, #2
 8011ac8:	701a      	strb	r2, [r3, #0]
  break;
 8011aca:	e004      	b.n	8011ad6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011acc:	4b05      	ldr	r3, [pc, #20]	@ (8011ae4 <USBH_UserProcess+0x58>)
 8011ace:	2201      	movs	r2, #1
 8011ad0:	701a      	strb	r2, [r3, #0]
  break;
 8011ad2:	e000      	b.n	8011ad6 <USBH_UserProcess+0x4a>

  default:
  break;
 8011ad4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8011ad6:	bf00      	nop
 8011ad8:	370c      	adds	r7, #12
 8011ada:	46bd      	mov	sp, r7
 8011adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae0:	4770      	bx	lr
 8011ae2:	bf00      	nop
 8011ae4:	2000264c 	.word	0x2000264c

08011ae8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b08a      	sub	sp, #40	@ 0x28
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011af0:	f107 0314 	add.w	r3, r7, #20
 8011af4:	2200      	movs	r2, #0
 8011af6:	601a      	str	r2, [r3, #0]
 8011af8:	605a      	str	r2, [r3, #4]
 8011afa:	609a      	str	r2, [r3, #8]
 8011afc:	60da      	str	r2, [r3, #12]
 8011afe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011b08:	d147      	bne.n	8011b9a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	613b      	str	r3, [r7, #16]
 8011b0e:	4b25      	ldr	r3, [pc, #148]	@ (8011ba4 <HAL_HCD_MspInit+0xbc>)
 8011b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b12:	4a24      	ldr	r2, [pc, #144]	@ (8011ba4 <HAL_HCD_MspInit+0xbc>)
 8011b14:	f043 0301 	orr.w	r3, r3, #1
 8011b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8011b1a:	4b22      	ldr	r3, [pc, #136]	@ (8011ba4 <HAL_HCD_MspInit+0xbc>)
 8011b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b1e:	f003 0301 	and.w	r3, r3, #1
 8011b22:	613b      	str	r3, [r7, #16]
 8011b24:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8011b26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b30:	2300      	movs	r3, #0
 8011b32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011b34:	f107 0314 	add.w	r3, r7, #20
 8011b38:	4619      	mov	r1, r3
 8011b3a:	481b      	ldr	r0, [pc, #108]	@ (8011ba8 <HAL_HCD_MspInit+0xc0>)
 8011b3c:	f7f2 f9be 	bl	8003ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011b40:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8011b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b46:	2302      	movs	r3, #2
 8011b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011b4e:	2303      	movs	r3, #3
 8011b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011b52:	230a      	movs	r3, #10
 8011b54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011b56:	f107 0314 	add.w	r3, r7, #20
 8011b5a:	4619      	mov	r1, r3
 8011b5c:	4812      	ldr	r0, [pc, #72]	@ (8011ba8 <HAL_HCD_MspInit+0xc0>)
 8011b5e:	f7f2 f9ad 	bl	8003ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011b62:	4b10      	ldr	r3, [pc, #64]	@ (8011ba4 <HAL_HCD_MspInit+0xbc>)
 8011b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b66:	4a0f      	ldr	r2, [pc, #60]	@ (8011ba4 <HAL_HCD_MspInit+0xbc>)
 8011b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b6c:	6353      	str	r3, [r2, #52]	@ 0x34
 8011b6e:	2300      	movs	r3, #0
 8011b70:	60fb      	str	r3, [r7, #12]
 8011b72:	4b0c      	ldr	r3, [pc, #48]	@ (8011ba4 <HAL_HCD_MspInit+0xbc>)
 8011b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b76:	4a0b      	ldr	r2, [pc, #44]	@ (8011ba4 <HAL_HCD_MspInit+0xbc>)
 8011b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8011b7e:	4b09      	ldr	r3, [pc, #36]	@ (8011ba4 <HAL_HCD_MspInit+0xbc>)
 8011b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011b86:	60fb      	str	r3, [r7, #12]
 8011b88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	2100      	movs	r1, #0
 8011b8e:	2043      	movs	r0, #67	@ 0x43
 8011b90:	f7f1 fd1f 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011b94:	2043      	movs	r0, #67	@ 0x43
 8011b96:	f7f1 fd38 	bl	800360a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011b9a:	bf00      	nop
 8011b9c:	3728      	adds	r7, #40	@ 0x28
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}
 8011ba2:	bf00      	nop
 8011ba4:	40023800 	.word	0x40023800
 8011ba8:	40020000 	.word	0x40020000

08011bac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7fb fc85 	bl	800d4ca <USBH_LL_IncTimer>
}
 8011bc0:	bf00      	nop
 8011bc2:	3708      	adds	r7, #8
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}

08011bc8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b082      	sub	sp, #8
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7fb fcbd 	bl	800d556 <USBH_LL_Connect>
}
 8011bdc:	bf00      	nop
 8011bde:	3708      	adds	r7, #8
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd80      	pop	{r7, pc}

08011be4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b082      	sub	sp, #8
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7fb fcc6 	bl	800d584 <USBH_LL_Disconnect>
}
 8011bf8:	bf00      	nop
 8011bfa:	3708      	adds	r7, #8
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}

08011c00 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011c00:	b480      	push	{r7}
 8011c02:	b083      	sub	sp, #12
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	460b      	mov	r3, r1
 8011c0a:	70fb      	strb	r3, [r7, #3]
 8011c0c:	4613      	mov	r3, r2
 8011c0e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8011c10:	bf00      	nop
 8011c12:	370c      	adds	r7, #12
 8011c14:	46bd      	mov	sp, r7
 8011c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1a:	4770      	bx	lr

08011c1c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b082      	sub	sp, #8
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7fb fc77 	bl	800d51e <USBH_LL_PortEnabled>
}
 8011c30:	bf00      	nop
 8011c32:	3708      	adds	r7, #8
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}

08011c38 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b082      	sub	sp, #8
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7fb fc77 	bl	800d53a <USBH_LL_PortDisabled>
}
 8011c4c:	bf00      	nop
 8011c4e:	3708      	adds	r7, #8
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b082      	sub	sp, #8
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8011c62:	2b01      	cmp	r3, #1
 8011c64:	d12a      	bne.n	8011cbc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8011c66:	4a18      	ldr	r2, [pc, #96]	@ (8011cc8 <USBH_LL_Init+0x74>)
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	4a15      	ldr	r2, [pc, #84]	@ (8011cc8 <USBH_LL_Init+0x74>)
 8011c72:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011c76:	4b14      	ldr	r3, [pc, #80]	@ (8011cc8 <USBH_LL_Init+0x74>)
 8011c78:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8011c7c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8011c7e:	4b12      	ldr	r3, [pc, #72]	@ (8011cc8 <USBH_LL_Init+0x74>)
 8011c80:	2208      	movs	r2, #8
 8011c82:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011c84:	4b10      	ldr	r3, [pc, #64]	@ (8011cc8 <USBH_LL_Init+0x74>)
 8011c86:	2201      	movs	r2, #1
 8011c88:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8011cc8 <USBH_LL_Init+0x74>)
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8011c90:	4b0d      	ldr	r3, [pc, #52]	@ (8011cc8 <USBH_LL_Init+0x74>)
 8011c92:	2202      	movs	r2, #2
 8011c94:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011c96:	4b0c      	ldr	r3, [pc, #48]	@ (8011cc8 <USBH_LL_Init+0x74>)
 8011c98:	2200      	movs	r2, #0
 8011c9a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011c9c:	480a      	ldr	r0, [pc, #40]	@ (8011cc8 <USBH_LL_Init+0x74>)
 8011c9e:	f7f2 fba7 	bl	80043f0 <HAL_HCD_Init>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d001      	beq.n	8011cac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8011ca8:	f7f0 fb48 	bl	800233c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8011cac:	4806      	ldr	r0, [pc, #24]	@ (8011cc8 <USBH_LL_Init+0x74>)
 8011cae:	f7f3 f807 	bl	8004cc0 <HAL_HCD_GetCurrentFrame>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f7fb fbf8 	bl	800d4ac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011cbc:	2300      	movs	r3, #0
}
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	3708      	adds	r7, #8
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}
 8011cc6:	bf00      	nop
 8011cc8:	20002650 	.word	0x20002650

08011ccc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b084      	sub	sp, #16
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011cd8:	2300      	movs	r3, #0
 8011cda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f7f2 ff74 	bl	8004bd0 <HAL_HCD_Start>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011cec:	7bfb      	ldrb	r3, [r7, #15]
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f000 f992 	bl	8012018 <USBH_Get_USB_Status>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3710      	adds	r7, #16
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}

08011d02 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011d02:	b580      	push	{r7, lr}
 8011d04:	b084      	sub	sp, #16
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f7f2 ff7c 	bl	8004c16 <HAL_HCD_Stop>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011d22:	7bfb      	ldrb	r3, [r7, #15]
 8011d24:	4618      	mov	r0, r3
 8011d26:	f000 f977 	bl	8012018 <USBH_Get_USB_Status>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d30:	4618      	mov	r0, r3
 8011d32:	3710      	adds	r7, #16
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}

08011d38 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b084      	sub	sp, #16
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011d40:	2301      	movs	r3, #1
 8011d42:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7f2 ffc6 	bl	8004cdc <HAL_HCD_GetCurrentSpeed>
 8011d50:	4603      	mov	r3, r0
 8011d52:	2b02      	cmp	r3, #2
 8011d54:	d00c      	beq.n	8011d70 <USBH_LL_GetSpeed+0x38>
 8011d56:	2b02      	cmp	r3, #2
 8011d58:	d80d      	bhi.n	8011d76 <USBH_LL_GetSpeed+0x3e>
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d002      	beq.n	8011d64 <USBH_LL_GetSpeed+0x2c>
 8011d5e:	2b01      	cmp	r3, #1
 8011d60:	d003      	beq.n	8011d6a <USBH_LL_GetSpeed+0x32>
 8011d62:	e008      	b.n	8011d76 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011d64:	2300      	movs	r3, #0
 8011d66:	73fb      	strb	r3, [r7, #15]
    break;
 8011d68:	e008      	b.n	8011d7c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	73fb      	strb	r3, [r7, #15]
    break;
 8011d6e:	e005      	b.n	8011d7c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011d70:	2302      	movs	r3, #2
 8011d72:	73fb      	strb	r3, [r7, #15]
    break;
 8011d74:	e002      	b.n	8011d7c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8011d76:	2301      	movs	r3, #1
 8011d78:	73fb      	strb	r3, [r7, #15]
    break;
 8011d7a:	bf00      	nop
  }
  return  speed;
 8011d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d7e:	4618      	mov	r0, r3
 8011d80:	3710      	adds	r7, #16
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}

08011d86 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011d86:	b580      	push	{r7, lr}
 8011d88:	b084      	sub	sp, #16
 8011d8a:	af00      	add	r7, sp, #0
 8011d8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011d92:	2300      	movs	r3, #0
 8011d94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7f2 ff57 	bl	8004c50 <HAL_HCD_ResetPort>
 8011da2:	4603      	mov	r3, r0
 8011da4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011da6:	7bfb      	ldrb	r3, [r7, #15]
 8011da8:	4618      	mov	r0, r3
 8011daa:	f000 f935 	bl	8012018 <USBH_Get_USB_Status>
 8011dae:	4603      	mov	r3, r0
 8011db0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011db2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011db4:	4618      	mov	r0, r3
 8011db6:	3710      	adds	r7, #16
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}

08011dbc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b082      	sub	sp, #8
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	460b      	mov	r3, r1
 8011dc6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011dce:	78fa      	ldrb	r2, [r7, #3]
 8011dd0:	4611      	mov	r1, r2
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f7f2 ff5f 	bl	8004c96 <HAL_HCD_HC_GetXferCount>
 8011dd8:	4603      	mov	r3, r0
}
 8011dda:	4618      	mov	r0, r3
 8011ddc:	3708      	adds	r7, #8
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}

08011de2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011de2:	b590      	push	{r4, r7, lr}
 8011de4:	b089      	sub	sp, #36	@ 0x24
 8011de6:	af04      	add	r7, sp, #16
 8011de8:	6078      	str	r0, [r7, #4]
 8011dea:	4608      	mov	r0, r1
 8011dec:	4611      	mov	r1, r2
 8011dee:	461a      	mov	r2, r3
 8011df0:	4603      	mov	r3, r0
 8011df2:	70fb      	strb	r3, [r7, #3]
 8011df4:	460b      	mov	r3, r1
 8011df6:	70bb      	strb	r3, [r7, #2]
 8011df8:	4613      	mov	r3, r2
 8011dfa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011e00:	2300      	movs	r3, #0
 8011e02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8011e0a:	787c      	ldrb	r4, [r7, #1]
 8011e0c:	78ba      	ldrb	r2, [r7, #2]
 8011e0e:	78f9      	ldrb	r1, [r7, #3]
 8011e10:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011e12:	9302      	str	r3, [sp, #8]
 8011e14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011e18:	9301      	str	r3, [sp, #4]
 8011e1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011e1e:	9300      	str	r3, [sp, #0]
 8011e20:	4623      	mov	r3, r4
 8011e22:	f7f2 fb4c 	bl	80044be <HAL_HCD_HC_Init>
 8011e26:	4603      	mov	r3, r0
 8011e28:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011e2a:	7bfb      	ldrb	r3, [r7, #15]
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f000 f8f3 	bl	8012018 <USBH_Get_USB_Status>
 8011e32:	4603      	mov	r3, r0
 8011e34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011e36:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e38:	4618      	mov	r0, r3
 8011e3a:	3714      	adds	r7, #20
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd90      	pop	{r4, r7, pc}

08011e40 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b084      	sub	sp, #16
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	460b      	mov	r3, r1
 8011e4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011e50:	2300      	movs	r3, #0
 8011e52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011e5a:	78fa      	ldrb	r2, [r7, #3]
 8011e5c:	4611      	mov	r1, r2
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f7f2 fbe5 	bl	800462e <HAL_HCD_HC_Halt>
 8011e64:	4603      	mov	r3, r0
 8011e66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011e68:	7bfb      	ldrb	r3, [r7, #15]
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f000 f8d4 	bl	8012018 <USBH_Get_USB_Status>
 8011e70:	4603      	mov	r3, r0
 8011e72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011e74:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e76:	4618      	mov	r0, r3
 8011e78:	3710      	adds	r7, #16
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}

08011e7e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8011e7e:	b590      	push	{r4, r7, lr}
 8011e80:	b089      	sub	sp, #36	@ 0x24
 8011e82:	af04      	add	r7, sp, #16
 8011e84:	6078      	str	r0, [r7, #4]
 8011e86:	4608      	mov	r0, r1
 8011e88:	4611      	mov	r1, r2
 8011e8a:	461a      	mov	r2, r3
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	70fb      	strb	r3, [r7, #3]
 8011e90:	460b      	mov	r3, r1
 8011e92:	70bb      	strb	r3, [r7, #2]
 8011e94:	4613      	mov	r3, r2
 8011e96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e98:	2300      	movs	r3, #0
 8011e9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8011ea6:	787c      	ldrb	r4, [r7, #1]
 8011ea8:	78ba      	ldrb	r2, [r7, #2]
 8011eaa:	78f9      	ldrb	r1, [r7, #3]
 8011eac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011eb0:	9303      	str	r3, [sp, #12]
 8011eb2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011eb4:	9302      	str	r3, [sp, #8]
 8011eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eb8:	9301      	str	r3, [sp, #4]
 8011eba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011ebe:	9300      	str	r3, [sp, #0]
 8011ec0:	4623      	mov	r3, r4
 8011ec2:	f7f2 fbd7 	bl	8004674 <HAL_HCD_HC_SubmitRequest>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011eca:	7bfb      	ldrb	r3, [r7, #15]
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f000 f8a3 	bl	8012018 <USBH_Get_USB_Status>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ed6:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	3714      	adds	r7, #20
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd90      	pop	{r4, r7, pc}

08011ee0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b082      	sub	sp, #8
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	460b      	mov	r3, r1
 8011eea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011ef2:	78fa      	ldrb	r2, [r7, #3]
 8011ef4:	4611      	mov	r1, r2
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f7f2 feb8 	bl	8004c6c <HAL_HCD_HC_GetURBState>
 8011efc:	4603      	mov	r3, r0
}
 8011efe:	4618      	mov	r0, r3
 8011f00:	3708      	adds	r7, #8
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}

08011f06 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011f06:	b580      	push	{r7, lr}
 8011f08:	b082      	sub	sp, #8
 8011f0a:	af00      	add	r7, sp, #0
 8011f0c:	6078      	str	r0, [r7, #4]
 8011f0e:	460b      	mov	r3, r1
 8011f10:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8011f18:	2b01      	cmp	r3, #1
 8011f1a:	d103      	bne.n	8011f24 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011f1c:	78fb      	ldrb	r3, [r7, #3]
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f000 f8a6 	bl	8012070 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011f24:	20c8      	movs	r0, #200	@ 0xc8
 8011f26:	f7f1 fa55 	bl	80033d4 <HAL_Delay>
  return USBH_OK;
 8011f2a:	2300      	movs	r3, #0
}
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	3708      	adds	r7, #8
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}

08011f34 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011f34:	b480      	push	{r7}
 8011f36:	b085      	sub	sp, #20
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
 8011f3c:	460b      	mov	r3, r1
 8011f3e:	70fb      	strb	r3, [r7, #3]
 8011f40:	4613      	mov	r3, r2
 8011f42:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011f4a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011f4c:	78fa      	ldrb	r2, [r7, #3]
 8011f4e:	68f9      	ldr	r1, [r7, #12]
 8011f50:	4613      	mov	r3, r2
 8011f52:	011b      	lsls	r3, r3, #4
 8011f54:	1a9b      	subs	r3, r3, r2
 8011f56:	009b      	lsls	r3, r3, #2
 8011f58:	440b      	add	r3, r1
 8011f5a:	3317      	adds	r3, #23
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d00a      	beq.n	8011f78 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011f62:	78fa      	ldrb	r2, [r7, #3]
 8011f64:	68f9      	ldr	r1, [r7, #12]
 8011f66:	4613      	mov	r3, r2
 8011f68:	011b      	lsls	r3, r3, #4
 8011f6a:	1a9b      	subs	r3, r3, r2
 8011f6c:	009b      	lsls	r3, r3, #2
 8011f6e:	440b      	add	r3, r1
 8011f70:	333c      	adds	r3, #60	@ 0x3c
 8011f72:	78ba      	ldrb	r2, [r7, #2]
 8011f74:	701a      	strb	r2, [r3, #0]
 8011f76:	e009      	b.n	8011f8c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011f78:	78fa      	ldrb	r2, [r7, #3]
 8011f7a:	68f9      	ldr	r1, [r7, #12]
 8011f7c:	4613      	mov	r3, r2
 8011f7e:	011b      	lsls	r3, r3, #4
 8011f80:	1a9b      	subs	r3, r3, r2
 8011f82:	009b      	lsls	r3, r3, #2
 8011f84:	440b      	add	r3, r1
 8011f86:	333d      	adds	r3, #61	@ 0x3d
 8011f88:	78ba      	ldrb	r2, [r7, #2]
 8011f8a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011f8c:	2300      	movs	r3, #0
}
 8011f8e:	4618      	mov	r0, r3
 8011f90:	3714      	adds	r7, #20
 8011f92:	46bd      	mov	sp, r7
 8011f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f98:	4770      	bx	lr

08011f9a <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011f9a:	b480      	push	{r7}
 8011f9c:	b085      	sub	sp, #20
 8011f9e:	af00      	add	r7, sp, #0
 8011fa0:	6078      	str	r0, [r7, #4]
 8011fa2:	460b      	mov	r3, r1
 8011fa4:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011fb0:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8011fb2:	78fa      	ldrb	r2, [r7, #3]
 8011fb4:	68b9      	ldr	r1, [r7, #8]
 8011fb6:	4613      	mov	r3, r2
 8011fb8:	011b      	lsls	r3, r3, #4
 8011fba:	1a9b      	subs	r3, r3, r2
 8011fbc:	009b      	lsls	r3, r3, #2
 8011fbe:	440b      	add	r3, r1
 8011fc0:	3317      	adds	r3, #23
 8011fc2:	781b      	ldrb	r3, [r3, #0]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d00a      	beq.n	8011fde <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8011fc8:	78fa      	ldrb	r2, [r7, #3]
 8011fca:	68b9      	ldr	r1, [r7, #8]
 8011fcc:	4613      	mov	r3, r2
 8011fce:	011b      	lsls	r3, r3, #4
 8011fd0:	1a9b      	subs	r3, r3, r2
 8011fd2:	009b      	lsls	r3, r3, #2
 8011fd4:	440b      	add	r3, r1
 8011fd6:	333c      	adds	r3, #60	@ 0x3c
 8011fd8:	781b      	ldrb	r3, [r3, #0]
 8011fda:	73fb      	strb	r3, [r7, #15]
 8011fdc:	e009      	b.n	8011ff2 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8011fde:	78fa      	ldrb	r2, [r7, #3]
 8011fe0:	68b9      	ldr	r1, [r7, #8]
 8011fe2:	4613      	mov	r3, r2
 8011fe4:	011b      	lsls	r3, r3, #4
 8011fe6:	1a9b      	subs	r3, r3, r2
 8011fe8:	009b      	lsls	r3, r3, #2
 8011fea:	440b      	add	r3, r1
 8011fec:	333d      	adds	r3, #61	@ 0x3d
 8011fee:	781b      	ldrb	r3, [r3, #0]
 8011ff0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8011ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	3714      	adds	r7, #20
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffe:	4770      	bx	lr

08012000 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b082      	sub	sp, #8
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	f7f1 f9e3 	bl	80033d4 <HAL_Delay>
}
 801200e:	bf00      	nop
 8012010:	3708      	adds	r7, #8
 8012012:	46bd      	mov	sp, r7
 8012014:	bd80      	pop	{r7, pc}
	...

08012018 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012018:	b480      	push	{r7}
 801201a:	b085      	sub	sp, #20
 801201c:	af00      	add	r7, sp, #0
 801201e:	4603      	mov	r3, r0
 8012020:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012022:	2300      	movs	r3, #0
 8012024:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012026:	79fb      	ldrb	r3, [r7, #7]
 8012028:	2b03      	cmp	r3, #3
 801202a:	d817      	bhi.n	801205c <USBH_Get_USB_Status+0x44>
 801202c:	a201      	add	r2, pc, #4	@ (adr r2, 8012034 <USBH_Get_USB_Status+0x1c>)
 801202e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012032:	bf00      	nop
 8012034:	08012045 	.word	0x08012045
 8012038:	0801204b 	.word	0x0801204b
 801203c:	08012051 	.word	0x08012051
 8012040:	08012057 	.word	0x08012057
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8012044:	2300      	movs	r3, #0
 8012046:	73fb      	strb	r3, [r7, #15]
    break;
 8012048:	e00b      	b.n	8012062 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801204a:	2302      	movs	r3, #2
 801204c:	73fb      	strb	r3, [r7, #15]
    break;
 801204e:	e008      	b.n	8012062 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8012050:	2301      	movs	r3, #1
 8012052:	73fb      	strb	r3, [r7, #15]
    break;
 8012054:	e005      	b.n	8012062 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8012056:	2302      	movs	r3, #2
 8012058:	73fb      	strb	r3, [r7, #15]
    break;
 801205a:	e002      	b.n	8012062 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801205c:	2302      	movs	r3, #2
 801205e:	73fb      	strb	r3, [r7, #15]
    break;
 8012060:	bf00      	nop
  }
  return usb_status;
 8012062:	7bfb      	ldrb	r3, [r7, #15]
}
 8012064:	4618      	mov	r0, r3
 8012066:	3714      	adds	r7, #20
 8012068:	46bd      	mov	sp, r7
 801206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206e:	4770      	bx	lr

08012070 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b084      	sub	sp, #16
 8012074:	af00      	add	r7, sp, #0
 8012076:	4603      	mov	r3, r0
 8012078:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801207a:	79fb      	ldrb	r3, [r7, #7]
 801207c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801207e:	79fb      	ldrb	r3, [r7, #7]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d102      	bne.n	801208a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8012084:	2301      	movs	r3, #1
 8012086:	73fb      	strb	r3, [r7, #15]
 8012088:	e001      	b.n	801208e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801208a:	2300      	movs	r3, #0
 801208c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 801208e:	7bfb      	ldrb	r3, [r7, #15]
 8012090:	461a      	mov	r2, r3
 8012092:	2101      	movs	r1, #1
 8012094:	4803      	ldr	r0, [pc, #12]	@ (80120a4 <MX_DriverVbusFS+0x34>)
 8012096:	f7f2 f979 	bl	800438c <HAL_GPIO_WritePin>
}
 801209a:	bf00      	nop
 801209c:	3710      	adds	r7, #16
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	bf00      	nop
 80120a4:	40020800 	.word	0x40020800

080120a8 <malloc>:
 80120a8:	4b02      	ldr	r3, [pc, #8]	@ (80120b4 <malloc+0xc>)
 80120aa:	4601      	mov	r1, r0
 80120ac:	6818      	ldr	r0, [r3, #0]
 80120ae:	f000 b82d 	b.w	801210c <_malloc_r>
 80120b2:	bf00      	nop
 80120b4:	20000074 	.word	0x20000074

080120b8 <free>:
 80120b8:	4b02      	ldr	r3, [pc, #8]	@ (80120c4 <free+0xc>)
 80120ba:	4601      	mov	r1, r0
 80120bc:	6818      	ldr	r0, [r3, #0]
 80120be:	f000 b935 	b.w	801232c <_free_r>
 80120c2:	bf00      	nop
 80120c4:	20000074 	.word	0x20000074

080120c8 <sbrk_aligned>:
 80120c8:	b570      	push	{r4, r5, r6, lr}
 80120ca:	4e0f      	ldr	r6, [pc, #60]	@ (8012108 <sbrk_aligned+0x40>)
 80120cc:	460c      	mov	r4, r1
 80120ce:	6831      	ldr	r1, [r6, #0]
 80120d0:	4605      	mov	r5, r0
 80120d2:	b911      	cbnz	r1, 80120da <sbrk_aligned+0x12>
 80120d4:	f000 f8d8 	bl	8012288 <_sbrk_r>
 80120d8:	6030      	str	r0, [r6, #0]
 80120da:	4621      	mov	r1, r4
 80120dc:	4628      	mov	r0, r5
 80120de:	f000 f8d3 	bl	8012288 <_sbrk_r>
 80120e2:	1c43      	adds	r3, r0, #1
 80120e4:	d103      	bne.n	80120ee <sbrk_aligned+0x26>
 80120e6:	f04f 34ff 	mov.w	r4, #4294967295
 80120ea:	4620      	mov	r0, r4
 80120ec:	bd70      	pop	{r4, r5, r6, pc}
 80120ee:	1cc4      	adds	r4, r0, #3
 80120f0:	f024 0403 	bic.w	r4, r4, #3
 80120f4:	42a0      	cmp	r0, r4
 80120f6:	d0f8      	beq.n	80120ea <sbrk_aligned+0x22>
 80120f8:	1a21      	subs	r1, r4, r0
 80120fa:	4628      	mov	r0, r5
 80120fc:	f000 f8c4 	bl	8012288 <_sbrk_r>
 8012100:	3001      	adds	r0, #1
 8012102:	d1f2      	bne.n	80120ea <sbrk_aligned+0x22>
 8012104:	e7ef      	b.n	80120e6 <sbrk_aligned+0x1e>
 8012106:	bf00      	nop
 8012108:	20002a30 	.word	0x20002a30

0801210c <_malloc_r>:
 801210c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012110:	1ccd      	adds	r5, r1, #3
 8012112:	f025 0503 	bic.w	r5, r5, #3
 8012116:	3508      	adds	r5, #8
 8012118:	2d0c      	cmp	r5, #12
 801211a:	bf38      	it	cc
 801211c:	250c      	movcc	r5, #12
 801211e:	2d00      	cmp	r5, #0
 8012120:	4606      	mov	r6, r0
 8012122:	db01      	blt.n	8012128 <_malloc_r+0x1c>
 8012124:	42a9      	cmp	r1, r5
 8012126:	d904      	bls.n	8012132 <_malloc_r+0x26>
 8012128:	230c      	movs	r3, #12
 801212a:	6033      	str	r3, [r6, #0]
 801212c:	2000      	movs	r0, #0
 801212e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012132:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012208 <_malloc_r+0xfc>
 8012136:	f000 f869 	bl	801220c <__malloc_lock>
 801213a:	f8d8 3000 	ldr.w	r3, [r8]
 801213e:	461c      	mov	r4, r3
 8012140:	bb44      	cbnz	r4, 8012194 <_malloc_r+0x88>
 8012142:	4629      	mov	r1, r5
 8012144:	4630      	mov	r0, r6
 8012146:	f7ff ffbf 	bl	80120c8 <sbrk_aligned>
 801214a:	1c43      	adds	r3, r0, #1
 801214c:	4604      	mov	r4, r0
 801214e:	d158      	bne.n	8012202 <_malloc_r+0xf6>
 8012150:	f8d8 4000 	ldr.w	r4, [r8]
 8012154:	4627      	mov	r7, r4
 8012156:	2f00      	cmp	r7, #0
 8012158:	d143      	bne.n	80121e2 <_malloc_r+0xd6>
 801215a:	2c00      	cmp	r4, #0
 801215c:	d04b      	beq.n	80121f6 <_malloc_r+0xea>
 801215e:	6823      	ldr	r3, [r4, #0]
 8012160:	4639      	mov	r1, r7
 8012162:	4630      	mov	r0, r6
 8012164:	eb04 0903 	add.w	r9, r4, r3
 8012168:	f000 f88e 	bl	8012288 <_sbrk_r>
 801216c:	4581      	cmp	r9, r0
 801216e:	d142      	bne.n	80121f6 <_malloc_r+0xea>
 8012170:	6821      	ldr	r1, [r4, #0]
 8012172:	1a6d      	subs	r5, r5, r1
 8012174:	4629      	mov	r1, r5
 8012176:	4630      	mov	r0, r6
 8012178:	f7ff ffa6 	bl	80120c8 <sbrk_aligned>
 801217c:	3001      	adds	r0, #1
 801217e:	d03a      	beq.n	80121f6 <_malloc_r+0xea>
 8012180:	6823      	ldr	r3, [r4, #0]
 8012182:	442b      	add	r3, r5
 8012184:	6023      	str	r3, [r4, #0]
 8012186:	f8d8 3000 	ldr.w	r3, [r8]
 801218a:	685a      	ldr	r2, [r3, #4]
 801218c:	bb62      	cbnz	r2, 80121e8 <_malloc_r+0xdc>
 801218e:	f8c8 7000 	str.w	r7, [r8]
 8012192:	e00f      	b.n	80121b4 <_malloc_r+0xa8>
 8012194:	6822      	ldr	r2, [r4, #0]
 8012196:	1b52      	subs	r2, r2, r5
 8012198:	d420      	bmi.n	80121dc <_malloc_r+0xd0>
 801219a:	2a0b      	cmp	r2, #11
 801219c:	d917      	bls.n	80121ce <_malloc_r+0xc2>
 801219e:	1961      	adds	r1, r4, r5
 80121a0:	42a3      	cmp	r3, r4
 80121a2:	6025      	str	r5, [r4, #0]
 80121a4:	bf18      	it	ne
 80121a6:	6059      	strne	r1, [r3, #4]
 80121a8:	6863      	ldr	r3, [r4, #4]
 80121aa:	bf08      	it	eq
 80121ac:	f8c8 1000 	streq.w	r1, [r8]
 80121b0:	5162      	str	r2, [r4, r5]
 80121b2:	604b      	str	r3, [r1, #4]
 80121b4:	4630      	mov	r0, r6
 80121b6:	f000 f82f 	bl	8012218 <__malloc_unlock>
 80121ba:	f104 000b 	add.w	r0, r4, #11
 80121be:	1d23      	adds	r3, r4, #4
 80121c0:	f020 0007 	bic.w	r0, r0, #7
 80121c4:	1ac2      	subs	r2, r0, r3
 80121c6:	bf1c      	itt	ne
 80121c8:	1a1b      	subne	r3, r3, r0
 80121ca:	50a3      	strne	r3, [r4, r2]
 80121cc:	e7af      	b.n	801212e <_malloc_r+0x22>
 80121ce:	6862      	ldr	r2, [r4, #4]
 80121d0:	42a3      	cmp	r3, r4
 80121d2:	bf0c      	ite	eq
 80121d4:	f8c8 2000 	streq.w	r2, [r8]
 80121d8:	605a      	strne	r2, [r3, #4]
 80121da:	e7eb      	b.n	80121b4 <_malloc_r+0xa8>
 80121dc:	4623      	mov	r3, r4
 80121de:	6864      	ldr	r4, [r4, #4]
 80121e0:	e7ae      	b.n	8012140 <_malloc_r+0x34>
 80121e2:	463c      	mov	r4, r7
 80121e4:	687f      	ldr	r7, [r7, #4]
 80121e6:	e7b6      	b.n	8012156 <_malloc_r+0x4a>
 80121e8:	461a      	mov	r2, r3
 80121ea:	685b      	ldr	r3, [r3, #4]
 80121ec:	42a3      	cmp	r3, r4
 80121ee:	d1fb      	bne.n	80121e8 <_malloc_r+0xdc>
 80121f0:	2300      	movs	r3, #0
 80121f2:	6053      	str	r3, [r2, #4]
 80121f4:	e7de      	b.n	80121b4 <_malloc_r+0xa8>
 80121f6:	230c      	movs	r3, #12
 80121f8:	6033      	str	r3, [r6, #0]
 80121fa:	4630      	mov	r0, r6
 80121fc:	f000 f80c 	bl	8012218 <__malloc_unlock>
 8012200:	e794      	b.n	801212c <_malloc_r+0x20>
 8012202:	6005      	str	r5, [r0, #0]
 8012204:	e7d6      	b.n	80121b4 <_malloc_r+0xa8>
 8012206:	bf00      	nop
 8012208:	20002a34 	.word	0x20002a34

0801220c <__malloc_lock>:
 801220c:	4801      	ldr	r0, [pc, #4]	@ (8012214 <__malloc_lock+0x8>)
 801220e:	f000 b875 	b.w	80122fc <__retarget_lock_acquire_recursive>
 8012212:	bf00      	nop
 8012214:	20002b74 	.word	0x20002b74

08012218 <__malloc_unlock>:
 8012218:	4801      	ldr	r0, [pc, #4]	@ (8012220 <__malloc_unlock+0x8>)
 801221a:	f000 b870 	b.w	80122fe <__retarget_lock_release_recursive>
 801221e:	bf00      	nop
 8012220:	20002b74 	.word	0x20002b74

08012224 <memset>:
 8012224:	4402      	add	r2, r0
 8012226:	4603      	mov	r3, r0
 8012228:	4293      	cmp	r3, r2
 801222a:	d100      	bne.n	801222e <memset+0xa>
 801222c:	4770      	bx	lr
 801222e:	f803 1b01 	strb.w	r1, [r3], #1
 8012232:	e7f9      	b.n	8012228 <memset+0x4>

08012234 <strncpy>:
 8012234:	b510      	push	{r4, lr}
 8012236:	3901      	subs	r1, #1
 8012238:	4603      	mov	r3, r0
 801223a:	b132      	cbz	r2, 801224a <strncpy+0x16>
 801223c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012240:	f803 4b01 	strb.w	r4, [r3], #1
 8012244:	3a01      	subs	r2, #1
 8012246:	2c00      	cmp	r4, #0
 8012248:	d1f7      	bne.n	801223a <strncpy+0x6>
 801224a:	441a      	add	r2, r3
 801224c:	2100      	movs	r1, #0
 801224e:	4293      	cmp	r3, r2
 8012250:	d100      	bne.n	8012254 <strncpy+0x20>
 8012252:	bd10      	pop	{r4, pc}
 8012254:	f803 1b01 	strb.w	r1, [r3], #1
 8012258:	e7f9      	b.n	801224e <strncpy+0x1a>

0801225a <strstr>:
 801225a:	780a      	ldrb	r2, [r1, #0]
 801225c:	b570      	push	{r4, r5, r6, lr}
 801225e:	b96a      	cbnz	r2, 801227c <strstr+0x22>
 8012260:	bd70      	pop	{r4, r5, r6, pc}
 8012262:	429a      	cmp	r2, r3
 8012264:	d109      	bne.n	801227a <strstr+0x20>
 8012266:	460c      	mov	r4, r1
 8012268:	4605      	mov	r5, r0
 801226a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801226e:	2b00      	cmp	r3, #0
 8012270:	d0f6      	beq.n	8012260 <strstr+0x6>
 8012272:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8012276:	429e      	cmp	r6, r3
 8012278:	d0f7      	beq.n	801226a <strstr+0x10>
 801227a:	3001      	adds	r0, #1
 801227c:	7803      	ldrb	r3, [r0, #0]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d1ef      	bne.n	8012262 <strstr+0x8>
 8012282:	4618      	mov	r0, r3
 8012284:	e7ec      	b.n	8012260 <strstr+0x6>
	...

08012288 <_sbrk_r>:
 8012288:	b538      	push	{r3, r4, r5, lr}
 801228a:	4d06      	ldr	r5, [pc, #24]	@ (80122a4 <_sbrk_r+0x1c>)
 801228c:	2300      	movs	r3, #0
 801228e:	4604      	mov	r4, r0
 8012290:	4608      	mov	r0, r1
 8012292:	602b      	str	r3, [r5, #0]
 8012294:	f7f0 fdc2 	bl	8002e1c <_sbrk>
 8012298:	1c43      	adds	r3, r0, #1
 801229a:	d102      	bne.n	80122a2 <_sbrk_r+0x1a>
 801229c:	682b      	ldr	r3, [r5, #0]
 801229e:	b103      	cbz	r3, 80122a2 <_sbrk_r+0x1a>
 80122a0:	6023      	str	r3, [r4, #0]
 80122a2:	bd38      	pop	{r3, r4, r5, pc}
 80122a4:	20002b70 	.word	0x20002b70

080122a8 <__errno>:
 80122a8:	4b01      	ldr	r3, [pc, #4]	@ (80122b0 <__errno+0x8>)
 80122aa:	6818      	ldr	r0, [r3, #0]
 80122ac:	4770      	bx	lr
 80122ae:	bf00      	nop
 80122b0:	20000074 	.word	0x20000074

080122b4 <__libc_init_array>:
 80122b4:	b570      	push	{r4, r5, r6, lr}
 80122b6:	4d0d      	ldr	r5, [pc, #52]	@ (80122ec <__libc_init_array+0x38>)
 80122b8:	4c0d      	ldr	r4, [pc, #52]	@ (80122f0 <__libc_init_array+0x3c>)
 80122ba:	1b64      	subs	r4, r4, r5
 80122bc:	10a4      	asrs	r4, r4, #2
 80122be:	2600      	movs	r6, #0
 80122c0:	42a6      	cmp	r6, r4
 80122c2:	d109      	bne.n	80122d8 <__libc_init_array+0x24>
 80122c4:	4d0b      	ldr	r5, [pc, #44]	@ (80122f4 <__libc_init_array+0x40>)
 80122c6:	4c0c      	ldr	r4, [pc, #48]	@ (80122f8 <__libc_init_array+0x44>)
 80122c8:	f000 f87a 	bl	80123c0 <_init>
 80122cc:	1b64      	subs	r4, r4, r5
 80122ce:	10a4      	asrs	r4, r4, #2
 80122d0:	2600      	movs	r6, #0
 80122d2:	42a6      	cmp	r6, r4
 80122d4:	d105      	bne.n	80122e2 <__libc_init_array+0x2e>
 80122d6:	bd70      	pop	{r4, r5, r6, pc}
 80122d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80122dc:	4798      	blx	r3
 80122de:	3601      	adds	r6, #1
 80122e0:	e7ee      	b.n	80122c0 <__libc_init_array+0xc>
 80122e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80122e6:	4798      	blx	r3
 80122e8:	3601      	adds	r6, #1
 80122ea:	e7f2      	b.n	80122d2 <__libc_init_array+0x1e>
 80122ec:	08017a8c 	.word	0x08017a8c
 80122f0:	08017a8c 	.word	0x08017a8c
 80122f4:	08017a8c 	.word	0x08017a8c
 80122f8:	08017a90 	.word	0x08017a90

080122fc <__retarget_lock_acquire_recursive>:
 80122fc:	4770      	bx	lr

080122fe <__retarget_lock_release_recursive>:
 80122fe:	4770      	bx	lr

08012300 <strcpy>:
 8012300:	4603      	mov	r3, r0
 8012302:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012306:	f803 2b01 	strb.w	r2, [r3], #1
 801230a:	2a00      	cmp	r2, #0
 801230c:	d1f9      	bne.n	8012302 <strcpy+0x2>
 801230e:	4770      	bx	lr

08012310 <memcpy>:
 8012310:	440a      	add	r2, r1
 8012312:	4291      	cmp	r1, r2
 8012314:	f100 33ff 	add.w	r3, r0, #4294967295
 8012318:	d100      	bne.n	801231c <memcpy+0xc>
 801231a:	4770      	bx	lr
 801231c:	b510      	push	{r4, lr}
 801231e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012322:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012326:	4291      	cmp	r1, r2
 8012328:	d1f9      	bne.n	801231e <memcpy+0xe>
 801232a:	bd10      	pop	{r4, pc}

0801232c <_free_r>:
 801232c:	b538      	push	{r3, r4, r5, lr}
 801232e:	4605      	mov	r5, r0
 8012330:	2900      	cmp	r1, #0
 8012332:	d041      	beq.n	80123b8 <_free_r+0x8c>
 8012334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012338:	1f0c      	subs	r4, r1, #4
 801233a:	2b00      	cmp	r3, #0
 801233c:	bfb8      	it	lt
 801233e:	18e4      	addlt	r4, r4, r3
 8012340:	f7ff ff64 	bl	801220c <__malloc_lock>
 8012344:	4a1d      	ldr	r2, [pc, #116]	@ (80123bc <_free_r+0x90>)
 8012346:	6813      	ldr	r3, [r2, #0]
 8012348:	b933      	cbnz	r3, 8012358 <_free_r+0x2c>
 801234a:	6063      	str	r3, [r4, #4]
 801234c:	6014      	str	r4, [r2, #0]
 801234e:	4628      	mov	r0, r5
 8012350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012354:	f7ff bf60 	b.w	8012218 <__malloc_unlock>
 8012358:	42a3      	cmp	r3, r4
 801235a:	d908      	bls.n	801236e <_free_r+0x42>
 801235c:	6820      	ldr	r0, [r4, #0]
 801235e:	1821      	adds	r1, r4, r0
 8012360:	428b      	cmp	r3, r1
 8012362:	bf01      	itttt	eq
 8012364:	6819      	ldreq	r1, [r3, #0]
 8012366:	685b      	ldreq	r3, [r3, #4]
 8012368:	1809      	addeq	r1, r1, r0
 801236a:	6021      	streq	r1, [r4, #0]
 801236c:	e7ed      	b.n	801234a <_free_r+0x1e>
 801236e:	461a      	mov	r2, r3
 8012370:	685b      	ldr	r3, [r3, #4]
 8012372:	b10b      	cbz	r3, 8012378 <_free_r+0x4c>
 8012374:	42a3      	cmp	r3, r4
 8012376:	d9fa      	bls.n	801236e <_free_r+0x42>
 8012378:	6811      	ldr	r1, [r2, #0]
 801237a:	1850      	adds	r0, r2, r1
 801237c:	42a0      	cmp	r0, r4
 801237e:	d10b      	bne.n	8012398 <_free_r+0x6c>
 8012380:	6820      	ldr	r0, [r4, #0]
 8012382:	4401      	add	r1, r0
 8012384:	1850      	adds	r0, r2, r1
 8012386:	4283      	cmp	r3, r0
 8012388:	6011      	str	r1, [r2, #0]
 801238a:	d1e0      	bne.n	801234e <_free_r+0x22>
 801238c:	6818      	ldr	r0, [r3, #0]
 801238e:	685b      	ldr	r3, [r3, #4]
 8012390:	6053      	str	r3, [r2, #4]
 8012392:	4408      	add	r0, r1
 8012394:	6010      	str	r0, [r2, #0]
 8012396:	e7da      	b.n	801234e <_free_r+0x22>
 8012398:	d902      	bls.n	80123a0 <_free_r+0x74>
 801239a:	230c      	movs	r3, #12
 801239c:	602b      	str	r3, [r5, #0]
 801239e:	e7d6      	b.n	801234e <_free_r+0x22>
 80123a0:	6820      	ldr	r0, [r4, #0]
 80123a2:	1821      	adds	r1, r4, r0
 80123a4:	428b      	cmp	r3, r1
 80123a6:	bf04      	itt	eq
 80123a8:	6819      	ldreq	r1, [r3, #0]
 80123aa:	685b      	ldreq	r3, [r3, #4]
 80123ac:	6063      	str	r3, [r4, #4]
 80123ae:	bf04      	itt	eq
 80123b0:	1809      	addeq	r1, r1, r0
 80123b2:	6021      	streq	r1, [r4, #0]
 80123b4:	6054      	str	r4, [r2, #4]
 80123b6:	e7ca      	b.n	801234e <_free_r+0x22>
 80123b8:	bd38      	pop	{r3, r4, r5, pc}
 80123ba:	bf00      	nop
 80123bc:	20002a34 	.word	0x20002a34

080123c0 <_init>:
 80123c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123c2:	bf00      	nop
 80123c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123c6:	bc08      	pop	{r3}
 80123c8:	469e      	mov	lr, r3
 80123ca:	4770      	bx	lr

080123cc <_fini>:
 80123cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ce:	bf00      	nop
 80123d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123d2:	bc08      	pop	{r3}
 80123d4:	469e      	mov	lr, r3
 80123d6:	4770      	bx	lr
